target triple = "x86_64-pc-windows-msvc"

%..opaque = type {};
%..string = type {i8*, i64} ; Basic_string
%..rawptr = type i8* ; Basic_rawptr
%..complex32 = type {half, half} ; Basic_complex32
%..complex64 = type {float, float} ; Basic_complex64
%..complex128 = type {double, double} ; Basic_complex128
%..typeid = type i64 ; Basic_typeid
%..any = type {%..rawptr, %..typeid} ; Basic_any
declare void @llvm.dbg.declare(metadata, metadata, metadata) #3 

%runtime.Calling_Convention = type i64
%runtime.Type_Info_Enum_Value = type {[0 x i64], [8 x i8], i64}
%runtime.Type_Info_Endianness = type i8
%runtime.Type_Info_Named = type {%..string, %runtime.Type_Info*}
%runtime.Type_Info_Integer = type {i8, i8}
%runtime.Type_Info_Rune = type {}
%runtime.Type_Info_Float = type {}
%runtime.Type_Info_Complex = type {}
%runtime.Type_Info_String = type {i8}
%runtime.Type_Info_Boolean = type {}
%runtime.Type_Info_Any = type {}
%runtime.Type_Info_Type_Id = type {}
%runtime.Type_Info_Pointer = type {%runtime.Type_Info*}
%runtime.Type_Info_Procedure = type {%runtime.Type_Info*, %runtime.Type_Info*, i8, i64}
%runtime.Type_Info_Array = type {%runtime.Type_Info*, i64, i64}
%runtime.Type_Info_Dynamic_Array = type {%runtime.Type_Info*, i64}
%runtime.Type_Info_Slice = type {%runtime.Type_Info*, i64}
%runtime.Type_Info_Tuple = type {{%runtime.Type_Info**, i64}, {%..string*, i64}}
%runtime.Type_Info_Struct = type {{%runtime.Type_Info**, i64}, {%..string*, i64}, {i64*, i64}, {i8*, i64}, i8, i8, i8}
%runtime.Type_Info_Union = type {{%runtime.Type_Info**, i64}, i64, %runtime.Type_Info*, i8}
%runtime.Type_Info_Enum = type {%runtime.Type_Info*, {%..string*, i64}, {%runtime.Type_Info_Enum_Value*, i64}}
%runtime.Type_Info_Map = type {%runtime.Type_Info*, %runtime.Type_Info*, %runtime.Type_Info*}
%runtime.Type_Info_Bit_Field = type {{%..string*, i64}, {i32*, i64}, {i32*, i64}}
%runtime.Type_Info_Bit_Set = type {%runtime.Type_Info*, %runtime.Type_Info*, i64, i64}
%runtime.Type_Info_Opaque = type {%runtime.Type_Info*}
%runtime.Type_Info = type {i64, i64, %..typeid, {[0 x i64], [72 x i8], i64}}
%runtime.Typeid_Bit_Field = type {[0 x i64], [8 x i8]}
%runtime.Source_Code_Location = type {%..string, i64, i64, %..string}
%runtime.Assertion_Failure_Proc = type void (%..string, %..string, %runtime.Source_Code_Location*, %runtime.Context*)*
%runtime.Context = type {%mem.Allocator, %mem.Allocator, void (%..string, %..string, %runtime.Source_Code_Location*, %runtime.Context*)*, %log.Logger, i64, %..any, i64, %..any}
%runtime.Map_Key = type {i64, %..string}
%runtime.Map_Entry_Header = type {%runtime.Map_Key, i64}
%laas.Lexer = type {%..string, i64, i64, i64, %..any}
%laas.Token_Identifier = type {%..string}
%laas.Token_Number = type {i64, i64, double, i8}
%laas.Token_String = type {%..string}
%laas.Token_Symbol = type {i32}
%laas.Token = type {%..string, {[0 x i64], [32 x i8], i64}}
%os.Handle = type i64
%os.Errno = type i64
%mem.Raw_String = type {i8*, i64}
%mem.Raw_Slice = type {%..rawptr, i64}
%mem.Raw_Dynamic_Array = type {%..rawptr, i64, i64, %mem.Allocator}
%mem.Raw_Map = type {{i64*, i64}, %mem.Raw_Dynamic_Array}
%mem.Allocator_Mode = type i8
%mem.Allocator_Proc = type %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64, %runtime.Source_Code_Location*, %runtime.Context*)*
%mem.Allocator = type {%..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64, %runtime.Source_Code_Location*, %runtime.Context*)*, %..rawptr}
%mem.Scratch_Allocator = type {{i8*, i64}, i64, i64, %mem.Allocator, {%..rawptr*, i64, i64, %mem.Allocator}}
%log.Level = type i64
%log.Option = type i64
%log.Options = type i8
%log.Logger_Proc = type void (%..rawptr, i64, %..string, i8, %runtime.Source_Code_Location*, %runtime.Context*)*
%log.Logger = type {void (%..rawptr, i64, %..string, i8, %runtime.Source_Code_Location*, %runtime.Context*)*, %..rawptr, i8}
%utf8.Accept_Range = type {i8, i8}
%fmt.String_Buffer = type {i8*, i64, i64, %mem.Allocator}
%fmt.Fmt_Info = type {i8, i8, i8, i8, i8, i8, i8, i64, i64, i64, i8, i8, {i8*, i64, i64, %mem.Allocator}*, %..any}
%strconv.Int_Flag = type i64
%strconv.Int_Flags = type i8
%strconv.DecimalSlice = type {{i8*, i64}, i64, i64, i8}
%strconv.FloatInfo = type {i64, i64, i64}
%win32.Handle = type %..rawptr
%win32.Bool = type i32
%decimal.Decimal = type {[384 x i8], i64, i64, i8, i8}
%strconv.format_digits.Buffer-235 = type {{i8*, i64}, i64}

declare ccc void @llvm.debugtrap() #0 
declare cc 64 i32 @GetLastError() #0 
declare cc 64 i32 @GetCurrentThreadId() #0 
declare cc 64 %..rawptr @GetStdHandle(i32) #0 
declare cc 64 i32 @WriteFile(%..rawptr, %..rawptr, i32, i32*, %..rawptr) #0 
declare cc 64 i32 @SetHandleInformation(%..rawptr, i32, i32) #0 
declare cc 64 %..rawptr @HeapAlloc(%..rawptr, i32, i64) #0 
declare cc 64 %..rawptr @HeapReAlloc(%..rawptr, i32, %..rawptr, i64) #0 
declare cc 64 i32 @HeapFree(%..rawptr, i32, %..rawptr) #0 
declare cc 64 %..rawptr @GetProcessHeap() #0 
declare ccc i16 @llvm.bswap.i16(i16) #0 
declare ccc i32 @llvm.bswap.i32(i32) #0 
declare ccc i64 @llvm.bswap.i64(i64) #0 

define %runtime.Type_Info* @runtime.type_info_base(%runtime.Type_Info* %info) #0 {
decls-0:
	%0 = alloca %runtime.Type_Info*, align 16
	%1 = alloca %runtime.Type_Info*, align 16
	%2 = alloca %runtime.Type_Info_Named, align 16
	%3 = alloca {[0 x i64], [72 x i8], i64}, align 16
	store %runtime.Type_Info* %info, %runtime.Type_Info** %0
	; IfStmt
	%4 = load %runtime.Type_Info*, %runtime.Type_Info** %0, align 8
	%5 = icmp eq %runtime.Type_Info* %4, zeroinitializer
	%6 = zext i1 %5 to i8
	%7 = trunc i8 %6 to i1
	br i1 %7, label %if.then-1, label %if.done-2

if.then-1:
	; ReturnStmt
	ret %runtime.Type_Info* zeroinitializer

if.done-2:
	; base
	%8 = load %runtime.Type_Info*, %runtime.Type_Info** %0, align 8
	store %runtime.Type_Info* %8, %runtime.Type_Info** %1
	; ForStmt
	br label %for.body-3

for.body-3:
	; TypeSwitchStmt
	; SelectorExpr
	%9 = load %runtime.Type_Info*, %runtime.Type_Info** %1, align 8
	%10 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %9, i64 0
	%11 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %10, i64 0, i32 3
	%12 = load {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %11, align 8
	; get union's tag
	%13 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %11, i64 0, i32 2 ; UnionTagPtr
	%14 = load i64, i64* %13, align 8
	%15 = bitcast {[0 x i64], [72 x i8], i64}* %11 to %..rawptr
	%16 = icmp eq i64 %14, 1
	br i1 %16, label %typeswitch.body-5, label %typeswitch.next-4

typeswitch.next-4:
	store {[0 x i64], [72 x i8], i64} %12, {[0 x i64], [72 x i8], i64}* %3
	; break
	; ReturnStmt
	%17 = load %runtime.Type_Info*, %runtime.Type_Info** %1, align 8
	ret %runtime.Type_Info* %17

typeswitch.body-5:
	%18 = bitcast %..rawptr %15 to %runtime.Type_Info_Named*
	%19 = load %runtime.Type_Info_Named, %runtime.Type_Info_Named* %18, align 8
	store %runtime.Type_Info_Named %19, %runtime.Type_Info_Named* %2
	; AssignStmt
	; SelectorExpr
	%20 = getelementptr inbounds %runtime.Type_Info_Named, %runtime.Type_Info_Named* %2, i64 0, i32 1
	%21 = load %runtime.Type_Info*, %runtime.Type_Info** %20, align 8
	store %runtime.Type_Info* %21, %runtime.Type_Info** %1
	br label %for.body-3
}

define %runtime.Type_Info* @runtime.__type_info_of(%..typeid %id) #0 {
decls-0:
	%0 = alloca %..typeid, align 16
	%1 = alloca {[0 x i64], [8 x i8]}, align 16
	%2 = alloca i64, align 16
	store %..typeid %id, %..typeid* %0
	; data
	%3 = load %..typeid, %..typeid* %0, align 8
	%4 = bitcast %..typeid* %0 to {[0 x i64], [8 x i8]}*
	%5 = load {[0 x i64], [8 x i8]}, {[0 x i64], [8 x i8]}* %4, align 8
	store {[0 x i64], [8 x i8]} %5, {[0 x i64], [8 x i8]}* %1
	; n
	; SelectorExpr
	%6 = bitcast {[0 x i64], [8 x i8]}* %1 to i8*
	%7 = getelementptr inbounds i8, i8* %6, i64 0
	%8 = bitcast i8* %7 to i64*
	%9 = load i64, i64* %8, align 8
	%10 = shl i64 %9, 8
	%11 = lshr i64 %10, 8
	%12 = bitcast i64 %11 to i64
	store i64 %12, i64* %2
	; IfStmt
	%13 = load i64, i64* %2, align 8
	%14 = icmp slt i64 %13, 0
	%15 = zext i1 %14 to i8
	%16 = trunc i8 %15 to i1
	br i1 %16, label %if.then-2, label %cmp.or-1

cmp.or-1:
	%17 = load i64, i64* %2, align 8
	%18 = load {%runtime.Type_Info*, i64}, {%runtime.Type_Info*, i64}* @runtime.type_table, align 8
	%19 = extractvalue {%runtime.Type_Info*, i64} %18, 1
	%20 = icmp sge i64 %17, %19
	%21 = zext i1 %20 to i8
	%22 = trunc i8 %21 to i1
	br i1 %22, label %if.then-2, label %if.done-3

if.then-2:
	; AssignStmt
	store i64 0, i64* %2
	br label %if.done-3

if.done-3:
	; ReturnStmt
	; IndexExpr
	%23 = load {%runtime.Type_Info*, i64}, {%runtime.Type_Info*, i64}* @runtime.type_table, align 8
	%24 = extractvalue {%runtime.Type_Info*, i64} %23, 0
	%25 = load i64, i64* %2, align 8
	%26 = extractvalue {%runtime.Type_Info*, i64} %23, 1
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([31 x i8], [31 x i8]* @str$0, i64 0, i32 0), i64 30}, i64 291, i64 21, i64 %25, i64 %26)
	%27 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %24, i64 %25
	ret %runtime.Type_Info* %27
}

define %..typeid @runtime.typeid_base(%..typeid %id) #0 {
decls-0:
	%0 = alloca %..typeid, align 16
	%1 = alloca %runtime.Type_Info*, align 16
	store %..typeid %id, %..typeid* %0
	; ti
	%2 = load %..typeid, %..typeid* %0, align 8
	%3 = call %runtime.Type_Info* @runtime.__type_info_of(%..typeid %2)
	store %runtime.Type_Info* %3, %runtime.Type_Info** %1
	; AssignStmt
	%4 = load %runtime.Type_Info*, %runtime.Type_Info** %1, align 8
	%5 = call %runtime.Type_Info* @runtime.type_info_base(%runtime.Type_Info* %4)
	store %runtime.Type_Info* %5, %runtime.Type_Info** %1
	; ReturnStmt
	; SelectorExpr
	%6 = load %runtime.Type_Info*, %runtime.Type_Info** %1, align 8
	%7 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %6, i64 0
	%8 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %7, i64 0, i32 2
	%9 = load %..typeid, %..typeid* %8, align 8
	ret %..typeid %9
}

define void @runtime.__init_context(%runtime.Context* %c) #0 {
decls-0:
	%0 = alloca %runtime.Context*, align 16
	store %runtime.Context* %c, %runtime.Context** %0
	; IfStmt
	%1 = load %runtime.Context*, %runtime.Context** %0, align 8
	%2 = icmp eq %runtime.Context* %1, zeroinitializer
	%3 = zext i1 %2 to i8
	%4 = trunc i8 %3 to i1
	br i1 %4, label %if.then-1, label %if.done-2

if.then-1:
	; ReturnStmt
	ret void

if.done-2:
	; AssignStmt
	; SelectorExpr
	; SelectorExpr
	%5 = load %runtime.Context*, %runtime.Context** %0, align 8
	%6 = getelementptr inbounds %runtime.Context, %runtime.Context* %5, i64 0
	%7 = getelementptr inbounds %runtime.Context, %runtime.Context* %6, i64 0, i32 0
	%8 = getelementptr inbounds %mem.Allocator, %mem.Allocator* %7, i64 0, i32 0
	; SelectorExpr
	%9 = bitcast %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64, %runtime.Source_Code_Location*, %runtime.Context*)* @os.heap_allocator_proc to %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64, %runtime.Source_Code_Location*, %runtime.Context*)*
	store %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64, %runtime.Source_Code_Location*, %runtime.Context*)* %9, %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64, %runtime.Source_Code_Location*, %runtime.Context*)** %8
	; AssignStmt
	; SelectorExpr
	; SelectorExpr
	%10 = load %runtime.Context*, %runtime.Context** %0, align 8
	%11 = getelementptr inbounds %runtime.Context, %runtime.Context* %10, i64 0
	%12 = getelementptr inbounds %runtime.Context, %runtime.Context* %11, i64 0, i32 0
	%13 = getelementptr inbounds %mem.Allocator, %mem.Allocator* %12, i64 0, i32 1
	store %..rawptr zeroinitializer, %..rawptr* %13
	; AssignStmt
	; SelectorExpr
	; SelectorExpr
	%14 = load %runtime.Context*, %runtime.Context** %0, align 8
	%15 = getelementptr inbounds %runtime.Context, %runtime.Context* %14, i64 0
	%16 = getelementptr inbounds %runtime.Context, %runtime.Context* %15, i64 0, i32 1
	%17 = getelementptr inbounds %mem.Allocator, %mem.Allocator* %16, i64 0, i32 0
	; SelectorExpr
	%18 = bitcast %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64, %runtime.Source_Code_Location*, %runtime.Context*)* @mem.scratch_allocator_proc to %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64, %runtime.Source_Code_Location*, %runtime.Context*)*
	store %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64, %runtime.Source_Code_Location*, %runtime.Context*)* %18, %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64, %runtime.Source_Code_Location*, %runtime.Context*)** %17
	; AssignStmt
	; SelectorExpr
	; SelectorExpr
	%19 = load %runtime.Context*, %runtime.Context** %0, align 8
	%20 = getelementptr inbounds %runtime.Context, %runtime.Context* %19, i64 0
	%21 = getelementptr inbounds %runtime.Context, %runtime.Context* %20, i64 0, i32 1
	%22 = getelementptr inbounds %mem.Allocator, %mem.Allocator* %21, i64 0, i32 1
	%23 = bitcast %mem.Scratch_Allocator* @runtime.global_scratch_allocator_data to %..rawptr
	store %..rawptr %23, %..rawptr* %22
	; AssignStmt
	; SelectorExpr
	%24 = load %runtime.Context*, %runtime.Context** %0, align 8
	%25 = getelementptr inbounds %runtime.Context, %runtime.Context* %24, i64 0
	%26 = getelementptr inbounds %runtime.Context, %runtime.Context* %25, i64 0, i32 4
	; SelectorExpr
	%27 = call i64 @os.current_thread_id()
	store i64 %27, i64* %26
	; AssignStmt
	; SelectorExpr
	%28 = load %runtime.Context*, %runtime.Context** %0, align 8
	%29 = getelementptr inbounds %runtime.Context, %runtime.Context* %28, i64 0
	%30 = getelementptr inbounds %runtime.Context, %runtime.Context* %29, i64 0, i32 2
	%31 = bitcast void (%..string, %..string, %runtime.Source_Code_Location*, %runtime.Context*)* @runtime.default_assertion_failure_proc to void (%..string, %..string, %runtime.Source_Code_Location*, %runtime.Context*)*
	store void (%..string, %..string, %runtime.Source_Code_Location*, %runtime.Context*)* %31, void (%..string, %..string, %runtime.Source_Code_Location*, %runtime.Context*)** %30
	; AssignStmt
	; SelectorExpr
	; SelectorExpr
	%32 = load %runtime.Context*, %runtime.Context** %0, align 8
	%33 = getelementptr inbounds %runtime.Context, %runtime.Context* %32, i64 0
	%34 = getelementptr inbounds %runtime.Context, %runtime.Context* %33, i64 0, i32 3
	%35 = getelementptr inbounds %log.Logger, %log.Logger* %34, i64 0, i32 0
	; SelectorExpr
	%36 = bitcast void (%..rawptr, i64, %..string, i8, %runtime.Source_Code_Location*, %runtime.Context*)* @log.nil_logger_proc to void (%..rawptr, i64, %..string, i8, %runtime.Source_Code_Location*, %runtime.Context*)*
	store void (%..rawptr, i64, %..string, i8, %runtime.Source_Code_Location*, %runtime.Context*)* %36, void (%..rawptr, i64, %..string, i8, %runtime.Source_Code_Location*, %runtime.Context*)** %35
	; AssignStmt
	; SelectorExpr
	; SelectorExpr
	%37 = load %runtime.Context*, %runtime.Context** %0, align 8
	%38 = getelementptr inbounds %runtime.Context, %runtime.Context* %37, i64 0
	%39 = getelementptr inbounds %runtime.Context, %runtime.Context* %38, i64 0, i32 3
	%40 = getelementptr inbounds %log.Logger, %log.Logger* %39, i64 0, i32 1
	store %..rawptr zeroinitializer, %..rawptr* %40
	ret void
}

define void @runtime.default_assertion_failure_proc(%..string %prefix, %..string %message, %runtime.Source_Code_Location* %loc, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca %..string, align 16
	%1 = alloca %..string, align 16
	%2 = alloca i64, align 16
	%3 = alloca %runtime.Source_Code_Location, align 16
	store %..string %prefix, %..string* %0
	store %..string %message, %..string* %1
	%4 = load %runtime.Source_Code_Location, %runtime.Source_Code_Location* %loc, align 8
	; fd
	; SelectorExpr
	%5 = load i64, i64* @os.stderr, align 8
	store i64 %5, i64* %2
	%6 = load i64, i64* %2, align 8
	%7 = load %runtime.Source_Code_Location, %runtime.Source_Code_Location* %loc, align 8
	%8 = bitcast %runtime.Source_Code_Location* %3 to %..rawptr
	%9 = call %..rawptr @mem.zero(%..rawptr %8, i64 48) noinline
	store %runtime.Source_Code_Location zeroinitializer, %runtime.Source_Code_Location* %3
	store %runtime.Source_Code_Location %7, %runtime.Source_Code_Location* %3
	call void @runtime.print_caller_location(i64 %6, %runtime.Source_Code_Location* %3, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	; SelectorExpr
	%10 = load i64, i64* %2, align 8
	%11 = call {i64, i64} @os.write_string(i64 %10, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str$1, i64 0, i32 0), i64 1}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	; SelectorExpr
	%12 = load i64, i64* %2, align 8
	%13 = load %..string, %..string* %0, align 8
	%14 = call {i64, i64} @os.write_string(i64 %12, %..string %13, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	; IfStmt
	%15 = load %..string, %..string* %1, align 8
	%16 = extractvalue %..string %15, 1
	%17 = icmp sgt i64 %16, 0
	%18 = zext i1 %17 to i8
	%19 = trunc i8 %18 to i1
	br i1 %19, label %if.then-1, label %if.done-2

if.then-1:
	; SelectorExpr
	%20 = load i64, i64* %2, align 8
	%21 = call {i64, i64} @os.write_string(i64 %20, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @str$2, i64 0, i32 0), i64 2}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	; SelectorExpr
	%22 = load i64, i64* %2, align 8
	%23 = load %..string, %..string* %1, align 8
	%24 = call {i64, i64} @os.write_string(i64 %22, %..string %23, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %if.done-2

if.done-2:
	; SelectorExpr
	%25 = load i64, i64* %2, align 8
	%26 = call {i64, i64} @os.write_byte(i64 %25, i8 10, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	call ccc void @llvm.debugtrap()
	ret void
}

define i8 @runtime.assert(i1 %condition, %..string %message, %runtime.Source_Code_Location* %loc) #0 {
decls-0:
	%0 = alloca i8, align 16
	%1 = alloca %..string, align 16
	%2 = alloca void (%..string, %..string, %runtime.Source_Code_Location*, %runtime.Context*)*, align 16
	%3 = alloca %runtime.Context, align 16
	%4 = bitcast %runtime.Context* %3 to %..rawptr
	%5 = call %..rawptr @mem.zero(%..rawptr %4, i64 112) noinline
	store %runtime.Context zeroinitializer, %runtime.Context* %3
	%6 = load %runtime.Context, %runtime.Context* @ggv$0, align 8
	store %runtime.Context %6, %runtime.Context* %3
	call void @runtime.__init_context(%runtime.Context* %3)
	%7 = alloca %runtime.Source_Code_Location, align 16
	%8 = zext i1 %condition to i8
	store i8 %8, i8* %0
	store %..string %message, %..string* %1
	%9 = load %runtime.Source_Code_Location, %runtime.Source_Code_Location* %loc, align 8
	; IfStmt
	%10 = load i8, i8* %0, align 1
	%11 = trunc i8 %10 to i1
	br i1 %11, label %if.done-4, label %if.then-1

if.then-1:
	; p
	; SelectorExpr
	%12 = getelementptr inbounds %runtime.Context, %runtime.Context* %3, i64 0, i32 2
	%13 = load void (%..string, %..string, %runtime.Source_Code_Location*, %runtime.Context*)*, void (%..string, %..string, %runtime.Source_Code_Location*, %runtime.Context*)** %12, align 8
	store void (%..string, %..string, %runtime.Source_Code_Location*, %runtime.Context*)* %13, void (%..string, %..string, %runtime.Source_Code_Location*, %runtime.Context*)** %2
	; IfStmt
	%14 = load void (%..string, %..string, %runtime.Source_Code_Location*, %runtime.Context*)*, void (%..string, %..string, %runtime.Source_Code_Location*, %runtime.Context*)** %2, align 8
	%15 = icmp eq void (%..string, %..string, %runtime.Source_Code_Location*, %runtime.Context*)* %14, zeroinitializer
	%16 = zext i1 %15 to i8
	%17 = trunc i8 %16 to i1
	br i1 %17, label %if.then-2, label %if.done-3

if.then-2:
	; AssignStmt
	%18 = bitcast void (%..string, %..string, %runtime.Source_Code_Location*, %runtime.Context*)* @runtime.default_assertion_failure_proc to void (%..string, %..string, %runtime.Source_Code_Location*, %runtime.Context*)*
	store void (%..string, %..string, %runtime.Source_Code_Location*, %runtime.Context*)* %18, void (%..string, %..string, %runtime.Source_Code_Location*, %runtime.Context*)** %2
	br label %if.done-3

if.done-3:
	%19 = load void (%..string, %..string, %runtime.Source_Code_Location*, %runtime.Context*)*, void (%..string, %..string, %runtime.Source_Code_Location*, %runtime.Context*)** %2, align 8
	%20 = load %..string, %..string* %1, align 8
	%21 = load %runtime.Source_Code_Location, %runtime.Source_Code_Location* %loc, align 8
	%22 = bitcast %runtime.Source_Code_Location* %7 to %..rawptr
	%23 = call %..rawptr @mem.zero(%..rawptr %22, i64 48) noinline
	store %runtime.Source_Code_Location zeroinitializer, %runtime.Source_Code_Location* %7
	store %runtime.Source_Code_Location %21, %runtime.Source_Code_Location* %7
	call void %19(%..string {i8* getelementptr inbounds ([18 x i8], [18 x i8]* @str$3, i64 0, i32 0), i64 17}, %..string %20, %runtime.Source_Code_Location* %7, %runtime.Context* noalias nonnull nocapture inreg %3)
	br label %if.done-4

if.done-4:
	; ReturnStmt
	%24 = load i8, i8* %0, align 1
	ret i8 %24
}

define void @runtime.panic(%..string %message, %runtime.Source_Code_Location* %loc) #0 noreturn {
decls-0:
	%0 = alloca %..string, align 16
	%1 = alloca void (%..string, %..string, %runtime.Source_Code_Location*, %runtime.Context*)*, align 16
	%2 = alloca %runtime.Context, align 16
	%3 = bitcast %runtime.Context* %2 to %..rawptr
	%4 = call %..rawptr @mem.zero(%..rawptr %3, i64 112) noinline
	store %runtime.Context zeroinitializer, %runtime.Context* %2
	%5 = load %runtime.Context, %runtime.Context* @ggv$0, align 8
	store %runtime.Context %5, %runtime.Context* %2
	call void @runtime.__init_context(%runtime.Context* %2)
	%6 = alloca %runtime.Source_Code_Location, align 16
	store %..string %message, %..string* %0
	%7 = load %runtime.Source_Code_Location, %runtime.Source_Code_Location* %loc, align 8
	; p
	; SelectorExpr
	%8 = getelementptr inbounds %runtime.Context, %runtime.Context* %2, i64 0, i32 2
	%9 = load void (%..string, %..string, %runtime.Source_Code_Location*, %runtime.Context*)*, void (%..string, %..string, %runtime.Source_Code_Location*, %runtime.Context*)** %8, align 8
	store void (%..string, %..string, %runtime.Source_Code_Location*, %runtime.Context*)* %9, void (%..string, %..string, %runtime.Source_Code_Location*, %runtime.Context*)** %1
	; IfStmt
	%10 = load void (%..string, %..string, %runtime.Source_Code_Location*, %runtime.Context*)*, void (%..string, %..string, %runtime.Source_Code_Location*, %runtime.Context*)** %1, align 8
	%11 = icmp eq void (%..string, %..string, %runtime.Source_Code_Location*, %runtime.Context*)* %10, zeroinitializer
	%12 = zext i1 %11 to i8
	%13 = trunc i8 %12 to i1
	br i1 %13, label %if.then-1, label %if.done-2

if.then-1:
	; AssignStmt
	%14 = bitcast void (%..string, %..string, %runtime.Source_Code_Location*, %runtime.Context*)* @runtime.default_assertion_failure_proc to void (%..string, %..string, %runtime.Source_Code_Location*, %runtime.Context*)*
	store void (%..string, %..string, %runtime.Source_Code_Location*, %runtime.Context*)* %14, void (%..string, %..string, %runtime.Source_Code_Location*, %runtime.Context*)** %1
	br label %if.done-2

if.done-2:
	%15 = load void (%..string, %..string, %runtime.Source_Code_Location*, %runtime.Context*)*, void (%..string, %..string, %runtime.Source_Code_Location*, %runtime.Context*)** %1, align 8
	%16 = load %..string, %..string* %0, align 8
	%17 = load %runtime.Source_Code_Location, %runtime.Source_Code_Location* %loc, align 8
	%18 = bitcast %runtime.Source_Code_Location* %6 to %..rawptr
	%19 = call %..rawptr @mem.zero(%..rawptr %18, i64 48) noinline
	store %runtime.Source_Code_Location zeroinitializer, %runtime.Source_Code_Location* %6
	store %runtime.Source_Code_Location %17, %runtime.Source_Code_Location* %6
	call void %15(%..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str$4, i64 0, i32 0), i64 5}, %..string %16, %runtime.Source_Code_Location* %6, %runtime.Context* noalias nonnull nocapture inreg %2)
	ret void
}

define void @runtime.print_u64(i64 %fd, i64 %u, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca i64, align 16
	%1 = alloca i64, align 16
	%2 = alloca %..string, align 16
	%3 = alloca [129 x i8], align 16
	%4 = alloca i64, align 16
	%5 = alloca i64, align 16
	%6 = alloca {i8*, i64}, align 16
	%7 = alloca {i8*, i64}, align 16
	store i64 %fd, i64* %0
	store i64 %u, i64* %1
	; digits
	store %..string {i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str$5, i64 0, i32 0), i64 10}, %..string* %2
	; a
	%8 = bitcast [129 x i8]* %3 to %..rawptr
	%9 = call %..rawptr @mem.zero(%..rawptr %8, i64 129) noinline
	store [129 x i8] zeroinitializer, [129 x i8]* %3
	; i
	store i64 129, i64* %4
	; b
	store i64 10, i64* %5
	; ForStmt
	br label %for.loop-1

for.loop-1:
	%10 = load i64, i64* %1, align 8
	%11 = load i64, i64* %5, align 8
	%12 = icmp uge i64 %10, %11
	%13 = zext i1 %12 to i8
	%14 = trunc i8 %13 to i1
	br i1 %14, label %for.body-2, label %for.done-3

for.body-2:
	; AssignStmt
	%15 = load i64, i64* %4, align 8
	%16 = sub i64 %15, 1
	store i64 %16, i64* %4
	; AssignStmt
	; IndexExpr
	%17 = load i64, i64* %4, align 8
	%18 = trunc i64 %17 to i32
	%19 = getelementptr inbounds [129 x i8], [129 x i8]* %3, i64 0, i32 %18
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([35 x i8], [35 x i8]* @str$6, i64 0, i32 0), i64 34}, i64 15, i64 13, i64 %17, i64 129)
	; IndexExpr
	%20 = load %..string, %..string* %2, align 8
	%21 = extractvalue %..string %20, 0
	%22 = extractvalue %..string %20, 1
	%23 = load i64, i64* %1, align 8
	%24 = load i64, i64* %5, align 8
	%25 = urem i64 %23, %24
	%26 = bitcast i64 %25 to i64
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([35 x i8], [35 x i8]* @str$7, i64 0, i32 0), i64 34}, i64 15, i64 25, i64 %26, i64 %22)
	%27 = getelementptr inbounds i8, i8* %21, i64 %26
	%28 = load i8, i8* %27, align 1
	store i8 %28, i8* %19
	; AssignStmt
	%29 = load i64, i64* %5, align 8
	%30 = load i64, i64* %1, align 8
	%31 = udiv i64 %30, %29
	store i64 %31, i64* %1
	br label %for.loop-1

for.done-3:
	; AssignStmt
	%32 = load i64, i64* %4, align 8
	%33 = sub i64 %32, 1
	store i64 %33, i64* %4
	; AssignStmt
	; IndexExpr
	%34 = load i64, i64* %4, align 8
	%35 = trunc i64 %34 to i32
	%36 = getelementptr inbounds [129 x i8], [129 x i8]* %3, i64 0, i32 %35
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([35 x i8], [35 x i8]* @str$8, i64 0, i32 0), i64 34}, i64 18, i64 12, i64 %34, i64 129)
	; IndexExpr
	%37 = load %..string, %..string* %2, align 8
	%38 = extractvalue %..string %37, 0
	%39 = extractvalue %..string %37, 1
	%40 = load i64, i64* %1, align 8
	%41 = load i64, i64* %5, align 8
	%42 = urem i64 %40, %41
	%43 = bitcast i64 %42 to i64
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([35 x i8], [35 x i8]* @str$9, i64 0, i32 0), i64 34}, i64 18, i64 24, i64 %43, i64 %39)
	%44 = getelementptr inbounds i8, i8* %38, i64 %43
	%45 = load i8, i8* %44, align 1
	store i8 %45, i8* %36
	; SelectorExpr
	%46 = load i64, i64* %0, align 8
	; SliceExpr
	%47 = load i64, i64* %4, align 8
	%48 = load [129 x i8], [129 x i8]* %3, align 1
	call void @runtime.slice_expr_error(%..string {i8* getelementptr inbounds ([35 x i8], [35 x i8]* @str$a, i64 0, i32 0), i64 34}, i64 20, i64 16, i64 %47, i64 129, i64 129)
	%49 = getelementptr inbounds [129 x i8], [129 x i8]* %3, i64 0, i32 0
	%50 = getelementptr inbounds i8, i8* %49, i64 %47
	%51 = sub i64 129, %47
	%52 = bitcast {i8*, i64}* %6 to %..rawptr
	%53 = call %..rawptr @mem.zero(%..rawptr %52, i64 16) noinline
	store {i8*, i64} zeroinitializer, {i8*, i64}* %6
	%54 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %6, i64 0, i32 0
	store i8* %50, i8** %54
	%55 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %6, i64 0, i32 1
	store i64 %51, i64* %55
	%56 = load {i8*, i64}, {i8*, i64}* %6, align 8
	%57 = bitcast {i8*, i64}* %7 to %..rawptr
	%58 = call %..rawptr @mem.zero(%..rawptr %57, i64 16) noinline
	store {i8*, i64} zeroinitializer, {i8*, i64}* %7
	store {i8*, i64} %56, {i8*, i64}* %7
	%59 = call {i64, i64} @os.write(i64 %46, {i8*, i64}* %7, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	ret void
}

define void @runtime.print_i64(i64 %fd, i64 %u, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca i64, align 16
	%1 = alloca i64, align 16
	%2 = alloca %..string, align 16
	%3 = alloca i8, align 16
	%4 = alloca [129 x i8], align 16
	%5 = alloca i64, align 16
	%6 = alloca {i8*, i64}, align 16
	%7 = alloca {i8*, i64}, align 16
	store i64 %fd, i64* %0
	store i64 %u, i64* %1
	; digits
	store %..string {i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str$b, i64 0, i32 0), i64 10}, %..string* %2
	; neg
	%8 = load i64, i64* %1, align 8
	%9 = icmp slt i64 %8, 0
	%10 = zext i1 %9 to i8
	store i8 %10, i8* %3
	; AssignStmt
	%11 = load i64, i64* %1, align 8
	; abs
	%12 = icmp slt i64 %11, 0
	%13 = sub i64 0, %11
	%14 = select i1 %12, i64 %13, i64 %11
	store i64 %14, i64* %1
	; a
	%15 = bitcast [129 x i8]* %4 to %..rawptr
	%16 = call %..rawptr @mem.zero(%..rawptr %15, i64 129) noinline
	store [129 x i8] zeroinitializer, [129 x i8]* %4
	; i
	store i64 129, i64* %5
	; ForStmt
	br label %for.loop-1

for.loop-1:
	%17 = load i64, i64* %1, align 8
	%18 = icmp sge i64 %17, 10
	%19 = zext i1 %18 to i8
	%20 = trunc i8 %19 to i1
	br i1 %20, label %for.body-2, label %for.done-3

for.body-2:
	; AssignStmt
	%21 = load i64, i64* %5, align 8
	%22 = sub i64 %21, 1
	store i64 %22, i64* %5
	; AssignStmt
	; IndexExpr
	%23 = load i64, i64* %5, align 8
	%24 = trunc i64 %23 to i32
	%25 = getelementptr inbounds [129 x i8], [129 x i8]* %4, i64 0, i32 %24
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([35 x i8], [35 x i8]* @str$c, i64 0, i32 0), i64 34}, i64 33, i64 13, i64 %23, i64 129)
	; IndexExpr
	%26 = load %..string, %..string* %2, align 8
	%27 = extractvalue %..string %26, 0
	%28 = extractvalue %..string %26, 1
	%29 = load i64, i64* %1, align 8
	%30 = srem i64 %29, 10
	%31 = bitcast i64 %30 to i64
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([35 x i8], [35 x i8]* @str$d, i64 0, i32 0), i64 34}, i64 33, i64 25, i64 %31, i64 %28)
	%32 = getelementptr inbounds i8, i8* %27, i64 %31
	%33 = load i8, i8* %32, align 1
	store i8 %33, i8* %25
	; AssignStmt
	%34 = load i64, i64* %1, align 8
	%35 = sdiv i64 %34, 10
	store i64 %35, i64* %1
	br label %for.loop-1

for.done-3:
	; AssignStmt
	%36 = load i64, i64* %5, align 8
	%37 = sub i64 %36, 1
	store i64 %37, i64* %5
	; AssignStmt
	; IndexExpr
	%38 = load i64, i64* %5, align 8
	%39 = trunc i64 %38 to i32
	%40 = getelementptr inbounds [129 x i8], [129 x i8]* %4, i64 0, i32 %39
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([35 x i8], [35 x i8]* @str$e, i64 0, i32 0), i64 34}, i64 36, i64 12, i64 %38, i64 129)
	; IndexExpr
	%41 = load %..string, %..string* %2, align 8
	%42 = extractvalue %..string %41, 0
	%43 = extractvalue %..string %41, 1
	%44 = load i64, i64* %1, align 8
	%45 = srem i64 %44, 10
	%46 = bitcast i64 %45 to i64
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([35 x i8], [35 x i8]* @str$f, i64 0, i32 0), i64 34}, i64 36, i64 24, i64 %46, i64 %43)
	%47 = getelementptr inbounds i8, i8* %42, i64 %46
	%48 = load i8, i8* %47, align 1
	store i8 %48, i8* %40
	; IfStmt
	%49 = load i8, i8* %3, align 1
	%50 = trunc i8 %49 to i1
	br i1 %50, label %if.then-4, label %if.done-5

if.then-4:
	; AssignStmt
	%51 = load i64, i64* %5, align 8
	%52 = sub i64 %51, 1
	store i64 %52, i64* %5
	; AssignStmt
	; IndexExpr
	%53 = load i64, i64* %5, align 8
	%54 = trunc i64 %53 to i32
	%55 = getelementptr inbounds [129 x i8], [129 x i8]* %4, i64 0, i32 %54
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([35 x i8], [35 x i8]* @str$10, i64 0, i32 0), i64 34}, i64 38, i64 13, i64 %53, i64 129)
	store i8 45, i8* %55
	br label %if.done-5

if.done-5:
	; SelectorExpr
	%56 = load i64, i64* %0, align 8
	; SliceExpr
	%57 = load i64, i64* %5, align 8
	%58 = load [129 x i8], [129 x i8]* %4, align 1
	call void @runtime.slice_expr_error(%..string {i8* getelementptr inbounds ([35 x i8], [35 x i8]* @str$11, i64 0, i32 0), i64 34}, i64 41, i64 16, i64 %57, i64 129, i64 129)
	%59 = getelementptr inbounds [129 x i8], [129 x i8]* %4, i64 0, i32 0
	%60 = getelementptr inbounds i8, i8* %59, i64 %57
	%61 = sub i64 129, %57
	%62 = bitcast {i8*, i64}* %6 to %..rawptr
	%63 = call %..rawptr @mem.zero(%..rawptr %62, i64 16) noinline
	store {i8*, i64} zeroinitializer, {i8*, i64}* %6
	%64 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %6, i64 0, i32 0
	store i8* %60, i8** %64
	%65 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %6, i64 0, i32 1
	store i64 %61, i64* %65
	%66 = load {i8*, i64}, {i8*, i64}* %6, align 8
	%67 = bitcast {i8*, i64}* %7 to %..rawptr
	%68 = call %..rawptr @mem.zero(%..rawptr %67, i64 16) noinline
	store {i8*, i64} zeroinitializer, {i8*, i64}* %7
	store {i8*, i64} %66, {i8*, i64}* %7
	%69 = call {i64, i64} @os.write(i64 %56, {i8*, i64}* %7, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	ret void
}

define void @runtime.print_caller_location(i64 %fd, %runtime.Source_Code_Location* %loc, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca i64, align 16
	store i64 %fd, i64* %0
	%1 = load %runtime.Source_Code_Location, %runtime.Source_Code_Location* %loc, align 8
	; SelectorExpr
	%2 = load i64, i64* %0, align 8
	%3 = getelementptr inbounds %runtime.Source_Code_Location, %runtime.Source_Code_Location* %loc, i64 0, i32 0
	%4 = load %..string, %..string* %3, align 8
	%5 = call {i64, i64} @os.write_string(i64 %2, %..string %4, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	; SelectorExpr
	%6 = load i64, i64* %0, align 8
	%7 = call {i64, i64} @os.write_byte(i64 %6, i8 40, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%8 = load i64, i64* %0, align 8
	%9 = getelementptr inbounds %runtime.Source_Code_Location, %runtime.Source_Code_Location* %loc, i64 0, i32 1
	%10 = load i64, i64* %9, align 8
	%11 = bitcast i64 %10 to i64
	call void @runtime.print_u64(i64 %8, i64 %11, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	; SelectorExpr
	%12 = load i64, i64* %0, align 8
	%13 = call {i64, i64} @os.write_byte(i64 %12, i8 58, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%14 = load i64, i64* %0, align 8
	%15 = getelementptr inbounds %runtime.Source_Code_Location, %runtime.Source_Code_Location* %loc, i64 0, i32 2
	%16 = load i64, i64* %15, align 8
	%17 = bitcast i64 %16 to i64
	call void @runtime.print_u64(i64 %14, i64 %17, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	; SelectorExpr
	%18 = load i64, i64* %0, align 8
	%19 = call {i64, i64} @os.write_byte(i64 %18, i8 41, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	ret void
}

define void @runtime.print_typeid(i64 %fd, %..typeid %id, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca i64, align 16
	%1 = alloca %..typeid, align 16
	%2 = alloca %runtime.Type_Info*, align 16
	store i64 %fd, i64* %0
	store %..typeid %id, %..typeid* %1
	; ti
	%3 = load %..typeid, %..typeid* %1, align 8
	%4 = call %runtime.Type_Info* @runtime.__type_info_of(%..typeid %3)
	store %runtime.Type_Info* %4, %runtime.Type_Info** %2
	%5 = load i64, i64* %0, align 8
	%6 = load %runtime.Type_Info*, %runtime.Type_Info** %2, align 8
	call void @runtime.print_type(i64 %5, %runtime.Type_Info* %6, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	ret void
}

define void @runtime.print_type(i64 %fd, %runtime.Type_Info* %ti, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca i64, align 16
	%1 = alloca %runtime.Type_Info*, align 16
	%2 = alloca %runtime.Type_Info_Named, align 16
	%3 = alloca %runtime.Type_Info_Integer, align 16
	%4 = alloca %runtime.Type_Info_Rune, align 16
	%5 = alloca %runtime.Type_Info_Float, align 16
	%6 = alloca %runtime.Type_Info_Complex, align 16
	%7 = alloca %runtime.Type_Info_String, align 16
	%8 = alloca %runtime.Type_Info_Boolean, align 16
	%9 = alloca %runtime.Type_Info_Any, align 16
	%10 = alloca %runtime.Type_Info_Type_Id, align 16
	%11 = alloca %runtime.Type_Info_Pointer, align 16
	%12 = alloca %runtime.Type_Info_Procedure, align 16
	%13 = alloca %runtime.Type_Info_Tuple, align 16
	%14 = alloca {%runtime.Type_Info_Tuple, i8}, align 16
	%15 = alloca %runtime.Type_Info*, align 16
	%16 = alloca i64, align 16
	%17 = alloca i64, align 16
	%18 = alloca i64, align 16
	%19 = alloca %runtime.Type_Info_Tuple, align 16
	%20 = alloca i64, align 16
	%21 = alloca %..string, align 16
	%22 = alloca i64, align 16
	%23 = alloca i64, align 16
	%24 = alloca i64, align 16
	%25 = alloca %runtime.Type_Info*, align 16
	%26 = alloca %runtime.Type_Info_Array, align 16
	%27 = alloca %runtime.Type_Info_Dynamic_Array, align 16
	%28 = alloca %runtime.Type_Info_Slice, align 16
	%29 = alloca %runtime.Type_Info_Map, align 16
	%30 = alloca %runtime.Type_Info_Struct, align 16
	%31 = alloca %..string, align 16
	%32 = alloca i64, align 16
	%33 = alloca i64, align 16
	%34 = alloca i64, align 16
	%35 = alloca %runtime.Type_Info_Union, align 16
	%36 = alloca %runtime.Type_Info*, align 16
	%37 = alloca i64, align 16
	%38 = alloca i64, align 16
	%39 = alloca i64, align 16
	%40 = alloca %runtime.Type_Info_Enum, align 16
	%41 = alloca %..string, align 16
	%42 = alloca i64, align 16
	%43 = alloca i64, align 16
	%44 = alloca i64, align 16
	%45 = alloca %runtime.Type_Info_Bit_Field, align 16
	%46 = alloca %..string, align 16
	%47 = alloca i64, align 16
	%48 = alloca i64, align 16
	%49 = alloca i64, align 16
	%50 = alloca %runtime.Type_Info_Bit_Set, align 16
	%51 = alloca %runtime.Type_Info*, align 16
	%52 = alloca %runtime.Type_Info_Enum, align 16
	%53 = alloca %runtime.Type_Info_Rune, align 16
	%54 = alloca {[0 x i64], [72 x i8], i64}, align 16
	store i64 %fd, i64* %0
	store %runtime.Type_Info* %ti, %runtime.Type_Info** %1
	; IfStmt
	%55 = load %runtime.Type_Info*, %runtime.Type_Info** %1, align 8
	%56 = icmp eq %runtime.Type_Info* %55, zeroinitializer
	%57 = zext i1 %56 to i8
	%58 = trunc i8 %57 to i1
	br i1 %58, label %if.then-1, label %if.done-2

if.then-1:
	; SelectorExpr
	%59 = load i64, i64* %0, align 8
	%60 = call {i64, i64} @os.write_string(i64 %59, %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str$12, i64 0, i32 0), i64 3}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	; ReturnStmt
	ret void

if.done-2:
	; TypeSwitchStmt
	; SelectorExpr
	%61 = load %runtime.Type_Info*, %runtime.Type_Info** %1, align 8
	%62 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %61, i64 0
	%63 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %62, i64 0, i32 3
	%64 = load {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %63, align 8
	; get union's tag
	%65 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %63, i64 0, i32 2 ; UnionTagPtr
	%66 = load i64, i64* %65, align 8
	%67 = bitcast {[0 x i64], [72 x i8], i64}* %63 to %..rawptr
	%68 = icmp eq i64 %66, 1
	br i1 %68, label %typeswitch.body-4, label %typeswitch.next-3

typeswitch.next-3:
	%69 = icmp eq i64 %66, 2
	br i1 %69, label %typeswitch.body-6, label %typeswitch.next-5

typeswitch.body-4:
	%70 = bitcast %..rawptr %67 to %runtime.Type_Info_Named*
	%71 = load %runtime.Type_Info_Named, %runtime.Type_Info_Named* %70, align 8
	store %runtime.Type_Info_Named %71, %runtime.Type_Info_Named* %2
	; SelectorExpr
	%72 = load i64, i64* %0, align 8
	; SelectorExpr
	%73 = getelementptr inbounds %runtime.Type_Info_Named, %runtime.Type_Info_Named* %2, i64 0, i32 0
	%74 = load %..string, %..string* %73, align 8
	%75 = call {i64, i64} @os.write_string(i64 %72, %..string %74, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %typeswitch.done-119

typeswitch.next-5:
	%76 = icmp eq i64 %66, 3
	br i1 %76, label %typeswitch.body-18, label %typeswitch.next-17

typeswitch.body-6:
	%77 = bitcast %..rawptr %67 to %runtime.Type_Info_Integer*
	%78 = load %runtime.Type_Info_Integer, %runtime.Type_Info_Integer* %77, align 1
	store %runtime.Type_Info_Integer %78, %runtime.Type_Info_Integer* %3
	; SwitchStmt
	; SelectorExpr
	%79 = load %runtime.Type_Info*, %runtime.Type_Info** %1, align 8
	%80 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %79, i64 0
	%81 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %80, i64 0, i32 2
	%82 = load %..typeid, %..typeid* %81, align 8
	%83 = icmp eq %..typeid %82, 4683743612465315848
	br i1 %83, label %switch.case.body-8, label %switch.case.next-7

switch.case.next-7:
	%84 = icmp eq %..typeid %82, 72057594037928006
	br i1 %84, label %switch.fall.body-10, label %switch.case.next-9

switch.case.body-8:
	; SelectorExpr
	%85 = load i64, i64* %0, align 8
	%86 = call {i64, i64} @os.write_string(i64 %85, %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str$13, i64 0, i32 0), i64 3}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %switch.done-16

switch.case.next-9:
	%87 = icmp eq %..typeid %82, 72057594037927987
	br i1 %87, label %switch.fall.body-12, label %switch.case.next-11

switch.fall.body-10:
	; SelectorExpr
	%88 = load i64, i64* %0, align 8
	%89 = call {i64, i64} @os.write_string(i64 %88, %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str$14, i64 0, i32 0), i64 4}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %switch.done-16

switch.case.next-11:
	; SelectorExpr
	%90 = load i64, i64* %0, align 8
	; TernaryExpr
	; SelectorExpr
	%91 = getelementptr inbounds %runtime.Type_Info_Integer, %runtime.Type_Info_Integer* %3, i64 0, i32 0
	%92 = load i8, i8* %91, align 1
	%93 = trunc i8 %92 to i1
	br i1 %93, label %if.then-13, label %if.else-14

switch.fall.body-12:
	; SelectorExpr
	%94 = load i64, i64* %0, align 8
	%95 = call {i64, i64} @os.write_string(i64 %94, %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str$15, i64 0, i32 0), i64 7}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %switch.done-16

if.then-13:
	br label %if.done-15

if.else-14:
	br label %if.done-15

if.done-15:
	%96 = phi i32 [ 105, %if.then-13 ], [ 117, %if.else-14 ]
	%97 = trunc i32 %96 to i8
	%98 = call {i64, i64} @os.write_byte(i64 %90, i8 %97, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%99 = load i64, i64* %0, align 8
	; SelectorExpr
	%100 = load %runtime.Type_Info*, %runtime.Type_Info** %1, align 8
	%101 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %100, i64 0
	%102 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %101, i64 0, i32 0
	%103 = load i64, i64* %102, align 8
	%104 = mul i64 8, %103
	%105 = bitcast i64 %104 to i64
	call void @runtime.print_u64(i64 %99, i64 %105, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %switch.done-16

switch.done-16:
	br label %typeswitch.done-119

typeswitch.next-17:
	%106 = icmp eq i64 %66, 4
	br i1 %106, label %typeswitch.body-20, label %typeswitch.next-19

typeswitch.body-18:
	%107 = bitcast %..rawptr %67 to %runtime.Type_Info_Rune*
	%108 = load %runtime.Type_Info_Rune, %runtime.Type_Info_Rune* %107, align 1
	store %runtime.Type_Info_Rune %108, %runtime.Type_Info_Rune* %4
	; SelectorExpr
	%109 = load i64, i64* %0, align 8
	%110 = call {i64, i64} @os.write_string(i64 %109, %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str$16, i64 0, i32 0), i64 4}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %typeswitch.done-119

typeswitch.next-19:
	%111 = icmp eq i64 %66, 5
	br i1 %111, label %typeswitch.body-22, label %typeswitch.next-21

typeswitch.body-20:
	%112 = bitcast %..rawptr %67 to %runtime.Type_Info_Float*
	%113 = load %runtime.Type_Info_Float, %runtime.Type_Info_Float* %112, align 1
	store %runtime.Type_Info_Float %113, %runtime.Type_Info_Float* %5
	; SelectorExpr
	%114 = load i64, i64* %0, align 8
	%115 = call {i64, i64} @os.write_byte(i64 %114, i8 102, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%116 = load i64, i64* %0, align 8
	; SelectorExpr
	%117 = load %runtime.Type_Info*, %runtime.Type_Info** %1, align 8
	%118 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %117, i64 0
	%119 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %118, i64 0, i32 0
	%120 = load i64, i64* %119, align 8
	%121 = mul i64 8, %120
	%122 = bitcast i64 %121 to i64
	call void @runtime.print_u64(i64 %116, i64 %122, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %typeswitch.done-119

typeswitch.next-21:
	%123 = icmp eq i64 %66, 6
	br i1 %123, label %typeswitch.body-24, label %typeswitch.next-23

typeswitch.body-22:
	%124 = bitcast %..rawptr %67 to %runtime.Type_Info_Complex*
	%125 = load %runtime.Type_Info_Complex, %runtime.Type_Info_Complex* %124, align 1
	store %runtime.Type_Info_Complex %125, %runtime.Type_Info_Complex* %6
	; SelectorExpr
	%126 = load i64, i64* %0, align 8
	%127 = call {i64, i64} @os.write_string(i64 %126, %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str$17, i64 0, i32 0), i64 7}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%128 = load i64, i64* %0, align 8
	; SelectorExpr
	%129 = load %runtime.Type_Info*, %runtime.Type_Info** %1, align 8
	%130 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %129, i64 0
	%131 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %130, i64 0, i32 0
	%132 = load i64, i64* %131, align 8
	%133 = mul i64 8, %132
	%134 = bitcast i64 %133 to i64
	call void @runtime.print_u64(i64 %128, i64 %134, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %typeswitch.done-119

typeswitch.next-23:
	%135 = icmp eq i64 %66, 7
	br i1 %135, label %typeswitch.body-26, label %typeswitch.next-25

typeswitch.body-24:
	%136 = bitcast %..rawptr %67 to %runtime.Type_Info_String*
	%137 = load %runtime.Type_Info_String, %runtime.Type_Info_String* %136, align 1
	store %runtime.Type_Info_String %137, %runtime.Type_Info_String* %7
	; SelectorExpr
	%138 = load i64, i64* %0, align 8
	%139 = call {i64, i64} @os.write_string(i64 %138, %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str$18, i64 0, i32 0), i64 6}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %typeswitch.done-119

typeswitch.next-25:
	%140 = icmp eq i64 %66, 8
	br i1 %140, label %typeswitch.body-31, label %typeswitch.next-30

typeswitch.body-26:
	%141 = bitcast %..rawptr %67 to %runtime.Type_Info_Boolean*
	%142 = load %runtime.Type_Info_Boolean, %runtime.Type_Info_Boolean* %141, align 1
	store %runtime.Type_Info_Boolean %142, %runtime.Type_Info_Boolean* %8
	; SwitchStmt
	; SelectorExpr
	%143 = load %runtime.Type_Info*, %runtime.Type_Info** %1, align 8
	%144 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %143, i64 0
	%145 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %144, i64 0, i32 2
	%146 = load %..typeid, %..typeid* %145, align 8
	%147 = icmp eq %..typeid %146, 432345564227567635
	br i1 %147, label %switch.case.body-28, label %switch.case.next-27

switch.case.next-27:
	; SelectorExpr
	%148 = load i64, i64* %0, align 8
	%149 = call {i64, i64} @os.write_byte(i64 %148, i8 98, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%150 = load i64, i64* %0, align 8
	; SelectorExpr
	%151 = load %runtime.Type_Info*, %runtime.Type_Info** %1, align 8
	%152 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %151, i64 0
	%153 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %152, i64 0, i32 0
	%154 = load i64, i64* %153, align 8
	%155 = mul i64 8, %154
	%156 = bitcast i64 %155 to i64
	call void @runtime.print_u64(i64 %150, i64 %156, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %switch.done-29

switch.case.body-28:
	; SelectorExpr
	%157 = load i64, i64* %0, align 8
	%158 = call {i64, i64} @os.write_string(i64 %157, %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str$19, i64 0, i32 0), i64 4}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %switch.done-29

switch.done-29:
	br label %typeswitch.done-119

typeswitch.next-30:
	%159 = icmp eq i64 %66, 9
	br i1 %159, label %typeswitch.body-33, label %typeswitch.next-32

typeswitch.body-31:
	%160 = bitcast %..rawptr %67 to %runtime.Type_Info_Any*
	%161 = load %runtime.Type_Info_Any, %runtime.Type_Info_Any* %160, align 1
	store %runtime.Type_Info_Any %161, %runtime.Type_Info_Any* %9
	; SelectorExpr
	%162 = load i64, i64* %0, align 8
	%163 = call {i64, i64} @os.write_string(i64 %162, %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str$1a, i64 0, i32 0), i64 3}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %typeswitch.done-119

typeswitch.next-32:
	%164 = icmp eq i64 %66, 10
	br i1 %164, label %typeswitch.body-35, label %typeswitch.next-34

typeswitch.body-33:
	%165 = bitcast %..rawptr %67 to %runtime.Type_Info_Type_Id*
	%166 = load %runtime.Type_Info_Type_Id, %runtime.Type_Info_Type_Id* %165, align 1
	store %runtime.Type_Info_Type_Id %166, %runtime.Type_Info_Type_Id* %10
	; SelectorExpr
	%167 = load i64, i64* %0, align 8
	%168 = call {i64, i64} @os.write_string(i64 %167, %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str$1b, i64 0, i32 0), i64 6}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %typeswitch.done-119

typeswitch.next-34:
	%169 = icmp eq i64 %66, 11
	br i1 %169, label %typeswitch.body-40, label %typeswitch.next-39

typeswitch.body-35:
	%170 = bitcast %..rawptr %67 to %runtime.Type_Info_Pointer*
	%171 = load %runtime.Type_Info_Pointer, %runtime.Type_Info_Pointer* %170, align 8
	store %runtime.Type_Info_Pointer %171, %runtime.Type_Info_Pointer* %11
	; IfStmt
	; SelectorExpr
	%172 = getelementptr inbounds %runtime.Type_Info_Pointer, %runtime.Type_Info_Pointer* %11, i64 0, i32 0
	%173 = load %runtime.Type_Info*, %runtime.Type_Info** %172, align 8
	%174 = icmp eq %runtime.Type_Info* %173, zeroinitializer
	%175 = zext i1 %174 to i8
	%176 = trunc i8 %175 to i1
	br i1 %176, label %if.then-36, label %if.else-37

if.then-36:
	; SelectorExpr
	%177 = load i64, i64* %0, align 8
	%178 = call {i64, i64} @os.write_string(i64 %177, %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str$1c, i64 0, i32 0), i64 6}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %if.done-38

if.else-37:
	; SelectorExpr
	%179 = load i64, i64* %0, align 8
	%180 = call {i64, i64} @os.write_string(i64 %179, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str$1d, i64 0, i32 0), i64 1}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%181 = load i64, i64* %0, align 8
	; SelectorExpr
	%182 = getelementptr inbounds %runtime.Type_Info_Pointer, %runtime.Type_Info_Pointer* %11, i64 0, i32 0
	%183 = load %runtime.Type_Info*, %runtime.Type_Info** %182, align 8
	call void @runtime.print_type(i64 %181, %runtime.Type_Info* %183, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %if.done-38

if.done-38:
	br label %typeswitch.done-119

typeswitch.next-39:
	%184 = icmp eq i64 %66, 15
	br i1 %184, label %typeswitch.body-54, label %typeswitch.next-53

typeswitch.body-40:
	%185 = bitcast %..rawptr %67 to %runtime.Type_Info_Procedure*
	%186 = load %runtime.Type_Info_Procedure, %runtime.Type_Info_Procedure* %185, align 8
	store %runtime.Type_Info_Procedure %186, %runtime.Type_Info_Procedure* %12
	; SelectorExpr
	%187 = load i64, i64* %0, align 8
	%188 = call {i64, i64} @os.write_string(i64 %187, %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str$1e, i64 0, i32 0), i64 4}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	; IfStmt
	; SelectorExpr
	%189 = getelementptr inbounds %runtime.Type_Info_Procedure, %runtime.Type_Info_Procedure* %12, i64 0, i32 0
	%190 = load %runtime.Type_Info*, %runtime.Type_Info** %189, align 8
	%191 = icmp eq %runtime.Type_Info* %190, zeroinitializer
	%192 = zext i1 %191 to i8
	%193 = trunc i8 %192 to i1
	br i1 %193, label %if.then-41, label %if.else-42

if.then-41:
	; SelectorExpr
	%194 = load i64, i64* %0, align 8
	%195 = call {i64, i64} @os.write_string(i64 %194, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @str$1f, i64 0, i32 0), i64 2}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %if.done-50

if.else-42:
	; t
	; SelectorExpr
	; SelectorExpr
	%196 = getelementptr inbounds %runtime.Type_Info_Procedure, %runtime.Type_Info_Procedure* %12, i64 0, i32 0
	%197 = load %runtime.Type_Info*, %runtime.Type_Info** %196, align 8
	%198 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %197, i64 0
	%199 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %198, i64 0, i32 3
	%200 = load {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %199, align 8
	; cast - union_cast
	%201 = bitcast {%runtime.Type_Info_Tuple, i8}* %14 to %..rawptr
	%202 = call %..rawptr @mem.zero(%..rawptr %201, i64 40) noinline
	store {%runtime.Type_Info_Tuple, i8} zeroinitializer, {%runtime.Type_Info_Tuple, i8}* %14
	%203 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %199, i64 0, i32 2 ; UnionTagPtr
	%204 = load i64, i64* %203, align 8
	%205 = icmp eq i64 %204, 15
	br i1 %205, label %union_cast.ok-43, label %union_cast.end-44

union_cast.ok-43:
	%206 = getelementptr inbounds {%runtime.Type_Info_Tuple, i8}, {%runtime.Type_Info_Tuple, i8}* %14, i64 0, i32 0
	%207 = getelementptr inbounds {%runtime.Type_Info_Tuple, i8}, {%runtime.Type_Info_Tuple, i8}* %14, i64 0, i32 1
	%208 = bitcast {[0 x i64], [72 x i8], i64}* %199 to %runtime.Type_Info_Tuple*
	%209 = load %runtime.Type_Info_Tuple, %runtime.Type_Info_Tuple* %208, align 8
	store %runtime.Type_Info_Tuple %209, %runtime.Type_Info_Tuple* %206
	store i8 1, i8* %207
	br label %union_cast.end-44

union_cast.end-44:
	%210 = getelementptr inbounds {%runtime.Type_Info_Tuple, i8}, {%runtime.Type_Info_Tuple, i8}* %14, i64 0, i32 1
	%211 = load i8, i8* %210, align 1
	%212 = trunc i8 %211 to i1
	call void @runtime.type_assertion_check(i1 %212, %..string {i8* getelementptr inbounds ([35 x i8], [35 x i8]* @str$20, i64 0, i32 0), i64 34}, i64 108, i64 21, %..typeid 1152921504606846990, %..typeid 3386706919782613034)
	%213 = getelementptr inbounds {%runtime.Type_Info_Tuple, i8}, {%runtime.Type_Info_Tuple, i8}* %14, i64 0, i32 0
	%214 = load %runtime.Type_Info_Tuple, %runtime.Type_Info_Tuple* %213, align 8
	store %runtime.Type_Info_Tuple %214, %runtime.Type_Info_Tuple* %13
	; SelectorExpr
	%215 = load i64, i64* %0, align 8
	%216 = call {i64, i64} @os.write_string(i64 %215, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str$21, i64 0, i32 0), i64 1}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	; RangeStmt
	; t
	%217 = bitcast %runtime.Type_Info** %15 to %..rawptr
	%218 = call %..rawptr @mem.zero(%..rawptr %217, i64 8) noinline
	store %runtime.Type_Info* zeroinitializer, %runtime.Type_Info** %15
	; i
	%219 = bitcast i64* %16 to %..rawptr
	%220 = call %..rawptr @mem.zero(%..rawptr %219, i64 8) noinline
	store i64 zeroinitializer, i64* %16
	; SelectorExpr
	%221 = getelementptr inbounds %runtime.Type_Info_Tuple, %runtime.Type_Info_Tuple* %13, i64 0, i32 0
	%222 = load {%runtime.Type_Info**, i64}, {%runtime.Type_Info**, i64}* %221, align 8
	%223 = bitcast i64* %17 to %..rawptr
	%224 = call %..rawptr @mem.zero(%..rawptr %223, i64 8) noinline
	store i64 zeroinitializer, i64* %17
	%225 = extractvalue {%runtime.Type_Info**, i64} %222, 1
	store i64 %225, i64* %17
	%226 = bitcast i64* %18 to %..rawptr
	%227 = call %..rawptr @mem.zero(%..rawptr %226, i64 8) noinline
	store i64 zeroinitializer, i64* %18
	store i64 -1, i64* %18
	br label %for.index.loop-45

for.index.loop-45:
	%228 = load i64, i64* %18, align 8
	%229 = add i64 %228, 1
	store i64 %229, i64* %18
	%230 = load i64, i64* %17, align 8
	%231 = icmp slt i64 %229, %230
	br i1 %231, label %for.index.body-46, label %for.index.done-49

for.index.body-46:
	%232 = load i64, i64* %18, align 8
	%233 = extractvalue {%runtime.Type_Info**, i64} %222, 0
	%234 = getelementptr inbounds %runtime.Type_Info*, %runtime.Type_Info** %233, i64 %232
	%235 = load %runtime.Type_Info*, %runtime.Type_Info** %234, align 8
	store %runtime.Type_Info* %235, %runtime.Type_Info** %15
	store i64 %232, i64* %16
	; IfStmt
	%236 = load i64, i64* %16, align 8
	%237 = icmp sgt i64 %236, 0
	%238 = zext i1 %237 to i8
	%239 = trunc i8 %238 to i1
	br i1 %239, label %if.then-47, label %if.done-48

if.then-47:
	; SelectorExpr
	%240 = load i64, i64* %0, align 8
	%241 = call {i64, i64} @os.write_string(i64 %240, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @str$22, i64 0, i32 0), i64 2}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %if.done-48

if.done-48:
	%242 = load i64, i64* %0, align 8
	%243 = load %runtime.Type_Info*, %runtime.Type_Info** %15, align 8
	call void @runtime.print_type(i64 %242, %runtime.Type_Info* %243, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %for.index.loop-45

for.index.done-49:
	; SelectorExpr
	%244 = load i64, i64* %0, align 8
	%245 = call {i64, i64} @os.write_string(i64 %244, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str$23, i64 0, i32 0), i64 1}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %if.done-50

if.done-50:
	; IfStmt
	; SelectorExpr
	%246 = getelementptr inbounds %runtime.Type_Info_Procedure, %runtime.Type_Info_Procedure* %12, i64 0, i32 1
	%247 = load %runtime.Type_Info*, %runtime.Type_Info** %246, align 8
	%248 = icmp ne %runtime.Type_Info* %247, zeroinitializer
	%249 = zext i1 %248 to i8
	%250 = trunc i8 %249 to i1
	br i1 %250, label %if.then-51, label %if.done-52

if.then-51:
	; SelectorExpr
	%251 = load i64, i64* %0, align 8
	%252 = call {i64, i64} @os.write_string(i64 %251, %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str$24, i64 0, i32 0), i64 4}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%253 = load i64, i64* %0, align 8
	; SelectorExpr
	%254 = getelementptr inbounds %runtime.Type_Info_Procedure, %runtime.Type_Info_Procedure* %12, i64 0, i32 1
	%255 = load %runtime.Type_Info*, %runtime.Type_Info** %254, align 8
	call void @runtime.print_type(i64 %253, %runtime.Type_Info* %255, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %if.done-52

if.done-52:
	br label %typeswitch.done-119

typeswitch.next-53:
	%256 = icmp eq i64 %66, 12
	br i1 %256, label %typeswitch.body-67, label %typeswitch.next-66

typeswitch.body-54:
	%257 = bitcast %..rawptr %67 to %runtime.Type_Info_Tuple*
	%258 = load %runtime.Type_Info_Tuple, %runtime.Type_Info_Tuple* %257, align 8
	store %runtime.Type_Info_Tuple %258, %runtime.Type_Info_Tuple* %19
	; count
	; SelectorExpr
	%259 = getelementptr inbounds %runtime.Type_Info_Tuple, %runtime.Type_Info_Tuple* %19, i64 0, i32 1
	%260 = load {%..string*, i64}, {%..string*, i64}* %259, align 8
	%261 = extractvalue {%..string*, i64} %260, 1
	store i64 %261, i64* %20
	; IfStmt
	%262 = load i64, i64* %20, align 8
	%263 = icmp ne i64 %262, 1
	%264 = zext i1 %263 to i8
	%265 = trunc i8 %264 to i1
	br i1 %265, label %if.then-55, label %if.done-56

if.then-55:
	; SelectorExpr
	%266 = load i64, i64* %0, align 8
	%267 = call {i64, i64} @os.write_string(i64 %266, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str$25, i64 0, i32 0), i64 1}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %if.done-56

if.done-56:
	; RangeStmt
	; name
	%268 = bitcast %..string* %21 to %..rawptr
	%269 = call %..rawptr @mem.zero(%..rawptr %268, i64 16) noinline
	store %..string zeroinitializer, %..string* %21
	; i
	%270 = bitcast i64* %22 to %..rawptr
	%271 = call %..rawptr @mem.zero(%..rawptr %270, i64 8) noinline
	store i64 zeroinitializer, i64* %22
	; SelectorExpr
	%272 = getelementptr inbounds %runtime.Type_Info_Tuple, %runtime.Type_Info_Tuple* %19, i64 0, i32 1
	%273 = load {%..string*, i64}, {%..string*, i64}* %272, align 8
	%274 = bitcast i64* %23 to %..rawptr
	%275 = call %..rawptr @mem.zero(%..rawptr %274, i64 8) noinline
	store i64 zeroinitializer, i64* %23
	%276 = extractvalue {%..string*, i64} %273, 1
	store i64 %276, i64* %23
	%277 = bitcast i64* %24 to %..rawptr
	%278 = call %..rawptr @mem.zero(%..rawptr %277, i64 8) noinline
	store i64 zeroinitializer, i64* %24
	store i64 -1, i64* %24
	br label %for.index.loop-57

for.index.loop-57:
	%279 = load i64, i64* %24, align 8
	%280 = add i64 %279, 1
	store i64 %280, i64* %24
	%281 = load i64, i64* %23, align 8
	%282 = icmp slt i64 %280, %281
	br i1 %282, label %for.index.body-58, label %for.index.done-63

for.index.body-58:
	%283 = load i64, i64* %24, align 8
	%284 = extractvalue {%..string*, i64} %273, 0
	%285 = getelementptr inbounds %..string, %..string* %284, i64 %283
	%286 = load %..string, %..string* %285, align 8
	store %..string %286, %..string* %21
	store i64 %283, i64* %22
	; IfStmt
	%287 = load i64, i64* %22, align 8
	%288 = icmp sgt i64 %287, 0
	%289 = zext i1 %288 to i8
	%290 = trunc i8 %289 to i1
	br i1 %290, label %if.then-59, label %if.done-60

if.then-59:
	; SelectorExpr
	%291 = load i64, i64* %0, align 8
	%292 = call {i64, i64} @os.write_string(i64 %291, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @str$26, i64 0, i32 0), i64 2}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %if.done-60

if.done-60:
	; t
	; IndexExpr
	; SelectorExpr
	%293 = getelementptr inbounds %runtime.Type_Info_Tuple, %runtime.Type_Info_Tuple* %19, i64 0, i32 0
	%294 = load {%runtime.Type_Info**, i64}, {%runtime.Type_Info**, i64}* %293, align 8
	%295 = extractvalue {%runtime.Type_Info**, i64} %294, 0
	%296 = load i64, i64* %22, align 8
	%297 = extractvalue {%runtime.Type_Info**, i64} %294, 1
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([35 x i8], [35 x i8]* @str$27, i64 0, i32 0), i64 34}, i64 126, i64 20, i64 %296, i64 %297)
	%298 = getelementptr inbounds %runtime.Type_Info*, %runtime.Type_Info** %295, i64 %296
	%299 = load %runtime.Type_Info*, %runtime.Type_Info** %298, align 8
	store %runtime.Type_Info* %299, %runtime.Type_Info** %25
	; IfStmt
	%300 = load %..string, %..string* %21, align 8
	%301 = extractvalue %..string %300, 1
	%302 = icmp sgt i64 %301, 0
	%303 = zext i1 %302 to i8
	%304 = trunc i8 %303 to i1
	br i1 %304, label %if.then-61, label %if.done-62

if.then-61:
	; SelectorExpr
	%305 = load i64, i64* %0, align 8
	%306 = load %..string, %..string* %21, align 8
	%307 = call {i64, i64} @os.write_string(i64 %305, %..string %306, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	; SelectorExpr
	%308 = load i64, i64* %0, align 8
	%309 = call {i64, i64} @os.write_string(i64 %308, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @str$28, i64 0, i32 0), i64 2}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %if.done-62

if.done-62:
	%310 = load i64, i64* %0, align 8
	%311 = load %runtime.Type_Info*, %runtime.Type_Info** %25, align 8
	call void @runtime.print_type(i64 %310, %runtime.Type_Info* %311, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %for.index.loop-57

for.index.done-63:
	; IfStmt
	%312 = load i64, i64* %20, align 8
	%313 = icmp ne i64 %312, 1
	%314 = zext i1 %313 to i8
	%315 = trunc i8 %314 to i1
	br i1 %315, label %if.then-64, label %if.done-65

if.then-64:
	; SelectorExpr
	%316 = load i64, i64* %0, align 8
	%317 = call {i64, i64} @os.write_string(i64 %316, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str$29, i64 0, i32 0), i64 1}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %if.done-65

if.done-65:
	br label %typeswitch.done-119

typeswitch.next-66:
	%318 = icmp eq i64 %66, 13
	br i1 %318, label %typeswitch.body-69, label %typeswitch.next-68

typeswitch.body-67:
	%319 = bitcast %..rawptr %67 to %runtime.Type_Info_Array*
	%320 = load %runtime.Type_Info_Array, %runtime.Type_Info_Array* %319, align 8
	store %runtime.Type_Info_Array %320, %runtime.Type_Info_Array* %26
	; SelectorExpr
	%321 = load i64, i64* %0, align 8
	%322 = call {i64, i64} @os.write_string(i64 %321, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str$2a, i64 0, i32 0), i64 1}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%323 = load i64, i64* %0, align 8
	; SelectorExpr
	%324 = getelementptr inbounds %runtime.Type_Info_Array, %runtime.Type_Info_Array* %26, i64 0, i32 2
	%325 = load i64, i64* %324, align 8
	%326 = bitcast i64 %325 to i64
	call void @runtime.print_u64(i64 %323, i64 %326, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	; SelectorExpr
	%327 = load i64, i64* %0, align 8
	%328 = call {i64, i64} @os.write_string(i64 %327, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str$2b, i64 0, i32 0), i64 1}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%329 = load i64, i64* %0, align 8
	; SelectorExpr
	%330 = getelementptr inbounds %runtime.Type_Info_Array, %runtime.Type_Info_Array* %26, i64 0, i32 0
	%331 = load %runtime.Type_Info*, %runtime.Type_Info** %330, align 8
	call void @runtime.print_type(i64 %329, %runtime.Type_Info* %331, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %typeswitch.done-119

typeswitch.next-68:
	%332 = icmp eq i64 %66, 14
	br i1 %332, label %typeswitch.body-71, label %typeswitch.next-70

typeswitch.body-69:
	%333 = bitcast %..rawptr %67 to %runtime.Type_Info_Dynamic_Array*
	%334 = load %runtime.Type_Info_Dynamic_Array, %runtime.Type_Info_Dynamic_Array* %333, align 8
	store %runtime.Type_Info_Dynamic_Array %334, %runtime.Type_Info_Dynamic_Array* %27
	; SelectorExpr
	%335 = load i64, i64* %0, align 8
	%336 = call {i64, i64} @os.write_string(i64 %335, %..string {i8* getelementptr inbounds ([10 x i8], [10 x i8]* @str$2c, i64 0, i32 0), i64 9}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%337 = load i64, i64* %0, align 8
	; SelectorExpr
	%338 = getelementptr inbounds %runtime.Type_Info_Dynamic_Array, %runtime.Type_Info_Dynamic_Array* %27, i64 0, i32 0
	%339 = load %runtime.Type_Info*, %runtime.Type_Info** %338, align 8
	call void @runtime.print_type(i64 %337, %runtime.Type_Info* %339, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %typeswitch.done-119

typeswitch.next-70:
	%340 = icmp eq i64 %66, 19
	br i1 %340, label %typeswitch.body-73, label %typeswitch.next-72

typeswitch.body-71:
	%341 = bitcast %..rawptr %67 to %runtime.Type_Info_Slice*
	%342 = load %runtime.Type_Info_Slice, %runtime.Type_Info_Slice* %341, align 8
	store %runtime.Type_Info_Slice %342, %runtime.Type_Info_Slice* %28
	; SelectorExpr
	%343 = load i64, i64* %0, align 8
	%344 = call {i64, i64} @os.write_string(i64 %343, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @str$2d, i64 0, i32 0), i64 2}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%345 = load i64, i64* %0, align 8
	; SelectorExpr
	%346 = getelementptr inbounds %runtime.Type_Info_Slice, %runtime.Type_Info_Slice* %28, i64 0, i32 0
	%347 = load %runtime.Type_Info*, %runtime.Type_Info** %346, align 8
	call void @runtime.print_type(i64 %345, %runtime.Type_Info* %347, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %typeswitch.done-119

typeswitch.next-72:
	%348 = icmp eq i64 %66, 16
	br i1 %348, label %typeswitch.body-75, label %typeswitch.next-74

typeswitch.body-73:
	%349 = bitcast %..rawptr %67 to %runtime.Type_Info_Map*
	%350 = load %runtime.Type_Info_Map, %runtime.Type_Info_Map* %349, align 8
	store %runtime.Type_Info_Map %350, %runtime.Type_Info_Map* %29
	; SelectorExpr
	%351 = load i64, i64* %0, align 8
	%352 = call {i64, i64} @os.write_string(i64 %351, %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str$2e, i64 0, i32 0), i64 4}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%353 = load i64, i64* %0, align 8
	; SelectorExpr
	%354 = getelementptr inbounds %runtime.Type_Info_Map, %runtime.Type_Info_Map* %29, i64 0, i32 0
	%355 = load %runtime.Type_Info*, %runtime.Type_Info** %354, align 8
	call void @runtime.print_type(i64 %353, %runtime.Type_Info* %355, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	; SelectorExpr
	%356 = load i64, i64* %0, align 8
	%357 = call {i64, i64} @os.write_byte(i64 %356, i8 93, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%358 = load i64, i64* %0, align 8
	; SelectorExpr
	%359 = getelementptr inbounds %runtime.Type_Info_Map, %runtime.Type_Info_Map* %29, i64 0, i32 1
	%360 = load %runtime.Type_Info*, %runtime.Type_Info** %359, align 8
	call void @runtime.print_type(i64 %358, %runtime.Type_Info* %360, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %typeswitch.done-119

typeswitch.next-74:
	%361 = icmp eq i64 %66, 17
	br i1 %361, label %typeswitch.body-88, label %typeswitch.next-87

typeswitch.body-75:
	%362 = bitcast %..rawptr %67 to %runtime.Type_Info_Struct*
	%363 = load %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %362, align 8
	store %runtime.Type_Info_Struct %363, %runtime.Type_Info_Struct* %30
	; SelectorExpr
	%364 = load i64, i64* %0, align 8
	%365 = call {i64, i64} @os.write_string(i64 %364, %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str$2f, i64 0, i32 0), i64 7}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	; IfStmt
	; SelectorExpr
	%366 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %30, i64 0, i32 4
	%367 = load i8, i8* %366, align 1
	%368 = trunc i8 %367 to i1
	br i1 %368, label %if.then-76, label %if.done-77

if.then-76:
	; SelectorExpr
	%369 = load i64, i64* %0, align 8
	%370 = call {i64, i64} @os.write_string(i64 %369, %..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @str$30, i64 0, i32 0), i64 8}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %if.done-77

if.done-77:
	; IfStmt
	; SelectorExpr
	%371 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %30, i64 0, i32 5
	%372 = load i8, i8* %371, align 1
	%373 = trunc i8 %372 to i1
	br i1 %373, label %if.then-78, label %if.done-79

if.then-78:
	; SelectorExpr
	%374 = load i64, i64* %0, align 8
	%375 = call {i64, i64} @os.write_string(i64 %374, %..string {i8* getelementptr inbounds ([12 x i8], [12 x i8]* @str$31, i64 0, i32 0), i64 11}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %if.done-79

if.done-79:
	; IfStmt
	; SelectorExpr
	%376 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %30, i64 0, i32 6
	%377 = load i8, i8* %376, align 1
	%378 = trunc i8 %377 to i1
	br i1 %378, label %if.then-80, label %if.done-81

if.then-80:
	; SelectorExpr
	%379 = load i64, i64* %0, align 8
	%380 = call {i64, i64} @os.write_string(i64 %379, %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str$32, i64 0, i32 0), i64 7}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%381 = load i64, i64* %0, align 8
	; SelectorExpr
	%382 = load %runtime.Type_Info*, %runtime.Type_Info** %1, align 8
	%383 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %382, i64 0
	%384 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %383, i64 0, i32 1
	%385 = load i64, i64* %384, align 8
	%386 = bitcast i64 %385 to i64
	call void @runtime.print_u64(i64 %381, i64 %386, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	; SelectorExpr
	%387 = load i64, i64* %0, align 8
	%388 = call {i64, i64} @os.write_byte(i64 %387, i8 32, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %if.done-81

if.done-81:
	; SelectorExpr
	%389 = load i64, i64* %0, align 8
	%390 = call {i64, i64} @os.write_byte(i64 %389, i8 123, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	; RangeStmt
	; name
	%391 = bitcast %..string* %31 to %..rawptr
	%392 = call %..rawptr @mem.zero(%..rawptr %391, i64 16) noinline
	store %..string zeroinitializer, %..string* %31
	; i
	%393 = bitcast i64* %32 to %..rawptr
	%394 = call %..rawptr @mem.zero(%..rawptr %393, i64 8) noinline
	store i64 zeroinitializer, i64* %32
	; SelectorExpr
	%395 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %30, i64 0, i32 1
	%396 = load {%..string*, i64}, {%..string*, i64}* %395, align 8
	%397 = bitcast i64* %33 to %..rawptr
	%398 = call %..rawptr @mem.zero(%..rawptr %397, i64 8) noinline
	store i64 zeroinitializer, i64* %33
	%399 = extractvalue {%..string*, i64} %396, 1
	store i64 %399, i64* %33
	%400 = bitcast i64* %34 to %..rawptr
	%401 = call %..rawptr @mem.zero(%..rawptr %400, i64 8) noinline
	store i64 zeroinitializer, i64* %34
	store i64 -1, i64* %34
	br label %for.index.loop-82

for.index.loop-82:
	%402 = load i64, i64* %34, align 8
	%403 = add i64 %402, 1
	store i64 %403, i64* %34
	%404 = load i64, i64* %33, align 8
	%405 = icmp slt i64 %403, %404
	br i1 %405, label %for.index.body-83, label %for.index.done-86

for.index.body-83:
	%406 = load i64, i64* %34, align 8
	%407 = extractvalue {%..string*, i64} %396, 0
	%408 = getelementptr inbounds %..string, %..string* %407, i64 %406
	%409 = load %..string, %..string* %408, align 8
	store %..string %409, %..string* %31
	store i64 %406, i64* %32
	; IfStmt
	%410 = load i64, i64* %32, align 8
	%411 = icmp sgt i64 %410, 0
	%412 = zext i1 %411 to i8
	%413 = trunc i8 %412 to i1
	br i1 %413, label %if.then-84, label %if.done-85

if.then-84:
	; SelectorExpr
	%414 = load i64, i64* %0, align 8
	%415 = call {i64, i64} @os.write_string(i64 %414, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @str$33, i64 0, i32 0), i64 2}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %if.done-85

if.done-85:
	; SelectorExpr
	%416 = load i64, i64* %0, align 8
	%417 = load %..string, %..string* %31, align 8
	%418 = call {i64, i64} @os.write_string(i64 %416, %..string %417, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	; SelectorExpr
	%419 = load i64, i64* %0, align 8
	%420 = call {i64, i64} @os.write_string(i64 %419, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @str$34, i64 0, i32 0), i64 2}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%421 = load i64, i64* %0, align 8
	; IndexExpr
	; SelectorExpr
	%422 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %30, i64 0, i32 0
	%423 = load {%runtime.Type_Info**, i64}, {%runtime.Type_Info**, i64}* %422, align 8
	%424 = extractvalue {%runtime.Type_Info**, i64} %423, 0
	%425 = load i64, i64* %32, align 8
	%426 = extractvalue {%runtime.Type_Info**, i64} %423, 1
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([35 x i8], [35 x i8]* @str$35, i64 0, i32 0), i64 34}, i64 168, i64 30, i64 %425, i64 %426)
	%427 = getelementptr inbounds %runtime.Type_Info*, %runtime.Type_Info** %424, i64 %425
	%428 = load %runtime.Type_Info*, %runtime.Type_Info** %427, align 8
	call void @runtime.print_type(i64 %421, %runtime.Type_Info* %428, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %for.index.loop-82

for.index.done-86:
	; SelectorExpr
	%429 = load i64, i64* %0, align 8
	%430 = call {i64, i64} @os.write_byte(i64 %429, i8 125, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %typeswitch.done-119

typeswitch.next-87:
	%431 = icmp eq i64 %66, 18
	br i1 %431, label %typeswitch.body-95, label %typeswitch.next-94

typeswitch.body-88:
	%432 = bitcast %..rawptr %67 to %runtime.Type_Info_Union*
	%433 = load %runtime.Type_Info_Union, %runtime.Type_Info_Union* %432, align 8
	store %runtime.Type_Info_Union %433, %runtime.Type_Info_Union* %35
	; SelectorExpr
	%434 = load i64, i64* %0, align 8
	%435 = call {i64, i64} @os.write_string(i64 %434, %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str$36, i64 0, i32 0), i64 7}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	; RangeStmt
	; variant
	%436 = bitcast %runtime.Type_Info** %36 to %..rawptr
	%437 = call %..rawptr @mem.zero(%..rawptr %436, i64 8) noinline
	store %runtime.Type_Info* zeroinitializer, %runtime.Type_Info** %36
	; i
	%438 = bitcast i64* %37 to %..rawptr
	%439 = call %..rawptr @mem.zero(%..rawptr %438, i64 8) noinline
	store i64 zeroinitializer, i64* %37
	; SelectorExpr
	%440 = getelementptr inbounds %runtime.Type_Info_Union, %runtime.Type_Info_Union* %35, i64 0, i32 0
	%441 = load {%runtime.Type_Info**, i64}, {%runtime.Type_Info**, i64}* %440, align 8
	%442 = bitcast i64* %38 to %..rawptr
	%443 = call %..rawptr @mem.zero(%..rawptr %442, i64 8) noinline
	store i64 zeroinitializer, i64* %38
	%444 = extractvalue {%runtime.Type_Info**, i64} %441, 1
	store i64 %444, i64* %38
	%445 = bitcast i64* %39 to %..rawptr
	%446 = call %..rawptr @mem.zero(%..rawptr %445, i64 8) noinline
	store i64 zeroinitializer, i64* %39
	store i64 -1, i64* %39
	br label %for.index.loop-89

for.index.loop-89:
	%447 = load i64, i64* %39, align 8
	%448 = add i64 %447, 1
	store i64 %448, i64* %39
	%449 = load i64, i64* %38, align 8
	%450 = icmp slt i64 %448, %449
	br i1 %450, label %for.index.body-90, label %for.index.done-93

for.index.body-90:
	%451 = load i64, i64* %39, align 8
	%452 = extractvalue {%runtime.Type_Info**, i64} %441, 0
	%453 = getelementptr inbounds %runtime.Type_Info*, %runtime.Type_Info** %452, i64 %451
	%454 = load %runtime.Type_Info*, %runtime.Type_Info** %453, align 8
	store %runtime.Type_Info* %454, %runtime.Type_Info** %36
	store i64 %451, i64* %37
	; IfStmt
	%455 = load i64, i64* %37, align 8
	%456 = icmp sgt i64 %455, 0
	%457 = zext i1 %456 to i8
	%458 = trunc i8 %457 to i1
	br i1 %458, label %if.then-91, label %if.done-92

if.then-91:
	; SelectorExpr
	%459 = load i64, i64* %0, align 8
	%460 = call {i64, i64} @os.write_string(i64 %459, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @str$37, i64 0, i32 0), i64 2}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %if.done-92

if.done-92:
	%461 = load i64, i64* %0, align 8
	%462 = load %runtime.Type_Info*, %runtime.Type_Info** %36, align 8
	call void @runtime.print_type(i64 %461, %runtime.Type_Info* %462, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %for.index.loop-89

for.index.done-93:
	; SelectorExpr
	%463 = load i64, i64* %0, align 8
	%464 = call {i64, i64} @os.write_string(i64 %463, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str$38, i64 0, i32 0), i64 1}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %typeswitch.done-119

typeswitch.next-94:
	%465 = icmp eq i64 %66, 20
	br i1 %465, label %typeswitch.body-102, label %typeswitch.next-101

typeswitch.body-95:
	%466 = bitcast %..rawptr %67 to %runtime.Type_Info_Enum*
	%467 = load %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %466, align 8
	store %runtime.Type_Info_Enum %467, %runtime.Type_Info_Enum* %40
	; SelectorExpr
	%468 = load i64, i64* %0, align 8
	%469 = call {i64, i64} @os.write_string(i64 %468, %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str$39, i64 0, i32 0), i64 5}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%470 = load i64, i64* %0, align 8
	; SelectorExpr
	%471 = getelementptr inbounds %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %40, i64 0, i32 0
	%472 = load %runtime.Type_Info*, %runtime.Type_Info** %471, align 8
	call void @runtime.print_type(i64 %470, %runtime.Type_Info* %472, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	; SelectorExpr
	%473 = load i64, i64* %0, align 8
	%474 = call {i64, i64} @os.write_string(i64 %473, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @str$3a, i64 0, i32 0), i64 2}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	; RangeStmt
	; name
	%475 = bitcast %..string* %41 to %..rawptr
	%476 = call %..rawptr @mem.zero(%..rawptr %475, i64 16) noinline
	store %..string zeroinitializer, %..string* %41
	; i
	%477 = bitcast i64* %42 to %..rawptr
	%478 = call %..rawptr @mem.zero(%..rawptr %477, i64 8) noinline
	store i64 zeroinitializer, i64* %42
	; SelectorExpr
	%479 = getelementptr inbounds %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %40, i64 0, i32 1
	%480 = load {%..string*, i64}, {%..string*, i64}* %479, align 8
	%481 = bitcast i64* %43 to %..rawptr
	%482 = call %..rawptr @mem.zero(%..rawptr %481, i64 8) noinline
	store i64 zeroinitializer, i64* %43
	%483 = extractvalue {%..string*, i64} %480, 1
	store i64 %483, i64* %43
	%484 = bitcast i64* %44 to %..rawptr
	%485 = call %..rawptr @mem.zero(%..rawptr %484, i64 8) noinline
	store i64 zeroinitializer, i64* %44
	store i64 -1, i64* %44
	br label %for.index.loop-96

for.index.loop-96:
	%486 = load i64, i64* %44, align 8
	%487 = add i64 %486, 1
	store i64 %487, i64* %44
	%488 = load i64, i64* %43, align 8
	%489 = icmp slt i64 %487, %488
	br i1 %489, label %for.index.body-97, label %for.index.done-100

for.index.body-97:
	%490 = load i64, i64* %44, align 8
	%491 = extractvalue {%..string*, i64} %480, 0
	%492 = getelementptr inbounds %..string, %..string* %491, i64 %490
	%493 = load %..string, %..string* %492, align 8
	store %..string %493, %..string* %41
	store i64 %490, i64* %42
	; IfStmt
	%494 = load i64, i64* %42, align 8
	%495 = icmp sgt i64 %494, 0
	%496 = zext i1 %495 to i8
	%497 = trunc i8 %496 to i1
	br i1 %497, label %if.then-98, label %if.done-99

if.then-98:
	; SelectorExpr
	%498 = load i64, i64* %0, align 8
	%499 = call {i64, i64} @os.write_string(i64 %498, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @str$3b, i64 0, i32 0), i64 2}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %if.done-99

if.done-99:
	; SelectorExpr
	%500 = load i64, i64* %0, align 8
	%501 = load %..string, %..string* %41, align 8
	%502 = call {i64, i64} @os.write_string(i64 %500, %..string %501, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %for.index.loop-96

for.index.done-100:
	; SelectorExpr
	%503 = load i64, i64* %0, align 8
	%504 = call {i64, i64} @os.write_string(i64 %503, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str$3c, i64 0, i32 0), i64 1}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %typeswitch.done-119

typeswitch.next-101:
	%505 = icmp eq i64 %66, 21
	br i1 %505, label %typeswitch.body-111, label %typeswitch.next-110

typeswitch.body-102:
	%506 = bitcast %..rawptr %67 to %runtime.Type_Info_Bit_Field*
	%507 = load %runtime.Type_Info_Bit_Field, %runtime.Type_Info_Bit_Field* %506, align 8
	store %runtime.Type_Info_Bit_Field %507, %runtime.Type_Info_Bit_Field* %45
	; SelectorExpr
	%508 = load i64, i64* %0, align 8
	%509 = call {i64, i64} @os.write_string(i64 %508, %..string {i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str$3d, i64 0, i32 0), i64 10}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	; IfStmt
	; SelectorExpr
	%510 = load %runtime.Type_Info*, %runtime.Type_Info** %1, align 8
	%511 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %510, i64 0
	%512 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %511, i64 0, i32 1
	%513 = load i64, i64* %512, align 8
	%514 = icmp ne i64 %513, 1
	%515 = zext i1 %514 to i8
	%516 = trunc i8 %515 to i1
	br i1 %516, label %if.then-103, label %if.done-104

if.then-103:
	; SelectorExpr
	%517 = load i64, i64* %0, align 8
	%518 = call {i64, i64} @os.write_string(i64 %517, %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str$3e, i64 0, i32 0), i64 7}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%519 = load i64, i64* %0, align 8
	; SelectorExpr
	%520 = load %runtime.Type_Info*, %runtime.Type_Info** %1, align 8
	%521 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %520, i64 0
	%522 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %521, i64 0, i32 1
	%523 = load i64, i64* %522, align 8
	%524 = bitcast i64 %523 to i64
	call void @runtime.print_u64(i64 %519, i64 %524, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	; SelectorExpr
	%525 = load i64, i64* %0, align 8
	%526 = call {i64, i64} @os.write_byte(i64 %525, i8 32, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %if.done-104

if.done-104:
	; SelectorExpr
	%527 = load i64, i64* %0, align 8
	%528 = call {i64, i64} @os.write_string(i64 %527, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @str$3f, i64 0, i32 0), i64 2}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	; RangeStmt
	; name
	%529 = bitcast %..string* %46 to %..rawptr
	%530 = call %..rawptr @mem.zero(%..rawptr %529, i64 16) noinline
	store %..string zeroinitializer, %..string* %46
	; i
	%531 = bitcast i64* %47 to %..rawptr
	%532 = call %..rawptr @mem.zero(%..rawptr %531, i64 8) noinline
	store i64 zeroinitializer, i64* %47
	; SelectorExpr
	%533 = getelementptr inbounds %runtime.Type_Info_Bit_Field, %runtime.Type_Info_Bit_Field* %45, i64 0, i32 0
	%534 = load {%..string*, i64}, {%..string*, i64}* %533, align 8
	%535 = bitcast i64* %48 to %..rawptr
	%536 = call %..rawptr @mem.zero(%..rawptr %535, i64 8) noinline
	store i64 zeroinitializer, i64* %48
	%537 = extractvalue {%..string*, i64} %534, 1
	store i64 %537, i64* %48
	%538 = bitcast i64* %49 to %..rawptr
	%539 = call %..rawptr @mem.zero(%..rawptr %538, i64 8) noinline
	store i64 zeroinitializer, i64* %49
	store i64 -1, i64* %49
	br label %for.index.loop-105

for.index.loop-105:
	%540 = load i64, i64* %49, align 8
	%541 = add i64 %540, 1
	store i64 %541, i64* %49
	%542 = load i64, i64* %48, align 8
	%543 = icmp slt i64 %541, %542
	br i1 %543, label %for.index.body-106, label %for.index.done-109

for.index.body-106:
	%544 = load i64, i64* %49, align 8
	%545 = extractvalue {%..string*, i64} %534, 0
	%546 = getelementptr inbounds %..string, %..string* %545, i64 %544
	%547 = load %..string, %..string* %546, align 8
	store %..string %547, %..string* %46
	store i64 %544, i64* %47
	; IfStmt
	%548 = load i64, i64* %47, align 8
	%549 = icmp sgt i64 %548, 0
	%550 = zext i1 %549 to i8
	%551 = trunc i8 %550 to i1
	br i1 %551, label %if.then-107, label %if.done-108

if.then-107:
	; SelectorExpr
	%552 = load i64, i64* %0, align 8
	%553 = call {i64, i64} @os.write_string(i64 %552, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @str$40, i64 0, i32 0), i64 2}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %if.done-108

if.done-108:
	; SelectorExpr
	%554 = load i64, i64* %0, align 8
	%555 = load %..string, %..string* %46, align 8
	%556 = call {i64, i64} @os.write_string(i64 %554, %..string %555, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	; SelectorExpr
	%557 = load i64, i64* %0, align 8
	%558 = call {i64, i64} @os.write_string(i64 %557, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @str$41, i64 0, i32 0), i64 2}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%559 = load i64, i64* %0, align 8
	; IndexExpr
	; SelectorExpr
	%560 = getelementptr inbounds %runtime.Type_Info_Bit_Field, %runtime.Type_Info_Bit_Field* %45, i64 0, i32 1
	%561 = load {i32*, i64}, {i32*, i64}* %560, align 8
	%562 = extractvalue {i32*, i64} %561, 0
	%563 = load i64, i64* %47, align 8
	%564 = extractvalue {i32*, i64} %561, 1
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([35 x i8], [35 x i8]* @str$42, i64 0, i32 0), i64 34}, i64 202, i64 32, i64 %563, i64 %564)
	%565 = getelementptr inbounds i32, i32* %562, i64 %563
	%566 = load i32, i32* %565, align 4
	%567 = sext i32 %566 to i64
	call void @runtime.print_u64(i64 %559, i64 %567, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %for.index.loop-105

for.index.done-109:
	; SelectorExpr
	%568 = load i64, i64* %0, align 8
	%569 = call {i64, i64} @os.write_string(i64 %568, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str$43, i64 0, i32 0), i64 1}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %typeswitch.done-119

typeswitch.next-110:
	br label %typeswitch.done-119

typeswitch.body-111:
	%570 = bitcast %..rawptr %67 to %runtime.Type_Info_Bit_Set*
	%571 = load %runtime.Type_Info_Bit_Set, %runtime.Type_Info_Bit_Set* %570, align 8
	store %runtime.Type_Info_Bit_Set %571, %runtime.Type_Info_Bit_Set* %50
	; SelectorExpr
	%572 = load i64, i64* %0, align 8
	%573 = call {i64, i64} @os.write_string(i64 %572, %..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @str$44, i64 0, i32 0), i64 8}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	; TypeSwitchStmt
	; SelectorExpr
	; SelectorExpr
	%574 = getelementptr inbounds %runtime.Type_Info_Bit_Set, %runtime.Type_Info_Bit_Set* %50, i64 0, i32 0
	%575 = load %runtime.Type_Info*, %runtime.Type_Info** %574, align 8
	%576 = call %runtime.Type_Info* @runtime.type_info_base(%runtime.Type_Info* %575)
	%577 = bitcast %runtime.Type_Info** %51 to %..rawptr
	%578 = call %..rawptr @mem.zero(%..rawptr %577, i64 8) noinline
	store %runtime.Type_Info* zeroinitializer, %runtime.Type_Info** %51
	store %runtime.Type_Info* %576, %runtime.Type_Info** %51
	%579 = load %runtime.Type_Info*, %runtime.Type_Info** %51, align 8
	%580 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %579, i64 0
	%581 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %580, i64 0, i32 3
	%582 = load {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %581, align 8
	; get union's tag
	%583 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %581, i64 0, i32 2 ; UnionTagPtr
	%584 = load i64, i64* %583, align 8
	%585 = bitcast {[0 x i64], [72 x i8], i64}* %581 to %..rawptr
	%586 = icmp eq i64 %584, 18
	br i1 %586, label %typeswitch.body-113, label %typeswitch.next-112

typeswitch.next-112:
	%587 = icmp eq i64 %584, 3
	br i1 %587, label %typeswitch.body-115, label %typeswitch.next-114

typeswitch.body-113:
	%588 = bitcast %..rawptr %585 to %runtime.Type_Info_Enum*
	%589 = load %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %588, align 8
	store %runtime.Type_Info_Enum %589, %runtime.Type_Info_Enum* %52
	%590 = load i64, i64* %0, align 8
	; SelectorExpr
	%591 = getelementptr inbounds %runtime.Type_Info_Bit_Set, %runtime.Type_Info_Bit_Set* %50, i64 0, i32 0
	%592 = load %runtime.Type_Info*, %runtime.Type_Info** %591, align 8
	call void @runtime.print_type(i64 %590, %runtime.Type_Info* %592, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %typeswitch.done-116

typeswitch.next-114:
	store {[0 x i64], [72 x i8], i64} %582, {[0 x i64], [72 x i8], i64}* %54
	%593 = load i64, i64* %0, align 8
	; SelectorExpr
	%594 = getelementptr inbounds %runtime.Type_Info_Bit_Set, %runtime.Type_Info_Bit_Set* %50, i64 0, i32 2
	%595 = load i64, i64* %594, align 8
	call void @runtime.print_i64(i64 %593, i64 %595, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	; SelectorExpr
	%596 = load i64, i64* %0, align 8
	%597 = call {i64, i64} @os.write_string(i64 %596, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @str$45, i64 0, i32 0), i64 2}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%598 = load i64, i64* %0, align 8
	; SelectorExpr
	%599 = getelementptr inbounds %runtime.Type_Info_Bit_Set, %runtime.Type_Info_Bit_Set* %50, i64 0, i32 3
	%600 = load i64, i64* %599, align 8
	call void @runtime.print_i64(i64 %598, i64 %600, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %typeswitch.done-116

typeswitch.body-115:
	%601 = bitcast %..rawptr %585 to %runtime.Type_Info_Rune*
	%602 = load %runtime.Type_Info_Rune, %runtime.Type_Info_Rune* %601, align 1
	store %runtime.Type_Info_Rune %602, %runtime.Type_Info_Rune* %53
	; SelectorExpr
	%603 = load i64, i64* %0, align 8
	; SelectorExpr
	%604 = getelementptr inbounds %runtime.Type_Info_Bit_Set, %runtime.Type_Info_Bit_Set* %50, i64 0, i32 2
	%605 = load i64, i64* %604, align 8
	%606 = trunc i64 %605 to i32
	call void @os.write_encoded_rune(i64 %603, i32 %606, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	; SelectorExpr
	%607 = load i64, i64* %0, align 8
	%608 = call {i64, i64} @os.write_string(i64 %607, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @str$46, i64 0, i32 0), i64 2}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	; SelectorExpr
	%609 = load i64, i64* %0, align 8
	; SelectorExpr
	%610 = getelementptr inbounds %runtime.Type_Info_Bit_Set, %runtime.Type_Info_Bit_Set* %50, i64 0, i32 3
	%611 = load i64, i64* %610, align 8
	%612 = trunc i64 %611 to i32
	call void @os.write_encoded_rune(i64 %609, i32 %612, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %typeswitch.done-116

typeswitch.done-116:
	; IfStmt
	; SelectorExpr
	%613 = getelementptr inbounds %runtime.Type_Info_Bit_Set, %runtime.Type_Info_Bit_Set* %50, i64 0, i32 1
	%614 = load %runtime.Type_Info*, %runtime.Type_Info** %613, align 8
	%615 = icmp ne %runtime.Type_Info* %614, zeroinitializer
	%616 = zext i1 %615 to i8
	%617 = trunc i8 %616 to i1
	br i1 %617, label %if.then-117, label %if.done-118

if.then-117:
	; SelectorExpr
	%618 = load i64, i64* %0, align 8
	%619 = call {i64, i64} @os.write_string(i64 %618, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @str$47, i64 0, i32 0), i64 2}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%620 = load i64, i64* %0, align 8
	; SelectorExpr
	%621 = getelementptr inbounds %runtime.Type_Info_Bit_Set, %runtime.Type_Info_Bit_Set* %50, i64 0, i32 1
	%622 = load %runtime.Type_Info*, %runtime.Type_Info** %621, align 8
	call void @runtime.print_type(i64 %620, %runtime.Type_Info* %622, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %if.done-118

if.done-118:
	; SelectorExpr
	%623 = load i64, i64* %0, align 8
	%624 = call {i64, i64} @os.write_byte(i64 %623, i8 93, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %typeswitch.done-119

typeswitch.done-119:
	ret void
}

define i8 @runtime.string_eq(%..string %a, %..string %b) #0 {
decls-0:
	%0 = alloca %..string, align 16
	%1 = alloca %..string, align 16
	store %..string %a, %..string* %0
	store %..string %b, %..string* %1
	; SwitchStmt
	%2 = load %..string, %..string* %0, align 8
	%3 = extractvalue %..string %2, 1
	%4 = load %..string, %..string* %1, align 8
	%5 = extractvalue %..string %4, 1
	%6 = icmp ne i64 %3, %5
	%7 = zext i1 %6 to i8
	%8 = icmp eq i8 1, %7
	br i1 %8, label %switch.case.body-2, label %switch.case.next-1

switch.case.next-1:
	%9 = load %..string, %..string* %0, align 8
	%10 = extractvalue %..string %9, 1
	%11 = icmp eq i64 %10, 0
	%12 = zext i1 %11 to i8
	%13 = icmp eq i8 1, %12
	br i1 %13, label %switch.fall.body-4, label %switch.case.next-3

switch.case.body-2:
	; ReturnStmt
	ret i8 0

switch.case.next-3:
	; IndexExpr
	%14 = load %..string, %..string* %0, align 8
	%15 = extractvalue %..string %14, 0
	%16 = extractvalue %..string %14, 1
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([35 x i8], [35 x i8]* @str$48, i64 0, i32 0), i64 34}, i64 233, i64 10, i64 0, i64 %16)
	%17 = getelementptr inbounds i8, i8* %15, i64 0
	; IndexExpr
	%18 = load %..string, %..string* %1, align 8
	%19 = extractvalue %..string %18, 0
	%20 = extractvalue %..string %18, 1
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([35 x i8], [35 x i8]* @str$49, i64 0, i32 0), i64 34}, i64 233, i64 19, i64 0, i64 %20)
	%21 = getelementptr inbounds i8, i8* %19, i64 0
	%22 = icmp eq i8* %17, %21
	%23 = zext i1 %22 to i8
	%24 = icmp eq i8 1, %23
	br i1 %24, label %switch.fall.body-6, label %switch.case.next-5

switch.fall.body-4:
	; ReturnStmt
	ret i8 1

switch.case.next-5:
	; ReturnStmt
	%25 = load %..string, %..string* %0, align 8
	%26 = load %..string, %..string* %1, align 8
	%27 = call i64 @runtime.string_cmp(%..string %25, %..string %26)
	%28 = icmp eq i64 %27, 0
	%29 = zext i1 %28 to i8
	ret i8 %29

switch.fall.body-6:
	; ReturnStmt
	ret i8 1
}

define i64 @runtime.string_cmp(%..string %a, %..string %b) #0 {
decls-0:
	%0 = alloca %..string, align 16
	%1 = alloca %..string, align 16
	store %..string %a, %..string* %0
	store %..string %b, %..string* %1
	; ReturnStmt
	; SelectorExpr
	; IndexExpr
	%2 = load %..string, %..string* %0, align 8
	%3 = extractvalue %..string %2, 0
	%4 = extractvalue %..string %2, 1
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([35 x i8], [35 x i8]* @str$4a, i64 0, i32 0), i64 34}, i64 239, i64 34, i64 0, i64 %4)
	%5 = getelementptr inbounds i8, i8* %3, i64 0
	; IndexExpr
	%6 = load %..string, %..string* %1, align 8
	%7 = extractvalue %..string %6, 0
	%8 = extractvalue %..string %6, 1
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([35 x i8], [35 x i8]* @str$4b, i64 0, i32 0), i64 34}, i64 239, i64 41, i64 0, i64 %8)
	%9 = getelementptr inbounds i8, i8* %7, i64 0
	; min
	%10 = load %..string, %..string* %1, align 8
	%11 = extractvalue %..string %10, 1
	%12 = load %..string, %..string* %0, align 8
	%13 = extractvalue %..string %12, 1
	%14 = icmp slt i64 %13, %11
	%15 = select i1 %14, i64 %13, i64 %11
	%16 = call i64 @mem.compare_byte_ptrs(i8* %5, i8* %9, i64 %15)
	ret i64 %16
}

define i8 @runtime.string_ne(%..string %a, %..string %b) alwaysinline #1 {
decls-0:
	%0 = alloca %..string, align 16
	%1 = alloca %..string, align 16
	store %..string %a, %..string* %0
	store %..string %b, %..string* %1
	; ReturnStmt
	%2 = load %..string, %..string* %0, align 8
	%3 = load %..string, %..string* %1, align 8
	%4 = call i8 @runtime.string_eq(%..string %2, %..string %3) alwaysinline
	%5 = icmp eq i8 %4, 0
	%6 = zext i1 %5 to i8
	ret i8 %6
}

define i64 @runtime.cstring_len(i8* %s) #0 {
decls-0:
	%0 = alloca i8*, align 16
	%1 = alloca i64, align 16
	%2 = alloca i8*, align 16
	store i8* %s, i8** %0
	; n
	store i64 0, i64* %1
	; ForStmt
	; p
	%3 = load i8*, i8** %0, align 8
	%4 = bitcast i8* %3 to i8*
	store i8* %4, i8** %2
	br label %for.loop-1

for.loop-1:
	%5 = load i8*, i8** %2, align 8
	%6 = icmp ne i8* %5, zeroinitializer
	%7 = zext i1 %6 to i8
	%8 = trunc i8 %7 to i1
	br i1 %8, label %cmp.and-2, label %for.done-4

cmp.and-2:
	%9 = load i8*, i8** %2, align 8
	%10 = getelementptr inbounds i8, i8* %9, i64 0
	%11 = load i8, i8* %10, align 1
	%12 = icmp ne i8 %11, 0
	%13 = zext i1 %12 to i8
	%14 = trunc i8 %13 to i1
	br i1 %14, label %for.body-3, label %for.done-4

for.body-3:
	; AssignStmt
	%15 = load i64, i64* %1, align 8
	%16 = add i64 %15, 1
	store i64 %16, i64* %1
	; AssignStmt
	; SelectorExpr
	%17 = load i8*, i8** %2, align 8
	%18 = call i8* @mem.ptr_offset-4617(i8* %17, i64 1)
	store i8* %18, i8** %2
	br label %for.loop-1

for.done-4:
	; ReturnStmt
	%19 = load i64, i64* %1, align 8
	ret i64 %19
}

define %..string @runtime.cstring_to_string(i8* %s) #0 {
decls-0:
	%0 = alloca i8*, align 16
	%1 = alloca i8*, align 16
	%2 = alloca i64, align 16
	%3 = alloca %mem.Raw_String, align 16
	store i8* %s, i8** %0
	; IfStmt
	%4 = load i8*, i8** %0, align 8
	%5 = bitcast i8* %4 to i8*
	%6 = bitcast %..rawptr null to i8*
	%7 = icmp eq i8* %5, %6
	%8 = zext i1 %7 to i8
	%9 = trunc i8 %8 to i1
	br i1 %9, label %if.then-1, label %if.done-2

if.then-1:
	; ReturnStmt
	ret %..string zeroinitializer

if.done-2:
	; ptr
	%10 = load i8*, i8** %0, align 8
	%11 = bitcast i8* %10 to i8*
	store i8* %11, i8** %1
	; n
	%12 = load i8*, i8** %0, align 8
	%13 = call i64 @runtime.cstring_len(i8* %12)
	store i64 %13, i64* %2
	; ReturnStmt
	; CompoundLit
	%14 = bitcast %mem.Raw_String* %3 to %..rawptr
	%15 = call %..rawptr @mem.zero(%..rawptr %14, i64 16) noinline
	store %mem.Raw_String zeroinitializer, %mem.Raw_String* %3
	store %mem.Raw_String {i8* zeroinitializer, i64 zeroinitializer}, %mem.Raw_String* %3
	%16 = load i8*, i8** %1, align 8
	%17 = getelementptr inbounds %mem.Raw_String, %mem.Raw_String* %3, i64 0, i32 0
	store i8* %16, i8** %17
	%18 = load i64, i64* %2, align 8
	%19 = getelementptr inbounds %mem.Raw_String, %mem.Raw_String* %3, i64 0, i32 1
	store i64 %18, i64* %19
	%20 = load %mem.Raw_String, %mem.Raw_String* %3, align 8
	%21 = bitcast %mem.Raw_String* %3 to %..string*
	%22 = load %..string, %..string* %21, align 8
	ret %..string %22
}

define void @runtime.bounds_check_error(%..string %file, i64 %line, i64 %column, i64 %index, i64 %count) #0 {
decls-0:
	%0 = alloca %..string, align 16
	%1 = alloca i64, align 16
	%2 = alloca i64, align 16
	%3 = alloca i64, align 16
	%4 = alloca i64, align 16
	%5 = alloca i64, align 16
	%6 = alloca %runtime.Source_Code_Location, align 16
	%7 = alloca %runtime.Context, align 16
	%8 = bitcast %runtime.Context* %7 to %..rawptr
	%9 = call %..rawptr @mem.zero(%..rawptr %8, i64 112) noinline
	store %runtime.Context zeroinitializer, %runtime.Context* %7
	%10 = load %runtime.Context, %runtime.Context* @ggv$0, align 8
	store %runtime.Context %10, %runtime.Context* %7
	call void @runtime.__init_context(%runtime.Context* %7)
	%11 = alloca %runtime.Source_Code_Location, align 16
	store %..string %file, %..string* %0
	store i64 %line, i64* %1
	store i64 %column, i64* %2
	store i64 %index, i64* %3
	store i64 %count, i64* %4
	; IfStmt
	%12 = load i64, i64* %3, align 8
	%13 = icmp sle i64 0, %12
	%14 = zext i1 %13 to i8
	%15 = trunc i8 %14 to i1
	br i1 %15, label %cmp.and-1, label %if.done-3

cmp.and-1:
	%16 = load i64, i64* %3, align 8
	%17 = load i64, i64* %4, align 8
	%18 = icmp slt i64 %16, %17
	%19 = zext i1 %18 to i8
	%20 = trunc i8 %19 to i1
	br i1 %20, label %if.then-2, label %if.done-3

if.then-2:
	; ReturnStmt
	ret void

if.done-3:
	; fd
	; SelectorExpr
	%21 = load i64, i64* @os.stderr, align 8
	store i64 %21, i64* %5
	%22 = load i64, i64* %5, align 8
	; CompoundLit
	%23 = bitcast %runtime.Source_Code_Location* %6 to %..rawptr
	%24 = call %..rawptr @mem.zero(%..rawptr %23, i64 48) noinline
	store %runtime.Source_Code_Location zeroinitializer, %runtime.Source_Code_Location* %6
	store %runtime.Source_Code_Location {%..string zeroinitializer, i64 zeroinitializer, i64 zeroinitializer, %..string zeroinitializer}, %runtime.Source_Code_Location* %6
	%25 = load %..string, %..string* %0, align 8
	%26 = getelementptr inbounds %runtime.Source_Code_Location, %runtime.Source_Code_Location* %6, i64 0, i32 0
	store %..string %25, %..string* %26
	%27 = load i64, i64* %1, align 8
	%28 = getelementptr inbounds %runtime.Source_Code_Location, %runtime.Source_Code_Location* %6, i64 0, i32 1
	store i64 %27, i64* %28
	%29 = load i64, i64* %2, align 8
	%30 = getelementptr inbounds %runtime.Source_Code_Location, %runtime.Source_Code_Location* %6, i64 0, i32 2
	store i64 %29, i64* %30
	%31 = load %runtime.Source_Code_Location, %runtime.Source_Code_Location* %6, align 8
	%32 = bitcast %runtime.Source_Code_Location* %11 to %..rawptr
	%33 = call %..rawptr @mem.zero(%..rawptr %32, i64 48) noinline
	store %runtime.Source_Code_Location zeroinitializer, %runtime.Source_Code_Location* %11
	store %runtime.Source_Code_Location %31, %runtime.Source_Code_Location* %11
	call void @runtime.print_caller_location(i64 %22, %runtime.Source_Code_Location* %11, %runtime.Context* noalias nonnull nocapture inreg %7)
	; SelectorExpr
	%34 = load i64, i64* %5, align 8
	%35 = call {i64, i64} @os.write_string(i64 %34, %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str$4c, i64 0, i32 0), i64 7}, %runtime.Context* noalias nonnull nocapture inreg %7)
	%36 = load i64, i64* %5, align 8
	%37 = load i64, i64* %3, align 8
	%38 = bitcast i64 %37 to i64
	call void @runtime.print_i64(i64 %36, i64 %38, %runtime.Context* noalias nonnull nocapture inreg %7)
	; SelectorExpr
	%39 = load i64, i64* %5, align 8
	%40 = call {i64, i64} @os.write_string(i64 %39, %..string {i8* getelementptr inbounds ([27 x i8], [27 x i8]* @str$4d, i64 0, i32 0), i64 26}, %runtime.Context* noalias nonnull nocapture inreg %7)
	%41 = load i64, i64* %5, align 8
	%42 = load i64, i64* %4, align 8
	%43 = bitcast i64 %42 to i64
	call void @runtime.print_i64(i64 %41, i64 %43, %runtime.Context* noalias nonnull nocapture inreg %7)
	; SelectorExpr
	%44 = load i64, i64* %5, align 8
	%45 = call {i64, i64} @os.write_byte(i64 %44, i8 10, %runtime.Context* noalias nonnull nocapture inreg %7)
	call ccc void @llvm.debugtrap()
	ret void
}

define void @runtime.slice_expr_error(%..string %file, i64 %line, i64 %column, i64 %lo, i64 %hi, i64 %len) #0 {
decls-0:
	%0 = alloca %..string, align 16
	%1 = alloca i64, align 16
	%2 = alloca i64, align 16
	%3 = alloca i64, align 16
	%4 = alloca i64, align 16
	%5 = alloca i64, align 16
	%6 = alloca i64, align 16
	%7 = alloca %runtime.Source_Code_Location, align 16
	%8 = alloca %runtime.Context, align 16
	%9 = bitcast %runtime.Context* %8 to %..rawptr
	%10 = call %..rawptr @mem.zero(%..rawptr %9, i64 112) noinline
	store %runtime.Context zeroinitializer, %runtime.Context* %8
	%11 = load %runtime.Context, %runtime.Context* @ggv$0, align 8
	store %runtime.Context %11, %runtime.Context* %8
	call void @runtime.__init_context(%runtime.Context* %8)
	%12 = alloca %runtime.Source_Code_Location, align 16
	store %..string %file, %..string* %0
	store i64 %line, i64* %1
	store i64 %column, i64* %2
	store i64 %lo, i64* %3
	store i64 %hi, i64* %4
	store i64 %len, i64* %5
	; IfStmt
	%13 = load i64, i64* %3, align 8
	%14 = icmp sle i64 0, %13
	%15 = zext i1 %14 to i8
	%16 = trunc i8 %15 to i1
	br i1 %16, label %cmp.and-1, label %if.done-4

cmp.and-1:
	%17 = load i64, i64* %3, align 8
	%18 = load i64, i64* %4, align 8
	%19 = icmp sle i64 %17, %18
	%20 = zext i1 %19 to i8
	%21 = trunc i8 %20 to i1
	br i1 %21, label %cmp.and-2, label %if.done-4

cmp.and-2:
	%22 = load i64, i64* %4, align 8
	%23 = load i64, i64* %5, align 8
	%24 = icmp sle i64 %22, %23
	%25 = zext i1 %24 to i8
	%26 = trunc i8 %25 to i1
	br i1 %26, label %if.then-3, label %if.done-4

if.then-3:
	; ReturnStmt
	ret void

if.done-4:
	; fd
	; SelectorExpr
	%27 = load i64, i64* @os.stderr, align 8
	store i64 %27, i64* %6
	%28 = load i64, i64* %6, align 8
	; CompoundLit
	%29 = bitcast %runtime.Source_Code_Location* %7 to %..rawptr
	%30 = call %..rawptr @mem.zero(%..rawptr %29, i64 48) noinline
	store %runtime.Source_Code_Location zeroinitializer, %runtime.Source_Code_Location* %7
	store %runtime.Source_Code_Location {%..string zeroinitializer, i64 zeroinitializer, i64 zeroinitializer, %..string zeroinitializer}, %runtime.Source_Code_Location* %7
	%31 = load %..string, %..string* %0, align 8
	%32 = getelementptr inbounds %runtime.Source_Code_Location, %runtime.Source_Code_Location* %7, i64 0, i32 0
	store %..string %31, %..string* %32
	%33 = load i64, i64* %1, align 8
	%34 = getelementptr inbounds %runtime.Source_Code_Location, %runtime.Source_Code_Location* %7, i64 0, i32 1
	store i64 %33, i64* %34
	%35 = load i64, i64* %2, align 8
	%36 = getelementptr inbounds %runtime.Source_Code_Location, %runtime.Source_Code_Location* %7, i64 0, i32 2
	store i64 %35, i64* %36
	%37 = load %runtime.Source_Code_Location, %runtime.Source_Code_Location* %7, align 8
	%38 = bitcast %runtime.Source_Code_Location* %12 to %..rawptr
	%39 = call %..rawptr @mem.zero(%..rawptr %38, i64 48) noinline
	store %runtime.Source_Code_Location zeroinitializer, %runtime.Source_Code_Location* %12
	store %runtime.Source_Code_Location %37, %runtime.Source_Code_Location* %12
	call void @runtime.print_caller_location(i64 %28, %runtime.Source_Code_Location* %12, %runtime.Context* noalias nonnull nocapture inreg %8)
	; SelectorExpr
	%40 = load i64, i64* %6, align 8
	%41 = call {i64, i64} @os.write_string(i64 %40, %..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @str$4e, i64 0, i32 0), i64 24}, %runtime.Context* noalias nonnull nocapture inreg %8)
	%42 = load i64, i64* %6, align 8
	%43 = load i64, i64* %3, align 8
	%44 = bitcast i64 %43 to i64
	call void @runtime.print_i64(i64 %42, i64 %44, %runtime.Context* noalias nonnull nocapture inreg %8)
	; SelectorExpr
	%45 = load i64, i64* %6, align 8
	%46 = call {i64, i64} @os.write_string(i64 %45, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str$4f, i64 0, i32 0), i64 1}, %runtime.Context* noalias nonnull nocapture inreg %8)
	%47 = load i64, i64* %6, align 8
	%48 = load i64, i64* %4, align 8
	%49 = bitcast i64 %48 to i64
	call void @runtime.print_i64(i64 %47, i64 %49, %runtime.Context* noalias nonnull nocapture inreg %8)
	; SelectorExpr
	%50 = load i64, i64* %6, align 8
	%51 = call {i64, i64} @os.write_string(i64 %50, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str$50, i64 0, i32 0), i64 1}, %runtime.Context* noalias nonnull nocapture inreg %8)
	%52 = load i64, i64* %6, align 8
	%53 = load i64, i64* %5, align 8
	%54 = bitcast i64 %53 to i64
	call void @runtime.print_i64(i64 %52, i64 %54, %runtime.Context* noalias nonnull nocapture inreg %8)
	; SelectorExpr
	%55 = load i64, i64* %6, align 8
	%56 = call {i64, i64} @os.write_byte(i64 %55, i8 10, %runtime.Context* noalias nonnull nocapture inreg %8)
	call ccc void @llvm.debugtrap()
	ret void
}

define void @runtime.dynamic_array_expr_error(%..string %file, i64 %line, i64 %column, i64 %low, i64 %high, i64 %max) #0 {
decls-0:
	%0 = alloca %..string, align 16
	%1 = alloca i64, align 16
	%2 = alloca i64, align 16
	%3 = alloca i64, align 16
	%4 = alloca i64, align 16
	%5 = alloca i64, align 16
	%6 = alloca i64, align 16
	%7 = alloca %runtime.Source_Code_Location, align 16
	%8 = alloca %runtime.Context, align 16
	%9 = bitcast %runtime.Context* %8 to %..rawptr
	%10 = call %..rawptr @mem.zero(%..rawptr %9, i64 112) noinline
	store %runtime.Context zeroinitializer, %runtime.Context* %8
	%11 = load %runtime.Context, %runtime.Context* @ggv$0, align 8
	store %runtime.Context %11, %runtime.Context* %8
	call void @runtime.__init_context(%runtime.Context* %8)
	%12 = alloca %runtime.Source_Code_Location, align 16
	store %..string %file, %..string* %0
	store i64 %line, i64* %1
	store i64 %column, i64* %2
	store i64 %low, i64* %3
	store i64 %high, i64* %4
	store i64 %max, i64* %5
	; IfStmt
	%13 = load i64, i64* %3, align 8
	%14 = icmp sle i64 0, %13
	%15 = zext i1 %14 to i8
	%16 = trunc i8 %15 to i1
	br i1 %16, label %cmp.and-1, label %if.done-4

cmp.and-1:
	%17 = load i64, i64* %3, align 8
	%18 = load i64, i64* %4, align 8
	%19 = icmp sle i64 %17, %18
	%20 = zext i1 %19 to i8
	%21 = trunc i8 %20 to i1
	br i1 %21, label %cmp.and-2, label %if.done-4

cmp.and-2:
	%22 = load i64, i64* %4, align 8
	%23 = load i64, i64* %5, align 8
	%24 = icmp sle i64 %22, %23
	%25 = zext i1 %24 to i8
	%26 = trunc i8 %25 to i1
	br i1 %26, label %if.then-3, label %if.done-4

if.then-3:
	; ReturnStmt
	ret void

if.done-4:
	; fd
	; SelectorExpr
	%27 = load i64, i64* @os.stderr, align 8
	store i64 %27, i64* %6
	%28 = load i64, i64* %6, align 8
	; CompoundLit
	%29 = bitcast %runtime.Source_Code_Location* %7 to %..rawptr
	%30 = call %..rawptr @mem.zero(%..rawptr %29, i64 48) noinline
	store %runtime.Source_Code_Location zeroinitializer, %runtime.Source_Code_Location* %7
	store %runtime.Source_Code_Location {%..string zeroinitializer, i64 zeroinitializer, i64 zeroinitializer, %..string zeroinitializer}, %runtime.Source_Code_Location* %7
	%31 = load %..string, %..string* %0, align 8
	%32 = getelementptr inbounds %runtime.Source_Code_Location, %runtime.Source_Code_Location* %7, i64 0, i32 0
	store %..string %31, %..string* %32
	%33 = load i64, i64* %1, align 8
	%34 = getelementptr inbounds %runtime.Source_Code_Location, %runtime.Source_Code_Location* %7, i64 0, i32 1
	store i64 %33, i64* %34
	%35 = load i64, i64* %2, align 8
	%36 = getelementptr inbounds %runtime.Source_Code_Location, %runtime.Source_Code_Location* %7, i64 0, i32 2
	store i64 %35, i64* %36
	%37 = load %runtime.Source_Code_Location, %runtime.Source_Code_Location* %7, align 8
	%38 = bitcast %runtime.Source_Code_Location* %12 to %..rawptr
	%39 = call %..rawptr @mem.zero(%..rawptr %38, i64 48) noinline
	store %runtime.Source_Code_Location zeroinitializer, %runtime.Source_Code_Location* %12
	store %runtime.Source_Code_Location %37, %runtime.Source_Code_Location* %12
	call void @runtime.print_caller_location(i64 %28, %runtime.Source_Code_Location* %12, %runtime.Context* noalias nonnull nocapture inreg %8)
	; SelectorExpr
	%40 = load i64, i64* %6, align 8
	%41 = call {i64, i64} @os.write_string(i64 %40, %..string {i8* getelementptr inbounds ([32 x i8], [32 x i8]* @str$51, i64 0, i32 0), i64 31}, %runtime.Context* noalias nonnull nocapture inreg %8)
	%42 = load i64, i64* %6, align 8
	%43 = load i64, i64* %3, align 8
	%44 = bitcast i64 %43 to i64
	call void @runtime.print_i64(i64 %42, i64 %44, %runtime.Context* noalias nonnull nocapture inreg %8)
	; SelectorExpr
	%45 = load i64, i64* %6, align 8
	%46 = call {i64, i64} @os.write_string(i64 %45, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str$52, i64 0, i32 0), i64 1}, %runtime.Context* noalias nonnull nocapture inreg %8)
	%47 = load i64, i64* %6, align 8
	%48 = load i64, i64* %4, align 8
	%49 = bitcast i64 %48 to i64
	call void @runtime.print_i64(i64 %47, i64 %49, %runtime.Context* noalias nonnull nocapture inreg %8)
	; SelectorExpr
	%50 = load i64, i64* %6, align 8
	%51 = call {i64, i64} @os.write_string(i64 %50, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str$53, i64 0, i32 0), i64 1}, %runtime.Context* noalias nonnull nocapture inreg %8)
	%52 = load i64, i64* %6, align 8
	%53 = load i64, i64* %5, align 8
	%54 = bitcast i64 %53 to i64
	call void @runtime.print_i64(i64 %52, i64 %54, %runtime.Context* noalias nonnull nocapture inreg %8)
	; SelectorExpr
	%55 = load i64, i64* %6, align 8
	%56 = call {i64, i64} @os.write_byte(i64 %55, i8 10, %runtime.Context* noalias nonnull nocapture inreg %8)
	call ccc void @llvm.debugtrap()
	ret void
}

define void @runtime.type_assertion_check(i1 %ok, %..string %file, i64 %line, i64 %column, %..typeid %from, %..typeid %to) #0 {
decls-0:
	%0 = alloca i8, align 16
	%1 = alloca %..string, align 16
	%2 = alloca i64, align 16
	%3 = alloca i64, align 16
	%4 = alloca %..typeid, align 16
	%5 = alloca %..typeid, align 16
	%6 = alloca i64, align 16
	%7 = alloca %runtime.Source_Code_Location, align 16
	%8 = alloca %runtime.Context, align 16
	%9 = bitcast %runtime.Context* %8 to %..rawptr
	%10 = call %..rawptr @mem.zero(%..rawptr %9, i64 112) noinline
	store %runtime.Context zeroinitializer, %runtime.Context* %8
	%11 = load %runtime.Context, %runtime.Context* @ggv$0, align 8
	store %runtime.Context %11, %runtime.Context* %8
	call void @runtime.__init_context(%runtime.Context* %8)
	%12 = alloca %runtime.Source_Code_Location, align 16
	%13 = zext i1 %ok to i8
	store i8 %13, i8* %0
	store %..string %file, %..string* %1
	store i64 %line, i64* %2
	store i64 %column, i64* %3
	store %..typeid %from, %..typeid* %4
	store %..typeid %to, %..typeid* %5
	; IfStmt
	%14 = load i8, i8* %0, align 1
	%15 = trunc i8 %14 to i1
	br i1 %15, label %if.then-1, label %if.done-2

if.then-1:
	; ReturnStmt
	ret void

if.done-2:
	; fd
	; SelectorExpr
	%16 = load i64, i64* @os.stderr, align 8
	store i64 %16, i64* %6
	%17 = load i64, i64* %6, align 8
	; CompoundLit
	%18 = bitcast %runtime.Source_Code_Location* %7 to %..rawptr
	%19 = call %..rawptr @mem.zero(%..rawptr %18, i64 48) noinline
	store %runtime.Source_Code_Location zeroinitializer, %runtime.Source_Code_Location* %7
	store %runtime.Source_Code_Location {%..string zeroinitializer, i64 zeroinitializer, i64 zeroinitializer, %..string zeroinitializer}, %runtime.Source_Code_Location* %7
	%20 = load %..string, %..string* %1, align 8
	%21 = getelementptr inbounds %runtime.Source_Code_Location, %runtime.Source_Code_Location* %7, i64 0, i32 0
	store %..string %20, %..string* %21
	%22 = load i64, i64* %2, align 8
	%23 = getelementptr inbounds %runtime.Source_Code_Location, %runtime.Source_Code_Location* %7, i64 0, i32 1
	store i64 %22, i64* %23
	%24 = load i64, i64* %3, align 8
	%25 = getelementptr inbounds %runtime.Source_Code_Location, %runtime.Source_Code_Location* %7, i64 0, i32 2
	store i64 %24, i64* %25
	%26 = load %runtime.Source_Code_Location, %runtime.Source_Code_Location* %7, align 8
	%27 = bitcast %runtime.Source_Code_Location* %12 to %..rawptr
	%28 = call %..rawptr @mem.zero(%..rawptr %27, i64 48) noinline
	store %runtime.Source_Code_Location zeroinitializer, %runtime.Source_Code_Location* %12
	store %runtime.Source_Code_Location %26, %runtime.Source_Code_Location* %12
	call void @runtime.print_caller_location(i64 %17, %runtime.Source_Code_Location* %12, %runtime.Context* noalias nonnull nocapture inreg %8)
	; SelectorExpr
	%29 = load i64, i64* %6, align 8
	%30 = call {i64, i64} @os.write_string(i64 %29, %..string {i8* getelementptr inbounds ([30 x i8], [30 x i8]* @str$54, i64 0, i32 0), i64 29}, %runtime.Context* noalias nonnull nocapture inreg %8)
	%31 = load i64, i64* %6, align 8
	%32 = load %..typeid, %..typeid* %4, align 8
	call void @runtime.print_typeid(i64 %31, %..typeid %32, %runtime.Context* noalias nonnull nocapture inreg %8)
	; SelectorExpr
	%33 = load i64, i64* %6, align 8
	%34 = call {i64, i64} @os.write_string(i64 %33, %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str$55, i64 0, i32 0), i64 4}, %runtime.Context* noalias nonnull nocapture inreg %8)
	%35 = load i64, i64* %6, align 8
	%36 = load %..typeid, %..typeid* %5, align 8
	call void @runtime.print_typeid(i64 %35, %..typeid %36, %runtime.Context* noalias nonnull nocapture inreg %8)
	; SelectorExpr
	%37 = load i64, i64* %6, align 8
	%38 = call {i64, i64} @os.write_byte(i64 %37, i8 10, %runtime.Context* noalias nonnull nocapture inreg %8)
	call ccc void @llvm.debugtrap()
	ret void
}

define {i32, i64} @runtime.string_decode_rune(%..string %s) alwaysinline #1 {
decls-0:
	%0 = alloca %..string, align 16
	%1 = alloca %runtime.Context, align 16
	%2 = bitcast %runtime.Context* %1 to %..rawptr
	%3 = call %..rawptr @mem.zero(%..rawptr %2, i64 112) noinline
	store %runtime.Context zeroinitializer, %runtime.Context* %1
	%4 = load %runtime.Context, %runtime.Context* @ggv$0, align 8
	store %runtime.Context %4, %runtime.Context* %1
	call void @runtime.__init_context(%runtime.Context* %1) alwaysinline
	%5 = alloca {i32, i64}, align 16
	store %..string %s, %..string* %0
	; ReturnStmt
	; SelectorExpr
	%6 = load %..string, %..string* %0, align 8
	%7 = call {i32, i64} @utf8.decode_rune_from_string(%..string %6, %runtime.Context* noalias nonnull nocapture inreg %1) alwaysinline
	%8 = extractvalue {i32, i64} %7, 0
	%9 = extractvalue {i32, i64} %7, 1
	%10 = bitcast {i32, i64}* %5 to %..rawptr
	%11 = call %..rawptr @mem.zero(%..rawptr %10, i64 16) noinline
	store {i32, i64} zeroinitializer, {i32, i64}* %5
	%12 = getelementptr inbounds {i32, i64}, {i32, i64}* %5, i64 0, i32 0
	store i32 %8, i32* %12
	%13 = getelementptr inbounds {i32, i64}, {i32, i64}* %5, i64 0, i32 1
	store i64 %9, i64* %13
	%14 = load {i32, i64}, {i32, i64}* %5, align 8
	ret {i32, i64} %14
}

define void @runtime.make_slice_error_loc(%runtime.Source_Code_Location* %loc, i64 %len) alwaysinline #1 {
decls-0:
	%0 = alloca i64, align 16
	%1 = alloca i64, align 16
	%2 = alloca %runtime.Context, align 16
	%3 = bitcast %runtime.Context* %2 to %..rawptr
	%4 = call %..rawptr @mem.zero(%..rawptr %3, i64 112) noinline
	store %runtime.Context zeroinitializer, %runtime.Context* %2
	%5 = load %runtime.Context, %runtime.Context* @ggv$0, align 8
	store %runtime.Context %5, %runtime.Context* %2
	call void @runtime.__init_context(%runtime.Context* %2) alwaysinline
	%6 = alloca %runtime.Source_Code_Location, align 16
	%7 = load %runtime.Source_Code_Location, %runtime.Source_Code_Location* %loc, align 8
	store i64 %len, i64* %0
	; IfStmt
	%8 = load i64, i64* %0, align 8
	%9 = icmp sle i64 0, %8
	%10 = zext i1 %9 to i8
	%11 = trunc i8 %10 to i1
	br i1 %11, label %if.then-1, label %if.done-2

if.then-1:
	; ReturnStmt
	ret void

if.done-2:
	; fd
	; SelectorExpr
	%12 = load i64, i64* @os.stderr, align 8
	store i64 %12, i64* %1
	%13 = load i64, i64* %1, align 8
	%14 = load %runtime.Source_Code_Location, %runtime.Source_Code_Location* %loc, align 8
	%15 = bitcast %runtime.Source_Code_Location* %6 to %..rawptr
	%16 = call %..rawptr @mem.zero(%..rawptr %15, i64 48) noinline
	store %runtime.Source_Code_Location zeroinitializer, %runtime.Source_Code_Location* %6
	store %runtime.Source_Code_Location %14, %runtime.Source_Code_Location* %6
	call void @runtime.print_caller_location(i64 %13, %runtime.Source_Code_Location* %6, %runtime.Context* noalias nonnull nocapture inreg %2) alwaysinline
	; SelectorExpr
	%17 = load i64, i64* %1, align 8
	%18 = call {i64, i64} @os.write_string(i64 %17, %..string {i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str$56, i64 0, i32 0), i64 32}, %runtime.Context* noalias nonnull nocapture inreg %2) alwaysinline
	%19 = load i64, i64* %1, align 8
	%20 = load i64, i64* %0, align 8
	%21 = bitcast i64 %20 to i64
	call void @runtime.print_i64(i64 %19, i64 %21, %runtime.Context* noalias nonnull nocapture inreg %2) alwaysinline
	; SelectorExpr
	%22 = load i64, i64* %1, align 8
	%23 = call {i64, i64} @os.write_byte(i64 %22, i8 10, %runtime.Context* noalias nonnull nocapture inreg %2) alwaysinline
	call ccc void @llvm.debugtrap() alwaysinline
	ret void
}

define void @runtime.make_dynamic_array_error_loc(%runtime.Source_Code_Location* %loc, i64 %len, i64 %cap) alwaysinline #1 {
decls-0:
	%0 = alloca i64, align 16
	%1 = alloca i64, align 16
	%2 = alloca i64, align 16
	%3 = alloca %runtime.Context, align 16
	%4 = bitcast %runtime.Context* %3 to %..rawptr
	%5 = call %..rawptr @mem.zero(%..rawptr %4, i64 112) noinline
	store %runtime.Context zeroinitializer, %runtime.Context* %3
	%6 = load %runtime.Context, %runtime.Context* @ggv$0, align 8
	store %runtime.Context %6, %runtime.Context* %3
	call void @runtime.__init_context(%runtime.Context* %3) alwaysinline
	%7 = alloca %runtime.Source_Code_Location, align 16
	%8 = load %runtime.Source_Code_Location, %runtime.Source_Code_Location* %loc, align 8
	store i64 %len, i64* %0
	store i64 %cap, i64* %1
	; IfStmt
	%9 = load i64, i64* %0, align 8
	%10 = icmp sle i64 0, %9
	%11 = zext i1 %10 to i8
	%12 = trunc i8 %11 to i1
	br i1 %12, label %cmp.and-1, label %if.done-3

cmp.and-1:
	%13 = load i64, i64* %0, align 8
	%14 = load i64, i64* %1, align 8
	%15 = icmp sle i64 %13, %14
	%16 = zext i1 %15 to i8
	%17 = trunc i8 %16 to i1
	br i1 %17, label %if.then-2, label %if.done-3

if.then-2:
	; ReturnStmt
	ret void

if.done-3:
	; fd
	; SelectorExpr
	%18 = load i64, i64* @os.stderr, align 8
	store i64 %18, i64* %2
	%19 = load i64, i64* %2, align 8
	%20 = load %runtime.Source_Code_Location, %runtime.Source_Code_Location* %loc, align 8
	%21 = bitcast %runtime.Source_Code_Location* %7 to %..rawptr
	%22 = call %..rawptr @mem.zero(%..rawptr %21, i64 48) noinline
	store %runtime.Source_Code_Location zeroinitializer, %runtime.Source_Code_Location* %7
	store %runtime.Source_Code_Location %20, %runtime.Source_Code_Location* %7
	call void @runtime.print_caller_location(i64 %19, %runtime.Source_Code_Location* %7, %runtime.Context* noalias nonnull nocapture inreg %3) alwaysinline
	; SelectorExpr
	%23 = load i64, i64* %2, align 8
	%24 = call {i64, i64} @os.write_string(i64 %23, %..string {i8* getelementptr inbounds ([45 x i8], [45 x i8]* @str$57, i64 0, i32 0), i64 44}, %runtime.Context* noalias nonnull nocapture inreg %3) alwaysinline
	%25 = load i64, i64* %2, align 8
	%26 = load i64, i64* %0, align 8
	%27 = bitcast i64 %26 to i64
	call void @runtime.print_i64(i64 %25, i64 %27, %runtime.Context* noalias nonnull nocapture inreg %3) alwaysinline
	; SelectorExpr
	%28 = load i64, i64* %2, align 8
	%29 = call {i64, i64} @os.write_byte(i64 %28, i8 58, %runtime.Context* noalias nonnull nocapture inreg %3) alwaysinline
	%30 = load i64, i64* %2, align 8
	%31 = load i64, i64* %1, align 8
	%32 = bitcast i64 %31 to i64
	call void @runtime.print_i64(i64 %30, i64 %32, %runtime.Context* noalias nonnull nocapture inreg %3) alwaysinline
	; SelectorExpr
	%33 = load i64, i64* %2, align 8
	%34 = call {i64, i64} @os.write_byte(i64 %33, i8 10, %runtime.Context* noalias nonnull nocapture inreg %3) alwaysinline
	call ccc void @llvm.debugtrap() alwaysinline
	ret void
}

define float @runtime.abs_f32(float %x) alwaysinline #1 {
decls-0:
	%0 = alloca float, align 16
	store float %x, float* %0
	; ReturnStmt
	%1 = load float, float* %0, align 4
	%2 = call ccc float @llvm.fabs.f32(float %1) alwaysinline
	ret float %2
}
declare ccc float @llvm.fabs.f32(float) #0 

define double @runtime.abs_f64(double %x) alwaysinline #1 {
decls-0:
	%0 = alloca double, align 16
	store double %x, double* %0
	; ReturnStmt
	%1 = load double, double* %0, align 8
	%2 = call ccc double @llvm.fabs.f64(double %1) alwaysinline
	ret double %2
}
declare ccc double @llvm.fabs.f64(double) #0 

define %..complex64 @runtime.quo_complex64(%..complex64 %n, %..complex64 %m, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca %..complex64, align 16
	%1 = alloca %..complex64, align 16
	%2 = alloca float, align 16
	%3 = alloca float, align 16
	%4 = alloca float, align 16
	%5 = alloca float, align 16
	%6 = alloca float, align 16
	%7 = alloca float, align 16
	%8 = alloca %..complex64, align 16
	store %..complex64 %n, %..complex64* %0
	store %..complex64 %m, %..complex64* %1
	; e
	%9 = bitcast float* %2 to %..rawptr
	%10 = call %..rawptr @mem.zero(%..rawptr %9, i64 4) noinline
	store float zeroinitializer, float* %2
	; f
	%11 = bitcast float* %3 to %..rawptr
	%12 = call %..rawptr @mem.zero(%..rawptr %11, i64 4) noinline
	store float zeroinitializer, float* %3
	; IfStmt
	; real
	%13 = load %..complex64, %..complex64* %1, align 4
	%14 = extractvalue %..complex64 %13, 0
	; abs
	%15 = call float @runtime.abs_f32(float %14)
	; imag
	%16 = load %..complex64, %..complex64* %1, align 4
	%17 = extractvalue %..complex64 %16, 1
	; abs
	%18 = call float @runtime.abs_f32(float %17)
	%19 = fcmp oge float %15, %18
	%20 = zext i1 %19 to i8
	%21 = trunc i8 %20 to i1
	br i1 %21, label %if.then-1, label %if.else-2

if.then-1:
	; ratio
	; imag
	%22 = load %..complex64, %..complex64* %1, align 4
	%23 = extractvalue %..complex64 %22, 1
	; real
	%24 = load %..complex64, %..complex64* %1, align 4
	%25 = extractvalue %..complex64 %24, 0
	%26 = fdiv float %23, %25
	store float %26, float* %4
	; denom
	; real
	%27 = load %..complex64, %..complex64* %1, align 4
	%28 = extractvalue %..complex64 %27, 0
	%29 = load float, float* %4, align 4
	; imag
	%30 = load %..complex64, %..complex64* %1, align 4
	%31 = extractvalue %..complex64 %30, 1
	%32 = fmul float %29, %31
	%33 = fadd float %28, %32
	store float %33, float* %5
	; AssignStmt
	; real
	%34 = load %..complex64, %..complex64* %0, align 4
	%35 = extractvalue %..complex64 %34, 0
	; imag
	%36 = load %..complex64, %..complex64* %0, align 4
	%37 = extractvalue %..complex64 %36, 1
	%38 = load float, float* %4, align 4
	%39 = fmul float %37, %38
	%40 = fadd float %35, %39
	%41 = load float, float* %5, align 4
	%42 = fdiv float %40, %41
	store float %42, float* %2
	; AssignStmt
	; imag
	%43 = load %..complex64, %..complex64* %0, align 4
	%44 = extractvalue %..complex64 %43, 1
	; real
	%45 = load %..complex64, %..complex64* %0, align 4
	%46 = extractvalue %..complex64 %45, 0
	%47 = load float, float* %4, align 4
	%48 = fmul float %46, %47
	%49 = fsub float %44, %48
	%50 = load float, float* %5, align 4
	%51 = fdiv float %49, %50
	store float %51, float* %3
	br label %if.done-3

if.else-2:
	; ratio
	; real
	%52 = load %..complex64, %..complex64* %1, align 4
	%53 = extractvalue %..complex64 %52, 0
	; imag
	%54 = load %..complex64, %..complex64* %1, align 4
	%55 = extractvalue %..complex64 %54, 1
	%56 = fdiv float %53, %55
	store float %56, float* %6
	; denom
	; imag
	%57 = load %..complex64, %..complex64* %1, align 4
	%58 = extractvalue %..complex64 %57, 1
	%59 = load float, float* %6, align 4
	; real
	%60 = load %..complex64, %..complex64* %1, align 4
	%61 = extractvalue %..complex64 %60, 0
	%62 = fmul float %59, %61
	%63 = fadd float %58, %62
	store float %63, float* %7
	; AssignStmt
	; real
	%64 = load %..complex64, %..complex64* %0, align 4
	%65 = extractvalue %..complex64 %64, 0
	%66 = load float, float* %6, align 4
	%67 = fmul float %65, %66
	; imag
	%68 = load %..complex64, %..complex64* %0, align 4
	%69 = extractvalue %..complex64 %68, 1
	%70 = fadd float %67, %69
	%71 = load float, float* %7, align 4
	%72 = fdiv float %70, %71
	store float %72, float* %2
	; AssignStmt
	; imag
	%73 = load %..complex64, %..complex64* %0, align 4
	%74 = extractvalue %..complex64 %73, 1
	%75 = load float, float* %6, align 4
	%76 = fmul float %74, %75
	; real
	%77 = load %..complex64, %..complex64* %0, align 4
	%78 = extractvalue %..complex64 %77, 0
	%79 = fsub float %76, %78
	%80 = load float, float* %7, align 4
	%81 = fdiv float %79, %80
	store float %81, float* %3
	br label %if.done-3

if.done-3:
	; ReturnStmt
	; complex
	%82 = load float, float* %2, align 4
	%83 = load float, float* %3, align 4
	%84 = bitcast %..complex64* %8 to %..rawptr
	%85 = call %..rawptr @mem.zero(%..rawptr %84, i64 8) noinline
	store %..complex64 zeroinitializer, %..complex64* %8
	%86 = getelementptr inbounds %..complex64, %..complex64* %8, i64 0, i32 0
	store float %82, float* %86
	%87 = getelementptr inbounds %..complex64, %..complex64* %8, i64 0, i32 1
	store float %83, float* %87
	%88 = load %..complex64, %..complex64* %8, align 4
	ret %..complex64 %88
}

define %..complex128 @runtime.quo_complex128(%..complex128* %n, %..complex128* %m, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca double, align 16
	%1 = alloca double, align 16
	%2 = alloca double, align 16
	%3 = alloca double, align 16
	%4 = alloca double, align 16
	%5 = alloca double, align 16
	%6 = alloca %..complex128, align 16
	%7 = load %..complex128, %..complex128* %n, align 8
	%8 = load %..complex128, %..complex128* %m, align 8
	; e
	%9 = bitcast double* %0 to %..rawptr
	%10 = call %..rawptr @mem.zero(%..rawptr %9, i64 8) noinline
	store double zeroinitializer, double* %0
	; f
	%11 = bitcast double* %1 to %..rawptr
	%12 = call %..rawptr @mem.zero(%..rawptr %11, i64 8) noinline
	store double zeroinitializer, double* %1
	; IfStmt
	; real
	%13 = load %..complex128, %..complex128* %m, align 8
	%14 = extractvalue %..complex128 %13, 0
	; abs
	%15 = call double @runtime.abs_f64(double %14)
	; imag
	%16 = load %..complex128, %..complex128* %m, align 8
	%17 = extractvalue %..complex128 %16, 1
	; abs
	%18 = call double @runtime.abs_f64(double %17)
	%19 = fcmp oge double %15, %18
	%20 = zext i1 %19 to i8
	%21 = trunc i8 %20 to i1
	br i1 %21, label %if.then-1, label %if.else-2

if.then-1:
	; ratio
	; imag
	%22 = load %..complex128, %..complex128* %m, align 8
	%23 = extractvalue %..complex128 %22, 1
	; real
	%24 = load %..complex128, %..complex128* %m, align 8
	%25 = extractvalue %..complex128 %24, 0
	%26 = fdiv double %23, %25
	store double %26, double* %2
	; denom
	; real
	%27 = load %..complex128, %..complex128* %m, align 8
	%28 = extractvalue %..complex128 %27, 0
	%29 = load double, double* %2, align 8
	; imag
	%30 = load %..complex128, %..complex128* %m, align 8
	%31 = extractvalue %..complex128 %30, 1
	%32 = fmul double %29, %31
	%33 = fadd double %28, %32
	store double %33, double* %3
	; AssignStmt
	; real
	%34 = load %..complex128, %..complex128* %n, align 8
	%35 = extractvalue %..complex128 %34, 0
	; imag
	%36 = load %..complex128, %..complex128* %n, align 8
	%37 = extractvalue %..complex128 %36, 1
	%38 = load double, double* %2, align 8
	%39 = fmul double %37, %38
	%40 = fadd double %35, %39
	%41 = load double, double* %3, align 8
	%42 = fdiv double %40, %41
	store double %42, double* %0
	; AssignStmt
	; imag
	%43 = load %..complex128, %..complex128* %n, align 8
	%44 = extractvalue %..complex128 %43, 1
	; real
	%45 = load %..complex128, %..complex128* %n, align 8
	%46 = extractvalue %..complex128 %45, 0
	%47 = load double, double* %2, align 8
	%48 = fmul double %46, %47
	%49 = fsub double %44, %48
	%50 = load double, double* %3, align 8
	%51 = fdiv double %49, %50
	store double %51, double* %1
	br label %if.done-3

if.else-2:
	; ratio
	; real
	%52 = load %..complex128, %..complex128* %m, align 8
	%53 = extractvalue %..complex128 %52, 0
	; imag
	%54 = load %..complex128, %..complex128* %m, align 8
	%55 = extractvalue %..complex128 %54, 1
	%56 = fdiv double %53, %55
	store double %56, double* %4
	; denom
	; imag
	%57 = load %..complex128, %..complex128* %m, align 8
	%58 = extractvalue %..complex128 %57, 1
	%59 = load double, double* %4, align 8
	; real
	%60 = load %..complex128, %..complex128* %m, align 8
	%61 = extractvalue %..complex128 %60, 0
	%62 = fmul double %59, %61
	%63 = fadd double %58, %62
	store double %63, double* %5
	; AssignStmt
	; real
	%64 = load %..complex128, %..complex128* %n, align 8
	%65 = extractvalue %..complex128 %64, 0
	%66 = load double, double* %4, align 8
	%67 = fmul double %65, %66
	; imag
	%68 = load %..complex128, %..complex128* %n, align 8
	%69 = extractvalue %..complex128 %68, 1
	%70 = fadd double %67, %69
	%71 = load double, double* %5, align 8
	%72 = fdiv double %70, %71
	store double %72, double* %0
	; AssignStmt
	; imag
	%73 = load %..complex128, %..complex128* %n, align 8
	%74 = extractvalue %..complex128 %73, 1
	%75 = load double, double* %4, align 8
	%76 = fmul double %74, %75
	; real
	%77 = load %..complex128, %..complex128* %n, align 8
	%78 = extractvalue %..complex128 %77, 0
	%79 = fsub double %76, %78
	%80 = load double, double* %5, align 8
	%81 = fdiv double %79, %80
	store double %81, double* %1
	br label %if.done-3

if.done-3:
	; ReturnStmt
	; complex
	%82 = load double, double* %0, align 8
	%83 = load double, double* %1, align 8
	%84 = bitcast %..complex128* %6 to %..rawptr
	%85 = call %..rawptr @mem.zero(%..rawptr %84, i64 16) noinline
	store %..complex128 zeroinitializer, %..complex128* %6
	%86 = getelementptr inbounds %..complex128, %..complex128* %6, i64 0, i32 0
	store double %82, double* %86
	%87 = getelementptr inbounds %..complex128, %..complex128* %6, i64 0, i32 1
	store double %83, double* %87
	%88 = load %..complex128, %..complex128* %6, align 8
	ret %..complex128 %88
}

define %laas.Lexer @laas.make_lexer(%..string %text, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) alwaysinline #1 {
decls-0:
	%0 = alloca %..string, align 16
	%1 = alloca %laas.Lexer, align 16
	store %..string %text, %..string* %0
	; ReturnStmt
	; CompoundLit
	%2 = bitcast %laas.Lexer* %1 to %..rawptr
	%3 = call %..rawptr @mem.zero(%..rawptr %2, i64 56) noinline
	store %laas.Lexer zeroinitializer, %laas.Lexer* %1
	store %laas.Lexer {%..string zeroinitializer, i64 0, i64 0, i64 0, %..any zeroinitializer}, %laas.Lexer* %1
	%4 = load %..string, %..string* %0, align 8
	%5 = getelementptr inbounds %laas.Lexer, %laas.Lexer* %1, i64 0, i32 0
	store %..string %4, %..string* %5
	%6 = getelementptr inbounds %laas.Lexer, %laas.Lexer* %1, i64 0, i32 4
	store %..any zeroinitializer, %..any* %6
	%7 = load %laas.Lexer, %laas.Lexer* %1, align 8
	ret %laas.Lexer %7
}

define i8 @laas.get_next_token(%laas.Lexer* %lexer, %laas.Token* %token, %runtime.Source_Code_Location* %loc, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca %laas.Lexer*, align 16
	%1 = alloca %laas.Token*, align 16
	%2 = alloca i8, align 16
	%3 = alloca i64, align 16
	%4 = alloca i64, align 16
	%5 = alloca i32, align 16
	%6 = alloca %..string, align 16
	%7 = alloca %..any, align 16
	%8 = alloca {%..any*, i64}, align 16
	%9 = alloca [1 x %..any], align 16
	%10 = alloca {%..any*, i64}, align 16
	%11 = alloca %runtime.Source_Code_Location, align 16
	%12 = alloca i64, align 16
	%13 = alloca i8, align 16
	%14 = alloca %..string, align 16
	%15 = alloca %..any, align 16
	%16 = alloca {%..any*, i64}, align 16
	%17 = alloca [1 x %..any], align 16
	%18 = alloca {%..any*, i64}, align 16
	%19 = alloca %runtime.Source_Code_Location, align 16
	%20 = alloca %..string, align 16
	%21 = alloca %..string, align 16
	%22 = alloca %laas.Token, align 16
	%23 = alloca %laas.Token_String, align 16
	%24 = alloca %laas.Token, align 16
	%25 = alloca %..string, align 16
	%26 = alloca %laas.Token_Symbol, align 16
	%27 = alloca i64, align 16
	%28 = alloca %..string, align 16
	%29 = alloca %..string, align 16
	%30 = alloca %laas.Token, align 16
	%31 = alloca %laas.Token_Identifier, align 16
	%32 = alloca i64, align 16
	%33 = alloca i8, align 16
	%34 = alloca %runtime.Source_Code_Location, align 16
	%35 = alloca %..string, align 16
	%36 = alloca %..string, align 16
	%37 = alloca i64, align 16
	%38 = alloca i64, align 16
	%39 = alloca double, align 16
	%40 = alloca %laas.Token, align 16
	%41 = alloca %laas.Token_Number, align 16
	%42 = alloca %..string, align 16
	%43 = alloca %..any, align 16
	%44 = alloca %..any, align 16
	%45 = alloca i32, align 16
	%46 = alloca %..string, align 16
	%47 = alloca %..any, align 16
	%48 = alloca %..any, align 16
	%49 = alloca %..string, align 16
	%50 = alloca %..any, align 16
	%51 = alloca %..any, align 16
	%52 = alloca {%..any*, i64}, align 16
	%53 = alloca [6 x %..any], align 16
	%54 = alloca {%..any*, i64}, align 16
	%55 = alloca %runtime.Source_Code_Location, align 16
	%56 = alloca %runtime.Source_Code_Location, align 16
	store %laas.Lexer* %lexer, %laas.Lexer** %0
	store %laas.Token* %token, %laas.Token** %1
	%57 = load %runtime.Source_Code_Location, %runtime.Source_Code_Location* %loc, align 8
	; IfStmt
	%58 = load %laas.Lexer*, %laas.Lexer** %0, align 8
	%59 = getelementptr inbounds %laas.Lexer, %laas.Lexer* %58, i64 0
	%60 = getelementptr inbounds %laas.Lexer, %laas.Lexer* %59, i64 0, i32 1
	%61 = load i64, i64* %60, align 8
	%62 = load %laas.Lexer*, %laas.Lexer** %0, align 8
	%63 = getelementptr inbounds %laas.Lexer, %laas.Lexer* %62, i64 0
	%64 = getelementptr inbounds %laas.Lexer, %laas.Lexer* %63, i64 0, i32 0
	%65 = load %..string, %..string* %64, align 8
	%66 = extractvalue %..string %65, 1
	%67 = icmp sge i64 %61, %66
	%68 = zext i1 %67 to i8
	%69 = trunc i8 %68 to i1
	br i1 %69, label %if.then-1, label %if.done-2

if.then-1:
	; ReturnStmt
	ret i8 0

if.done-2:
	; had_whitespace_before_token
	store i8 0, i8* %2
	; ForStmt
	br label %for.loop-3

for.loop-3:
	; IndexExpr
	%70 = load %laas.Lexer*, %laas.Lexer** %0, align 8
	%71 = getelementptr inbounds %laas.Lexer, %laas.Lexer* %70, i64 0
	%72 = getelementptr inbounds %laas.Lexer, %laas.Lexer* %71, i64 0, i32 0
	%73 = load %..string, %..string* %72, align 8
	%74 = extractvalue %..string %73, 0
	%75 = extractvalue %..string %73, 1
	%76 = load %laas.Lexer*, %laas.Lexer** %0, align 8
	%77 = getelementptr inbounds %laas.Lexer, %laas.Lexer* %76, i64 0
	%78 = getelementptr inbounds %laas.Lexer, %laas.Lexer* %77, i64 0, i32 1
	%79 = load i64, i64* %78, align 8
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([40 x i8], [40 x i8]* @str$58, i64 0, i32 0), i64 39}, i64 84, i64 32, i64 %79, i64 %75)
	%80 = getelementptr inbounds i8, i8* %74, i64 %79
	%81 = load i8, i8* %80, align 1
	%82 = call i8 @laas._is_whitespace(i8 %81, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%83 = trunc i8 %82 to i1
	br i1 %83, label %for.body-4, label %for.done-7

for.body-4:
	; AssignStmt
	store i8 1, i8* %2
	; IfStmt
	%84 = load %laas.Lexer*, %laas.Lexer** %0, align 8
	%85 = call i8 @laas._inc(%laas.Lexer* %84, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%86 = trunc i8 %85 to i1
	br i1 %86, label %if.done-6, label %if.then-5

if.then-5:
	; ReturnStmt
	ret i8 0

if.done-6:
	br label %for.loop-3

for.done-7:
	; AssignStmt
	%87 = load %laas.Token*, %laas.Token** %1, align 8
	%88 = getelementptr inbounds %laas.Token, %laas.Token* %87, i64 0
	store %laas.Token zeroinitializer, %laas.Token* %88
	; token_start_char
	%89 = load %laas.Lexer*, %laas.Lexer** %0, align 8
	%90 = getelementptr inbounds %laas.Lexer, %laas.Lexer* %89, i64 0
	%91 = getelementptr inbounds %laas.Lexer, %laas.Lexer* %90, i64 0, i32 2
	%92 = load i64, i64* %91, align 8
	store i64 %92, i64* %3
	; token_start_line
	%93 = load %laas.Lexer*, %laas.Lexer** %0, align 8
	%94 = getelementptr inbounds %laas.Lexer, %laas.Lexer* %93, i64 0
	%95 = getelementptr inbounds %laas.Lexer, %laas.Lexer* %94, i64 0, i32 3
	%96 = load i64, i64* %95, align 8
	store i64 %96, i64* %4
	; r
	; IndexExpr
	%97 = load %laas.Lexer*, %laas.Lexer** %0, align 8
	%98 = getelementptr inbounds %laas.Lexer, %laas.Lexer* %97, i64 0
	%99 = getelementptr inbounds %laas.Lexer, %laas.Lexer* %98, i64 0, i32 0
	%100 = load %..string, %..string* %99, align 8
	%101 = extractvalue %..string %100, 0
	%102 = extractvalue %..string %100, 1
	%103 = load %laas.Lexer*, %laas.Lexer** %0, align 8
	%104 = getelementptr inbounds %laas.Lexer, %laas.Lexer* %103, i64 0
	%105 = getelementptr inbounds %laas.Lexer, %laas.Lexer* %104, i64 0, i32 1
	%106 = load i64, i64* %105, align 8
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([40 x i8], [40 x i8]* @str$59, i64 0, i32 0), i64 39}, i64 93, i64 29, i64 %106, i64 %102)
	%107 = getelementptr inbounds i8, i8* %101, i64 %106
	%108 = load i8, i8* %107, align 1
	%109 = zext i8 %108 to i32
	store i32 %109, i32* %5
	; SwitchStmt
	%110 = load i32, i32* %5, align 4
	%111 = icmp eq i32 %110, 34
	br i1 %111, label %switch.case.body-9, label %switch.case.next-8

switch.case.next-8:
	%112 = icmp sle i32 33, %110
	%113 = icmp sle i32 %110, 47
	%114 = zext i1 %112 to i8
	%115 = zext i1 %113 to i8
	%116 = and i8 %114, %115
	%117 = trunc i8 %116 to i1
	br i1 %117, label %switch.fall.body-22, label %switch.case.next-18

switch.case.body-9:
	; IfStmt
	%118 = load %laas.Lexer*, %laas.Lexer** %0, align 8
	%119 = call i8 @laas._inc(%laas.Lexer* %118, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%120 = trunc i8 %119 to i1
	br i1 %120, label %if.done-11, label %if.then-10

if.then-10:
	; SelectorExpr
	%121 = bitcast %..string* %6 to %..rawptr
	%122 = call %..rawptr @mem.zero(%..rawptr %121, i64 16) noinline
	store %..string zeroinitializer, %..string* %6
	store %..string {i8* getelementptr inbounds ([31 x i8], [31 x i8]* @str$5a, i64 0, i32 0), i64 30}, %..string* %6
	%123 = load %..string, %..string* %6, align 8
	%124 = bitcast %..any* %7 to %..rawptr
	%125 = call %..rawptr @mem.zero(%..rawptr %124, i64 16) noinline
	store %..any zeroinitializer, %..any* %7
	%126 = bitcast %..string* %6 to %..rawptr
	%127 = getelementptr inbounds %..any, %..any* %7, i64 0, i32 0
	store %..rawptr %126, %..rawptr* %127
	%128 = getelementptr inbounds %..any, %..any* %7, i64 0, i32 1
	store %..typeid 360287970189639686, %..typeid* %128
	%129 = load %..any, %..any* %7, align 8
	; variadic call argument generation
	%130 = bitcast {%..any*, i64}* %8 to %..rawptr
	%131 = call %..rawptr @mem.zero(%..rawptr %130, i64 16) noinline
	store {%..any*, i64} zeroinitializer, {%..any*, i64}* %8
	%132 = bitcast [1 x %..any]* %9 to %..rawptr
	%133 = call %..rawptr @mem.zero(%..rawptr %132, i64 16) noinline
	store [1 x %..any] zeroinitializer, [1 x %..any]* %9
	%134 = getelementptr inbounds [1 x %..any], [1 x %..any]* %9, i64 0, i32 0
	store %..any %129, %..any* %134
	%135 = getelementptr inbounds [1 x %..any], [1 x %..any]* %9, i64 0, i32 0
	%136 = getelementptr inbounds {%..any*, i64}, {%..any*, i64}* %8, i64 0, i32 0
	store %..any* %135, %..any** %136
	%137 = getelementptr inbounds {%..any*, i64}, {%..any*, i64}* %8, i64 0, i32 1
	store i64 1, i64* %137
	%138 = load {%..any*, i64}, {%..any*, i64}* %8, align 8
	%139 = bitcast {%..any*, i64}* %10 to %..rawptr
	%140 = call %..rawptr @mem.zero(%..rawptr %139, i64 16) noinline
	store {%..any*, i64} zeroinitializer, {%..any*, i64}* %10
	store {%..any*, i64} %138, {%..any*, i64}* %10
	%141 = call %..string @fmt.tprint({%..any*, i64}* %10, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%142 = bitcast %runtime.Source_Code_Location* %11 to %..rawptr
	%143 = call %..rawptr @mem.zero(%..rawptr %142, i64 48) noinline
	store %runtime.Source_Code_Location zeroinitializer, %runtime.Source_Code_Location* %11
	store %runtime.Source_Code_Location {%..string {i8* getelementptr inbounds ([40 x i8], [40 x i8]* @str$5b, i64 0, i32 0), i64 39}, i64 97, i64 5, %..string {i8* getelementptr inbounds ([15 x i8], [15 x i8]* @str$5c, i64 0, i32 0), i64 14}}, %runtime.Source_Code_Location* %11
	call void @runtime.panic(%..string %141, %runtime.Source_Code_Location* %11) noreturn
	; ReturnStmt
	ret i8 0

if.done-11:
	; start
	%144 = load %laas.Lexer*, %laas.Lexer** %0, align 8
	%145 = getelementptr inbounds %laas.Lexer, %laas.Lexer* %144, i64 0
	%146 = getelementptr inbounds %laas.Lexer, %laas.Lexer* %145, i64 0, i32 1
	%147 = load i64, i64* %146, align 8
	store i64 %147, i64* %12
	; escaped
	store i8 0, i8* %13
	; ForStmt
	br label %for.loop-12

for.loop-12:
	; IndexExpr
	%148 = load %laas.Lexer*, %laas.Lexer** %0, align 8
	%149 = getelementptr inbounds %laas.Lexer, %laas.Lexer* %148, i64 0
	%150 = getelementptr inbounds %laas.Lexer, %laas.Lexer* %149, i64 0, i32 0
	%151 = load %..string, %..string* %150, align 8
	%152 = extractvalue %..string %151, 0
	%153 = extractvalue %..string %151, 1
	%154 = load %laas.Lexer*, %laas.Lexer** %0, align 8
	%155 = getelementptr inbounds %laas.Lexer, %laas.Lexer* %154, i64 0
	%156 = getelementptr inbounds %laas.Lexer, %laas.Lexer* %155, i64 0, i32 1
	%157 = load i64, i64* %156, align 8
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([40 x i8], [40 x i8]* @str$5d, i64 0, i32 0), i64 39}, i64 102, i64 19, i64 %157, i64 %153)
	%158 = getelementptr inbounds i8, i8* %152, i64 %157
	%159 = load i8, i8* %158, align 1
	%160 = icmp ne i8 %159, 34
	%161 = zext i1 %160 to i8
	%162 = trunc i8 %161 to i1
	br i1 %162, label %for.body-14, label %cmp.or-13

cmp.or-13:
	%163 = load i8, i8* %13, align 1
	%164 = trunc i8 %163 to i1
	br i1 %164, label %for.body-14, label %for.done-17

for.body-14:
	; AssignStmt
	; IndexExpr
	%165 = load %laas.Lexer*, %laas.Lexer** %0, align 8
	%166 = getelementptr inbounds %laas.Lexer, %laas.Lexer* %165, i64 0
	%167 = getelementptr inbounds %laas.Lexer, %laas.Lexer* %166, i64 0, i32 0
	%168 = load %..string, %..string* %167, align 8
	%169 = extractvalue %..string %168, 0
	%170 = extractvalue %..string %168, 1
	%171 = load %laas.Lexer*, %laas.Lexer** %0, align 8
	%172 = getelementptr inbounds %laas.Lexer, %laas.Lexer* %171, i64 0
	%173 = getelementptr inbounds %laas.Lexer, %laas.Lexer* %172, i64 0, i32 1
	%174 = load i64, i64* %173, align 8
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([40 x i8], [40 x i8]* @str$5e, i64 0, i32 0), i64 39}, i64 103, i64 26, i64 %174, i64 %170)
	%175 = getelementptr inbounds i8, i8* %169, i64 %174
	%176 = load i8, i8* %175, align 1
	%177 = icmp eq i8 %176, 92
	%178 = zext i1 %177 to i8
	store i8 %178, i8* %13
	; IfStmt
	%179 = load %laas.Lexer*, %laas.Lexer** %0, align 8
	%180 = call i8 @laas._inc(%laas.Lexer* %179, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%181 = trunc i8 %180 to i1
	br i1 %181, label %if.done-16, label %if.then-15

if.then-15:
	; SelectorExpr
	%182 = bitcast %..string* %14 to %..rawptr
	%183 = call %..rawptr @mem.zero(%..rawptr %182, i64 16) noinline
	store %..string zeroinitializer, %..string* %14
	store %..string {i8* getelementptr inbounds ([31 x i8], [31 x i8]* @str$5f, i64 0, i32 0), i64 30}, %..string* %14
	%184 = load %..string, %..string* %14, align 8
	%185 = bitcast %..any* %15 to %..rawptr
	%186 = call %..rawptr @mem.zero(%..rawptr %185, i64 16) noinline
	store %..any zeroinitializer, %..any* %15
	%187 = bitcast %..string* %14 to %..rawptr
	%188 = getelementptr inbounds %..any, %..any* %15, i64 0, i32 0
	store %..rawptr %187, %..rawptr* %188
	%189 = getelementptr inbounds %..any, %..any* %15, i64 0, i32 1
	store %..typeid 360287970189639686, %..typeid* %189
	%190 = load %..any, %..any* %15, align 8
	; variadic call argument generation
	%191 = bitcast {%..any*, i64}* %16 to %..rawptr
	%192 = call %..rawptr @mem.zero(%..rawptr %191, i64 16) noinline
	store {%..any*, i64} zeroinitializer, {%..any*, i64}* %16
	%193 = bitcast [1 x %..any]* %17 to %..rawptr
	%194 = call %..rawptr @mem.zero(%..rawptr %193, i64 16) noinline
	store [1 x %..any] zeroinitializer, [1 x %..any]* %17
	%195 = getelementptr inbounds [1 x %..any], [1 x %..any]* %17, i64 0, i32 0
	store %..any %190, %..any* %195
	%196 = getelementptr inbounds [1 x %..any], [1 x %..any]* %17, i64 0, i32 0
	%197 = getelementptr inbounds {%..any*, i64}, {%..any*, i64}* %16, i64 0, i32 0
	store %..any* %196, %..any** %197
	%198 = getelementptr inbounds {%..any*, i64}, {%..any*, i64}* %16, i64 0, i32 1
	store i64 1, i64* %198
	%199 = load {%..any*, i64}, {%..any*, i64}* %16, align 8
	%200 = bitcast {%..any*, i64}* %18 to %..rawptr
	%201 = call %..rawptr @mem.zero(%..rawptr %200, i64 16) noinline
	store {%..any*, i64} zeroinitializer, {%..any*, i64}* %18
	store {%..any*, i64} %199, {%..any*, i64}* %18
	%202 = call %..string @fmt.tprint({%..any*, i64}* %18, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%203 = bitcast %runtime.Source_Code_Location* %19 to %..rawptr
	%204 = call %..rawptr @mem.zero(%..rawptr %203, i64 48) noinline
	store %runtime.Source_Code_Location zeroinitializer, %runtime.Source_Code_Location* %19
	store %runtime.Source_Code_Location {%..string {i8* getelementptr inbounds ([40 x i8], [40 x i8]* @str$60, i64 0, i32 0), i64 39}, i64 106, i64 6, %..string {i8* getelementptr inbounds ([15 x i8], [15 x i8]* @str$61, i64 0, i32 0), i64 14}}, %runtime.Source_Code_Location* %19
	call void @runtime.panic(%..string %202, %runtime.Source_Code_Location* %19) noreturn
	; ReturnStmt
	ret i8 0

if.done-16:
	br label %for.loop-12

for.done-17:
	; token_text
	; SliceExpr
	%205 = load i64, i64* %12, align 8
	%206 = load %laas.Lexer*, %laas.Lexer** %0, align 8
	%207 = getelementptr inbounds %laas.Lexer, %laas.Lexer* %206, i64 0
	%208 = getelementptr inbounds %laas.Lexer, %laas.Lexer* %207, i64 0, i32 1
	%209 = load i64, i64* %208, align 8
	%210 = load %laas.Lexer*, %laas.Lexer** %0, align 8
	%211 = getelementptr inbounds %laas.Lexer, %laas.Lexer* %210, i64 0
	%212 = getelementptr inbounds %laas.Lexer, %laas.Lexer* %211, i64 0, i32 0
	%213 = load %..string, %..string* %212, align 8
	%214 = extractvalue %..string %213, 1
	call void @runtime.slice_expr_error(%..string {i8* getelementptr inbounds ([40 x i8], [40 x i8]* @str$62, i64 0, i32 0), i64 39}, i64 111, i64 28, i64 %205, i64 %209, i64 %214)
	%215 = extractvalue %..string %213, 0
	%216 = getelementptr inbounds i8, i8* %215, i64 %205
	%217 = sub i64 %209, %205
	%218 = bitcast %..string* %21 to %..rawptr
	%219 = call %..rawptr @mem.zero(%..rawptr %218, i64 16) noinline
	store %..string zeroinitializer, %..string* %21
	%220 = getelementptr inbounds %..string, %..string* %21, i64 0, i32 0
	store i8* %216, i8** %220
	%221 = getelementptr inbounds %..string, %..string* %21, i64 0, i32 1
	store i64 %217, i64* %221
	%222 = load %..string, %..string* %21, align 8
	store %..string %222, %..string* %20
	; AssignStmt
	%223 = load %laas.Token*, %laas.Token** %1, align 8
	%224 = getelementptr inbounds %laas.Token, %laas.Token* %223, i64 0
	; CompoundLit
	%225 = bitcast %laas.Token* %22 to %..rawptr
	%226 = call %..rawptr @mem.zero(%..rawptr %225, i64 56) noinline
	store %laas.Token zeroinitializer, %laas.Token* %22
	store %laas.Token {%..string zeroinitializer, {[0 x i64], [32 x i8], i64} zeroinitializer}, %laas.Token* %22
	%227 = load %..string, %..string* %20, align 8
	%228 = getelementptr inbounds %laas.Token, %laas.Token* %22, i64 0, i32 0
	store %..string %227, %..string* %228
	; CompoundLit
	%229 = bitcast %laas.Token_String* %23 to %..rawptr
	%230 = call %..rawptr @mem.zero(%..rawptr %229, i64 16) noinline
	store %laas.Token_String zeroinitializer, %laas.Token_String* %23
	store %laas.Token_String {%..string zeroinitializer}, %laas.Token_String* %23
	%231 = load %..string, %..string* %20, align 8
	%232 = getelementptr inbounds %laas.Token_String, %laas.Token_String* %23, i64 0, i32 0
	store %..string %231, %..string* %232
	%233 = load %laas.Token_String, %laas.Token_String* %23, align 8
	%234 = getelementptr inbounds %laas.Token, %laas.Token* %22, i64 0, i32 1
	%235 = bitcast {[0 x i64], [32 x i8], i64}* %234 to %laas.Token_String*
	store %laas.Token_String %233, %laas.Token_String* %235
	%236 = getelementptr inbounds {[0 x i64], [32 x i8], i64}, {[0 x i64], [32 x i8], i64}* %234, i64 0, i32 2 ; UnionTagPtr
	store i64 3, i64* %236
	%237 = load %laas.Token, %laas.Token* %22, align 8
	store %laas.Token %237, %laas.Token* %224
	br label %switch.done-50

switch.case.next-18:
	%238 = icmp sle i32 58, %110
	%239 = icmp sle i32 %110, 64
	%240 = zext i1 %238 to i8
	%241 = zext i1 %239 to i8
	%242 = and i8 %240, %241
	%243 = trunc i8 %242 to i1
	br i1 %243, label %switch.fall.body-22, label %switch.case.next-19

switch.case.next-19:
	%244 = icmp sle i32 91, %110
	%245 = icmp sle i32 %110, 96
	%246 = zext i1 %244 to i8
	%247 = zext i1 %245 to i8
	%248 = and i8 %246, %247
	%249 = trunc i8 %248 to i1
	br i1 %249, label %switch.fall.body-22, label %switch.case.next-20

switch.case.next-20:
	%250 = icmp sle i32 123, %110
	%251 = icmp sle i32 %110, 126
	%252 = zext i1 %250 to i8
	%253 = zext i1 %251 to i8
	%254 = and i8 %252, %253
	%255 = trunc i8 %254 to i1
	br i1 %255, label %switch.fall.body-22, label %switch.case.next-21

switch.case.next-21:
	%256 = icmp sle i32 65, %110
	%257 = icmp sle i32 %110, 90
	%258 = zext i1 %256 to i8
	%259 = zext i1 %257 to i8
	%260 = and i8 %258, %259
	%261 = trunc i8 %260 to i1
	br i1 %261, label %switch.fall.body-26, label %switch.case.next-23

switch.fall.body-22:
	; AssignStmt
	%262 = load %laas.Token*, %laas.Token** %1, align 8
	%263 = getelementptr inbounds %laas.Token, %laas.Token* %262, i64 0
	; CompoundLit
	%264 = bitcast %laas.Token* %24 to %..rawptr
	%265 = call %..rawptr @mem.zero(%..rawptr %264, i64 56) noinline
	store %laas.Token zeroinitializer, %laas.Token* %24
	store %laas.Token {%..string zeroinitializer, {[0 x i64], [32 x i8], i64} zeroinitializer}, %laas.Token* %24
	; SliceExpr
	%266 = load %laas.Lexer*, %laas.Lexer** %0, align 8
	%267 = getelementptr inbounds %laas.Lexer, %laas.Lexer* %266, i64 0
	%268 = getelementptr inbounds %laas.Lexer, %laas.Lexer* %267, i64 0, i32 1
	%269 = load i64, i64* %268, align 8
	%270 = load %laas.Lexer*, %laas.Lexer** %0, align 8
	%271 = getelementptr inbounds %laas.Lexer, %laas.Lexer* %270, i64 0
	%272 = getelementptr inbounds %laas.Lexer, %laas.Lexer* %271, i64 0, i32 1
	%273 = load i64, i64* %272, align 8
	%274 = load %laas.Lexer*, %laas.Lexer** %0, align 8
	%275 = getelementptr inbounds %laas.Lexer, %laas.Lexer* %274, i64 0
	%276 = getelementptr inbounds %laas.Lexer, %laas.Lexer* %275, i64 0, i32 0
	%277 = load %..string, %..string* %276, align 8
	%278 = extractvalue %..string %277, 1
	call void @runtime.slice_expr_error(%..string {i8* getelementptr inbounds ([40 x i8], [40 x i8]* @str$63, i64 0, i32 0), i64 39}, i64 116, i64 29, i64 %269, i64 %273, i64 %278)
	%279 = extractvalue %..string %277, 0
	%280 = getelementptr inbounds i8, i8* %279, i64 %269
	%281 = sub i64 %273, %269
	%282 = bitcast %..string* %25 to %..rawptr
	%283 = call %..rawptr @mem.zero(%..rawptr %282, i64 16) noinline
	store %..string zeroinitializer, %..string* %25
	%284 = getelementptr inbounds %..string, %..string* %25, i64 0, i32 0
	store i8* %280, i8** %284
	%285 = getelementptr inbounds %..string, %..string* %25, i64 0, i32 1
	store i64 %281, i64* %285
	%286 = load %..string, %..string* %25, align 8
	%287 = getelementptr inbounds %laas.Token, %laas.Token* %24, i64 0, i32 0
	store %..string %286, %..string* %287
	; CompoundLit
	%288 = bitcast %laas.Token_Symbol* %26 to %..rawptr
	%289 = call %..rawptr @mem.zero(%..rawptr %288, i64 4) noinline
	store %laas.Token_Symbol zeroinitializer, %laas.Token_Symbol* %26
	store %laas.Token_Symbol {i32 zeroinitializer}, %laas.Token_Symbol* %26
	%290 = load i32, i32* %5, align 4
	%291 = getelementptr inbounds %laas.Token_Symbol, %laas.Token_Symbol* %26, i64 0, i32 0
	store i32 %290, i32* %291
	%292 = load %laas.Token_Symbol, %laas.Token_Symbol* %26, align 4
	%293 = getelementptr inbounds %laas.Token, %laas.Token* %24, i64 0, i32 1
	%294 = bitcast {[0 x i64], [32 x i8], i64}* %293 to %laas.Token_Symbol*
	store %laas.Token_Symbol %292, %laas.Token_Symbol* %294
	%295 = getelementptr inbounds {[0 x i64], [32 x i8], i64}, {[0 x i64], [32 x i8], i64}* %293, i64 0, i32 2 ; UnionTagPtr
	store i64 4, i64* %295
	%296 = load %laas.Token, %laas.Token* %24, align 8
	store %laas.Token %296, %laas.Token* %263
	br label %switch.done-50

switch.case.next-23:
	%297 = icmp sle i32 97, %110
	%298 = icmp sle i32 %110, 122
	%299 = zext i1 %297 to i8
	%300 = zext i1 %298 to i8
	%301 = and i8 %299, %300
	%302 = trunc i8 %301 to i1
	br i1 %302, label %switch.fall.body-26, label %switch.case.next-24

switch.case.next-24:
	%303 = icmp eq i32 %110, 95
	br i1 %303, label %switch.fall.body-26, label %switch.case.next-25

switch.case.next-25:
	%304 = icmp sle i32 48, %110
	%305 = icmp sle i32 %110, 57
	%306 = zext i1 %304 to i8
	%307 = zext i1 %305 to i8
	%308 = and i8 %306, %307
	%309 = trunc i8 %308 to i1
	br i1 %309, label %switch.fall.body-38, label %switch.case.next-36

switch.fall.body-26:
	; start
	%310 = load %laas.Lexer*, %laas.Lexer** %0, align 8
	%311 = getelementptr inbounds %laas.Lexer, %laas.Lexer* %310, i64 0
	%312 = getelementptr inbounds %laas.Lexer, %laas.Lexer* %311, i64 0, i32 1
	%313 = load i64, i64* %312, align 8
	store i64 %313, i64* %27
	; ForStmt
	br label %for.body-27

for.body-27:
	; SwitchStmt
	; IndexExpr
	%314 = load %laas.Lexer*, %laas.Lexer** %0, align 8
	%315 = getelementptr inbounds %laas.Lexer, %laas.Lexer* %314, i64 0
	%316 = getelementptr inbounds %laas.Lexer, %laas.Lexer* %315, i64 0, i32 0
	%317 = load %..string, %..string* %316, align 8
	%318 = extractvalue %..string %317, 0
	%319 = extractvalue %..string %317, 1
	%320 = load %laas.Lexer*, %laas.Lexer** %0, align 8
	%321 = getelementptr inbounds %laas.Lexer, %laas.Lexer* %320, i64 0
	%322 = getelementptr inbounds %laas.Lexer, %laas.Lexer* %321, i64 0, i32 1
	%323 = load i64, i64* %322, align 8
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([40 x i8], [40 x i8]* @str$64, i64 0, i32 0), i64 39}, i64 123, i64 23, i64 %323, i64 %319)
	%324 = getelementptr inbounds i8, i8* %318, i64 %323
	%325 = load i8, i8* %324, align 1
	%326 = icmp ule i8 65, %325
	%327 = icmp ule i8 %325, 90
	%328 = zext i1 %326 to i8
	%329 = zext i1 %327 to i8
	%330 = and i8 %328, %329
	%331 = trunc i8 %330 to i1
	br i1 %331, label %switch.case.body-32, label %switch.case.next-28

switch.case.next-28:
	%332 = icmp ule i8 97, %325
	%333 = icmp ule i8 %325, 122
	%334 = zext i1 %332 to i8
	%335 = zext i1 %333 to i8
	%336 = and i8 %334, %335
	%337 = trunc i8 %336 to i1
	br i1 %337, label %switch.case.body-32, label %switch.case.next-29

switch.case.next-29:
	%338 = icmp ule i8 48, %325
	%339 = icmp ule i8 %325, 57
	%340 = zext i1 %338 to i8
	%341 = zext i1 %339 to i8
	%342 = and i8 %340, %341
	%343 = trunc i8 %342 to i1
	br i1 %343, label %switch.case.body-32, label %switch.case.next-30

switch.case.next-30:
	%344 = icmp eq i8 %325, 95
	br i1 %344, label %switch.case.body-32, label %switch.case.next-31

switch.case.next-31:
	; break
	br label %for.done-35

switch.case.body-32:
	; IfStmt
	%345 = load %laas.Lexer*, %laas.Lexer** %0, align 8
	%346 = call i8 @laas._inc(%laas.Lexer* %345, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%347 = trunc i8 %346 to i1
	br i1 %347, label %if.done-34, label %if.then-33

if.then-33:
	; break
	br label %for.done-35

if.done-34:
	br label %for.body-27

for.done-35:
	; token_text
	; SliceExpr
	%348 = load i64, i64* %27, align 8
	%349 = load %laas.Lexer*, %laas.Lexer** %0, align 8
	%350 = getelementptr inbounds %laas.Lexer, %laas.Lexer* %349, i64 0
	%351 = getelementptr inbounds %laas.Lexer, %laas.Lexer* %350, i64 0, i32 1
	%352 = load i64, i64* %351, align 8
	%353 = load %laas.Lexer*, %laas.Lexer** %0, align 8
	%354 = getelementptr inbounds %laas.Lexer, %laas.Lexer* %353, i64 0
	%355 = getelementptr inbounds %laas.Lexer, %laas.Lexer* %354, i64 0, i32 0
	%356 = load %..string, %..string* %355, align 8
	%357 = extractvalue %..string %356, 1
	call void @runtime.slice_expr_error(%..string {i8* getelementptr inbounds ([40 x i8], [40 x i8]* @str$65, i64 0, i32 0), i64 39}, i64 134, i64 28, i64 %348, i64 %352, i64 %357)
	%358 = extractvalue %..string %356, 0
	%359 = getelementptr inbounds i8, i8* %358, i64 %348
	%360 = sub i64 %352, %348
	%361 = bitcast %..string* %29 to %..rawptr
	%362 = call %..rawptr @mem.zero(%..rawptr %361, i64 16) noinline
	store %..string zeroinitializer, %..string* %29
	%363 = getelementptr inbounds %..string, %..string* %29, i64 0, i32 0
	store i8* %359, i8** %363
	%364 = getelementptr inbounds %..string, %..string* %29, i64 0, i32 1
	store i64 %360, i64* %364
	%365 = load %..string, %..string* %29, align 8
	store %..string %365, %..string* %28
	%366 = load %laas.Lexer*, %laas.Lexer** %0, align 8
	call void @laas._dec(%laas.Lexer* %366, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	; AssignStmt
	%367 = load %laas.Token*, %laas.Token** %1, align 8
	%368 = getelementptr inbounds %laas.Token, %laas.Token* %367, i64 0
	; CompoundLit
	%369 = bitcast %laas.Token* %30 to %..rawptr
	%370 = call %..rawptr @mem.zero(%..rawptr %369, i64 56) noinline
	store %laas.Token zeroinitializer, %laas.Token* %30
	store %laas.Token {%..string zeroinitializer, {[0 x i64], [32 x i8], i64} zeroinitializer}, %laas.Token* %30
	%371 = load %..string, %..string* %28, align 8
	%372 = getelementptr inbounds %laas.Token, %laas.Token* %30, i64 0, i32 0
	store %..string %371, %..string* %372
	; CompoundLit
	%373 = bitcast %laas.Token_Identifier* %31 to %..rawptr
	%374 = call %..rawptr @mem.zero(%..rawptr %373, i64 16) noinline
	store %laas.Token_Identifier zeroinitializer, %laas.Token_Identifier* %31
	store %laas.Token_Identifier {%..string zeroinitializer}, %laas.Token_Identifier* %31
	%375 = load %..string, %..string* %28, align 8
	%376 = getelementptr inbounds %laas.Token_Identifier, %laas.Token_Identifier* %31, i64 0, i32 0
	store %..string %375, %..string* %376
	%377 = load %laas.Token_Identifier, %laas.Token_Identifier* %31, align 8
	%378 = getelementptr inbounds %laas.Token, %laas.Token* %30, i64 0, i32 1
	%379 = bitcast {[0 x i64], [32 x i8], i64}* %378 to %laas.Token_Identifier*
	store %laas.Token_Identifier %377, %laas.Token_Identifier* %379
	%380 = getelementptr inbounds {[0 x i64], [32 x i8], i64}, {[0 x i64], [32 x i8], i64}* %378, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %380
	%381 = load %laas.Token, %laas.Token* %30, align 8
	store %laas.Token %381, %laas.Token* %368
	br label %switch.done-50

switch.case.next-36:
	%382 = icmp eq i32 %110, 46
	br i1 %382, label %switch.fall.body-38, label %switch.case.next-37

switch.case.next-37:
	; SelectorExpr
	; IndexExpr
	%383 = load %laas.Lexer*, %laas.Lexer** %0, align 8
	%384 = getelementptr inbounds %laas.Lexer, %laas.Lexer* %383, i64 0
	%385 = getelementptr inbounds %laas.Lexer, %laas.Lexer* %384, i64 0, i32 0
	%386 = load %..string, %..string* %385, align 8
	%387 = extractvalue %..string %386, 0
	%388 = extractvalue %..string %386, 1
	%389 = load %laas.Lexer*, %laas.Lexer** %0, align 8
	%390 = getelementptr inbounds %laas.Lexer, %laas.Lexer* %389, i64 0
	%391 = getelementptr inbounds %laas.Lexer, %laas.Lexer* %390, i64 0, i32 1
	%392 = load i64, i64* %391, align 8
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([40 x i8], [40 x i8]* @str$66, i64 0, i32 0), i64 39}, i64 184, i64 55, i64 %392, i64 %388)
	%393 = getelementptr inbounds i8, i8* %387, i64 %392
	%394 = load i8, i8* %393, align 1
	%395 = zext i8 %394 to i32
	%396 = load i64, i64* %4, align 8
	%397 = load i64, i64* %3, align 8
	%398 = bitcast %..string* %42 to %..rawptr
	%399 = call %..rawptr @mem.zero(%..rawptr %398, i64 16) noinline
	store %..string zeroinitializer, %..string* %42
	store %..string {i8* getelementptr inbounds ([15 x i8], [15 x i8]* @str$67, i64 0, i32 0), i64 14}, %..string* %42
	%400 = load %..string, %..string* %42, align 8
	%401 = bitcast %..any* %43 to %..rawptr
	%402 = call %..rawptr @mem.zero(%..rawptr %401, i64 16) noinline
	store %..any zeroinitializer, %..any* %43
	%403 = bitcast %..string* %42 to %..rawptr
	%404 = getelementptr inbounds %..any, %..any* %43, i64 0, i32 0
	store %..rawptr %403, %..rawptr* %404
	%405 = getelementptr inbounds %..any, %..any* %43, i64 0, i32 1
	store %..typeid 360287970189639686, %..typeid* %405
	%406 = load %..any, %..any* %43, align 8
	%407 = bitcast %..any* %44 to %..rawptr
	%408 = call %..rawptr @mem.zero(%..rawptr %407, i64 16) noinline
	store %..any zeroinitializer, %..any* %44
	%409 = bitcast i32* %45 to %..rawptr
	%410 = call %..rawptr @mem.zero(%..rawptr %409, i64 4) noinline
	store i32 zeroinitializer, i32* %45
	store i32 %395, i32* %45
	%411 = bitcast i32* %45 to %..rawptr
	%412 = getelementptr inbounds %..any, %..any* %44, i64 0, i32 0
	store %..rawptr %411, %..rawptr* %412
	%413 = getelementptr inbounds %..any, %..any* %44, i64 0, i32 1
	store %..typeid 4755801206503243838, %..typeid* %413
	%414 = load %..any, %..any* %44, align 8
	%415 = bitcast %..string* %46 to %..rawptr
	%416 = call %..rawptr @mem.zero(%..rawptr %415, i64 16) noinline
	store %..string zeroinitializer, %..string* %46
	store %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str$68, i64 0, i32 0), i64 7}, %..string* %46
	%417 = load %..string, %..string* %46, align 8
	%418 = bitcast %..any* %47 to %..rawptr
	%419 = call %..rawptr @mem.zero(%..rawptr %418, i64 16) noinline
	store %..any zeroinitializer, %..any* %47
	%420 = bitcast %..string* %46 to %..rawptr
	%421 = getelementptr inbounds %..any, %..any* %47, i64 0, i32 0
	store %..rawptr %420, %..rawptr* %421
	%422 = getelementptr inbounds %..any, %..any* %47, i64 0, i32 1
	store %..typeid 360287970189639686, %..typeid* %422
	%423 = load %..any, %..any* %47, align 8
	%424 = bitcast %..any* %48 to %..rawptr
	%425 = call %..rawptr @mem.zero(%..rawptr %424, i64 16) noinline
	store %..any zeroinitializer, %..any* %48
	%426 = bitcast i64* %4 to %..rawptr
	%427 = getelementptr inbounds %..any, %..any* %48, i64 0, i32 0
	store %..rawptr %426, %..rawptr* %427
	%428 = getelementptr inbounds %..any, %..any* %48, i64 0, i32 1
	store %..typeid 4683743612465315848, %..typeid* %428
	%429 = load %..any, %..any* %48, align 8
	%430 = bitcast %..string* %49 to %..rawptr
	%431 = call %..rawptr @mem.zero(%..rawptr %430, i64 16) noinline
	store %..string zeroinitializer, %..string* %49
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str$69, i64 0, i32 0), i64 6}, %..string* %49
	%432 = load %..string, %..string* %49, align 8
	%433 = bitcast %..any* %50 to %..rawptr
	%434 = call %..rawptr @mem.zero(%..rawptr %433, i64 16) noinline
	store %..any zeroinitializer, %..any* %50
	%435 = bitcast %..string* %49 to %..rawptr
	%436 = getelementptr inbounds %..any, %..any* %50, i64 0, i32 0
	store %..rawptr %435, %..rawptr* %436
	%437 = getelementptr inbounds %..any, %..any* %50, i64 0, i32 1
	store %..typeid 360287970189639686, %..typeid* %437
	%438 = load %..any, %..any* %50, align 8
	%439 = bitcast %..any* %51 to %..rawptr
	%440 = call %..rawptr @mem.zero(%..rawptr %439, i64 16) noinline
	store %..any zeroinitializer, %..any* %51
	%441 = bitcast i64* %3 to %..rawptr
	%442 = getelementptr inbounds %..any, %..any* %51, i64 0, i32 0
	store %..rawptr %441, %..rawptr* %442
	%443 = getelementptr inbounds %..any, %..any* %51, i64 0, i32 1
	store %..typeid 4683743612465315848, %..typeid* %443
	%444 = load %..any, %..any* %51, align 8
	; variadic call argument generation
	%445 = bitcast {%..any*, i64}* %52 to %..rawptr
	%446 = call %..rawptr @mem.zero(%..rawptr %445, i64 16) noinline
	store {%..any*, i64} zeroinitializer, {%..any*, i64}* %52
	%447 = bitcast [6 x %..any]* %53 to %..rawptr
	%448 = call %..rawptr @mem.zero(%..rawptr %447, i64 96) noinline
	store [6 x %..any] zeroinitializer, [6 x %..any]* %53
	%449 = getelementptr inbounds [6 x %..any], [6 x %..any]* %53, i64 0, i32 0
	store %..any %406, %..any* %449
	%450 = getelementptr inbounds [6 x %..any], [6 x %..any]* %53, i64 0, i32 1
	store %..any %414, %..any* %450
	%451 = getelementptr inbounds [6 x %..any], [6 x %..any]* %53, i64 0, i32 2
	store %..any %423, %..any* %451
	%452 = getelementptr inbounds [6 x %..any], [6 x %..any]* %53, i64 0, i32 3
	store %..any %429, %..any* %452
	%453 = getelementptr inbounds [6 x %..any], [6 x %..any]* %53, i64 0, i32 4
	store %..any %438, %..any* %453
	%454 = getelementptr inbounds [6 x %..any], [6 x %..any]* %53, i64 0, i32 5
	store %..any %444, %..any* %454
	%455 = getelementptr inbounds [6 x %..any], [6 x %..any]* %53, i64 0, i32 0
	%456 = getelementptr inbounds {%..any*, i64}, {%..any*, i64}* %52, i64 0, i32 0
	store %..any* %455, %..any** %456
	%457 = getelementptr inbounds {%..any*, i64}, {%..any*, i64}* %52, i64 0, i32 1
	store i64 6, i64* %457
	%458 = load {%..any*, i64}, {%..any*, i64}* %52, align 8
	%459 = bitcast {%..any*, i64}* %54 to %..rawptr
	%460 = call %..rawptr @mem.zero(%..rawptr %459, i64 16) noinline
	store {%..any*, i64} zeroinitializer, {%..any*, i64}* %54
	store {%..any*, i64} %458, {%..any*, i64}* %54
	%461 = call i64 @fmt.println({%..any*, i64}* %54, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%462 = bitcast %runtime.Source_Code_Location* %55 to %..rawptr
	%463 = call %..rawptr @mem.zero(%..rawptr %462, i64 48) noinline
	store %runtime.Source_Code_Location zeroinitializer, %runtime.Source_Code_Location* %55
	store %runtime.Source_Code_Location {%..string {i8* getelementptr inbounds ([40 x i8], [40 x i8]* @str$6a, i64 0, i32 0), i64 39}, i64 185, i64 4, %..string {i8* getelementptr inbounds ([15 x i8], [15 x i8]* @str$6b, i64 0, i32 0), i64 14}}, %runtime.Source_Code_Location* %55
	%464 = call i8 @runtime.assert(i1 false, %..string zeroinitializer, %runtime.Source_Code_Location* %55)
	br label %switch.done-50

switch.fall.body-38:
	; start
	%465 = load %laas.Lexer*, %laas.Lexer** %0, align 8
	%466 = getelementptr inbounds %laas.Lexer, %laas.Lexer* %465, i64 0
	%467 = getelementptr inbounds %laas.Lexer, %laas.Lexer* %466, i64 0, i32 1
	%468 = load i64, i64* %467, align 8
	store i64 %468, i64* %32
	; found_a_dot
	store i8 0, i8* %33
	; ForStmt
	br label %for.body-39

for.body-39:
	; SwitchStmt
	; IndexExpr
	%469 = load %laas.Lexer*, %laas.Lexer** %0, align 8
	%470 = getelementptr inbounds %laas.Lexer, %laas.Lexer* %469, i64 0
	%471 = getelementptr inbounds %laas.Lexer, %laas.Lexer* %470, i64 0, i32 0
	%472 = load %..string, %..string* %471, align 8
	%473 = extractvalue %..string %472, 0
	%474 = extractvalue %..string %472, 1
	%475 = load %laas.Lexer*, %laas.Lexer** %0, align 8
	%476 = getelementptr inbounds %laas.Lexer, %laas.Lexer* %475, i64 0
	%477 = getelementptr inbounds %laas.Lexer, %laas.Lexer* %476, i64 0, i32 1
	%478 = load i64, i64* %477, align 8
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([40 x i8], [40 x i8]* @str$6c, i64 0, i32 0), i64 39}, i64 145, i64 23, i64 %478, i64 %474)
	%479 = getelementptr inbounds i8, i8* %473, i64 %478
	%480 = load i8, i8* %479, align 1
	%481 = icmp eq i8 %480, 46
	br i1 %481, label %switch.case.body-41, label %switch.case.next-40

switch.case.next-40:
	%482 = icmp ule i8 48, %480
	%483 = icmp ule i8 %480, 57
	%484 = zext i1 %482 to i8
	%485 = zext i1 %483 to i8
	%486 = and i8 %484, %485
	%487 = trunc i8 %486 to i1
	br i1 %487, label %switch.fall.body-43, label %switch.case.next-42

switch.case.body-41:
	%488 = load i8, i8* %33, align 1
	%489 = icmp eq i8 %488, 0
	%490 = zext i1 %489 to i8
	%491 = trunc i8 %490 to i1
	%492 = bitcast %runtime.Source_Code_Location* %34 to %..rawptr
	%493 = call %..rawptr @mem.zero(%..rawptr %492, i64 48) noinline
	store %runtime.Source_Code_Location zeroinitializer, %runtime.Source_Code_Location* %34
	store %runtime.Source_Code_Location {%..string {i8* getelementptr inbounds ([40 x i8], [40 x i8]* @str$6d, i64 0, i32 0), i64 39}, i64 147, i64 7, %..string {i8* getelementptr inbounds ([15 x i8], [15 x i8]* @str$6e, i64 0, i32 0), i64 14}}, %runtime.Source_Code_Location* %34
	%494 = call i8 @runtime.assert(i1 %491, %..string zeroinitializer, %runtime.Source_Code_Location* %34)
	; AssignStmt
	store i8 1, i8* %33
	; fallthrough
	br label %switch.fall.body-43

switch.case.next-42:
	; break
	br label %for.done-46

switch.fall.body-43:
	; IfStmt
	%495 = load %laas.Lexer*, %laas.Lexer** %0, align 8
	%496 = call i8 @laas._inc(%laas.Lexer* %495, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%497 = trunc i8 %496 to i1
	br i1 %497, label %if.done-45, label %if.then-44

if.then-44:
	; break
	br label %for.done-46

if.done-45:
	br label %for.body-39

for.done-46:
	; token_text
	; SliceExpr
	%498 = load i64, i64* %32, align 8
	%499 = load %laas.Lexer*, %laas.Lexer** %0, align 8
	%500 = getelementptr inbounds %laas.Lexer, %laas.Lexer* %499, i64 0
	%501 = getelementptr inbounds %laas.Lexer, %laas.Lexer* %500, i64 0, i32 1
	%502 = load i64, i64* %501, align 8
	%503 = load %laas.Lexer*, %laas.Lexer** %0, align 8
	%504 = getelementptr inbounds %laas.Lexer, %laas.Lexer* %503, i64 0
	%505 = getelementptr inbounds %laas.Lexer, %laas.Lexer* %504, i64 0, i32 0
	%506 = load %..string, %..string* %505, align 8
	%507 = extractvalue %..string %506, 1
	call void @runtime.slice_expr_error(%..string {i8* getelementptr inbounds ([40 x i8], [40 x i8]* @str$6f, i64 0, i32 0), i64 39}, i64 163, i64 28, i64 %498, i64 %502, i64 %507)
	%508 = extractvalue %..string %506, 0
	%509 = getelementptr inbounds i8, i8* %508, i64 %498
	%510 = sub i64 %502, %498
	%511 = bitcast %..string* %36 to %..rawptr
	%512 = call %..rawptr @mem.zero(%..rawptr %511, i64 16) noinline
	store %..string zeroinitializer, %..string* %36
	%513 = getelementptr inbounds %..string, %..string* %36, i64 0, i32 0
	store i8* %509, i8** %513
	%514 = getelementptr inbounds %..string, %..string* %36, i64 0, i32 1
	store i64 %510, i64* %514
	%515 = load %..string, %..string* %36, align 8
	store %..string %515, %..string* %35
	; int_val
	%516 = bitcast i64* %37 to %..rawptr
	%517 = call %..rawptr @mem.zero(%..rawptr %516, i64 8) noinline
	store i64 zeroinitializer, i64* %37
	; unsigned_int_val
	%518 = bitcast i64* %38 to %..rawptr
	%519 = call %..rawptr @mem.zero(%..rawptr %518, i64 8) noinline
	store i64 zeroinitializer, i64* %38
	; float_val
	%520 = bitcast double* %39 to %..rawptr
	%521 = call %..rawptr @mem.zero(%..rawptr %520, i64 8) noinline
	store double zeroinitializer, double* %39
	; IfStmt
	%522 = load i8, i8* %33, align 1
	%523 = trunc i8 %522 to i1
	br i1 %523, label %if.then-47, label %if.else-48

if.then-47:
	; AssignStmt
	; SelectorExpr
	%524 = load %..string, %..string* %35, align 8
	%525 = call double @strconv.parse_f64(%..string %524, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	store double %525, double* %39
	; AssignStmt
	%526 = load double, double* %39, align 8
	%527 = fptosi double %526 to i64
	store i64 %527, i64* %37
	; AssignStmt
	%528 = load double, double* %39, align 8
	%529 = fptoui double %528 to i64
	store i64 %529, i64* %38
	br label %if.done-49

if.else-48:
	; AssignStmt
	; SelectorExpr
	%530 = load %..string, %..string* %35, align 8
	%531 = call i64 @strconv.parse_u64(%..string %530, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	store i64 %531, i64* %38
	; AssignStmt
	; SelectorExpr
	%532 = load %..string, %..string* %35, align 8
	%533 = call i64 @strconv.parse_i64(%..string %532, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	store i64 %533, i64* %37
	; AssignStmt
	%534 = load i64, i64* %37, align 8
	%535 = sitofp i64 %534 to double
	store double %535, double* %39
	br label %if.done-49

if.done-49:
	%536 = load %laas.Lexer*, %laas.Lexer** %0, align 8
	call void @laas._dec(%laas.Lexer* %536, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	; AssignStmt
	%537 = load %laas.Token*, %laas.Token** %1, align 8
	%538 = getelementptr inbounds %laas.Token, %laas.Token* %537, i64 0
	; CompoundLit
	%539 = bitcast %laas.Token* %40 to %..rawptr
	%540 = call %..rawptr @mem.zero(%..rawptr %539, i64 56) noinline
	store %laas.Token zeroinitializer, %laas.Token* %40
	store %laas.Token {%..string zeroinitializer, {[0 x i64], [32 x i8], i64} zeroinitializer}, %laas.Token* %40
	%541 = load %..string, %..string* %35, align 8
	%542 = getelementptr inbounds %laas.Token, %laas.Token* %40, i64 0, i32 0
	store %..string %541, %..string* %542
	; CompoundLit
	%543 = bitcast %laas.Token_Number* %41 to %..rawptr
	%544 = call %..rawptr @mem.zero(%..rawptr %543, i64 32) noinline
	store %laas.Token_Number zeroinitializer, %laas.Token_Number* %41
	store %laas.Token_Number {i64 zeroinitializer, i64 zeroinitializer, double zeroinitializer, i8 zeroinitializer}, %laas.Token_Number* %41
	%545 = load i64, i64* %37, align 8
	%546 = getelementptr inbounds %laas.Token_Number, %laas.Token_Number* %41, i64 0, i32 0
	store i64 %545, i64* %546
	%547 = load i64, i64* %38, align 8
	%548 = getelementptr inbounds %laas.Token_Number, %laas.Token_Number* %41, i64 0, i32 1
	store i64 %547, i64* %548
	%549 = load double, double* %39, align 8
	%550 = getelementptr inbounds %laas.Token_Number, %laas.Token_Number* %41, i64 0, i32 2
	store double %549, double* %550
	%551 = load i8, i8* %33, align 1
	%552 = getelementptr inbounds %laas.Token_Number, %laas.Token_Number* %41, i64 0, i32 3
	store i8 %551, i8* %552
	%553 = load %laas.Token_Number, %laas.Token_Number* %41, align 8
	%554 = getelementptr inbounds %laas.Token, %laas.Token* %40, i64 0, i32 1
	%555 = bitcast {[0 x i64], [32 x i8], i64}* %554 to %laas.Token_Number*
	store %laas.Token_Number %553, %laas.Token_Number* %555
	%556 = getelementptr inbounds {[0 x i64], [32 x i8], i64}, {[0 x i64], [32 x i8], i64}* %554, i64 0, i32 2 ; UnionTagPtr
	store i64 2, i64* %556
	%557 = load %laas.Token, %laas.Token* %40, align 8
	store %laas.Token %557, %laas.Token* %538
	br label %switch.done-50

switch.done-50:
	%558 = load %laas.Lexer*, %laas.Lexer** %0, align 8
	%559 = call i8 @laas._inc(%laas.Lexer* %558, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	; SelectorExpr
	%560 = load %laas.Token*, %laas.Token** %1, align 8
	%561 = getelementptr inbounds %laas.Token, %laas.Token* %560, i64 0
	%562 = getelementptr inbounds %laas.Token, %laas.Token* %561, i64 0, i32 1
	%563 = load {[0 x i64], [32 x i8], i64}, {[0 x i64], [32 x i8], i64}* %562, align 8
	%564 = extractvalue {[0 x i64], [32 x i8], i64} %563, 2 ; UnionTagValue
	%565 = icmp ne i64 %564, 0
	%566 = zext i1 %565 to i8
	%567 = trunc i8 %566 to i1
	%568 = bitcast %runtime.Source_Code_Location* %56 to %..rawptr
	%569 = call %..rawptr @mem.zero(%..rawptr %568, i64 48) noinline
	store %runtime.Source_Code_Location zeroinitializer, %runtime.Source_Code_Location* %56
	store %runtime.Source_Code_Location {%..string {i8* getelementptr inbounds ([40 x i8], [40 x i8]* @str$70, i64 0, i32 0), i64 39}, i64 191, i64 2, %..string {i8* getelementptr inbounds ([15 x i8], [15 x i8]* @str$71, i64 0, i32 0), i64 14}}, %runtime.Source_Code_Location* %56
	%570 = call i8 @runtime.assert(i1 %567, %..string zeroinitializer, %runtime.Source_Code_Location* %56)
	; ReturnStmt
	ret i8 1
}

define i8 @laas._is_whitespace(i8 %r, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) alwaysinline #1 {
decls-0:
	%0 = alloca i8, align 16
	store i8 %r, i8* %0
	; SwitchStmt
	%1 = load i8, i8* %0, align 1
	%2 = zext i8 %1 to i32
	%3 = icmp eq i32 %2, 32
	br i1 %3, label %switch.case.body-5, label %switch.case.next-1

switch.case.next-1:
	%4 = icmp eq i32 %2, 10
	br i1 %4, label %switch.case.body-5, label %switch.case.next-2

switch.case.next-2:
	%5 = icmp eq i32 %2, 13
	br i1 %5, label %switch.case.body-5, label %switch.case.next-3

switch.case.next-3:
	%6 = icmp eq i32 %2, 9
	br i1 %6, label %switch.case.body-5, label %switch.case.next-4

switch.case.next-4:
	; ReturnStmt
	ret i8 0

switch.case.body-5:
	; ReturnStmt
	ret i8 1
}

define void @laas._dec(%laas.Lexer* %lexer, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) alwaysinline #1 {
decls-0:
	%0 = alloca %laas.Lexer*, align 16
	store %laas.Lexer* %lexer, %laas.Lexer** %0
	; AssignStmt
	%1 = load %laas.Lexer*, %laas.Lexer** %0, align 8
	%2 = getelementptr inbounds %laas.Lexer, %laas.Lexer* %1, i64 0
	%3 = getelementptr inbounds %laas.Lexer, %laas.Lexer* %2, i64 0, i32 1
	%4 = load i64, i64* %3, align 8
	%5 = sub i64 %4, 1
	store i64 %5, i64* %3
	; AssignStmt
	%6 = load %laas.Lexer*, %laas.Lexer** %0, align 8
	%7 = getelementptr inbounds %laas.Lexer, %laas.Lexer* %6, i64 0
	%8 = getelementptr inbounds %laas.Lexer, %laas.Lexer* %7, i64 0, i32 2
	%9 = load i64, i64* %8, align 8
	%10 = sub i64 %9, 1
	store i64 %10, i64* %8
	ret void
}

define i8 @laas._inc(%laas.Lexer* %lexer, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca %laas.Lexer*, align 16
	%1 = alloca i8, align 16
	store %laas.Lexer* %lexer, %laas.Lexer** %0
	; r
	; IndexExpr
	%2 = load %laas.Lexer*, %laas.Lexer** %0, align 8
	%3 = getelementptr inbounds %laas.Lexer, %laas.Lexer* %2, i64 0
	%4 = getelementptr inbounds %laas.Lexer, %laas.Lexer* %3, i64 0, i32 0
	%5 = load %..string, %..string* %4, align 8
	%6 = extractvalue %..string %5, 0
	%7 = extractvalue %..string %5, 1
	%8 = load %laas.Lexer*, %laas.Lexer** %0, align 8
	%9 = getelementptr inbounds %laas.Lexer, %laas.Lexer* %8, i64 0
	%10 = getelementptr inbounds %laas.Lexer, %laas.Lexer* %9, i64 0, i32 1
	%11 = load i64, i64* %10, align 8
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([40 x i8], [40 x i8]* @str$72, i64 0, i32 0), i64 39}, i64 210, i64 18, i64 %11, i64 %7)
	%12 = getelementptr inbounds i8, i8* %6, i64 %11
	%13 = load i8, i8* %12, align 1
	store i8 %13, i8* %1
	; AssignStmt
	%14 = load %laas.Lexer*, %laas.Lexer** %0, align 8
	%15 = getelementptr inbounds %laas.Lexer, %laas.Lexer* %14, i64 0
	%16 = getelementptr inbounds %laas.Lexer, %laas.Lexer* %15, i64 0, i32 1
	%17 = load i64, i64* %16, align 8
	%18 = add i64 %17, 1
	store i64 %18, i64* %16
	; IfStmt
	%19 = load i8, i8* %1, align 1
	%20 = icmp eq i8 %19, 10
	%21 = zext i1 %20 to i8
	%22 = trunc i8 %21 to i1
	br i1 %22, label %if.then-1, label %if.else-2

if.then-1:
	; AssignStmt
	%23 = load %laas.Lexer*, %laas.Lexer** %0, align 8
	%24 = getelementptr inbounds %laas.Lexer, %laas.Lexer* %23, i64 0
	%25 = getelementptr inbounds %laas.Lexer, %laas.Lexer* %24, i64 0, i32 2
	store i64 1, i64* %25
	; AssignStmt
	%26 = load %laas.Lexer*, %laas.Lexer** %0, align 8
	%27 = getelementptr inbounds %laas.Lexer, %laas.Lexer* %26, i64 0
	%28 = getelementptr inbounds %laas.Lexer, %laas.Lexer* %27, i64 0, i32 3
	%29 = load i64, i64* %28, align 8
	%30 = add i64 %29, 1
	store i64 %30, i64* %28
	br label %if.done-6

if.else-2:
	; IfStmt
	%31 = load i8, i8* %1, align 1
	%32 = icmp eq i8 %31, 9
	%33 = zext i1 %32 to i8
	%34 = trunc i8 %33 to i1
	br i1 %34, label %if.then-3, label %if.else-4

if.then-3:
	; AssignStmt
	%35 = load %laas.Lexer*, %laas.Lexer** %0, align 8
	%36 = getelementptr inbounds %laas.Lexer, %laas.Lexer* %35, i64 0
	%37 = getelementptr inbounds %laas.Lexer, %laas.Lexer* %36, i64 0, i32 2
	%38 = load i64, i64* %37, align 8
	%39 = add i64 %38, 4
	store i64 %39, i64* %37
	br label %if.done-5

if.else-4:
	; AssignStmt
	%40 = load %laas.Lexer*, %laas.Lexer** %0, align 8
	%41 = getelementptr inbounds %laas.Lexer, %laas.Lexer* %40, i64 0
	%42 = getelementptr inbounds %laas.Lexer, %laas.Lexer* %41, i64 0, i32 2
	%43 = load i64, i64* %42, align 8
	%44 = add i64 %43, 1
	store i64 %44, i64* %42
	br label %if.done-5

if.done-5:
	br label %if.done-6

if.done-6:
	; ReturnStmt
	%45 = load %laas.Lexer*, %laas.Lexer** %0, align 8
	%46 = getelementptr inbounds %laas.Lexer, %laas.Lexer* %45, i64 0
	%47 = getelementptr inbounds %laas.Lexer, %laas.Lexer* %46, i64 0, i32 1
	%48 = load i64, i64* %47, align 8
	%49 = load %laas.Lexer*, %laas.Lexer** %0, align 8
	%50 = getelementptr inbounds %laas.Lexer, %laas.Lexer* %49, i64 0
	%51 = getelementptr inbounds %laas.Lexer, %laas.Lexer* %50, i64 0, i32 0
	%52 = load %..string, %..string* %51, align 8
	%53 = extractvalue %..string %52, 1
	%54 = icmp slt i64 %48, %53
	%55 = zext i1 %54 to i8
	ret i8 %55
}

define void @laas.main() #0 {
decls-0:
	%0 = alloca %laas.Lexer, align 16
	%1 = alloca %runtime.Context, align 16
	%2 = bitcast %runtime.Context* %1 to %..rawptr
	%3 = call %..rawptr @mem.zero(%..rawptr %2, i64 112) noinline
	store %runtime.Context zeroinitializer, %runtime.Context* %1
	%4 = load %runtime.Context, %runtime.Context* @ggv$0, align 8
	store %runtime.Context %4, %runtime.Context* %1
	call void @runtime.__init_context(%runtime.Context* %1)
	%5 = alloca %laas.Token, align 16
	%6 = alloca %runtime.Source_Code_Location, align 16
	%7 = alloca %..any, align 16
	%8 = alloca {%..any*, i64}, align 16
	%9 = alloca [1 x %..any], align 16
	%10 = alloca {%..any*, i64}, align 16
	%11 = alloca i64, align 16
	%12 = alloca %..any, align 16
	%13 = alloca {%..any*, i64}, align 16
	%14 = alloca [1 x %..any], align 16
	%15 = alloca {%..any*, i64}, align 16
	; lexer
	%16 = call %laas.Lexer @laas.make_lexer(%..string {i8* getelementptr inbounds ([66 x i8], [66 x i8]* @str$73, i64 0, i32 0), i64 65}, %runtime.Context* noalias nonnull nocapture inreg %1)
	store %laas.Lexer %16, %laas.Lexer* %0
	; token
	%17 = bitcast %laas.Token* %5 to %..rawptr
	%18 = call %..rawptr @mem.zero(%..rawptr %17, i64 56) noinline
	store %laas.Token zeroinitializer, %laas.Token* %5
	; ForStmt
	br label %for.loop-1

for.loop-1:
	%19 = bitcast %runtime.Source_Code_Location* %6 to %..rawptr
	%20 = call %..rawptr @mem.zero(%..rawptr %19, i64 48) noinline
	store %runtime.Source_Code_Location zeroinitializer, %runtime.Source_Code_Location* %6
	store %runtime.Source_Code_Location {%..string {i8* getelementptr inbounds ([40 x i8], [40 x i8]* @str$74, i64 0, i32 0), i64 39}, i64 230, i64 6, %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str$75, i64 0, i32 0), i64 4}}, %runtime.Source_Code_Location* %6
	%21 = call i8 @laas.get_next_token(%laas.Lexer* %0, %laas.Token* %5, %runtime.Source_Code_Location* %6, %runtime.Context* noalias nonnull nocapture inreg %1)
	%22 = trunc i8 %21 to i1
	br i1 %22, label %for.body-2, label %for.done-3

for.body-2:
	; SelectorExpr
	%23 = load %laas.Token, %laas.Token* %5, align 8
	%24 = bitcast %..any* %7 to %..rawptr
	%25 = call %..rawptr @mem.zero(%..rawptr %24, i64 16) noinline
	store %..any zeroinitializer, %..any* %7
	%26 = bitcast %laas.Token* %5 to %..rawptr
	%27 = getelementptr inbounds %..any, %..any* %7, i64 0, i32 0
	store %..rawptr %26, %..rawptr* %27
	%28 = getelementptr inbounds %..any, %..any* %7, i64 0, i32 1
	store %..typeid 3386706919782612996, %..typeid* %28
	%29 = load %..any, %..any* %7, align 8
	; variadic call argument generation
	%30 = bitcast {%..any*, i64}* %8 to %..rawptr
	%31 = call %..rawptr @mem.zero(%..rawptr %30, i64 16) noinline
	store {%..any*, i64} zeroinitializer, {%..any*, i64}* %8
	%32 = bitcast [1 x %..any]* %9 to %..rawptr
	%33 = call %..rawptr @mem.zero(%..rawptr %32, i64 16) noinline
	store [1 x %..any] zeroinitializer, [1 x %..any]* %9
	%34 = getelementptr inbounds [1 x %..any], [1 x %..any]* %9, i64 0, i32 0
	store %..any %29, %..any* %34
	%35 = getelementptr inbounds [1 x %..any], [1 x %..any]* %9, i64 0, i32 0
	%36 = getelementptr inbounds {%..any*, i64}, {%..any*, i64}* %8, i64 0, i32 0
	store %..any* %35, %..any** %36
	%37 = getelementptr inbounds {%..any*, i64}, {%..any*, i64}* %8, i64 0, i32 1
	store i64 1, i64* %37
	%38 = load {%..any*, i64}, {%..any*, i64}* %8, align 8
	%39 = bitcast {%..any*, i64}* %10 to %..rawptr
	%40 = call %..rawptr @mem.zero(%..rawptr %39, i64 16) noinline
	store {%..any*, i64} zeroinitializer, {%..any*, i64}* %10
	store {%..any*, i64} %38, {%..any*, i64}* %10
	%41 = call i64 @fmt.println({%..any*, i64}* %10, %runtime.Context* noalias nonnull nocapture inreg %1)
	br label %for.loop-1

for.done-3:
	; SelectorExpr
	%42 = bitcast i64* %11 to %..rawptr
	%43 = call %..rawptr @mem.zero(%..rawptr %42, i64 8) noinline
	store i64 zeroinitializer, i64* %11
	store i64 123, i64* %11
	%44 = load i64, i64* %11, align 8
	%45 = bitcast %..any* %12 to %..rawptr
	%46 = call %..rawptr @mem.zero(%..rawptr %45, i64 16) noinline
	store %..any zeroinitializer, %..any* %12
	%47 = bitcast i64* %11 to %..rawptr
	%48 = getelementptr inbounds %..any, %..any* %12, i64 0, i32 0
	store %..rawptr %47, %..rawptr* %48
	%49 = getelementptr inbounds %..any, %..any* %12, i64 0, i32 1
	store %..typeid 4683743612465315848, %..typeid* %49
	%50 = load %..any, %..any* %12, align 8
	; variadic call argument generation
	%51 = bitcast {%..any*, i64}* %13 to %..rawptr
	%52 = call %..rawptr @mem.zero(%..rawptr %51, i64 16) noinline
	store {%..any*, i64} zeroinitializer, {%..any*, i64}* %13
	%53 = bitcast [1 x %..any]* %14 to %..rawptr
	%54 = call %..rawptr @mem.zero(%..rawptr %53, i64 16) noinline
	store [1 x %..any] zeroinitializer, [1 x %..any]* %14
	%55 = getelementptr inbounds [1 x %..any], [1 x %..any]* %14, i64 0, i32 0
	store %..any %50, %..any* %55
	%56 = getelementptr inbounds [1 x %..any], [1 x %..any]* %14, i64 0, i32 0
	%57 = getelementptr inbounds {%..any*, i64}, {%..any*, i64}* %13, i64 0, i32 0
	store %..any* %56, %..any** %57
	%58 = getelementptr inbounds {%..any*, i64}, {%..any*, i64}* %13, i64 0, i32 1
	store i64 1, i64* %58
	%59 = load {%..any*, i64}, {%..any*, i64}* %13, align 8
	%60 = bitcast {%..any*, i64}* %15 to %..rawptr
	%61 = call %..rawptr @mem.zero(%..rawptr %60, i64 16) noinline
	store {%..any*, i64} zeroinitializer, {%..any*, i64}* %15
	store {%..any*, i64} %59, {%..any*, i64}* %15
	%62 = call i64 @fmt.println({%..any*, i64}* %15, %runtime.Context* noalias nonnull nocapture inreg %1)
	ret void
}

define {i64, i64} @os.write_string(i64 %fd, %..string %str, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca i64, align 16
	%1 = alloca %..string, align 16
	%2 = alloca i8*, align 16
	%3 = alloca {i8*, i64}, align 16
	%4 = alloca {i8*, i64}, align 16
	%5 = alloca {i64, i64}, align 16
	store i64 %fd, i64* %0
	store %..string %str, %..string* %1
	; ReturnStmt
	%6 = load i64, i64* %0, align 8
	%7 = load %..string, %..string* %1, align 8
	%8 = extractvalue %..string %7, 0
	%9 = bitcast i8** %2 to %..rawptr
	%10 = call %..rawptr @mem.zero(%..rawptr %9, i64 8) noinline
	store i8* zeroinitializer, i8** %2
	store i8* %8, i8** %2
	%11 = extractvalue %..string %7, 1
	%12 = sub i64 %11, 0
	%13 = load i8*, i8** %2, align 8
	%14 = getelementptr inbounds i8, i8* %13, i64 0
	%15 = bitcast {i8*, i64}* %3 to %..rawptr
	%16 = call %..rawptr @mem.zero(%..rawptr %15, i64 16) noinline
	store {i8*, i64} zeroinitializer, {i8*, i64}* %3
	%17 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %3, i64 0, i32 0
	store i8* %14, i8** %17
	%18 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %3, i64 0, i32 1
	store i64 %12, i64* %18
	%19 = load {i8*, i64}, {i8*, i64}* %3, align 8
	%20 = bitcast {i8*, i64}* %4 to %..rawptr
	%21 = call %..rawptr @mem.zero(%..rawptr %20, i64 16) noinline
	store {i8*, i64} zeroinitializer, {i8*, i64}* %4
	store {i8*, i64} %19, {i8*, i64}* %4
	%22 = call {i64, i64} @os.write(i64 %6, {i8*, i64}* %4, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%23 = extractvalue {i64, i64} %22, 0
	%24 = extractvalue {i64, i64} %22, 1
	%25 = bitcast {i64, i64}* %5 to %..rawptr
	%26 = call %..rawptr @mem.zero(%..rawptr %25, i64 16) noinline
	store {i64, i64} zeroinitializer, {i64, i64}* %5
	%27 = getelementptr inbounds {i64, i64}, {i64, i64}* %5, i64 0, i32 0
	store i64 %23, i64* %27
	%28 = getelementptr inbounds {i64, i64}, {i64, i64}* %5, i64 0, i32 1
	store i64 %24, i64* %28
	%29 = load {i64, i64}, {i64, i64}* %5, align 8
	ret {i64, i64} %29
}

define {i64, i64} @os.write_byte(i64 %fd, i8 %b, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca i64, align 16
	%1 = alloca i8, align 16
	%2 = alloca {i8*, i64}, align 16
	%3 = alloca {i8*, i64}, align 16
	%4 = alloca {i64, i64}, align 16
	store i64 %fd, i64* %0
	store i8 %b, i8* %1
	; ReturnStmt
	%5 = load i64, i64* %0, align 8
	; CompoundLit
	%6 = bitcast {i8*, i64}* %2 to %..rawptr
	%7 = call %..rawptr @mem.zero(%..rawptr %6, i64 16) noinline
	store {i8*, i64} zeroinitializer, {i8*, i64}* %2
	%8 = getelementptr inbounds [1 x i8], [1 x i8]* @csba$0, i64 0, i32 0
	%9 = load i8, i8* %1, align 1
	%10 = getelementptr inbounds i8, i8* %8, i64 0
	store i8 %9, i8* %10
	%11 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %2, i64 0, i32 0
	store i8* %8, i8** %11
	%12 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %2, i64 0, i32 1
	store i64 1, i64* %12
	%13 = load {i8*, i64}, {i8*, i64}* %2, align 8
	%14 = bitcast {i8*, i64}* %3 to %..rawptr
	%15 = call %..rawptr @mem.zero(%..rawptr %14, i64 16) noinline
	store {i8*, i64} zeroinitializer, {i8*, i64}* %3
	store {i8*, i64} %13, {i8*, i64}* %3
	%16 = call {i64, i64} @os.write(i64 %5, {i8*, i64}* %3, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%17 = extractvalue {i64, i64} %16, 0
	%18 = extractvalue {i64, i64} %16, 1
	%19 = bitcast {i64, i64}* %4 to %..rawptr
	%20 = call %..rawptr @mem.zero(%..rawptr %19, i64 16) noinline
	store {i64, i64} zeroinitializer, {i64, i64}* %4
	%21 = getelementptr inbounds {i64, i64}, {i64, i64}* %4, i64 0, i32 0
	store i64 %17, i64* %21
	%22 = getelementptr inbounds {i64, i64}, {i64, i64}* %4, i64 0, i32 1
	store i64 %18, i64* %22
	%23 = load {i64, i64}, {i64, i64}* %4, align 8
	ret {i64, i64} %23
}

define {i64, i64} @os.write_rune(i64 %fd, i32 %r, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca i64, align 16
	%1 = alloca i32, align 16
	%2 = alloca {i64, i64}, align 16
	%3 = alloca [4 x i8], align 16
	%4 = alloca i64, align 16
	%5 = alloca {i8*, i64}, align 16
	%6 = alloca {i8*, i64}, align 16
	%7 = alloca {i64, i64}, align 16
	store i64 %fd, i64* %0
	store i32 %r, i32* %1
	; IfStmt
	%8 = load i32, i32* %1, align 4
	%9 = icmp slt i32 %8, 128
	%10 = zext i1 %9 to i8
	%11 = trunc i8 %10 to i1
	br i1 %11, label %if.then-1, label %if.done-2

if.then-1:
	; ReturnStmt
	%12 = load i64, i64* %0, align 8
	%13 = load i32, i32* %1, align 4
	%14 = trunc i32 %13 to i8
	%15 = call {i64, i64} @os.write_byte(i64 %12, i8 %14, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%16 = extractvalue {i64, i64} %15, 0
	%17 = extractvalue {i64, i64} %15, 1
	%18 = bitcast {i64, i64}* %2 to %..rawptr
	%19 = call %..rawptr @mem.zero(%..rawptr %18, i64 16) noinline
	store {i64, i64} zeroinitializer, {i64, i64}* %2
	%20 = getelementptr inbounds {i64, i64}, {i64, i64}* %2, i64 0, i32 0
	store i64 %16, i64* %20
	%21 = getelementptr inbounds {i64, i64}, {i64, i64}* %2, i64 0, i32 1
	store i64 %17, i64* %21
	%22 = load {i64, i64}, {i64, i64}* %2, align 8
	ret {i64, i64} %22

if.done-2:
	; b
	; n
	; SelectorExpr
	%23 = load i32, i32* %1, align 4
	%24 = call {[4 x i8], i64} @utf8.encode_rune(i32 %23, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%25 = extractvalue {[4 x i8], i64} %24, 0
	%26 = extractvalue {[4 x i8], i64} %24, 1
	store [4 x i8] %25, [4 x i8]* %3
	store i64 %26, i64* %4
	; ReturnStmt
	%27 = load i64, i64* %0, align 8
	; SliceExpr
	%28 = load i64, i64* %4, align 8
	%29 = load [4 x i8], [4 x i8]* %3, align 1
	call void @runtime.slice_expr_error(%..string {i8* getelementptr inbounds ([24 x i8], [24 x i8]* @str$76, i64 0, i32 0), i64 23}, i64 21, i64 20, i64 0, i64 %28, i64 4)
	%30 = getelementptr inbounds [4 x i8], [4 x i8]* %3, i64 0, i32 0
	%31 = getelementptr inbounds i8, i8* %30, i64 0
	%32 = sub i64 %28, 0
	%33 = bitcast {i8*, i64}* %5 to %..rawptr
	%34 = call %..rawptr @mem.zero(%..rawptr %33, i64 16) noinline
	store {i8*, i64} zeroinitializer, {i8*, i64}* %5
	%35 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %5, i64 0, i32 0
	store i8* %31, i8** %35
	%36 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %5, i64 0, i32 1
	store i64 %32, i64* %36
	%37 = load {i8*, i64}, {i8*, i64}* %5, align 8
	%38 = bitcast {i8*, i64}* %6 to %..rawptr
	%39 = call %..rawptr @mem.zero(%..rawptr %38, i64 16) noinline
	store {i8*, i64} zeroinitializer, {i8*, i64}* %6
	store {i8*, i64} %37, {i8*, i64}* %6
	%40 = call {i64, i64} @os.write(i64 %27, {i8*, i64}* %6, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%41 = extractvalue {i64, i64} %40, 0
	%42 = extractvalue {i64, i64} %40, 1
	%43 = bitcast {i64, i64}* %7 to %..rawptr
	%44 = call %..rawptr @mem.zero(%..rawptr %43, i64 16) noinline
	store {i64, i64} zeroinitializer, {i64, i64}* %7
	%45 = getelementptr inbounds {i64, i64}, {i64, i64}* %7, i64 0, i32 0
	store i64 %41, i64* %45
	%46 = getelementptr inbounds {i64, i64}, {i64, i64}* %7, i64 0, i32 1
	store i64 %42, i64* %46
	%47 = load {i64, i64}, {i64, i64}* %7, align 8
	ret {i64, i64} %47
}

define void @os.write_encoded_rune(i64 %fd, i32 %r, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca i64, align 16
	%1 = alloca i32, align 16
	%2 = alloca [2 x i8], align 16
	%3 = alloca %..string, align 16
	%4 = alloca {i8*, i64}, align 16
	%5 = alloca {i8*, i64}, align 16
	store i64 %fd, i64* %0
	store i32 %r, i32* %1
	%6 = load i64, i64* %0, align 8
	%7 = call {i64, i64} @os.write_byte(i64 %6, i8 39, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	; SwitchStmt
	%8 = load i32, i32* %1, align 4
	%9 = icmp eq i32 %8, 7
	br i1 %9, label %switch.case.body-2, label %switch.case.next-1

switch.case.next-1:
	%10 = icmp eq i32 %8, 8
	br i1 %10, label %switch.fall.body-4, label %switch.case.next-3

switch.case.body-2:
	%11 = load i64, i64* %0, align 8
	%12 = call {i64, i64} @os.write_string(i64 %11, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @str$77, i64 0, i32 0), i64 2}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %switch.done-27

switch.case.next-3:
	%13 = icmp eq i32 %8, 27
	br i1 %13, label %switch.fall.body-6, label %switch.case.next-5

switch.fall.body-4:
	%14 = load i64, i64* %0, align 8
	%15 = call {i64, i64} @os.write_string(i64 %14, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @str$78, i64 0, i32 0), i64 2}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %switch.done-27

switch.case.next-5:
	%16 = icmp eq i32 %8, 12
	br i1 %16, label %switch.fall.body-8, label %switch.case.next-7

switch.fall.body-6:
	%17 = load i64, i64* %0, align 8
	%18 = call {i64, i64} @os.write_string(i64 %17, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @str$79, i64 0, i32 0), i64 2}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %switch.done-27

switch.case.next-7:
	%19 = icmp eq i32 %8, 10
	br i1 %19, label %switch.fall.body-10, label %switch.case.next-9

switch.fall.body-8:
	%20 = load i64, i64* %0, align 8
	%21 = call {i64, i64} @os.write_string(i64 %20, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @str$7a, i64 0, i32 0), i64 2}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %switch.done-27

switch.case.next-9:
	%22 = icmp eq i32 %8, 13
	br i1 %22, label %switch.fall.body-12, label %switch.case.next-11

switch.fall.body-10:
	%23 = load i64, i64* %0, align 8
	%24 = call {i64, i64} @os.write_string(i64 %23, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @str$7b, i64 0, i32 0), i64 2}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %switch.done-27

switch.case.next-11:
	%25 = icmp eq i32 %8, 9
	br i1 %25, label %switch.fall.body-14, label %switch.case.next-13

switch.fall.body-12:
	%26 = load i64, i64* %0, align 8
	%27 = call {i64, i64} @os.write_string(i64 %26, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @str$7c, i64 0, i32 0), i64 2}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %switch.done-27

switch.case.next-13:
	%28 = icmp eq i32 %8, 11
	br i1 %28, label %switch.fall.body-16, label %switch.case.next-15

switch.fall.body-14:
	%29 = load i64, i64* %0, align 8
	%30 = call {i64, i64} @os.write_string(i64 %29, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @str$7d, i64 0, i32 0), i64 2}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %switch.done-27

switch.case.next-15:
	; IfStmt
	%31 = load i32, i32* %1, align 4
	%32 = icmp slt i32 %31, 32
	%33 = zext i1 %32 to i8
	%34 = trunc i8 %33 to i1
	br i1 %34, label %if.then-17, label %if.else-25

switch.fall.body-16:
	%35 = load i64, i64* %0, align 8
	%36 = call {i64, i64} @os.write_string(i64 %35, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @str$7e, i64 0, i32 0), i64 2}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %switch.done-27

if.then-17:
	%37 = load i64, i64* %0, align 8
	%38 = call {i64, i64} @os.write_string(i64 %37, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @str$7f, i64 0, i32 0), i64 2}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	; b
	%39 = bitcast [2 x i8]* %2 to %..rawptr
	%40 = call %..rawptr @mem.zero(%..rawptr %39, i64 2) noinline
	store [2 x i8] zeroinitializer, [2 x i8]* %2
	; s
	; SelectorExpr
	; SliceExpr
	%41 = load [2 x i8], [2 x i8]* %2, align 1
	call void @runtime.slice_expr_error(%..string {i8* getelementptr inbounds ([24 x i8], [24 x i8]* @str$80, i64 0, i32 0), i64 23}, i64 40, i64 30, i64 0, i64 2, i64 2)
	%42 = getelementptr inbounds [2 x i8], [2 x i8]* %2, i64 0, i32 0
	%43 = getelementptr inbounds i8, i8* %42, i64 0
	%44 = sub i64 2, 0
	%45 = bitcast {i8*, i64}* %4 to %..rawptr
	%46 = call %..rawptr @mem.zero(%..rawptr %45, i64 16) noinline
	store {i8*, i64} zeroinitializer, {i8*, i64}* %4
	%47 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %4, i64 0, i32 0
	store i8* %43, i8** %47
	%48 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %4, i64 0, i32 1
	store i64 %44, i64* %48
	%49 = load {i8*, i64}, {i8*, i64}* %4, align 8
	%50 = load i32, i32* %1, align 4
	%51 = sext i32 %50 to i64
	; SelectorExpr
	%52 = load %..string, %..string* @strconv.digits, align 8
	%53 = bitcast {i8*, i64}* %5 to %..rawptr
	%54 = call %..rawptr @mem.zero(%..rawptr %53, i64 16) noinline
	store {i8*, i64} zeroinitializer, {i8*, i64}* %5
	store {i8*, i64} %49, {i8*, i64}* %5
	%55 = call %..string @strconv.append_bits({i8*, i64}* %5, i64 %51, i64 16, i1 true, i64 64, %..string %52, i8 zeroinitializer, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	store %..string %55, %..string* %3
	; SwitchStmt
	%56 = load %..string, %..string* %3, align 8
	%57 = extractvalue %..string %56, 1
	%58 = icmp eq i64 %57, 0
	br i1 %58, label %switch.case.body-19, label %switch.case.next-18

switch.case.next-18:
	%59 = icmp eq i64 %57, 1
	br i1 %59, label %switch.fall.body-21, label %switch.case.next-20

switch.case.body-19:
	%60 = load i64, i64* %0, align 8
	%61 = call {i64, i64} @os.write_string(i64 %60, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @str$81, i64 0, i32 0), i64 2}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %switch.done-24

switch.case.next-20:
	%62 = icmp eq i64 %57, 2
	br i1 %62, label %switch.fall.body-23, label %switch.case.next-22

switch.fall.body-21:
	%63 = load i64, i64* %0, align 8
	%64 = call {i64, i64} @os.write_rune(i64 %63, i32 48, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %switch.done-24

switch.case.next-22:
	br label %switch.done-24

switch.fall.body-23:
	%65 = load i64, i64* %0, align 8
	%66 = load %..string, %..string* %3, align 8
	%67 = call {i64, i64} @os.write_string(i64 %65, %..string %66, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %switch.done-24

switch.done-24:
	br label %if.done-26

if.else-25:
	%68 = load i64, i64* %0, align 8
	%69 = load i32, i32* %1, align 4
	%70 = call {i64, i64} @os.write_rune(i64 %68, i32 %69, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %if.done-26

if.done-26:
	br label %switch.done-27

switch.done-27:
	%71 = load i64, i64* %0, align 8
	%72 = call {i64, i64} @os.write_byte(i64 %71, i8 39, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	ret void
}

define %..rawptr @os.heap_allocator_proc(%..rawptr %allocator_data, i8 %mode, i64 %size, i64 %alignment, %..rawptr %old_memory, i64 %old_size, i64 %flags, %runtime.Source_Code_Location* %loc, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca %..rawptr, align 16
	%1 = alloca i8, align 16
	%2 = alloca i64, align 16
	%3 = alloca i64, align 16
	%4 = alloca %..rawptr, align 16
	%5 = alloca i64, align 16
	%6 = alloca i64, align 16
	%7 = alloca %..rawptr, align 16
	%8 = alloca %runtime.Source_Code_Location, align 16
	store %..rawptr %allocator_data, %..rawptr* %0
	store i8 %mode, i8* %1
	store i64 %size, i64* %2
	store i64 %alignment, i64* %3
	store %..rawptr %old_memory, %..rawptr* %4
	store i64 %old_size, i64* %5
	store i64 %flags, i64* %6
	%9 = load %runtime.Source_Code_Location, %runtime.Source_Code_Location* %loc, align 8
	; SwitchStmt
	%10 = load i8, i8* %1, align 1
	%11 = icmp eq i8 %10, 0
	br i1 %11, label %switch.case.body-2, label %switch.case.next-1

switch.case.next-1:
	%12 = icmp eq i8 %10, 1
	br i1 %12, label %switch.fall.body-4, label %switch.case.next-3

switch.case.body-2:
	; ReturnStmt
	%13 = load i64, i64* %2, align 8
	%14 = call %..rawptr @os.heap_alloc(i64 %13, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	ret %..rawptr %14

switch.case.next-3:
	%15 = icmp eq i8 %10, 2
	br i1 %15, label %switch.fall.body-6, label %switch.case.next-5

switch.fall.body-4:
	%16 = load %..rawptr, %..rawptr* %4, align 8
	call void @os.heap_free(%..rawptr %16, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	; ReturnStmt
	ret %..rawptr zeroinitializer

switch.case.next-5:
	%17 = icmp eq i8 %10, 3
	br i1 %17, label %switch.fall.body-8, label %switch.case.next-7

switch.fall.body-6:
	br label %switch.done-11

switch.case.next-7:
	br label %switch.done-11

switch.fall.body-8:
	; IfStmt
	%18 = load %..rawptr, %..rawptr* %4, align 8
	%19 = icmp eq %..rawptr %18, zeroinitializer
	%20 = zext i1 %19 to i8
	%21 = trunc i8 %20 to i1
	br i1 %21, label %if.then-9, label %if.done-10

if.then-9:
	; ReturnStmt
	%22 = load i64, i64* %2, align 8
	%23 = call %..rawptr @os.heap_alloc(i64 %22, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	ret %..rawptr %23

if.done-10:
	; ptr
	%24 = load %..rawptr, %..rawptr* %4, align 8
	%25 = load i64, i64* %2, align 8
	%26 = call %..rawptr @os.heap_resize(%..rawptr %24, i64 %25, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	store %..rawptr %26, %..rawptr* %7
	%27 = load %..rawptr, %..rawptr* %7, align 8
	%28 = icmp ne %..rawptr %27, zeroinitializer
	%29 = zext i1 %28 to i8
	%30 = trunc i8 %29 to i1
	%31 = bitcast %runtime.Source_Code_Location* %8 to %..rawptr
	%32 = call %..rawptr @mem.zero(%..rawptr %31, i64 48) noinline
	store %runtime.Source_Code_Location zeroinitializer, %runtime.Source_Code_Location* %8
	store %runtime.Source_Code_Location {%..string {i8* getelementptr inbounds ([24 x i8], [24 x i8]* @str$82, i64 0, i32 0), i64 23}, i64 130, i64 3, %..string {i8* getelementptr inbounds ([20 x i8], [20 x i8]* @str$83, i64 0, i32 0), i64 19}}, %runtime.Source_Code_Location* %8
	%33 = call i8 @runtime.assert(i1 %30, %..string zeroinitializer, %runtime.Source_Code_Location* %8)
	; ReturnStmt
	%34 = load %..rawptr, %..rawptr* %7, align 8
	ret %..rawptr %34

switch.done-11:
	; ReturnStmt
	ret %..rawptr zeroinitializer
}

define %mem.Allocator @os.heap_allocator(%runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca %mem.Allocator, align 16
	; ReturnStmt
	; CompoundLit
	%1 = bitcast %mem.Allocator* %0 to %..rawptr
	%2 = call %..rawptr @mem.zero(%..rawptr %1, i64 16) noinline
	store %mem.Allocator zeroinitializer, %mem.Allocator* %0
	store %mem.Allocator {%..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64, %runtime.Source_Code_Location*, %runtime.Context*)* zeroinitializer, %..rawptr zeroinitializer}, %mem.Allocator* %0
	%3 = bitcast %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64, %runtime.Source_Code_Location*, %runtime.Context*)* @os.heap_allocator_proc to %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64, %runtime.Source_Code_Location*, %runtime.Context*)*
	%4 = getelementptr inbounds %mem.Allocator, %mem.Allocator* %0, i64 0, i32 0
	store %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64, %runtime.Source_Code_Location*, %runtime.Context*)* %3, %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64, %runtime.Source_Code_Location*, %runtime.Context*)** %4
	%5 = getelementptr inbounds %mem.Allocator, %mem.Allocator* %0, i64 0, i32 1
	store %..rawptr zeroinitializer, %..rawptr* %5
	%6 = load %mem.Allocator, %mem.Allocator* %0, align 8
	ret %mem.Allocator %6
}

define {i64, i64} @os.write(i64 %fd, {i8*, i64}* %data, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca i64, align 16
	%1 = alloca {i64, i64}, align 16
	%2 = alloca i32, align 16
	%3 = alloca i64, align 16
	%4 = alloca i64, align 16
	%5 = alloca i64, align 16
	%6 = alloca i32, align 16
	%7 = alloca i32, align 16
	%8 = alloca i64, align 16
	%9 = alloca {i64, i64}, align 16
	%10 = alloca {i64, i64}, align 16
	store i64 %fd, i64* %0
	%11 = load {i8*, i64}, {i8*, i64}* %data, align 8
	; IfStmt
	%12 = load {i8*, i64}, {i8*, i64}* %data, align 8
	%13 = extractvalue {i8*, i64} %12, 1
	%14 = icmp eq i64 %13, 0
	%15 = zext i1 %14 to i8
	%16 = trunc i8 %15 to i1
	br i1 %16, label %if.then-1, label %if.done-2

if.then-1:
	; ReturnStmt
	%17 = bitcast {i64, i64}* %1 to %..rawptr
	%18 = call %..rawptr @mem.zero(%..rawptr %17, i64 16) noinline
	store {i64, i64} zeroinitializer, {i64, i64}* %1
	%19 = getelementptr inbounds {i64, i64}, {i64, i64}* %1, i64 0, i32 0
	store i64 0, i64* %19
	%20 = getelementptr inbounds {i64, i64}, {i64, i64}* %1, i64 0, i32 1
	store i64 0, i64* %20
	%21 = load {i64, i64}, {i64, i64}* %1, align 8
	ret {i64, i64} %21

if.done-2:
	; single_write_length
	%22 = bitcast i32* %2 to %..rawptr
	%23 = call %..rawptr @mem.zero(%..rawptr %22, i64 4) noinline
	store i32 zeroinitializer, i32* %2
	; total_write
	%24 = bitcast i64* %3 to %..rawptr
	%25 = call %..rawptr @mem.zero(%..rawptr %24, i64 8) noinline
	store i64 zeroinitializer, i64* %3
	; length
	%26 = load {i8*, i64}, {i8*, i64}* %data, align 8
	%27 = extractvalue {i8*, i64} %26, 1
	%28 = bitcast i64 %27 to i64
	store i64 %28, i64* %4
	; ForStmt
	br label %for.loop-3

for.loop-3:
	%29 = load i64, i64* %3, align 8
	%30 = load i64, i64* %4, align 8
	%31 = icmp slt i64 %29, %30
	%32 = zext i1 %31 to i8
	%33 = trunc i8 %32 to i1
	br i1 %33, label %for.body-4, label %for.done-8

for.body-4:
	; remaining
	%34 = load i64, i64* %4, align 8
	%35 = load i64, i64* %3, align 8
	%36 = sub i64 %34, %35
	store i64 %36, i64* %5
	; to_write
	; min
	%37 = load i64, i64* %5, align 8
	%38 = trunc i64 %37 to i32
	%39 = icmp slt i32 %38, 2147483647
	%40 = select i1 %39, i32 %38, i32 2147483647
	store i32 %40, i32* %6
	; e
	; SelectorExpr
	%41 = load i64, i64* %0, align 8
	%42 = inttoptr i64 %41 to %..rawptr
	; IndexExpr
	%43 = load {i8*, i64}, {i8*, i64}* %data, align 8
	%44 = extractvalue {i8*, i64} %43, 0
	%45 = load i64, i64* %3, align 8
	%46 = bitcast i64 %45 to i64
	%47 = extractvalue {i8*, i64} %43, 1
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([32 x i8], [32 x i8]* @str$84, i64 0, i32 0), i64 31}, i64 126, i64 49, i64 %46, i64 %47)
	%48 = getelementptr inbounds i8, i8* %44, i64 %46
	%49 = load i32, i32* %6, align 4
	%50 = bitcast i8* %48 to %..rawptr
	%51 = call cc 64 i32 @WriteFile(%..rawptr %42, %..rawptr %50, i32 %49, i32* %2, %..rawptr zeroinitializer)
	store i32 %51, i32* %7
	; IfStmt
	%52 = load i32, i32* %2, align 4
	%53 = icmp sle i32 %52, 0
	%54 = zext i1 %53 to i32
	%55 = icmp ne i32 %54, 0
	%56 = zext i1 %55 to i8
	%57 = trunc i8 %56 to i1
	br i1 %57, label %if.then-6, label %cmp.or-5

cmp.or-5:
	%58 = load i32, i32* %7, align 4
	%59 = icmp ne i32 %58, 0
	%60 = zext i1 %59 to i8
	%61 = trunc i8 %60 to i1
	br i1 %61, label %if.done-7, label %if.then-6

if.then-6:
	; err
	; SelectorExpr
	%62 = call cc 64 i32 @GetLastError()
	%63 = sext i32 %62 to i64
	store i64 %63, i64* %8
	; ReturnStmt
	%64 = load i64, i64* %3, align 8
	%65 = bitcast i64 %64 to i64
	%66 = load i64, i64* %8, align 8
	%67 = bitcast {i64, i64}* %9 to %..rawptr
	%68 = call %..rawptr @mem.zero(%..rawptr %67, i64 16) noinline
	store {i64, i64} zeroinitializer, {i64, i64}* %9
	%69 = getelementptr inbounds {i64, i64}, {i64, i64}* %9, i64 0, i32 0
	store i64 %65, i64* %69
	%70 = getelementptr inbounds {i64, i64}, {i64, i64}* %9, i64 0, i32 1
	store i64 %66, i64* %70
	%71 = load {i64, i64}, {i64, i64}* %9, align 8
	ret {i64, i64} %71

if.done-7:
	; AssignStmt
	%72 = load i32, i32* %2, align 4
	%73 = sext i32 %72 to i64
	%74 = load i64, i64* %3, align 8
	%75 = add i64 %74, %73
	store i64 %75, i64* %3
	br label %for.loop-3

for.done-8:
	; ReturnStmt
	%76 = load i64, i64* %3, align 8
	%77 = bitcast i64 %76 to i64
	%78 = bitcast {i64, i64}* %10 to %..rawptr
	%79 = call %..rawptr @mem.zero(%..rawptr %78, i64 16) noinline
	store {i64, i64} zeroinitializer, {i64, i64}* %10
	%80 = getelementptr inbounds {i64, i64}, {i64, i64}* %10, i64 0, i32 0
	store i64 %77, i64* %80
	%81 = getelementptr inbounds {i64, i64}, {i64, i64}* %10, i64 0, i32 1
	store i64 0, i64* %81
	%82 = load {i64, i64}, {i64, i64}* %10, align 8
	ret {i64, i64} %82
}

define i64 @os.get_std_handle(i64 %h, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca i64, align 16
	%1 = alloca %..rawptr, align 16
	store i64 %h, i64* %0
	; fd
	; SelectorExpr
	%2 = load i64, i64* %0, align 8
	%3 = trunc i64 %2 to i32
	%4 = call cc 64 %..rawptr @GetStdHandle(i32 %3)
	store %..rawptr %4, %..rawptr* %1
	; SelectorExpr
	%5 = load %..rawptr, %..rawptr* %1, align 8
	%6 = call cc 64 i32 @SetHandleInformation(%..rawptr %5, i32 1, i32 0)
	; ReturnStmt
	%7 = load %..rawptr, %..rawptr* %1, align 8
	%8 = ptrtoint %..rawptr %7 to i64
	ret i64 %8
}

define %..rawptr @os.heap_alloc(i64 %size, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca i64, align 16
	store i64 %size, i64* %0
	; ReturnStmt
	; SelectorExpr
	; SelectorExpr
	%1 = call cc 64 %..rawptr @GetProcessHeap()
	%2 = load i64, i64* %0, align 8
	%3 = call cc 64 %..rawptr @HeapAlloc(%..rawptr %1, i32 8, i64 %2)
	ret %..rawptr %3
}

define %..rawptr @os.heap_resize(%..rawptr %ptr, i64 %new_size, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca %..rawptr, align 16
	%1 = alloca i64, align 16
	store %..rawptr %ptr, %..rawptr* %0
	store i64 %new_size, i64* %1
	; IfStmt
	%2 = load i64, i64* %1, align 8
	%3 = icmp eq i64 %2, 0
	%4 = zext i1 %3 to i8
	%5 = trunc i8 %4 to i1
	br i1 %5, label %if.then-1, label %if.done-2

if.then-1:
	%6 = load %..rawptr, %..rawptr* %0, align 8
	call void @os.heap_free(%..rawptr %6, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	; ReturnStmt
	ret %..rawptr zeroinitializer

if.done-2:
	; IfStmt
	%7 = load %..rawptr, %..rawptr* %0, align 8
	%8 = icmp eq %..rawptr %7, zeroinitializer
	%9 = zext i1 %8 to i8
	%10 = trunc i8 %9 to i1
	br i1 %10, label %if.then-3, label %if.done-4

if.then-3:
	; ReturnStmt
	%11 = load i64, i64* %1, align 8
	%12 = call %..rawptr @os.heap_alloc(i64 %11, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	ret %..rawptr %12

if.done-4:
	; ReturnStmt
	; SelectorExpr
	; SelectorExpr
	%13 = call cc 64 %..rawptr @GetProcessHeap()
	%14 = load %..rawptr, %..rawptr* %0, align 8
	%15 = load i64, i64* %1, align 8
	%16 = call cc 64 %..rawptr @HeapReAlloc(%..rawptr %13, i32 8, %..rawptr %14, i64 %15)
	ret %..rawptr %16
}

define void @os.heap_free(%..rawptr %ptr, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca %..rawptr, align 16
	store %..rawptr %ptr, %..rawptr* %0
	; IfStmt
	%1 = load %..rawptr, %..rawptr* %0, align 8
	%2 = icmp eq %..rawptr %1, zeroinitializer
	%3 = zext i1 %2 to i8
	%4 = trunc i8 %3 to i1
	br i1 %4, label %if.then-1, label %if.done-2

if.then-1:
	; ReturnStmt
	ret void

if.done-2:
	; SelectorExpr
	; SelectorExpr
	%5 = call cc 64 %..rawptr @GetProcessHeap()
	%6 = load %..rawptr, %..rawptr* %0, align 8
	%7 = call cc 64 i32 @HeapFree(%..rawptr %5, i32 0, %..rawptr %6)
	ret void
}

define i64 @os.current_thread_id() #0 {
decls-0:
	; ReturnStmt
	; SelectorExpr
	%0 = call cc 64 i32 @GetCurrentThreadId()
	%1 = zext i32 %0 to i64
	ret i64 %1
}

define %..rawptr @mem.set(%..rawptr %data, i8 %value, i64 %len) #0 {
decls-0:
	%0 = alloca %..rawptr, align 16
	%1 = alloca i8, align 16
	%2 = alloca i64, align 16
	store %..rawptr %data, %..rawptr* %0
	store i8 %value, i8* %1
	store i64 %len, i64* %2
	; IfStmt
	%3 = load %..rawptr, %..rawptr* %0, align 8
	%4 = icmp eq %..rawptr %3, zeroinitializer
	%5 = zext i1 %4 to i8
	%6 = trunc i8 %5 to i1
	br i1 %6, label %if.then-1, label %if.done-2

if.then-1:
	; ReturnStmt
	ret %..rawptr zeroinitializer

if.done-2:
	; IfStmt
	%7 = load i64, i64* %2, align 8
	%8 = icmp slt i64 %7, 0
	%9 = zext i1 %8 to i8
	%10 = trunc i8 %9 to i1
	br i1 %10, label %if.then-3, label %if.done-4

if.then-3:
	; ReturnStmt
	%11 = load %..rawptr, %..rawptr* %0, align 8
	ret %..rawptr %11

if.done-4:
	%12 = load %..rawptr, %..rawptr* %0, align 8
	%13 = load i8, i8* %1, align 1
	%14 = load i64, i64* %2, align 8
	call ccc void @llvm.memset.p0i8.i64(%..rawptr %12, i8 %13, i64 %14, i32 1, i1 false)
	; ReturnStmt
	%15 = load %..rawptr, %..rawptr* %0, align 8
	ret %..rawptr %15
}
declare ccc void @llvm.memset.p0i8.i64(%..rawptr, i8, i64, i32, i1) #0 

define %..rawptr @mem.zero(%..rawptr %data, i64 %len) #0 {
decls-0:
	%0 = alloca %..rawptr, align 16
	%1 = alloca i64, align 16
	store %..rawptr %data, %..rawptr* %0
	store i64 %len, i64* %1
	; ReturnStmt
	%2 = load %..rawptr, %..rawptr* %0, align 8
	%3 = load i64, i64* %1, align 8
	%4 = call %..rawptr @mem.set(%..rawptr %2, i8 0, i64 %3)
	ret %..rawptr %4
}

define %..rawptr @mem.copy(%..rawptr %dst, %..rawptr %src, i64 %len) #0 {
decls-0:
	%0 = alloca %..rawptr, align 16
	%1 = alloca %..rawptr, align 16
	%2 = alloca i64, align 16
	store %..rawptr %dst, %..rawptr* %0
	store %..rawptr %src, %..rawptr* %1
	store i64 %len, i64* %2
	; IfStmt
	%3 = load %..rawptr, %..rawptr* %1, align 8
	%4 = icmp eq %..rawptr %3, zeroinitializer
	%5 = zext i1 %4 to i8
	%6 = trunc i8 %5 to i1
	br i1 %6, label %if.then-1, label %if.done-2

if.then-1:
	; ReturnStmt
	%7 = load %..rawptr, %..rawptr* %0, align 8
	ret %..rawptr %7

if.done-2:
	%8 = load %..rawptr, %..rawptr* %0, align 8
	%9 = load %..rawptr, %..rawptr* %1, align 8
	%10 = load i64, i64* %2, align 8
	call ccc void @llvm.memmove.p0i8.p0i8.i64(%..rawptr %8, %..rawptr %9, i64 %10, i32 1, i1 false)
	; ReturnStmt
	%11 = load %..rawptr, %..rawptr* %0, align 8
	ret %..rawptr %11
}
declare ccc void @llvm.memmove.p0i8.p0i8.i64(%..rawptr, %..rawptr, i64, i32, i1) #0 

define i64 @mem.compare_byte_ptrs(i8* %a, i8* %b, i64 %n) #0 {
decls-0:
	%0 = alloca i8*, align 16
	%1 = alloca i8*, align 16
	%2 = alloca i64, align 16
	%3 = alloca {i8*, i64}, align 16
	%4 = alloca {i8*, i64}, align 16
	%5 = alloca i64, align 16
	%6 = alloca i64, align 16
	%7 = alloca i64, align 16
	%8 = alloca {i64*, i64}, align 16
	%9 = alloca {i64*, i64}, align 16
	%10 = alloca i64, align 16
	store i8* %a, i8** %0
	store i8* %b, i8** %1
	store i64 %n, i64* %2
	; x
	%11 = load i8*, i8** %0, align 8
	%12 = load i64, i64* %2, align 8
	%13 = call {i8*, i64} @mem.slice_ptr-4991(i8* %11, i64 %12)
	store {i8*, i64} %13, {i8*, i64}* %3
	; y
	%14 = load i8*, i8** %1, align 8
	%15 = load i64, i64* %2, align 8
	%16 = call {i8*, i64} @mem.slice_ptr-4991(i8* %14, i64 %15)
	store {i8*, i64} %16, {i8*, i64}* %4
	; fast
	%17 = load i64, i64* %2, align 8
	%18 = sdiv i64 %17, 8
	%19 = add i64 %18, 1
	store i64 %19, i64* %5
	; offset
	%20 = load i64, i64* %5, align 8
	%21 = sub i64 %20, 1
	%22 = mul i64 %21, 8
	store i64 %22, i64* %6
	; curr_block
	store i64 0, i64* %7
	; IfStmt
	%23 = load i64, i64* %2, align 8
	%24 = icmp slt i64 %23, 8
	%25 = zext i1 %24 to i8
	%26 = trunc i8 %25 to i1
	br i1 %26, label %if.then-1, label %if.done-2

if.then-1:
	; AssignStmt
	store i64 0, i64* %5
	br label %if.done-2

if.done-2:
	; la
	%27 = load i8*, i8** %0, align 8
	%28 = bitcast i8* %27 to i64*
	%29 = load i64, i64* %5, align 8
	%30 = call {i64*, i64} @mem.slice_ptr-5005(i64* %28, i64 %29)
	store {i64*, i64} %30, {i64*, i64}* %8
	; lb
	%31 = load i8*, i8** %1, align 8
	%32 = bitcast i8* %31 to i64*
	%33 = load i64, i64* %5, align 8
	%34 = call {i64*, i64} @mem.slice_ptr-5005(i64* %32, i64 %33)
	store {i64*, i64} %34, {i64*, i64}* %9
	; ForStmt
	br label %for.loop-3

for.loop-3:
	%35 = load i64, i64* %7, align 8
	%36 = load i64, i64* %5, align 8
	%37 = icmp slt i64 %35, %36
	%38 = zext i1 %37 to i8
	%39 = trunc i8 %38 to i1
	br i1 %39, label %for.body-4, label %for.done-15

for.body-4:
	; IfStmt
	; IndexExpr
	%40 = load {i64*, i64}, {i64*, i64}* %8, align 8
	%41 = extractvalue {i64*, i64} %40, 0
	%42 = load i64, i64* %7, align 8
	%43 = extractvalue {i64*, i64} %40, 1
	%44 = getelementptr inbounds i64, i64* %41, i64 %42
	%45 = load i64, i64* %44, align 8
	; IndexExpr
	%46 = load {i64*, i64}, {i64*, i64}* %9, align 8
	%47 = extractvalue {i64*, i64} %46, 0
	%48 = load i64, i64* %7, align 8
	%49 = extractvalue {i64*, i64} %46, 1
	%50 = getelementptr inbounds i64, i64* %47, i64 %48
	%51 = load i64, i64* %50, align 8
	%52 = xor i64 %45, %51
	%53 = icmp ne i64 %52, 0
	%54 = zext i1 %53 to i8
	%55 = trunc i8 %54 to i1
	br i1 %55, label %if.then-5, label %if.done-14

if.then-5:
	; ForStmt
	; pos
	%56 = load i64, i64* %7, align 8
	%57 = mul i64 %56, 8
	store i64 %57, i64* %10
	br label %for.loop-6

for.loop-6:
	%58 = load i64, i64* %10, align 8
	%59 = load i64, i64* %2, align 8
	%60 = icmp slt i64 %58, %59
	%61 = zext i1 %60 to i8
	%62 = trunc i8 %61 to i1
	br i1 %62, label %for.body-7, label %for.done-13

for.body-7:
	; IfStmt
	; IndexExpr
	%63 = load {i8*, i64}, {i8*, i64}* %3, align 8
	%64 = extractvalue {i8*, i64} %63, 0
	%65 = load i64, i64* %10, align 8
	%66 = extractvalue {i8*, i64} %63, 1
	%67 = getelementptr inbounds i8, i8* %64, i64 %65
	%68 = load i8, i8* %67, align 1
	; IndexExpr
	%69 = load {i8*, i64}, {i8*, i64}* %4, align 8
	%70 = extractvalue {i8*, i64} %69, 0
	%71 = load i64, i64* %10, align 8
	%72 = extractvalue {i8*, i64} %69, 1
	%73 = getelementptr inbounds i8, i8* %70, i64 %71
	%74 = load i8, i8* %73, align 1
	%75 = xor i8 %68, %74
	%76 = icmp ne i8 %75, 0
	%77 = zext i1 %76 to i8
	%78 = trunc i8 %77 to i1
	br i1 %78, label %if.then-8, label %if.done-12

if.then-8:
	; ReturnStmt
	; TernaryExpr
	; IndexExpr
	%79 = load {i8*, i64}, {i8*, i64}* %3, align 8
	%80 = extractvalue {i8*, i64} %79, 0
	%81 = load i64, i64* %10, align 8
	%82 = extractvalue {i8*, i64} %79, 1
	%83 = getelementptr inbounds i8, i8* %80, i64 %81
	%84 = load i8, i8* %83, align 1
	%85 = zext i8 %84 to i64
	; IndexExpr
	%86 = load {i8*, i64}, {i8*, i64}* %4, align 8
	%87 = extractvalue {i8*, i64} %86, 0
	%88 = load i64, i64* %10, align 8
	%89 = extractvalue {i8*, i64} %86, 1
	%90 = getelementptr inbounds i8, i8* %87, i64 %88
	%91 = load i8, i8* %90, align 1
	%92 = zext i8 %91 to i64
	%93 = sub i64 %85, %92
	%94 = icmp slt i64 %93, 0
	%95 = zext i1 %94 to i8
	%96 = trunc i8 %95 to i1
	br i1 %96, label %if.then-9, label %if.else-10

if.then-9:
	br label %if.done-11

if.else-10:
	br label %if.done-11

if.done-11:
	%97 = phi i64 [ -1, %if.then-9 ], [ 1, %if.else-10 ]
	ret i64 %97

if.done-12:
	; AssignStmt
	%98 = load i64, i64* %10, align 8
	%99 = add i64 %98, 1
	store i64 %99, i64* %10
	br label %for.loop-6

for.done-13:
	br label %if.done-14

if.done-14:
	; AssignStmt
	%100 = load i64, i64* %7, align 8
	%101 = add i64 %100, 1
	store i64 %101, i64* %7
	br label %for.loop-3

for.done-15:
	; ForStmt
	br label %for.loop-16

for.loop-16:
	%102 = load i64, i64* %6, align 8
	%103 = load i64, i64* %2, align 8
	%104 = icmp slt i64 %102, %103
	%105 = zext i1 %104 to i8
	%106 = trunc i8 %105 to i1
	br i1 %106, label %for.body-17, label %for.done-23

for.body-17:
	; IfStmt
	; IndexExpr
	%107 = load {i8*, i64}, {i8*, i64}* %3, align 8
	%108 = extractvalue {i8*, i64} %107, 0
	%109 = load i64, i64* %6, align 8
	%110 = extractvalue {i8*, i64} %107, 1
	%111 = getelementptr inbounds i8, i8* %108, i64 %109
	%112 = load i8, i8* %111, align 1
	; IndexExpr
	%113 = load {i8*, i64}, {i8*, i64}* %4, align 8
	%114 = extractvalue {i8*, i64} %113, 0
	%115 = load i64, i64* %6, align 8
	%116 = extractvalue {i8*, i64} %113, 1
	%117 = getelementptr inbounds i8, i8* %114, i64 %115
	%118 = load i8, i8* %117, align 1
	%119 = xor i8 %112, %118
	%120 = icmp ne i8 %119, 0
	%121 = zext i1 %120 to i8
	%122 = trunc i8 %121 to i1
	br i1 %122, label %if.then-18, label %if.done-22

if.then-18:
	; ReturnStmt
	; TernaryExpr
	; IndexExpr
	%123 = load {i8*, i64}, {i8*, i64}* %3, align 8
	%124 = extractvalue {i8*, i64} %123, 0
	%125 = load i64, i64* %6, align 8
	%126 = extractvalue {i8*, i64} %123, 1
	%127 = getelementptr inbounds i8, i8* %124, i64 %125
	%128 = load i8, i8* %127, align 1
	%129 = zext i8 %128 to i64
	; IndexExpr
	%130 = load {i8*, i64}, {i8*, i64}* %4, align 8
	%131 = extractvalue {i8*, i64} %130, 0
	%132 = load i64, i64* %6, align 8
	%133 = extractvalue {i8*, i64} %130, 1
	%134 = getelementptr inbounds i8, i8* %131, i64 %132
	%135 = load i8, i8* %134, align 1
	%136 = zext i8 %135 to i64
	%137 = sub i64 %129, %136
	%138 = icmp slt i64 %137, 0
	%139 = zext i1 %138 to i8
	%140 = trunc i8 %139 to i1
	br i1 %140, label %if.then-19, label %if.else-20

if.then-19:
	br label %if.done-21

if.else-20:
	br label %if.done-21

if.done-21:
	%141 = phi i64 [ -1, %if.then-19 ], [ 1, %if.else-20 ]
	ret i64 %141

if.done-22:
	; AssignStmt
	%142 = load i64, i64* %6, align 8
	%143 = add i64 %142, 1
	store i64 %143, i64* %6
	br label %for.loop-16

for.done-23:
	; ReturnStmt
	ret i64 0
}

define i8 @mem.is_power_of_two(i64 %x, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca i64, align 16
	store i64 %x, i64* %0
	; IfStmt
	%1 = load i64, i64* %0, align 8
	%2 = icmp ule i64 %1, 0
	%3 = zext i1 %2 to i8
	%4 = trunc i8 %3 to i1
	br i1 %4, label %if.then-1, label %if.done-2

if.then-1:
	; ReturnStmt
	ret i8 0

if.done-2:
	; ReturnStmt
	%5 = load i64, i64* %0, align 8
	%6 = load i64, i64* %0, align 8
	%7 = sub i64 %6, 1
	%8 = and i64 %5, %7
	%9 = icmp eq i64 %8, 0
	%10 = zext i1 %9 to i8
	ret i8 %10
}

define i64 @mem.align_forward_uintptr(i64 %ptr, i64 %align, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca i64, align 16
	%1 = alloca i64, align 16
	%2 = alloca %runtime.Source_Code_Location, align 16
	%3 = alloca i64, align 16
	%4 = alloca i64, align 16
	%5 = alloca i64, align 16
	store i64 %ptr, i64* %0
	store i64 %align, i64* %1
	%6 = load i64, i64* %1, align 8
	%7 = call i8 @mem.is_power_of_two(i64 %6, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%8 = trunc i8 %7 to i1
	%9 = bitcast %runtime.Source_Code_Location* %2 to %..rawptr
	store %runtime.Source_Code_Location zeroinitializer, %runtime.Source_Code_Location* %2
	store %runtime.Source_Code_Location {%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @str$85, i64 0, i32 0), i64 25}, i64 178, i64 2, %..string {i8* getelementptr inbounds ([22 x i8], [22 x i8]* @str$86, i64 0, i32 0), i64 21}}, %runtime.Source_Code_Location* %2
	%10 = call i8 @runtime.assert(i1 %8, %..string zeroinitializer, %runtime.Source_Code_Location* %2)
	; a
	%11 = load i64, i64* %1, align 8
	store i64 %11, i64* %3
	; p
	%12 = load i64, i64* %0, align 8
	store i64 %12, i64* %4
	; modulo
	%13 = load i64, i64* %4, align 8
	%14 = load i64, i64* %3, align 8
	%15 = sub i64 %14, 1
	%16 = and i64 %13, %15
	store i64 %16, i64* %5
	; IfStmt
	%17 = load i64, i64* %5, align 8
	%18 = icmp ne i64 %17, 0
	%19 = zext i1 %18 to i8
	%20 = trunc i8 %19 to i1
	br i1 %20, label %if.then-1, label %if.done-2

if.then-1:
	; AssignStmt
	%21 = load i64, i64* %3, align 8
	%22 = load i64, i64* %5, align 8
	%23 = sub i64 %21, %22
	%24 = load i64, i64* %4, align 8
	%25 = add i64 %24, %23
	store i64 %25, i64* %4
	br label %if.done-2

if.done-2:
	; ReturnStmt
	%26 = load i64, i64* %4, align 8
	ret i64 %26
}

define %..rawptr @mem.alloc(i64 %size, i64 %alignment, %mem.Allocator* %allocator, %runtime.Source_Code_Location* %loc, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) alwaysinline #1 {
decls-0:
	%0 = alloca i64, align 16
	%1 = alloca i64, align 16
	%2 = alloca %runtime.Source_Code_Location, align 16
	store i64 %size, i64* %0
	store i64 %alignment, i64* %1
	%3 = load %mem.Allocator, %mem.Allocator* %allocator, align 8
	%4 = load %runtime.Source_Code_Location, %runtime.Source_Code_Location* %loc, align 8
	; IfStmt
	%5 = load i64, i64* %0, align 8
	%6 = icmp eq i64 %5, 0
	%7 = zext i1 %6 to i8
	%8 = trunc i8 %7 to i1
	br i1 %8, label %if.then-1, label %if.done-2

if.then-1:
	; ReturnStmt
	ret %..rawptr zeroinitializer

if.done-2:
	; IfStmt
	; SelectorExpr
	%9 = getelementptr inbounds %mem.Allocator, %mem.Allocator* %allocator, i64 0, i32 0
	%10 = load %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64, %runtime.Source_Code_Location*, %runtime.Context*)*, %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64, %runtime.Source_Code_Location*, %runtime.Context*)** %9, align 8
	%11 = icmp eq %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64, %runtime.Source_Code_Location*, %runtime.Context*)* %10, zeroinitializer
	%12 = zext i1 %11 to i8
	%13 = trunc i8 %12 to i1
	br i1 %13, label %if.then-3, label %if.done-4

if.then-3:
	; ReturnStmt
	ret %..rawptr zeroinitializer

if.done-4:
	; ReturnStmt
	; SelectorExpr
	%14 = getelementptr inbounds %mem.Allocator, %mem.Allocator* %allocator, i64 0, i32 0
	%15 = load %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64, %runtime.Source_Code_Location*, %runtime.Context*)*, %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64, %runtime.Source_Code_Location*, %runtime.Context*)** %14, align 8
	; SelectorExpr
	%16 = getelementptr inbounds %mem.Allocator, %mem.Allocator* %allocator, i64 0, i32 1
	%17 = load %..rawptr, %..rawptr* %16, align 8
	%18 = load i64, i64* %0, align 8
	%19 = load i64, i64* %1, align 8
	%20 = load %runtime.Source_Code_Location, %runtime.Source_Code_Location* %loc, align 8
	%21 = bitcast %runtime.Source_Code_Location* %2 to %..rawptr
	store %runtime.Source_Code_Location zeroinitializer, %runtime.Source_Code_Location* %2
	store %runtime.Source_Code_Location %20, %runtime.Source_Code_Location* %2
	%22 = call %..rawptr %15(%..rawptr %17, i8 0, i64 %18, i64 %19, %..rawptr zeroinitializer, i64 0, i64 0, %runtime.Source_Code_Location* %2, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) alwaysinline
	ret %..rawptr %22
}

define void @mem.free(%..rawptr %ptr, %mem.Allocator* %allocator, %runtime.Source_Code_Location* %loc, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) alwaysinline #1 {
decls-0:
	%0 = alloca %..rawptr, align 16
	%1 = alloca %runtime.Source_Code_Location, align 16
	store %..rawptr %ptr, %..rawptr* %0
	%2 = load %mem.Allocator, %mem.Allocator* %allocator, align 8
	%3 = load %runtime.Source_Code_Location, %runtime.Source_Code_Location* %loc, align 8
	; IfStmt
	%4 = load %..rawptr, %..rawptr* %0, align 8
	%5 = icmp eq %..rawptr %4, zeroinitializer
	%6 = zext i1 %5 to i8
	%7 = trunc i8 %6 to i1
	br i1 %7, label %if.then-1, label %if.done-2

if.then-1:
	; ReturnStmt
	ret void

if.done-2:
	; IfStmt
	; SelectorExpr
	%8 = getelementptr inbounds %mem.Allocator, %mem.Allocator* %allocator, i64 0, i32 0
	%9 = load %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64, %runtime.Source_Code_Location*, %runtime.Context*)*, %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64, %runtime.Source_Code_Location*, %runtime.Context*)** %8, align 8
	%10 = icmp eq %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64, %runtime.Source_Code_Location*, %runtime.Context*)* %9, zeroinitializer
	%11 = zext i1 %10 to i8
	%12 = trunc i8 %11 to i1
	br i1 %12, label %if.then-3, label %if.done-4

if.then-3:
	; ReturnStmt
	ret void

if.done-4:
	; SelectorExpr
	%13 = getelementptr inbounds %mem.Allocator, %mem.Allocator* %allocator, i64 0, i32 0
	%14 = load %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64, %runtime.Source_Code_Location*, %runtime.Context*)*, %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64, %runtime.Source_Code_Location*, %runtime.Context*)** %13, align 8
	; SelectorExpr
	%15 = getelementptr inbounds %mem.Allocator, %mem.Allocator* %allocator, i64 0, i32 1
	%16 = load %..rawptr, %..rawptr* %15, align 8
	%17 = load %..rawptr, %..rawptr* %0, align 8
	%18 = load %runtime.Source_Code_Location, %runtime.Source_Code_Location* %loc, align 8
	%19 = bitcast %runtime.Source_Code_Location* %1 to %..rawptr
	store %runtime.Source_Code_Location zeroinitializer, %runtime.Source_Code_Location* %1
	store %runtime.Source_Code_Location %18, %runtime.Source_Code_Location* %1
	%20 = call %..rawptr %14(%..rawptr %16, i8 1, i64 0, i64 0, %..rawptr %17, i64 0, i64 0, %runtime.Source_Code_Location* %1, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) alwaysinline
	ret void
}

define %..rawptr @mem.nil_allocator_proc(%..rawptr %allocator_data, i8 %mode, i64 %size, i64 %alignment, %..rawptr %old_memory, i64 %old_size, i64 %flags, %runtime.Source_Code_Location* %loc, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca %..rawptr, align 16
	%1 = alloca i8, align 16
	%2 = alloca i64, align 16
	%3 = alloca i64, align 16
	%4 = alloca %..rawptr, align 16
	%5 = alloca i64, align 16
	%6 = alloca i64, align 16
	store %..rawptr %allocator_data, %..rawptr* %0
	store i8 %mode, i8* %1
	store i64 %size, i64* %2
	store i64 %alignment, i64* %3
	store %..rawptr %old_memory, %..rawptr* %4
	store i64 %old_size, i64* %5
	store i64 %flags, i64* %6
	%7 = load %runtime.Source_Code_Location, %runtime.Source_Code_Location* %loc, align 8
	; ReturnStmt
	ret %..rawptr zeroinitializer
}

define %mem.Allocator @mem.nil_allocator(%runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca %mem.Allocator, align 16
	; ReturnStmt
	; CompoundLit
	%1 = bitcast %mem.Allocator* %0 to %..rawptr
	store %mem.Allocator zeroinitializer, %mem.Allocator* %0
	store %mem.Allocator {%..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64, %runtime.Source_Code_Location*, %runtime.Context*)* zeroinitializer, %..rawptr zeroinitializer}, %mem.Allocator* %0
	%2 = bitcast %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64, %runtime.Source_Code_Location*, %runtime.Context*)* @mem.nil_allocator_proc to %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64, %runtime.Source_Code_Location*, %runtime.Context*)*
	%3 = getelementptr inbounds %mem.Allocator, %mem.Allocator* %0, i64 0, i32 0
	store %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64, %runtime.Source_Code_Location*, %runtime.Context*)* %2, %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64, %runtime.Source_Code_Location*, %runtime.Context*)** %3
	%4 = getelementptr inbounds %mem.Allocator, %mem.Allocator* %0, i64 0, i32 1
	store %..rawptr zeroinitializer, %..rawptr* %4
	%5 = load %mem.Allocator, %mem.Allocator* %0, align 8
	ret %mem.Allocator %5
}

define void @mem.scratch_allocator_init(%mem.Scratch_Allocator* %scratch, {i8*, i64}* %data, %mem.Allocator* %backup_allocator, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca %mem.Scratch_Allocator*, align 16
	store %mem.Scratch_Allocator* %scratch, %mem.Scratch_Allocator** %0
	%1 = load {i8*, i64}, {i8*, i64}* %data, align 8
	%2 = load %mem.Allocator, %mem.Allocator* %backup_allocator, align 8
	; AssignStmt
	; SelectorExpr
	%3 = load %mem.Scratch_Allocator*, %mem.Scratch_Allocator** %0, align 8
	%4 = getelementptr inbounds %mem.Scratch_Allocator, %mem.Scratch_Allocator* %3, i64 0
	%5 = getelementptr inbounds %mem.Scratch_Allocator, %mem.Scratch_Allocator* %4, i64 0, i32 0
	%6 = load {i8*, i64}, {i8*, i64}* %data, align 8
	store {i8*, i64} %6, {i8*, i64}* %5
	; AssignStmt
	; SelectorExpr
	%7 = load %mem.Scratch_Allocator*, %mem.Scratch_Allocator** %0, align 8
	%8 = getelementptr inbounds %mem.Scratch_Allocator, %mem.Scratch_Allocator* %7, i64 0
	%9 = getelementptr inbounds %mem.Scratch_Allocator, %mem.Scratch_Allocator* %8, i64 0, i32 1
	store i64 0, i64* %9
	; AssignStmt
	; SelectorExpr
	%10 = load %mem.Scratch_Allocator*, %mem.Scratch_Allocator** %0, align 8
	%11 = getelementptr inbounds %mem.Scratch_Allocator, %mem.Scratch_Allocator* %10, i64 0
	%12 = getelementptr inbounds %mem.Scratch_Allocator, %mem.Scratch_Allocator* %11, i64 0, i32 2
	store i64 0, i64* %12
	; AssignStmt
	; SelectorExpr
	%13 = load %mem.Scratch_Allocator*, %mem.Scratch_Allocator** %0, align 8
	%14 = getelementptr inbounds %mem.Scratch_Allocator, %mem.Scratch_Allocator* %13, i64 0
	%15 = getelementptr inbounds %mem.Scratch_Allocator, %mem.Scratch_Allocator* %14, i64 0, i32 3
	%16 = load %mem.Allocator, %mem.Allocator* %backup_allocator, align 8
	store %mem.Allocator %16, %mem.Allocator* %15
	ret void
}

define %..rawptr @mem.scratch_allocator_proc(%..rawptr %allocator_data, i8 %mode, i64 %size, i64 %alignment, %..rawptr %old_memory, i64 %old_size, i64 %flags, %runtime.Source_Code_Location* %loc, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca %..rawptr, align 16
	%1 = alloca i8, align 16
	%2 = alloca i64, align 16
	%3 = alloca i64, align 16
	%4 = alloca %..rawptr, align 16
	%5 = alloca i64, align 16
	%6 = alloca i64, align 16
	%7 = alloca %mem.Scratch_Allocator*, align 16
	%8 = alloca %mem.Allocator, align 16
	%9 = alloca %runtime.Source_Code_Location, align 16
	%10 = alloca {i8*, i64}, align 16
	%11 = alloca %mem.Allocator, align 16
	%12 = alloca i64, align 16
	%13 = alloca i8*, align 16
	%14 = alloca i64, align 16
	%15 = alloca i8*, align 16
	%16 = alloca %mem.Allocator, align 16
	%17 = alloca %..rawptr, align 16
	%18 = alloca %mem.Allocator, align 16
	%19 = alloca %runtime.Source_Code_Location, align 16
	%20 = alloca %mem.Allocator, align 16
	%21 = alloca %runtime.Source_Code_Location, align 16
	%22 = alloca %runtime.Source_Code_Location, align 16
	%23 = alloca %..rawptr, align 16
	%24 = alloca i64, align 16
	%25 = alloca %..rawptr, align 16
	%26 = alloca i64, align 16
	%27 = alloca %mem.Allocator, align 16
	%28 = alloca %runtime.Source_Code_Location, align 16
	%29 = alloca %..rawptr, align 16
	%30 = alloca %runtime.Source_Code_Location, align 16
	store %..rawptr %allocator_data, %..rawptr* %0
	store i8 %mode, i8* %1
	store i64 %size, i64* %2
	store i64 %alignment, i64* %3
	store %..rawptr %old_memory, %..rawptr* %4
	store i64 %old_size, i64* %5
	store i64 %flags, i64* %6
	%31 = load %runtime.Source_Code_Location, %runtime.Source_Code_Location* %loc, align 8
	; scratch
	%32 = load %..rawptr, %..rawptr* %0, align 8
	%33 = bitcast %..rawptr %32 to %mem.Scratch_Allocator*
	store %mem.Scratch_Allocator* %33, %mem.Scratch_Allocator** %7
	; IfStmt
	; SelectorExpr
	%34 = load %mem.Scratch_Allocator*, %mem.Scratch_Allocator** %7, align 8
	%35 = getelementptr inbounds %mem.Scratch_Allocator, %mem.Scratch_Allocator* %34, i64 0
	%36 = getelementptr inbounds %mem.Scratch_Allocator, %mem.Scratch_Allocator* %35, i64 0, i32 0
	%37 = load {i8*, i64}, {i8*, i64}* %36, align 8
	%38 = extractvalue {i8*, i64} %37, 0
	%39 = extractvalue {i8*, i64} %37, 1
	%40 = bitcast %..rawptr null to i8*
	%41 = icmp eq i8* %38, %40
	%42 = icmp eq i64 %39, 0
	%43 = zext i1 %41 to i8
	%44 = zext i1 %42 to i8
	%45 = or i8 %43, %44
	%46 = trunc i8 %45 to i1
	br i1 %46, label %if.then-1, label %if.done-2

if.then-1:
	%47 = load %mem.Scratch_Allocator*, %mem.Scratch_Allocator** %7, align 8
	; SelectorExpr
	%48 = getelementptr inbounds %runtime.Context, %runtime.Context* %__.context_ptr, i64 0, i32 0
	%49 = load %mem.Allocator, %mem.Allocator* %48, align 8
	%50 = bitcast %mem.Allocator* %8 to %..rawptr
	store %mem.Allocator zeroinitializer, %mem.Allocator* %8
	store %mem.Allocator %49, %mem.Allocator* %8
	%51 = bitcast %runtime.Source_Code_Location* %9 to %..rawptr
	store %runtime.Source_Code_Location zeroinitializer, %runtime.Source_Code_Location* %9
	store %runtime.Source_Code_Location {%..string {i8* getelementptr inbounds ([28 x i8], [28 x i8]* @str$87, i64 0, i32 0), i64 27}, i64 190, i64 35, %..string {i8* getelementptr inbounds ([23 x i8], [23 x i8]* @str$88, i64 0, i32 0), i64 22}}, %runtime.Source_Code_Location* %9
	%52 = call {i8*, i64} @mem.make_slice-4755(i64 4194304, %mem.Allocator* %8, %runtime.Source_Code_Location* %9, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	; SelectorExpr
	%53 = getelementptr inbounds %runtime.Context, %runtime.Context* %__.context_ptr, i64 0, i32 0
	%54 = load %mem.Allocator, %mem.Allocator* %53, align 8
	%55 = bitcast {i8*, i64}* %10 to %..rawptr
	store {i8*, i64} zeroinitializer, {i8*, i64}* %10
	store {i8*, i64} %52, {i8*, i64}* %10
	%56 = bitcast %mem.Allocator* %11 to %..rawptr
	store %mem.Allocator zeroinitializer, %mem.Allocator* %11
	store %mem.Allocator %54, %mem.Allocator* %11
	call void @mem.scratch_allocator_init(%mem.Scratch_Allocator* %47, {i8*, i64}* %10, %mem.Allocator* %11, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %if.done-2

if.done-2:
	; SwitchStmt
	%57 = load i8, i8* %1, align 1
	%58 = icmp eq i8 %57, 0
	br i1 %58, label %switch.case.body-4, label %switch.case.next-3

switch.case.next-3:
	%59 = icmp eq i8 %57, 1
	br i1 %59, label %switch.fall.body-14, label %switch.case.next-13

switch.case.body-4:
	; SwitchStmt
	; SelectorExpr
	%60 = load %mem.Scratch_Allocator*, %mem.Scratch_Allocator** %7, align 8
	%61 = getelementptr inbounds %mem.Scratch_Allocator, %mem.Scratch_Allocator* %60, i64 0
	%62 = getelementptr inbounds %mem.Scratch_Allocator, %mem.Scratch_Allocator* %61, i64 0, i32 1
	%63 = load i64, i64* %62, align 8
	%64 = load i64, i64* %2, align 8
	%65 = add i64 %63, %64
	; SelectorExpr
	%66 = load %mem.Scratch_Allocator*, %mem.Scratch_Allocator** %7, align 8
	%67 = getelementptr inbounds %mem.Scratch_Allocator, %mem.Scratch_Allocator* %66, i64 0
	%68 = getelementptr inbounds %mem.Scratch_Allocator, %mem.Scratch_Allocator* %67, i64 0, i32 0
	%69 = load {i8*, i64}, {i8*, i64}* %68, align 8
	%70 = extractvalue {i8*, i64} %69, 1
	%71 = icmp sle i64 %65, %70
	%72 = zext i1 %71 to i8
	%73 = icmp eq i8 1, %72
	br i1 %73, label %switch.case.body-6, label %switch.case.next-5

switch.case.next-5:
	%74 = load i64, i64* %2, align 8
	; SelectorExpr
	%75 = load %mem.Scratch_Allocator*, %mem.Scratch_Allocator** %7, align 8
	%76 = getelementptr inbounds %mem.Scratch_Allocator, %mem.Scratch_Allocator* %75, i64 0
	%77 = getelementptr inbounds %mem.Scratch_Allocator, %mem.Scratch_Allocator* %76, i64 0, i32 0
	%78 = load {i8*, i64}, {i8*, i64}* %77, align 8
	%79 = extractvalue {i8*, i64} %78, 1
	%80 = icmp sle i64 %74, %79
	%81 = zext i1 %80 to i8
	%82 = icmp eq i8 1, %81
	br i1 %82, label %switch.fall.body-8, label %switch.case.next-7

switch.case.body-6:
	; offset
	; SelectorExpr
	%83 = load %mem.Scratch_Allocator*, %mem.Scratch_Allocator** %7, align 8
	%84 = getelementptr inbounds %mem.Scratch_Allocator, %mem.Scratch_Allocator* %83, i64 0
	%85 = getelementptr inbounds %mem.Scratch_Allocator, %mem.Scratch_Allocator* %84, i64 0, i32 1
	%86 = load i64, i64* %85, align 8
	%87 = bitcast i64 %86 to i64
	%88 = load i64, i64* %3, align 8
	%89 = bitcast i64 %88 to i64
	%90 = call i64 @mem.align_forward_uintptr(i64 %87, i64 %89, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	store i64 %90, i64* %12
	; ptr
	; IndexExpr
	; SelectorExpr
	%91 = load %mem.Scratch_Allocator*, %mem.Scratch_Allocator** %7, align 8
	%92 = getelementptr inbounds %mem.Scratch_Allocator, %mem.Scratch_Allocator* %91, i64 0
	%93 = getelementptr inbounds %mem.Scratch_Allocator, %mem.Scratch_Allocator* %92, i64 0, i32 0
	%94 = load {i8*, i64}, {i8*, i64}* %93, align 8
	%95 = extractvalue {i8*, i64} %94, 0
	%96 = load i64, i64* %12, align 8
	%97 = bitcast i64 %96 to i64
	%98 = extractvalue {i8*, i64} %94, 1
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([28 x i8], [28 x i8]* @str$89, i64 0, i32 0), i64 27}, i64 198, i64 25, i64 %97, i64 %98)
	%99 = getelementptr inbounds i8, i8* %95, i64 %97
	store i8* %99, i8** %13
	%100 = load i8*, i8** %13, align 8
	%101 = load i64, i64* %2, align 8
	%102 = bitcast i8* %100 to %..rawptr
	%103 = call %..rawptr @mem.zero(%..rawptr %102, i64 %101)
	; AssignStmt
	; SelectorExpr
	%104 = load %mem.Scratch_Allocator*, %mem.Scratch_Allocator** %7, align 8
	%105 = getelementptr inbounds %mem.Scratch_Allocator, %mem.Scratch_Allocator* %104, i64 0
	%106 = getelementptr inbounds %mem.Scratch_Allocator, %mem.Scratch_Allocator* %105, i64 0, i32 2
	%107 = load i64, i64* %12, align 8
	%108 = bitcast i64 %107 to i64
	store i64 %108, i64* %106
	; AssignStmt
	; SelectorExpr
	%109 = load %mem.Scratch_Allocator*, %mem.Scratch_Allocator** %7, align 8
	%110 = getelementptr inbounds %mem.Scratch_Allocator, %mem.Scratch_Allocator* %109, i64 0
	%111 = getelementptr inbounds %mem.Scratch_Allocator, %mem.Scratch_Allocator* %110, i64 0, i32 1
	%112 = load i64, i64* %12, align 8
	%113 = bitcast i64 %112 to i64
	%114 = load i64, i64* %2, align 8
	%115 = add i64 %113, %114
	store i64 %115, i64* %111
	; ReturnStmt
	%116 = load i8*, i8** %13, align 8
	%117 = bitcast i8* %116 to %..rawptr
	ret %..rawptr %117

switch.case.next-7:
	; a
	; SelectorExpr
	%118 = load %mem.Scratch_Allocator*, %mem.Scratch_Allocator** %7, align 8
	%119 = getelementptr inbounds %mem.Scratch_Allocator, %mem.Scratch_Allocator* %118, i64 0
	%120 = getelementptr inbounds %mem.Scratch_Allocator, %mem.Scratch_Allocator* %119, i64 0, i32 3
	%121 = load %mem.Allocator, %mem.Allocator* %120, align 8
	store %mem.Allocator %121, %mem.Allocator* %16
	; IfStmt
	; SelectorExpr
	%122 = getelementptr inbounds %mem.Allocator, %mem.Allocator* %16, i64 0, i32 0
	%123 = load %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64, %runtime.Source_Code_Location*, %runtime.Context*)*, %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64, %runtime.Source_Code_Location*, %runtime.Context*)** %122, align 8
	%124 = icmp eq %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64, %runtime.Source_Code_Location*, %runtime.Context*)* %123, zeroinitializer
	%125 = zext i1 %124 to i8
	%126 = trunc i8 %125 to i1
	br i1 %126, label %if.then-9, label %if.done-10

switch.fall.body-8:
	; offset
	%127 = load i64, i64* %3, align 8
	%128 = bitcast i64 %127 to i64
	%129 = call i64 @mem.align_forward_uintptr(i64 0, i64 %128, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	store i64 %129, i64* %14
	; ptr
	; IndexExpr
	; SelectorExpr
	%130 = load %mem.Scratch_Allocator*, %mem.Scratch_Allocator** %7, align 8
	%131 = getelementptr inbounds %mem.Scratch_Allocator, %mem.Scratch_Allocator* %130, i64 0
	%132 = getelementptr inbounds %mem.Scratch_Allocator, %mem.Scratch_Allocator* %131, i64 0, i32 0
	%133 = load {i8*, i64}, {i8*, i64}* %132, align 8
	%134 = extractvalue {i8*, i64} %133, 0
	%135 = load i64, i64* %14, align 8
	%136 = bitcast i64 %135 to i64
	%137 = extractvalue {i8*, i64} %133, 1
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([28 x i8], [28 x i8]* @str$8a, i64 0, i32 0), i64 27}, i64 205, i64 25, i64 %136, i64 %137)
	%138 = getelementptr inbounds i8, i8* %134, i64 %136
	store i8* %138, i8** %15
	%139 = load i8*, i8** %15, align 8
	%140 = load i64, i64* %2, align 8
	%141 = bitcast i8* %139 to %..rawptr
	%142 = call %..rawptr @mem.zero(%..rawptr %141, i64 %140)
	; AssignStmt
	; SelectorExpr
	%143 = load %mem.Scratch_Allocator*, %mem.Scratch_Allocator** %7, align 8
	%144 = getelementptr inbounds %mem.Scratch_Allocator, %mem.Scratch_Allocator* %143, i64 0
	%145 = getelementptr inbounds %mem.Scratch_Allocator, %mem.Scratch_Allocator* %144, i64 0, i32 2
	%146 = load i64, i64* %14, align 8
	%147 = bitcast i64 %146 to i64
	store i64 %147, i64* %145
	; AssignStmt
	; SelectorExpr
	%148 = load %mem.Scratch_Allocator*, %mem.Scratch_Allocator** %7, align 8
	%149 = getelementptr inbounds %mem.Scratch_Allocator, %mem.Scratch_Allocator* %148, i64 0
	%150 = getelementptr inbounds %mem.Scratch_Allocator, %mem.Scratch_Allocator* %149, i64 0, i32 1
	%151 = load i64, i64* %14, align 8
	%152 = bitcast i64 %151 to i64
	%153 = load i64, i64* %2, align 8
	%154 = add i64 %152, %153
	store i64 %154, i64* %150
	; ReturnStmt
	%155 = load i8*, i8** %15, align 8
	%156 = bitcast i8* %155 to %..rawptr
	ret %..rawptr %156

if.then-9:
	; AssignStmt
	; SelectorExpr
	%157 = getelementptr inbounds %runtime.Context, %runtime.Context* %__.context_ptr, i64 0, i32 0
	%158 = load %mem.Allocator, %mem.Allocator* %157, align 8
	store %mem.Allocator %158, %mem.Allocator* %16
	; AssignStmt
	; SelectorExpr
	%159 = load %mem.Scratch_Allocator*, %mem.Scratch_Allocator** %7, align 8
	%160 = getelementptr inbounds %mem.Scratch_Allocator, %mem.Scratch_Allocator* %159, i64 0
	%161 = getelementptr inbounds %mem.Scratch_Allocator, %mem.Scratch_Allocator* %160, i64 0, i32 3
	%162 = load %mem.Allocator, %mem.Allocator* %16, align 8
	store %mem.Allocator %162, %mem.Allocator* %161
	br label %if.done-10

if.done-10:
	; ptr
	%163 = load i64, i64* %2, align 8
	%164 = load i64, i64* %3, align 8
	%165 = load %mem.Allocator, %mem.Allocator* %16, align 8
	%166 = load %runtime.Source_Code_Location, %runtime.Source_Code_Location* %loc, align 8
	%167 = bitcast %mem.Allocator* %18 to %..rawptr
	store %mem.Allocator zeroinitializer, %mem.Allocator* %18
	store %mem.Allocator %165, %mem.Allocator* %18
	%168 = bitcast %runtime.Source_Code_Location* %19 to %..rawptr
	store %runtime.Source_Code_Location zeroinitializer, %runtime.Source_Code_Location* %19
	store %runtime.Source_Code_Location %166, %runtime.Source_Code_Location* %19
	%169 = call %..rawptr @mem.alloc(i64 %163, i64 %164, %mem.Allocator* %18, %runtime.Source_Code_Location* %19, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	store %..rawptr %169, %..rawptr* %17
	; IfStmt
	; SelectorExpr
	%170 = load %mem.Scratch_Allocator*, %mem.Scratch_Allocator** %7, align 8
	%171 = getelementptr inbounds %mem.Scratch_Allocator, %mem.Scratch_Allocator* %170, i64 0
	%172 = getelementptr inbounds %mem.Scratch_Allocator, %mem.Scratch_Allocator* %171, i64 0, i32 4
	%173 = load {%..rawptr*, i64, i64, %mem.Allocator}, {%..rawptr*, i64, i64, %mem.Allocator}* %172, align 8
	%174 = extractvalue {%..rawptr*, i64, i64, %mem.Allocator} %173, 0
	%175 = extractvalue {%..rawptr*, i64, i64, %mem.Allocator} %173, 2
	%176 = bitcast %..rawptr null to %..rawptr*
	%177 = icmp eq %..rawptr* %174, %176
	%178 = icmp eq i64 %175, 0
	%179 = zext i1 %177 to i8
	%180 = zext i1 %178 to i8
	%181 = or i8 %179, %180
	%182 = trunc i8 %181 to i1
	br i1 %182, label %if.then-11, label %if.done-12

if.then-11:
	; AssignStmt
	; SelectorExpr
	%183 = load %mem.Scratch_Allocator*, %mem.Scratch_Allocator** %7, align 8
	%184 = getelementptr inbounds %mem.Scratch_Allocator, %mem.Scratch_Allocator* %183, i64 0
	%185 = getelementptr inbounds %mem.Scratch_Allocator, %mem.Scratch_Allocator* %184, i64 0, i32 4
	%186 = load %mem.Allocator, %mem.Allocator* %16, align 8
	%187 = bitcast %mem.Allocator* %20 to %..rawptr
	store %mem.Allocator zeroinitializer, %mem.Allocator* %20
	store %mem.Allocator %186, %mem.Allocator* %20
	%188 = bitcast %runtime.Source_Code_Location* %21 to %..rawptr
	store %runtime.Source_Code_Location zeroinitializer, %runtime.Source_Code_Location* %21
	store %runtime.Source_Code_Location {%..string {i8* getelementptr inbounds ([28 x i8], [28 x i8]* @str$8b, i64 0, i32 0), i64 27}, i64 220, i64 33, %..string {i8* getelementptr inbounds ([23 x i8], [23 x i8]* @str$8c, i64 0, i32 0), i64 22}}, %runtime.Source_Code_Location* %21
	%189 = call {%..rawptr*, i64, i64, %mem.Allocator} @mem.make_dynamic_array-5177(%mem.Allocator* %20, %runtime.Source_Code_Location* %21, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	store {%..rawptr*, i64, i64, %mem.Allocator} %189, {%..rawptr*, i64, i64, %mem.Allocator}* %185
	br label %if.done-12

if.done-12:
	; SelectorExpr
	%190 = load %mem.Scratch_Allocator*, %mem.Scratch_Allocator** %7, align 8
	%191 = getelementptr inbounds %mem.Scratch_Allocator, %mem.Scratch_Allocator* %190, i64 0
	%192 = getelementptr inbounds %mem.Scratch_Allocator, %mem.Scratch_Allocator* %191, i64 0, i32 4
	%193 = load %..rawptr, %..rawptr* %17, align 8
	%194 = bitcast %runtime.Source_Code_Location* %22 to %..rawptr
	store %runtime.Source_Code_Location zeroinitializer, %runtime.Source_Code_Location* %22
	store %runtime.Source_Code_Location {%..string {i8* getelementptr inbounds ([28 x i8], [28 x i8]* @str$8d, i64 0, i32 0), i64 27}, i64 222, i64 3, %..string {i8* getelementptr inbounds ([23 x i8], [23 x i8]* @str$8e, i64 0, i32 0), i64 22}}, %runtime.Source_Code_Location* %22
	%195 = call i64 @runtime.append_elem-5222({%..rawptr*, i64, i64, %mem.Allocator}* %192, %..rawptr %193, %runtime.Source_Code_Location* %22, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	; ReturnStmt
	%196 = load %..rawptr, %..rawptr* %17, align 8
	ret %..rawptr %196

switch.case.next-13:
	%197 = icmp eq i8 %57, 2
	br i1 %197, label %switch.fall.body-18, label %switch.case.next-17

switch.fall.body-14:
	; last_ptr
	; IndexExpr
	; SelectorExpr
	%198 = load %mem.Scratch_Allocator*, %mem.Scratch_Allocator** %7, align 8
	%199 = getelementptr inbounds %mem.Scratch_Allocator, %mem.Scratch_Allocator* %198, i64 0
	%200 = getelementptr inbounds %mem.Scratch_Allocator, %mem.Scratch_Allocator* %199, i64 0, i32 0
	%201 = load {i8*, i64}, {i8*, i64}* %200, align 8
	%202 = extractvalue {i8*, i64} %201, 0
	; SelectorExpr
	%203 = load %mem.Scratch_Allocator*, %mem.Scratch_Allocator** %7, align 8
	%204 = getelementptr inbounds %mem.Scratch_Allocator, %mem.Scratch_Allocator* %203, i64 0
	%205 = getelementptr inbounds %mem.Scratch_Allocator, %mem.Scratch_Allocator* %204, i64 0, i32 2
	%206 = load i64, i64* %205, align 8
	%207 = extractvalue {i8*, i64} %201, 1
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([28 x i8], [28 x i8]* @str$8f, i64 0, i32 0), i64 27}, i64 227, i64 44, i64 %206, i64 %207)
	%208 = getelementptr inbounds i8, i8* %202, i64 %206
	%209 = bitcast i8* %208 to %..rawptr
	store %..rawptr %209, %..rawptr* %23
	; IfStmt
	%210 = load %..rawptr, %..rawptr* %4, align 8
	%211 = load %..rawptr, %..rawptr* %23, align 8
	%212 = icmp eq %..rawptr %210, %211
	%213 = zext i1 %212 to i8
	%214 = trunc i8 %213 to i1
	br i1 %214, label %if.then-15, label %if.done-16

if.then-15:
	; full_size
	; SelectorExpr
	%215 = load %mem.Scratch_Allocator*, %mem.Scratch_Allocator** %7, align 8
	%216 = getelementptr inbounds %mem.Scratch_Allocator, %mem.Scratch_Allocator* %215, i64 0
	%217 = getelementptr inbounds %mem.Scratch_Allocator, %mem.Scratch_Allocator* %216, i64 0, i32 1
	%218 = load i64, i64* %217, align 8
	; SelectorExpr
	%219 = load %mem.Scratch_Allocator*, %mem.Scratch_Allocator** %7, align 8
	%220 = getelementptr inbounds %mem.Scratch_Allocator, %mem.Scratch_Allocator* %219, i64 0
	%221 = getelementptr inbounds %mem.Scratch_Allocator, %mem.Scratch_Allocator* %220, i64 0, i32 2
	%222 = load i64, i64* %221, align 8
	%223 = sub i64 %218, %222
	store i64 %223, i64* %24
	; AssignStmt
	; SelectorExpr
	%224 = load %mem.Scratch_Allocator*, %mem.Scratch_Allocator** %7, align 8
	%225 = getelementptr inbounds %mem.Scratch_Allocator, %mem.Scratch_Allocator* %224, i64 0
	%226 = getelementptr inbounds %mem.Scratch_Allocator, %mem.Scratch_Allocator* %225, i64 0, i32 1
	; SelectorExpr
	%227 = load %mem.Scratch_Allocator*, %mem.Scratch_Allocator** %7, align 8
	%228 = getelementptr inbounds %mem.Scratch_Allocator, %mem.Scratch_Allocator* %227, i64 0
	%229 = getelementptr inbounds %mem.Scratch_Allocator, %mem.Scratch_Allocator* %228, i64 0, i32 2
	%230 = load i64, i64* %229, align 8
	store i64 %230, i64* %226
	%231 = load %..rawptr, %..rawptr* %23, align 8
	%232 = load i64, i64* %24, align 8
	%233 = call %..rawptr @mem.zero(%..rawptr %231, i64 %232)
	; ReturnStmt
	ret %..rawptr zeroinitializer

if.done-16:
	br label %switch.done-27

switch.case.next-17:
	%234 = icmp eq i8 %57, 3
	br i1 %234, label %switch.fall.body-23, label %switch.case.next-22

switch.fall.body-18:
	; AssignStmt
	; SelectorExpr
	%235 = load %mem.Scratch_Allocator*, %mem.Scratch_Allocator** %7, align 8
	%236 = getelementptr inbounds %mem.Scratch_Allocator, %mem.Scratch_Allocator* %235, i64 0
	%237 = getelementptr inbounds %mem.Scratch_Allocator, %mem.Scratch_Allocator* %236, i64 0, i32 1
	store i64 0, i64* %237
	; AssignStmt
	; SelectorExpr
	%238 = load %mem.Scratch_Allocator*, %mem.Scratch_Allocator** %7, align 8
	%239 = getelementptr inbounds %mem.Scratch_Allocator, %mem.Scratch_Allocator* %238, i64 0
	%240 = getelementptr inbounds %mem.Scratch_Allocator, %mem.Scratch_Allocator* %239, i64 0, i32 2
	store i64 0, i64* %240
	; RangeStmt
	; ptr
	%241 = bitcast %..rawptr* %25 to %..rawptr
	store %..rawptr zeroinitializer, %..rawptr* %25
	; SelectorExpr
	%242 = load %mem.Scratch_Allocator*, %mem.Scratch_Allocator** %7, align 8
	%243 = getelementptr inbounds %mem.Scratch_Allocator, %mem.Scratch_Allocator* %242, i64 0
	%244 = getelementptr inbounds %mem.Scratch_Allocator, %mem.Scratch_Allocator* %243, i64 0, i32 4
	%245 = getelementptr inbounds {%..rawptr*, i64, i64, %mem.Allocator}, {%..rawptr*, i64, i64, %mem.Allocator}* %244, i64 0, i32 1
	%246 = bitcast i64* %26 to %..rawptr
	store i64 zeroinitializer, i64* %26
	store i64 -1, i64* %26
	br label %for.index.loop-19

for.index.loop-19:
	%247 = load i64, i64* %26, align 8
	%248 = add i64 %247, 1
	store i64 %248, i64* %26
	%249 = load i64, i64* %245, align 8
	%250 = icmp slt i64 %248, %249
	br i1 %250, label %for.index.body-20, label %for.index.done-21

for.index.body-20:
	%251 = load i64, i64* %26, align 8
	%252 = getelementptr inbounds {%..rawptr*, i64, i64, %mem.Allocator}, {%..rawptr*, i64, i64, %mem.Allocator}* %244, i64 0, i32 0
	%253 = load %..rawptr*, %..rawptr** %252, align 8
	%254 = getelementptr inbounds %..rawptr, %..rawptr* %253, i64 %251
	%255 = load %..rawptr, %..rawptr* %254, align 8
	store %..rawptr %255, %..rawptr* %25
	%256 = load %..rawptr, %..rawptr* %25, align 8
	; SelectorExpr
	%257 = load %mem.Scratch_Allocator*, %mem.Scratch_Allocator** %7, align 8
	%258 = getelementptr inbounds %mem.Scratch_Allocator, %mem.Scratch_Allocator* %257, i64 0
	%259 = getelementptr inbounds %mem.Scratch_Allocator, %mem.Scratch_Allocator* %258, i64 0, i32 3
	%260 = load %mem.Allocator, %mem.Allocator* %259, align 8
	%261 = bitcast %mem.Allocator* %27 to %..rawptr
	store %mem.Allocator zeroinitializer, %mem.Allocator* %27
	store %mem.Allocator %260, %mem.Allocator* %27
	%262 = bitcast %runtime.Source_Code_Location* %28 to %..rawptr
	store %runtime.Source_Code_Location zeroinitializer, %runtime.Source_Code_Location* %28
	store %runtime.Source_Code_Location {%..string {i8* getelementptr inbounds ([28 x i8], [28 x i8]* @str$90, i64 0, i32 0), i64 27}, i64 240, i64 4, %..string {i8* getelementptr inbounds ([23 x i8], [23 x i8]* @str$91, i64 0, i32 0), i64 22}}, %runtime.Source_Code_Location* %28
	call void @mem.free(%..rawptr %256, %mem.Allocator* %27, %runtime.Source_Code_Location* %28, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %for.index.loop-19

for.index.done-21:
	; SelectorExpr
	%263 = load %mem.Scratch_Allocator*, %mem.Scratch_Allocator** %7, align 8
	%264 = getelementptr inbounds %mem.Scratch_Allocator, %mem.Scratch_Allocator* %263, i64 0
	%265 = getelementptr inbounds %mem.Scratch_Allocator, %mem.Scratch_Allocator* %264, i64 0, i32 4
	call void @runtime.clear_dynamic_array-5251({%..rawptr*, i64, i64, %mem.Allocator}* %265)
	br label %switch.done-27

switch.case.next-22:
	br label %switch.done-27

switch.fall.body-23:
	; last_ptr
	; IndexExpr
	; SelectorExpr
	%266 = load %mem.Scratch_Allocator*, %mem.Scratch_Allocator** %7, align 8
	%267 = getelementptr inbounds %mem.Scratch_Allocator, %mem.Scratch_Allocator* %266, i64 0
	%268 = getelementptr inbounds %mem.Scratch_Allocator, %mem.Scratch_Allocator* %267, i64 0, i32 0
	%269 = load {i8*, i64}, {i8*, i64}* %268, align 8
	%270 = extractvalue {i8*, i64} %269, 0
	; SelectorExpr
	%271 = load %mem.Scratch_Allocator*, %mem.Scratch_Allocator** %7, align 8
	%272 = getelementptr inbounds %mem.Scratch_Allocator, %mem.Scratch_Allocator* %271, i64 0
	%273 = getelementptr inbounds %mem.Scratch_Allocator, %mem.Scratch_Allocator* %272, i64 0, i32 2
	%274 = load i64, i64* %273, align 8
	%275 = extractvalue {i8*, i64} %269, 1
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([28 x i8], [28 x i8]* @str$92, i64 0, i32 0), i64 27}, i64 245, i64 44, i64 %274, i64 %275)
	%276 = getelementptr inbounds i8, i8* %270, i64 %274
	%277 = bitcast i8* %276 to %..rawptr
	store %..rawptr %277, %..rawptr* %29
	; IfStmt
	%278 = load %..rawptr, %..rawptr* %4, align 8
	%279 = load %..rawptr, %..rawptr* %29, align 8
	%280 = icmp eq %..rawptr %278, %279
	%281 = zext i1 %280 to i8
	%282 = trunc i8 %281 to i1
	br i1 %282, label %cmp.and-24, label %if.done-26

cmp.and-24:
	; SelectorExpr
	%283 = load %mem.Scratch_Allocator*, %mem.Scratch_Allocator** %7, align 8
	%284 = getelementptr inbounds %mem.Scratch_Allocator, %mem.Scratch_Allocator* %283, i64 0
	%285 = getelementptr inbounds %mem.Scratch_Allocator, %mem.Scratch_Allocator* %284, i64 0, i32 0
	%286 = load {i8*, i64}, {i8*, i64}* %285, align 8
	%287 = extractvalue {i8*, i64} %286, 1
	; SelectorExpr
	%288 = load %mem.Scratch_Allocator*, %mem.Scratch_Allocator** %7, align 8
	%289 = getelementptr inbounds %mem.Scratch_Allocator, %mem.Scratch_Allocator* %288, i64 0
	%290 = getelementptr inbounds %mem.Scratch_Allocator, %mem.Scratch_Allocator* %289, i64 0, i32 2
	%291 = load i64, i64* %290, align 8
	%292 = sub i64 %287, %291
	%293 = load i64, i64* %2, align 8
	%294 = icmp sge i64 %292, %293
	%295 = zext i1 %294 to i8
	%296 = trunc i8 %295 to i1
	br i1 %296, label %if.then-25, label %if.done-26

if.then-25:
	; AssignStmt
	; SelectorExpr
	%297 = load %mem.Scratch_Allocator*, %mem.Scratch_Allocator** %7, align 8
	%298 = getelementptr inbounds %mem.Scratch_Allocator, %mem.Scratch_Allocator* %297, i64 0
	%299 = getelementptr inbounds %mem.Scratch_Allocator, %mem.Scratch_Allocator* %298, i64 0, i32 1
	; SelectorExpr
	%300 = load %mem.Scratch_Allocator*, %mem.Scratch_Allocator** %7, align 8
	%301 = getelementptr inbounds %mem.Scratch_Allocator, %mem.Scratch_Allocator* %300, i64 0
	%302 = getelementptr inbounds %mem.Scratch_Allocator, %mem.Scratch_Allocator* %301, i64 0, i32 2
	%303 = load i64, i64* %302, align 8
	%304 = load i64, i64* %2, align 8
	%305 = add i64 %303, %304
	store i64 %305, i64* %299
	; ReturnStmt
	%306 = load %..rawptr, %..rawptr* %4, align 8
	ret %..rawptr %306

if.done-26:
	; ReturnStmt
	%307 = load %..rawptr, %..rawptr* %0, align 8
	%308 = load i64, i64* %2, align 8
	%309 = load i64, i64* %3, align 8
	%310 = load %..rawptr, %..rawptr* %4, align 8
	%311 = load i64, i64* %5, align 8
	%312 = load i64, i64* %6, align 8
	%313 = load %runtime.Source_Code_Location, %runtime.Source_Code_Location* %loc, align 8
	%314 = bitcast %runtime.Source_Code_Location* %30 to %..rawptr
	store %runtime.Source_Code_Location zeroinitializer, %runtime.Source_Code_Location* %30
	store %runtime.Source_Code_Location %313, %runtime.Source_Code_Location* %30
	%315 = call %..rawptr @mem.scratch_allocator_proc(%..rawptr %307, i8 0, i64 %308, i64 %309, %..rawptr %310, i64 %311, i64 %312, %runtime.Source_Code_Location* %30, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	ret %..rawptr %315

switch.done-27:
	; ReturnStmt
	ret %..rawptr zeroinitializer
}

define void @log.nil_logger_proc(%..rawptr %data, i64 %level, %..string %text, i8 %options, %runtime.Source_Code_Location* %location, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca %..rawptr, align 16
	%1 = alloca i64, align 16
	%2 = alloca %..string, align 16
	%3 = alloca i8, align 16
	store %..rawptr %data, %..rawptr* %0
	store i64 %level, i64* %1
	store %..string %text, %..string* %2
	store i8 %options, i8* %3
	%4 = load %runtime.Source_Code_Location, %runtime.Source_Code_Location* %location, align 8
	ret void
}

define {[4 x i8], i64} @utf8.encode_rune(i32 %r, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca i32, align 16
	%1 = alloca [4 x i8], align 16
	%2 = alloca i32, align 16
	%3 = alloca {[4 x i8], i64}, align 16
	%4 = alloca {[4 x i8], i64}, align 16
	%5 = alloca {[4 x i8], i64}, align 16
	%6 = alloca {[4 x i8], i64}, align 16
	store i32 %r, i32* %0
	; buf
	%7 = bitcast [4 x i8]* %1 to %..rawptr
	%8 = call %..rawptr @mem.zero(%..rawptr %7, i64 4) noinline
	store [4 x i8] zeroinitializer, [4 x i8]* %1
	; i
	%9 = load i32, i32* %0, align 4
	%10 = bitcast i32 %9 to i32
	store i32 %10, i32* %2
	; IfStmt
	%11 = load i32, i32* %2, align 4
	%12 = icmp ule i32 %11, 127
	%13 = zext i1 %12 to i8
	%14 = trunc i8 %13 to i1
	br i1 %14, label %if.then-1, label %if.done-2

if.then-1:
	; AssignStmt
	; IndexExpr
	%15 = getelementptr inbounds [4 x i8], [4 x i8]* %1, i64 0, i32 0
	%16 = load i32, i32* %0, align 4
	%17 = trunc i32 %16 to i8
	store i8 %17, i8* %15
	; ReturnStmt
	%18 = load [4 x i8], [4 x i8]* %1, align 1
	%19 = bitcast {[4 x i8], i64}* %3 to %..rawptr
	%20 = call %..rawptr @mem.zero(%..rawptr %19, i64 16) noinline
	store {[4 x i8], i64} zeroinitializer, {[4 x i8], i64}* %3
	%21 = getelementptr inbounds {[4 x i8], i64}, {[4 x i8], i64}* %3, i64 0, i32 0
	store [4 x i8] %18, [4 x i8]* %21
	%22 = getelementptr inbounds {[4 x i8], i64}, {[4 x i8], i64}* %3, i64 0, i32 1
	store i64 1, i64* %22
	%23 = load {[4 x i8], i64}, {[4 x i8], i64}* %3, align 8
	ret {[4 x i8], i64} %23

if.done-2:
	; IfStmt
	%24 = load i32, i32* %2, align 4
	%25 = icmp ule i32 %24, 2047
	%26 = zext i1 %25 to i8
	%27 = trunc i8 %26 to i1
	br i1 %27, label %if.then-3, label %if.done-4

if.then-3:
	; AssignStmt
	; IndexExpr
	%28 = getelementptr inbounds [4 x i8], [4 x i8]* %1, i64 0, i32 0
	%29 = load i32, i32* %0, align 4
	%30 = ashr i32 %29, 6
	%31 = trunc i32 %30 to i8
	%32 = or i8 192, %31
	store i8 %32, i8* %28
	; AssignStmt
	; IndexExpr
	%33 = getelementptr inbounds [4 x i8], [4 x i8]* %1, i64 0, i32 1
	%34 = load i32, i32* %0, align 4
	%35 = trunc i32 %34 to i8
	%36 = and i8 %35, 63
	%37 = or i8 128, %36
	store i8 %37, i8* %33
	; ReturnStmt
	%38 = load [4 x i8], [4 x i8]* %1, align 1
	%39 = bitcast {[4 x i8], i64}* %4 to %..rawptr
	%40 = call %..rawptr @mem.zero(%..rawptr %39, i64 16) noinline
	store {[4 x i8], i64} zeroinitializer, {[4 x i8], i64}* %4
	%41 = getelementptr inbounds {[4 x i8], i64}, {[4 x i8], i64}* %4, i64 0, i32 0
	store [4 x i8] %38, [4 x i8]* %41
	%42 = getelementptr inbounds {[4 x i8], i64}, {[4 x i8], i64}* %4, i64 0, i32 1
	store i64 2, i64* %42
	%43 = load {[4 x i8], i64}, {[4 x i8], i64}* %4, align 8
	ret {[4 x i8], i64} %43

if.done-4:
	; IfStmt
	%44 = load i32, i32* %2, align 4
	%45 = icmp ugt i32 %44, 1114111
	%46 = zext i1 %45 to i8
	%47 = trunc i8 %46 to i1
	br i1 %47, label %if.then-7, label %cmp.or-5

cmp.or-5:
	%48 = load i32, i32* %2, align 4
	%49 = icmp ule i32 55296, %48
	%50 = zext i1 %49 to i8
	%51 = trunc i8 %50 to i1
	br i1 %51, label %cmp.and-6, label %if.done-8

cmp.and-6:
	%52 = load i32, i32* %2, align 4
	%53 = icmp ule i32 %52, 57343
	%54 = zext i1 %53 to i8
	%55 = trunc i8 %54 to i1
	br i1 %55, label %if.then-7, label %if.done-8

if.then-7:
	; AssignStmt
	store i32 65533, i32* %0
	br label %if.done-8

if.done-8:
	; IfStmt
	%56 = load i32, i32* %2, align 4
	%57 = icmp ule i32 %56, 65535
	%58 = zext i1 %57 to i8
	%59 = trunc i8 %58 to i1
	br i1 %59, label %if.then-9, label %if.done-10

if.then-9:
	; AssignStmt
	; IndexExpr
	%60 = getelementptr inbounds [4 x i8], [4 x i8]* %1, i64 0, i32 0
	%61 = load i32, i32* %0, align 4
	%62 = ashr i32 %61, 12
	%63 = trunc i32 %62 to i8
	%64 = or i8 224, %63
	store i8 %64, i8* %60
	; AssignStmt
	; IndexExpr
	%65 = getelementptr inbounds [4 x i8], [4 x i8]* %1, i64 0, i32 1
	%66 = load i32, i32* %0, align 4
	%67 = ashr i32 %66, 6
	%68 = trunc i32 %67 to i8
	%69 = and i8 %68, 63
	%70 = or i8 128, %69
	store i8 %70, i8* %65
	; AssignStmt
	; IndexExpr
	%71 = getelementptr inbounds [4 x i8], [4 x i8]* %1, i64 0, i32 2
	%72 = load i32, i32* %0, align 4
	%73 = trunc i32 %72 to i8
	%74 = and i8 %73, 63
	%75 = or i8 128, %74
	store i8 %75, i8* %71
	; ReturnStmt
	%76 = load [4 x i8], [4 x i8]* %1, align 1
	%77 = bitcast {[4 x i8], i64}* %5 to %..rawptr
	%78 = call %..rawptr @mem.zero(%..rawptr %77, i64 16) noinline
	store {[4 x i8], i64} zeroinitializer, {[4 x i8], i64}* %5
	%79 = getelementptr inbounds {[4 x i8], i64}, {[4 x i8], i64}* %5, i64 0, i32 0
	store [4 x i8] %76, [4 x i8]* %79
	%80 = getelementptr inbounds {[4 x i8], i64}, {[4 x i8], i64}* %5, i64 0, i32 1
	store i64 3, i64* %80
	%81 = load {[4 x i8], i64}, {[4 x i8], i64}* %5, align 8
	ret {[4 x i8], i64} %81

if.done-10:
	; AssignStmt
	; IndexExpr
	%82 = getelementptr inbounds [4 x i8], [4 x i8]* %1, i64 0, i32 0
	%83 = load i32, i32* %0, align 4
	%84 = ashr i32 %83, 18
	%85 = trunc i32 %84 to i8
	%86 = or i8 240, %85
	store i8 %86, i8* %82
	; AssignStmt
	; IndexExpr
	%87 = getelementptr inbounds [4 x i8], [4 x i8]* %1, i64 0, i32 1
	%88 = load i32, i32* %0, align 4
	%89 = ashr i32 %88, 12
	%90 = trunc i32 %89 to i8
	%91 = and i8 %90, 63
	%92 = or i8 128, %91
	store i8 %92, i8* %87
	; AssignStmt
	; IndexExpr
	%93 = getelementptr inbounds [4 x i8], [4 x i8]* %1, i64 0, i32 2
	%94 = load i32, i32* %0, align 4
	%95 = ashr i32 %94, 6
	%96 = trunc i32 %95 to i8
	%97 = and i8 %96, 63
	%98 = or i8 128, %97
	store i8 %98, i8* %93
	; AssignStmt
	; IndexExpr
	%99 = getelementptr inbounds [4 x i8], [4 x i8]* %1, i64 0, i32 3
	%100 = load i32, i32* %0, align 4
	%101 = trunc i32 %100 to i8
	%102 = and i8 %101, 63
	%103 = or i8 128, %102
	store i8 %103, i8* %99
	; ReturnStmt
	%104 = load [4 x i8], [4 x i8]* %1, align 1
	%105 = bitcast {[4 x i8], i64}* %6 to %..rawptr
	%106 = call %..rawptr @mem.zero(%..rawptr %105, i64 16) noinline
	store {[4 x i8], i64} zeroinitializer, {[4 x i8], i64}* %6
	%107 = getelementptr inbounds {[4 x i8], i64}, {[4 x i8], i64}* %6, i64 0, i32 0
	store [4 x i8] %104, [4 x i8]* %107
	%108 = getelementptr inbounds {[4 x i8], i64}, {[4 x i8], i64}* %6, i64 0, i32 1
	store i64 4, i64* %108
	%109 = load {[4 x i8], i64}, {[4 x i8], i64}* %6, align 8
	ret {[4 x i8], i64} %109
}

define {i32, i64} @utf8.decode_rune_from_string(%..string %s, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) alwaysinline #1 {
decls-0:
	%0 = alloca %..string, align 16
	%1 = alloca i8*, align 16
	%2 = alloca {i8*, i64}, align 16
	%3 = alloca {i8*, i64}, align 16
	%4 = alloca {i32, i64}, align 16
	store %..string %s, %..string* %0
	; ReturnStmt
	%5 = load %..string, %..string* %0, align 8
	%6 = extractvalue %..string %5, 0
	%7 = bitcast i8** %1 to %..rawptr
	%8 = call %..rawptr @mem.zero(%..rawptr %7, i64 8) noinline
	store i8* zeroinitializer, i8** %1
	store i8* %6, i8** %1
	%9 = extractvalue %..string %5, 1
	%10 = sub i64 %9, 0
	%11 = load i8*, i8** %1, align 8
	%12 = getelementptr inbounds i8, i8* %11, i64 0
	%13 = bitcast {i8*, i64}* %2 to %..rawptr
	%14 = call %..rawptr @mem.zero(%..rawptr %13, i64 16) noinline
	store {i8*, i64} zeroinitializer, {i8*, i64}* %2
	%15 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %2, i64 0, i32 0
	store i8* %12, i8** %15
	%16 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %2, i64 0, i32 1
	store i64 %10, i64* %16
	%17 = load {i8*, i64}, {i8*, i64}* %2, align 8
	%18 = bitcast {i8*, i64}* %3 to %..rawptr
	%19 = call %..rawptr @mem.zero(%..rawptr %18, i64 16) noinline
	store {i8*, i64} zeroinitializer, {i8*, i64}* %3
	store {i8*, i64} %17, {i8*, i64}* %3
	%20 = call {i32, i64} @utf8.decode_rune({i8*, i64}* %3, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) alwaysinline
	%21 = extractvalue {i32, i64} %20, 0
	%22 = extractvalue {i32, i64} %20, 1
	%23 = bitcast {i32, i64}* %4 to %..rawptr
	%24 = call %..rawptr @mem.zero(%..rawptr %23, i64 16) noinline
	store {i32, i64} zeroinitializer, {i32, i64}* %4
	%25 = getelementptr inbounds {i32, i64}, {i32, i64}* %4, i64 0, i32 0
	store i32 %21, i32* %25
	%26 = getelementptr inbounds {i32, i64}, {i32, i64}* %4, i64 0, i32 1
	store i64 %22, i64* %26
	%27 = load {i32, i64}, {i32, i64}* %4, align 8
	ret {i32, i64} %27
}

define {i32, i64} @utf8.decode_rune({i8*, i64}* %s, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca i64, align 16
	%1 = alloca {i32, i64}, align 16
	%2 = alloca i8, align 16
	%3 = alloca i8, align 16
	%4 = alloca i32, align 16
	%5 = alloca {i32, i64}, align 16
	%6 = alloca i8, align 16
	%7 = alloca %utf8.Accept_Range, align 16
	%8 = alloca {i32, i64}, align 16
	%9 = alloca i8, align 16
	%10 = alloca {i32, i64}, align 16
	%11 = alloca {i32, i64}, align 16
	%12 = alloca i8, align 16
	%13 = alloca {i32, i64}, align 16
	%14 = alloca {i32, i64}, align 16
	%15 = alloca i8, align 16
	%16 = alloca {i32, i64}, align 16
	%17 = alloca {i32, i64}, align 16
	%18 = load {i8*, i64}, {i8*, i64}* %s, align 8
	; n
	%19 = load {i8*, i64}, {i8*, i64}* %s, align 8
	%20 = extractvalue {i8*, i64} %19, 1
	store i64 %20, i64* %0
	; IfStmt
	%21 = load i64, i64* %0, align 8
	%22 = icmp slt i64 %21, 1
	%23 = zext i1 %22 to i8
	%24 = trunc i8 %23 to i1
	br i1 %24, label %if.then-1, label %if.done-2

if.then-1:
	; ReturnStmt
	%25 = bitcast {i32, i64}* %1 to %..rawptr
	%26 = call %..rawptr @mem.zero(%..rawptr %25, i64 16) noinline
	store {i32, i64} zeroinitializer, {i32, i64}* %1
	%27 = getelementptr inbounds {i32, i64}, {i32, i64}* %1, i64 0, i32 0
	store i32 65533, i32* %27
	%28 = getelementptr inbounds {i32, i64}, {i32, i64}* %1, i64 0, i32 1
	store i64 0, i64* %28
	%29 = load {i32, i64}, {i32, i64}* %1, align 8
	ret {i32, i64} %29

if.done-2:
	; s0
	; IndexExpr
	%30 = load {i8*, i64}, {i8*, i64}* %s, align 8
	%31 = extractvalue {i8*, i64} %30, 0
	%32 = extractvalue {i8*, i64} %30, 1
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([36 x i8], [36 x i8]* @str$93, i64 0, i32 0), i64 35}, i64 103, i64 10, i64 0, i64 %32)
	%33 = getelementptr inbounds i8, i8* %31, i64 0
	%34 = load i8, i8* %33, align 1
	store i8 %34, i8* %2
	; x
	; IndexExpr
	%35 = load i8, i8* %2, align 1
	%36 = zext i8 %35 to i64
	%37 = trunc i64 %36 to i32
	%38 = getelementptr inbounds [256 x i8], [256 x i8]* @utf8.accept_sizes, i64 0, i32 %37
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([36 x i8], [36 x i8]* @str$94, i64 0, i32 0), i64 35}, i64 104, i64 20, i64 %36, i64 256)
	%39 = load i8, i8* %38, align 1
	store i8 %39, i8* %3
	; IfStmt
	%40 = load i8, i8* %3, align 1
	%41 = icmp uge i8 %40, 240
	%42 = zext i1 %41 to i8
	%43 = trunc i8 %42 to i1
	br i1 %43, label %if.then-3, label %if.done-4

if.then-3:
	; mask
	%44 = load i8, i8* %3, align 1
	%45 = zext i8 %44 to i32
	%46 = shl i32 %45, 31
	%47 = ashr i32 %46, 31
	store i32 %47, i32* %4
	; ReturnStmt
	; IndexExpr
	%48 = load {i8*, i64}, {i8*, i64}* %s, align 8
	%49 = extractvalue {i8*, i64} %48, 0
	%50 = extractvalue {i8*, i64} %48, 1
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([36 x i8], [36 x i8]* @str$95, i64 0, i32 0), i64 35}, i64 107, i64 17, i64 0, i64 %50)
	%51 = getelementptr inbounds i8, i8* %49, i64 0
	%52 = load i8, i8* %51, align 1
	%53 = zext i8 %52 to i32
	%54 = load i32, i32* %4, align 4
	%55 = xor i32 %54, -1
	%56 = and i32 %53, %55
	%57 = load i32, i32* %4, align 4
	%58 = and i32 65533, %57
	%59 = or i32 %56, %58
	%60 = bitcast {i32, i64}* %5 to %..rawptr
	%61 = call %..rawptr @mem.zero(%..rawptr %60, i64 16) noinline
	store {i32, i64} zeroinitializer, {i32, i64}* %5
	%62 = getelementptr inbounds {i32, i64}, {i32, i64}* %5, i64 0, i32 0
	store i32 %59, i32* %62
	%63 = getelementptr inbounds {i32, i64}, {i32, i64}* %5, i64 0, i32 1
	store i64 1, i64* %63
	%64 = load {i32, i64}, {i32, i64}* %5, align 8
	ret {i32, i64} %64

if.done-4:
	; sz
	%65 = load i8, i8* %3, align 1
	%66 = and i8 %65, 7
	store i8 %66, i8* %6
	; accept
	; IndexExpr
	%67 = load i8, i8* %3, align 1
	%68 = lshr i8 %67, 4
	%69 = zext i8 %68 to i64
	%70 = trunc i64 %69 to i32
	%71 = getelementptr inbounds [5 x %utf8.Accept_Range], [5 x %utf8.Accept_Range]* @utf8.accept_ranges, i64 0, i32 %70
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([36 x i8], [36 x i8]* @str$96, i64 0, i32 0), i64 35}, i64 110, i64 26, i64 %69, i64 5)
	%72 = load %utf8.Accept_Range, %utf8.Accept_Range* %71, align 1
	store %utf8.Accept_Range %72, %utf8.Accept_Range* %7
	; IfStmt
	%73 = load i64, i64* %0, align 8
	%74 = load i8, i8* %6, align 1
	%75 = zext i8 %74 to i64
	%76 = icmp slt i64 %73, %75
	%77 = zext i1 %76 to i8
	%78 = trunc i8 %77 to i1
	br i1 %78, label %if.then-5, label %if.done-6

if.then-5:
	; ReturnStmt
	%79 = bitcast {i32, i64}* %8 to %..rawptr
	%80 = call %..rawptr @mem.zero(%..rawptr %79, i64 16) noinline
	store {i32, i64} zeroinitializer, {i32, i64}* %8
	%81 = getelementptr inbounds {i32, i64}, {i32, i64}* %8, i64 0, i32 0
	store i32 65533, i32* %81
	%82 = getelementptr inbounds {i32, i64}, {i32, i64}* %8, i64 0, i32 1
	store i64 1, i64* %82
	%83 = load {i32, i64}, {i32, i64}* %8, align 8
	ret {i32, i64} %83

if.done-6:
	; b1
	; IndexExpr
	%84 = load {i8*, i64}, {i8*, i64}* %s, align 8
	%85 = extractvalue {i8*, i64} %84, 0
	%86 = extractvalue {i8*, i64} %84, 1
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([36 x i8], [36 x i8]* @str$97, i64 0, i32 0), i64 35}, i64 114, i64 10, i64 1, i64 %86)
	%87 = getelementptr inbounds i8, i8* %85, i64 1
	%88 = load i8, i8* %87, align 1
	store i8 %88, i8* %9
	; IfStmt
	%89 = load i8, i8* %9, align 1
	; SelectorExpr
	%90 = getelementptr inbounds %utf8.Accept_Range, %utf8.Accept_Range* %7, i64 0, i32 0
	%91 = load i8, i8* %90, align 1
	%92 = icmp ult i8 %89, %91
	%93 = zext i1 %92 to i8
	%94 = trunc i8 %93 to i1
	br i1 %94, label %if.then-8, label %cmp.or-7

cmp.or-7:
	; SelectorExpr
	%95 = getelementptr inbounds %utf8.Accept_Range, %utf8.Accept_Range* %7, i64 0, i32 1
	%96 = load i8, i8* %95, align 1
	%97 = load i8, i8* %9, align 1
	%98 = icmp ult i8 %96, %97
	%99 = zext i1 %98 to i8
	%100 = trunc i8 %99 to i1
	br i1 %100, label %if.then-8, label %if.done-9

if.then-8:
	; ReturnStmt
	%101 = bitcast {i32, i64}* %10 to %..rawptr
	%102 = call %..rawptr @mem.zero(%..rawptr %101, i64 16) noinline
	store {i32, i64} zeroinitializer, {i32, i64}* %10
	%103 = getelementptr inbounds {i32, i64}, {i32, i64}* %10, i64 0, i32 0
	store i32 65533, i32* %103
	%104 = getelementptr inbounds {i32, i64}, {i32, i64}* %10, i64 0, i32 1
	store i64 1, i64* %104
	%105 = load {i32, i64}, {i32, i64}* %10, align 8
	ret {i32, i64} %105

if.done-9:
	; IfStmt
	%106 = load i8, i8* %6, align 1
	%107 = icmp eq i8 %106, 2
	%108 = zext i1 %107 to i8
	%109 = trunc i8 %108 to i1
	br i1 %109, label %if.then-10, label %if.done-11

if.then-10:
	; ReturnStmt
	%110 = load i8, i8* %2, align 1
	%111 = and i8 %110, 31
	%112 = zext i8 %111 to i32
	%113 = shl i32 %112, 6
	%114 = load i8, i8* %9, align 1
	%115 = and i8 %114, 63
	%116 = zext i8 %115 to i32
	%117 = or i32 %113, %116
	%118 = bitcast {i32, i64}* %11 to %..rawptr
	%119 = call %..rawptr @mem.zero(%..rawptr %118, i64 16) noinline
	store {i32, i64} zeroinitializer, {i32, i64}* %11
	%120 = getelementptr inbounds {i32, i64}, {i32, i64}* %11, i64 0, i32 0
	store i32 %117, i32* %120
	%121 = getelementptr inbounds {i32, i64}, {i32, i64}* %11, i64 0, i32 1
	store i64 2, i64* %121
	%122 = load {i32, i64}, {i32, i64}* %11, align 8
	ret {i32, i64} %122

if.done-11:
	; b2
	; IndexExpr
	%123 = load {i8*, i64}, {i8*, i64}* %s, align 8
	%124 = extractvalue {i8*, i64} %123, 0
	%125 = extractvalue {i8*, i64} %123, 1
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([36 x i8], [36 x i8]* @str$98, i64 0, i32 0), i64 35}, i64 121, i64 10, i64 2, i64 %125)
	%126 = getelementptr inbounds i8, i8* %124, i64 2
	%127 = load i8, i8* %126, align 1
	store i8 %127, i8* %12
	; IfStmt
	%128 = load i8, i8* %12, align 1
	%129 = icmp ult i8 %128, 128
	%130 = zext i1 %129 to i8
	%131 = trunc i8 %130 to i1
	br i1 %131, label %if.then-13, label %cmp.or-12

cmp.or-12:
	%132 = load i8, i8* %12, align 1
	%133 = icmp ult i8 191, %132
	%134 = zext i1 %133 to i8
	%135 = trunc i8 %134 to i1
	br i1 %135, label %if.then-13, label %if.done-14

if.then-13:
	; ReturnStmt
	%136 = bitcast {i32, i64}* %13 to %..rawptr
	%137 = call %..rawptr @mem.zero(%..rawptr %136, i64 16) noinline
	store {i32, i64} zeroinitializer, {i32, i64}* %13
	%138 = getelementptr inbounds {i32, i64}, {i32, i64}* %13, i64 0, i32 0
	store i32 65533, i32* %138
	%139 = getelementptr inbounds {i32, i64}, {i32, i64}* %13, i64 0, i32 1
	store i64 1, i64* %139
	%140 = load {i32, i64}, {i32, i64}* %13, align 8
	ret {i32, i64} %140

if.done-14:
	; IfStmt
	%141 = load i8, i8* %6, align 1
	%142 = icmp eq i8 %141, 3
	%143 = zext i1 %142 to i8
	%144 = trunc i8 %143 to i1
	br i1 %144, label %if.then-15, label %if.done-16

if.then-15:
	; ReturnStmt
	%145 = load i8, i8* %2, align 1
	%146 = and i8 %145, 15
	%147 = zext i8 %146 to i32
	%148 = shl i32 %147, 12
	%149 = load i8, i8* %9, align 1
	%150 = and i8 %149, 63
	%151 = zext i8 %150 to i32
	%152 = shl i32 %151, 6
	%153 = or i32 %148, %152
	%154 = load i8, i8* %12, align 1
	%155 = and i8 %154, 63
	%156 = zext i8 %155 to i32
	%157 = or i32 %153, %156
	%158 = bitcast {i32, i64}* %14 to %..rawptr
	%159 = call %..rawptr @mem.zero(%..rawptr %158, i64 16) noinline
	store {i32, i64} zeroinitializer, {i32, i64}* %14
	%160 = getelementptr inbounds {i32, i64}, {i32, i64}* %14, i64 0, i32 0
	store i32 %157, i32* %160
	%161 = getelementptr inbounds {i32, i64}, {i32, i64}* %14, i64 0, i32 1
	store i64 3, i64* %161
	%162 = load {i32, i64}, {i32, i64}* %14, align 8
	ret {i32, i64} %162

if.done-16:
	; b3
	; IndexExpr
	%163 = load {i8*, i64}, {i8*, i64}* %s, align 8
	%164 = extractvalue {i8*, i64} %163, 0
	%165 = extractvalue {i8*, i64} %163, 1
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([36 x i8], [36 x i8]* @str$99, i64 0, i32 0), i64 35}, i64 128, i64 10, i64 3, i64 %165)
	%166 = getelementptr inbounds i8, i8* %164, i64 3
	%167 = load i8, i8* %166, align 1
	store i8 %167, i8* %15
	; IfStmt
	%168 = load i8, i8* %15, align 1
	%169 = icmp ult i8 %168, 128
	%170 = zext i1 %169 to i8
	%171 = trunc i8 %170 to i1
	br i1 %171, label %if.then-18, label %cmp.or-17

cmp.or-17:
	%172 = load i8, i8* %15, align 1
	%173 = icmp ult i8 191, %172
	%174 = zext i1 %173 to i8
	%175 = trunc i8 %174 to i1
	br i1 %175, label %if.then-18, label %if.done-19

if.then-18:
	; ReturnStmt
	%176 = bitcast {i32, i64}* %16 to %..rawptr
	%177 = call %..rawptr @mem.zero(%..rawptr %176, i64 16) noinline
	store {i32, i64} zeroinitializer, {i32, i64}* %16
	%178 = getelementptr inbounds {i32, i64}, {i32, i64}* %16, i64 0, i32 0
	store i32 65533, i32* %178
	%179 = getelementptr inbounds {i32, i64}, {i32, i64}* %16, i64 0, i32 1
	store i64 1, i64* %179
	%180 = load {i32, i64}, {i32, i64}* %16, align 8
	ret {i32, i64} %180

if.done-19:
	; ReturnStmt
	%181 = load i8, i8* %2, align 1
	%182 = and i8 %181, 7
	%183 = zext i8 %182 to i32
	%184 = shl i32 %183, 18
	%185 = load i8, i8* %9, align 1
	%186 = and i8 %185, 63
	%187 = zext i8 %186 to i32
	%188 = shl i32 %187, 12
	%189 = or i32 %184, %188
	%190 = load i8, i8* %12, align 1
	%191 = and i8 %190, 63
	%192 = zext i8 %191 to i32
	%193 = shl i32 %192, 6
	%194 = or i32 %189, %193
	%195 = load i8, i8* %15, align 1
	%196 = and i8 %195, 63
	%197 = zext i8 %196 to i32
	%198 = or i32 %194, %197
	%199 = bitcast {i32, i64}* %17 to %..rawptr
	%200 = call %..rawptr @mem.zero(%..rawptr %199, i64 16) noinline
	store {i32, i64} zeroinitializer, {i32, i64}* %17
	%201 = getelementptr inbounds {i32, i64}, {i32, i64}* %17, i64 0, i32 0
	store i32 %198, i32* %201
	%202 = getelementptr inbounds {i32, i64}, {i32, i64}* %17, i64 0, i32 1
	store i64 4, i64* %202
	%203 = load {i32, i64}, {i32, i64}* %17, align 8
	ret {i32, i64} %203
}

define i64 @utf8.rune_count_from_string(%..string %s, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) alwaysinline #1 {
decls-0:
	%0 = alloca %..string, align 16
	%1 = alloca i8*, align 16
	%2 = alloca {i8*, i64}, align 16
	%3 = alloca {i8*, i64}, align 16
	store %..string %s, %..string* %0
	; ReturnStmt
	%4 = load %..string, %..string* %0, align 8
	%5 = extractvalue %..string %4, 0
	%6 = bitcast i8** %1 to %..rawptr
	%7 = call %..rawptr @mem.zero(%..rawptr %6, i64 8) noinline
	store i8* zeroinitializer, i8** %1
	store i8* %5, i8** %1
	%8 = extractvalue %..string %4, 1
	%9 = sub i64 %8, 0
	%10 = load i8*, i8** %1, align 8
	%11 = getelementptr inbounds i8, i8* %10, i64 0
	%12 = bitcast {i8*, i64}* %2 to %..rawptr
	%13 = call %..rawptr @mem.zero(%..rawptr %12, i64 16) noinline
	store {i8*, i64} zeroinitializer, {i8*, i64}* %2
	%14 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %2, i64 0, i32 0
	store i8* %11, i8** %14
	%15 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %2, i64 0, i32 1
	store i64 %9, i64* %15
	%16 = load {i8*, i64}, {i8*, i64}* %2, align 8
	%17 = bitcast {i8*, i64}* %3 to %..rawptr
	%18 = call %..rawptr @mem.zero(%..rawptr %17, i64 16) noinline
	store {i8*, i64} zeroinitializer, {i8*, i64}* %3
	store {i8*, i64} %16, {i8*, i64}* %3
	%19 = call i64 @utf8.rune_count({i8*, i64}* %3, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) alwaysinline
	ret i64 %19
}

define i64 @utf8.rune_count({i8*, i64}* %s, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca i64, align 16
	%1 = alloca i64, align 16
	%2 = alloca i64, align 16
	%3 = alloca i8, align 16
	%4 = alloca i8, align 16
	%5 = alloca i64, align 16
	%6 = alloca %utf8.Accept_Range, align 16
	%7 = alloca i8, align 16
	%8 = alloca i8, align 16
	%9 = alloca i8, align 16
	%10 = load {i8*, i64}, {i8*, i64}* %s, align 8
	; count
	store i64 0, i64* %0
	; n
	%11 = load {i8*, i64}, {i8*, i64}* %s, align 8
	%12 = extractvalue {i8*, i64} %11, 1
	store i64 %12, i64* %1
	; ForStmt
	; i
	store i64 0, i64* %2
	br label %for.loop-1

for.loop-1:
	%13 = load i64, i64* %2, align 8
	%14 = load i64, i64* %1, align 8
	%15 = icmp slt i64 %13, %14
	%16 = zext i1 %15 to i8
	%17 = trunc i8 %16 to i1
	br i1 %17, label %for.body-2, label %for.done-26

for.body-2:
	; DeferStmt
	; si
	; IndexExpr
	%18 = load {i8*, i64}, {i8*, i64}* %s, align 8
	%19 = extractvalue {i8*, i64} %18, 0
	%20 = load i64, i64* %2, align 8
	%21 = extractvalue {i8*, i64} %18, 1
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([36 x i8], [36 x i8]* @str$9a, i64 0, i32 0), i64 35}, i64 225, i64 11, i64 %20, i64 %21)
	%22 = getelementptr inbounds i8, i8* %19, i64 %20
	%23 = load i8, i8* %22, align 1
	store i8 %23, i8* %3
	; IfStmt
	%24 = load i8, i8* %3, align 1
	%25 = icmp ult i8 %24, 128
	%26 = zext i1 %25 to i8
	%27 = trunc i8 %26 to i1
	br i1 %27, label %if.then-3, label %if.done-4

if.then-3:
	; AssignStmt
	%28 = load i64, i64* %2, align 8
	%29 = add i64 %28, 1
	store i64 %29, i64* %2
	; defer
	; AssignStmt
	%30 = load i64, i64* %0, align 8
	%31 = add i64 %30, 1
	store i64 %31, i64* %0
	; continue
	br label %for.loop-1

if.done-4:
	; x
	; IndexExpr
	%32 = load i8, i8* %3, align 1
	%33 = zext i8 %32 to i64
	%34 = trunc i64 %33 to i32
	%35 = getelementptr inbounds [256 x i8], [256 x i8]* @utf8.accept_sizes, i64 0, i32 %34
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([36 x i8], [36 x i8]* @str$9b, i64 0, i32 0), i64 35}, i64 230, i64 21, i64 %33, i64 256)
	%36 = load i8, i8* %35, align 1
	store i8 %36, i8* %4
	; IfStmt
	%37 = load i8, i8* %4, align 1
	%38 = icmp eq i8 %37, 241
	%39 = zext i1 %38 to i8
	%40 = trunc i8 %39 to i1
	br i1 %40, label %if.then-5, label %if.done-6

if.then-5:
	; AssignStmt
	%41 = load i64, i64* %2, align 8
	%42 = add i64 %41, 1
	store i64 %42, i64* %2
	; defer
	; AssignStmt
	%43 = load i64, i64* %0, align 8
	%44 = add i64 %43, 1
	store i64 %44, i64* %0
	; continue
	br label %for.loop-1

if.done-6:
	; size
	%45 = load i8, i8* %4, align 1
	%46 = and i8 %45, 7
	%47 = zext i8 %46 to i64
	store i64 %47, i64* %5
	; IfStmt
	%48 = load i64, i64* %2, align 8
	%49 = load i64, i64* %5, align 8
	%50 = add i64 %48, %49
	%51 = load i64, i64* %1, align 8
	%52 = icmp sgt i64 %50, %51
	%53 = zext i1 %52 to i8
	%54 = trunc i8 %53 to i1
	br i1 %54, label %if.then-7, label %if.done-8

if.then-7:
	; AssignStmt
	%55 = load i64, i64* %2, align 8
	%56 = add i64 %55, 1
	store i64 %56, i64* %2
	; defer
	; AssignStmt
	%57 = load i64, i64* %0, align 8
	%58 = add i64 %57, 1
	store i64 %58, i64* %0
	; continue
	br label %for.loop-1

if.done-8:
	; ar
	; IndexExpr
	%59 = load i8, i8* %4, align 1
	%60 = lshr i8 %59, 4
	%61 = zext i8 %60 to i64
	%62 = trunc i64 %61 to i32
	%63 = getelementptr inbounds [5 x %utf8.Accept_Range], [5 x %utf8.Accept_Range]* @utf8.accept_ranges, i64 0, i32 %62
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([36 x i8], [36 x i8]* @str$9c, i64 0, i32 0), i64 35}, i64 240, i64 23, i64 %61, i64 5)
	%64 = load %utf8.Accept_Range, %utf8.Accept_Range* %63, align 1
	store %utf8.Accept_Range %64, %utf8.Accept_Range* %6
	; IfStmt
	; b
	; IndexExpr
	%65 = load {i8*, i64}, {i8*, i64}* %s, align 8
	%66 = extractvalue {i8*, i64} %65, 0
	%67 = load i64, i64* %2, align 8
	%68 = add i64 %67, 1
	%69 = extractvalue {i8*, i64} %65, 1
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([36 x i8], [36 x i8]* @str$9d, i64 0, i32 0), i64 35}, i64 241, i64 13, i64 %68, i64 %69)
	%70 = getelementptr inbounds i8, i8* %66, i64 %68
	%71 = load i8, i8* %70, align 1
	store i8 %71, i8* %7
	%72 = load i8, i8* %7, align 1
	; SelectorExpr
	%73 = getelementptr inbounds %utf8.Accept_Range, %utf8.Accept_Range* %6, i64 0, i32 0
	%74 = load i8, i8* %73, align 1
	%75 = icmp ult i8 %72, %74
	%76 = zext i1 %75 to i8
	%77 = trunc i8 %76 to i1
	br i1 %77, label %if.then-10, label %cmp.or-9

cmp.or-9:
	; SelectorExpr
	%78 = getelementptr inbounds %utf8.Accept_Range, %utf8.Accept_Range* %6, i64 0, i32 1
	%79 = load i8, i8* %78, align 1
	%80 = load i8, i8* %7, align 1
	%81 = icmp ult i8 %79, %80
	%82 = zext i1 %81 to i8
	%83 = trunc i8 %82 to i1
	br i1 %83, label %if.then-10, label %if.else-11

if.then-10:
	; AssignStmt
	store i64 1, i64* %5
	br label %if.done-25

if.else-11:
	; IfStmt
	%84 = load i64, i64* %5, align 8
	%85 = icmp eq i64 %84, 2
	%86 = zext i1 %85 to i8
	%87 = trunc i8 %86 to i1
	br i1 %87, label %if.then-12, label %if.else-13

if.then-12:
	br label %if.done-24

if.else-13:
	; IfStmt
	; b
	; IndexExpr
	%88 = load {i8*, i64}, {i8*, i64}* %s, align 8
	%89 = extractvalue {i8*, i64} %88, 0
	%90 = load i64, i64* %2, align 8
	%91 = add i64 %90, 2
	%92 = extractvalue {i8*, i64} %88, 1
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([36 x i8], [36 x i8]* @str$9e, i64 0, i32 0), i64 35}, i64 245, i64 20, i64 %91, i64 %92)
	%93 = getelementptr inbounds i8, i8* %89, i64 %91
	%94 = load i8, i8* %93, align 1
	store i8 %94, i8* %8
	%95 = load i8, i8* %8, align 1
	%96 = icmp ult i8 %95, 128
	%97 = zext i1 %96 to i8
	%98 = trunc i8 %97 to i1
	br i1 %98, label %if.then-15, label %cmp.or-14

cmp.or-14:
	%99 = load i8, i8* %8, align 1
	%100 = icmp ult i8 191, %99
	%101 = zext i1 %100 to i8
	%102 = trunc i8 %101 to i1
	br i1 %102, label %if.then-15, label %if.else-16

if.then-15:
	; AssignStmt
	store i64 1, i64* %5
	br label %if.done-23

if.else-16:
	; IfStmt
	%103 = load i64, i64* %5, align 8
	%104 = icmp eq i64 %103, 3
	%105 = zext i1 %104 to i8
	%106 = trunc i8 %105 to i1
	br i1 %106, label %if.then-17, label %if.else-18

if.then-17:
	br label %if.done-22

if.else-18:
	; IfStmt
	; b
	; IndexExpr
	%107 = load {i8*, i64}, {i8*, i64}* %s, align 8
	%108 = extractvalue {i8*, i64} %107, 0
	%109 = load i64, i64* %2, align 8
	%110 = add i64 %109, 3
	%111 = extractvalue {i8*, i64} %107, 1
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([36 x i8], [36 x i8]* @str$9f, i64 0, i32 0), i64 35}, i64 249, i64 20, i64 %110, i64 %111)
	%112 = getelementptr inbounds i8, i8* %108, i64 %110
	%113 = load i8, i8* %112, align 1
	store i8 %113, i8* %9
	%114 = load i8, i8* %9, align 1
	%115 = icmp ult i8 %114, 128
	%116 = zext i1 %115 to i8
	%117 = trunc i8 %116 to i1
	br i1 %117, label %if.then-20, label %cmp.or-19

cmp.or-19:
	%118 = load i8, i8* %9, align 1
	%119 = icmp ult i8 191, %118
	%120 = zext i1 %119 to i8
	%121 = trunc i8 %120 to i1
	br i1 %121, label %if.then-20, label %if.done-21

if.then-20:
	; AssignStmt
	store i64 1, i64* %5
	br label %if.done-21

if.done-21:
	br label %if.done-22

if.done-22:
	br label %if.done-23

if.done-23:
	br label %if.done-24

if.done-24:
	br label %if.done-25

if.done-25:
	; AssignStmt
	%122 = load i64, i64* %5, align 8
	%123 = load i64, i64* %2, align 8
	%124 = add i64 %123, %122
	store i64 %124, i64* %2
	; defer
	; AssignStmt
	%125 = load i64, i64* %0, align 8
	%126 = add i64 %125, 1
	store i64 %126, i64* %0
	br label %for.loop-1

for.done-26:
	; ReturnStmt
	%127 = load i64, i64* %0, align 8
	ret i64 %127
}

define {i8*, i64, i64, %mem.Allocator} @fmt.string_buffer_from_slice({i8*, i64}* %backing, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca %mem.Raw_Slice, align 16
	%1 = alloca %mem.Raw_Dynamic_Array, align 16
	%2 = alloca %mem.Raw_Dynamic_Array, align 16
	%3 = load {i8*, i64}, {i8*, i64}* %backing, align 8
	; s
	%4 = load {i8*, i64}, {i8*, i64}* %backing, align 8
	%5 = bitcast {i8*, i64}* %backing to %mem.Raw_Slice*
	%6 = load %mem.Raw_Slice, %mem.Raw_Slice* %5, align 8
	store %mem.Raw_Slice %6, %mem.Raw_Slice* %0
	; d
	; CompoundLit
	%7 = bitcast %mem.Raw_Dynamic_Array* %2 to %..rawptr
	%8 = call %..rawptr @mem.zero(%..rawptr %7, i64 40) noinline
	store %mem.Raw_Dynamic_Array zeroinitializer, %mem.Raw_Dynamic_Array* %2
	store %mem.Raw_Dynamic_Array {%..rawptr zeroinitializer, i64 0, i64 zeroinitializer, %mem.Allocator zeroinitializer}, %mem.Raw_Dynamic_Array* %2
	; SelectorExpr
	%9 = getelementptr inbounds %mem.Raw_Slice, %mem.Raw_Slice* %0, i64 0, i32 0
	%10 = load %..rawptr, %..rawptr* %9, align 8
	%11 = getelementptr inbounds %mem.Raw_Dynamic_Array, %mem.Raw_Dynamic_Array* %2, i64 0, i32 0
	store %..rawptr %10, %..rawptr* %11
	; SelectorExpr
	%12 = getelementptr inbounds %mem.Raw_Slice, %mem.Raw_Slice* %0, i64 0, i32 1
	%13 = load i64, i64* %12, align 8
	%14 = getelementptr inbounds %mem.Raw_Dynamic_Array, %mem.Raw_Dynamic_Array* %2, i64 0, i32 2
	store i64 %13, i64* %14
	; SelectorExpr
	%15 = call %mem.Allocator @mem.nil_allocator(%runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%16 = getelementptr inbounds %mem.Raw_Dynamic_Array, %mem.Raw_Dynamic_Array* %2, i64 0, i32 3
	store %mem.Allocator %15, %mem.Allocator* %16
	%17 = load %mem.Raw_Dynamic_Array, %mem.Raw_Dynamic_Array* %2, align 8
	store %mem.Raw_Dynamic_Array %17, %mem.Raw_Dynamic_Array* %1
	; ReturnStmt
	%18 = load %mem.Raw_Dynamic_Array, %mem.Raw_Dynamic_Array* %1, align 8
	%19 = bitcast %mem.Raw_Dynamic_Array* %1 to {i8*, i64, i64, %mem.Allocator}*
	%20 = load {i8*, i64, i64, %mem.Allocator}, {i8*, i64, i64, %mem.Allocator}* %19, align 8
	ret {i8*, i64, i64, %mem.Allocator} %20
}

define %..string @fmt.to_string({i8*, i64, i64, %mem.Allocator}* %buf, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca {i8*, i64}, align 16
	%1 = alloca %..string, align 16
	%2 = load {i8*, i64, i64, %mem.Allocator}, {i8*, i64, i64, %mem.Allocator}* %buf, align 8
	; ReturnStmt
	; SliceExpr
	%3 = load {i8*, i64, i64, %mem.Allocator}, {i8*, i64, i64, %mem.Allocator}* %buf, align 8
	%4 = extractvalue {i8*, i64, i64, %mem.Allocator} %3, 1
	call void @runtime.slice_expr_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @str$a0, i64 0, i32 0), i64 25}, i64 50, i64 19, i64 0, i64 %4, i64 %4)
	%5 = extractvalue {i8*, i64, i64, %mem.Allocator} %3, 0
	%6 = getelementptr inbounds i8, i8* %5, i64 0
	%7 = sub i64 %4, 0
	%8 = bitcast {i8*, i64}* %0 to %..rawptr
	%9 = call %..rawptr @mem.zero(%..rawptr %8, i64 16) noinline
	store {i8*, i64} zeroinitializer, {i8*, i64}* %0
	%10 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %0, i64 0, i32 0
	store i8* %6, i8** %10
	%11 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %0, i64 0, i32 1
	store i64 %7, i64* %11
	%12 = load {i8*, i64}, {i8*, i64}* %0, align 8
	%13 = extractvalue {i8*, i64} %12, 0
	%14 = extractvalue {i8*, i64} %12, 1
	%15 = bitcast %..string* %1 to %..rawptr
	%16 = call %..rawptr @mem.zero(%..rawptr %15, i64 16) noinline
	store %..string zeroinitializer, %..string* %1
	%17 = getelementptr inbounds %..string, %..string* %1, i64 0, i32 0
	store i8* %13, i8** %17
	%18 = getelementptr inbounds %..string, %..string* %1, i64 0, i32 1
	store i64 %14, i64* %18
	%19 = load %..string, %..string* %1, align 8
	ret %..string %19
}

define void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %buf, %..string %s, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca {i8*, i64, i64, %mem.Allocator}*, align 16
	%1 = alloca %..string, align 16
	%2 = alloca {%..string*, i64}, align 16
	%3 = alloca [1 x %..string], align 16
	%4 = alloca {%..string*, i64}, align 16
	%5 = alloca %runtime.Source_Code_Location, align 16
	store {i8*, i64, i64, %mem.Allocator}* %buf, {i8*, i64, i64, %mem.Allocator}** %0
	store %..string %s, %..string* %1
	%6 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	%7 = load %..string, %..string* %1, align 8
	; variadic call argument generation
	%8 = bitcast {%..string*, i64}* %2 to %..rawptr
	%9 = call %..rawptr @mem.zero(%..rawptr %8, i64 16) noinline
	store {%..string*, i64} zeroinitializer, {%..string*, i64}* %2
	%10 = bitcast [1 x %..string]* %3 to %..rawptr
	%11 = call %..rawptr @mem.zero(%..rawptr %10, i64 16) noinline
	store [1 x %..string] zeroinitializer, [1 x %..string]* %3
	%12 = getelementptr inbounds [1 x %..string], [1 x %..string]* %3, i64 0, i32 0
	store %..string %7, %..string* %12
	%13 = getelementptr inbounds [1 x %..string], [1 x %..string]* %3, i64 0, i32 0
	%14 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %2, i64 0, i32 0
	store %..string* %13, %..string** %14
	%15 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %2, i64 0, i32 1
	store i64 1, i64* %15
	%16 = load {%..string*, i64}, {%..string*, i64}* %2, align 8
	%17 = bitcast {%..string*, i64}* %4 to %..rawptr
	%18 = call %..rawptr @mem.zero(%..rawptr %17, i64 16) noinline
	store {%..string*, i64} zeroinitializer, {%..string*, i64}* %4
	store {%..string*, i64} %16, {%..string*, i64}* %4
	%19 = bitcast %runtime.Source_Code_Location* %5 to %..rawptr
	%20 = call %..rawptr @mem.zero(%..rawptr %19, i64 48) noinline
	store %runtime.Source_Code_Location zeroinitializer, %runtime.Source_Code_Location* %5
	store %runtime.Source_Code_Location {%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @str$a1, i64 0, i32 0), i64 25}, i64 55, i64 2, %..string {i8* getelementptr inbounds ([13 x i8], [13 x i8]* @str$a2, i64 0, i32 0), i64 12}}, %runtime.Source_Code_Location* %5
	%21 = call i64 @runtime.append_string-5669({i8*, i64, i64, %mem.Allocator}* %6, {%..string*, i64}* %4, %runtime.Source_Code_Location* %5, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	ret void
}

define void @fmt.write_bytes({i8*, i64, i64, %mem.Allocator}* %buf, {i8*, i64}* %data, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca {i8*, i64, i64, %mem.Allocator}*, align 16
	%1 = alloca {i8*, i64}, align 16
	%2 = alloca %runtime.Source_Code_Location, align 16
	store {i8*, i64, i64, %mem.Allocator}* %buf, {i8*, i64, i64, %mem.Allocator}** %0
	%3 = load {i8*, i64}, {i8*, i64}* %data, align 8
	%4 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	%5 = load {i8*, i64}, {i8*, i64}* %data, align 8
	%6 = bitcast {i8*, i64}* %1 to %..rawptr
	%7 = call %..rawptr @mem.zero(%..rawptr %6, i64 16) noinline
	store {i8*, i64} zeroinitializer, {i8*, i64}* %1
	store {i8*, i64} %5, {i8*, i64}* %1
	%8 = bitcast %runtime.Source_Code_Location* %2 to %..rawptr
	%9 = call %..rawptr @mem.zero(%..rawptr %8, i64 48) noinline
	store %runtime.Source_Code_Location zeroinitializer, %runtime.Source_Code_Location* %2
	store %runtime.Source_Code_Location {%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @str$a3, i64 0, i32 0), i64 25}, i64 58, i64 2, %..string {i8* getelementptr inbounds ([12 x i8], [12 x i8]* @str$a4, i64 0, i32 0), i64 11}}, %runtime.Source_Code_Location* %2
	%10 = call i64 @runtime.append_elems-5682({i8*, i64, i64, %mem.Allocator}* %4, {i8*, i64}* %1, %runtime.Source_Code_Location* %2, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	ret void
}

define void @fmt.write_byte({i8*, i64, i64, %mem.Allocator}* %buf, i8 %data, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca {i8*, i64, i64, %mem.Allocator}*, align 16
	%1 = alloca i8, align 16
	%2 = alloca %runtime.Source_Code_Location, align 16
	store {i8*, i64, i64, %mem.Allocator}* %buf, {i8*, i64, i64, %mem.Allocator}** %0
	store i8 %data, i8* %1
	%3 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	%4 = load i8, i8* %1, align 1
	%5 = bitcast %runtime.Source_Code_Location* %2 to %..rawptr
	%6 = call %..rawptr @mem.zero(%..rawptr %5, i64 48) noinline
	store %runtime.Source_Code_Location zeroinitializer, %runtime.Source_Code_Location* %2
	store %runtime.Source_Code_Location {%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @str$a5, i64 0, i32 0), i64 25}, i64 61, i64 2, %..string {i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str$a6, i64 0, i32 0), i64 10}}, %runtime.Source_Code_Location* %2
	%7 = call i64 @runtime.append_elem-5701({i8*, i64, i64, %mem.Allocator}* %3, i8 %4, %runtime.Source_Code_Location* %2, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	ret void
}

define void @fmt.write_rune({i8*, i64, i64, %mem.Allocator}* %buf, i32 %r, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca {i8*, i64, i64, %mem.Allocator}*, align 16
	%1 = alloca i32, align 16
	%2 = alloca [4 x i8], align 16
	%3 = alloca i64, align 16
	%4 = alloca {i8*, i64}, align 16
	%5 = alloca {i8*, i64}, align 16
	store {i8*, i64, i64, %mem.Allocator}* %buf, {i8*, i64, i64, %mem.Allocator}** %0
	store i32 %r, i32* %1
	; IfStmt
	%6 = load i32, i32* %1, align 4
	%7 = icmp slt i32 %6, 128
	%8 = zext i1 %7 to i8
	%9 = trunc i8 %8 to i1
	br i1 %9, label %if.then-1, label %if.done-2

if.then-1:
	%10 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	%11 = load i32, i32* %1, align 4
	%12 = trunc i32 %11 to i8
	call void @fmt.write_byte({i8*, i64, i64, %mem.Allocator}* %10, i8 %12, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	; ReturnStmt
	ret void

if.done-2:
	; b
	; n
	; SelectorExpr
	%13 = load i32, i32* %1, align 4
	%14 = call {[4 x i8], i64} @utf8.encode_rune(i32 %13, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%15 = extractvalue {[4 x i8], i64} %14, 0
	%16 = extractvalue {[4 x i8], i64} %14, 1
	store [4 x i8] %15, [4 x i8]* %2
	store i64 %16, i64* %3
	%17 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	; SliceExpr
	%18 = load i64, i64* %3, align 8
	%19 = load [4 x i8], [4 x i8]* %2, align 1
	call void @runtime.slice_expr_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @str$a7, i64 0, i32 0), i64 25}, i64 70, i64 20, i64 0, i64 %18, i64 4)
	%20 = getelementptr inbounds [4 x i8], [4 x i8]* %2, i64 0, i32 0
	%21 = getelementptr inbounds i8, i8* %20, i64 0
	%22 = sub i64 %18, 0
	%23 = bitcast {i8*, i64}* %4 to %..rawptr
	%24 = call %..rawptr @mem.zero(%..rawptr %23, i64 16) noinline
	store {i8*, i64} zeroinitializer, {i8*, i64}* %4
	%25 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %4, i64 0, i32 0
	store i8* %21, i8** %25
	%26 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %4, i64 0, i32 1
	store i64 %22, i64* %26
	%27 = load {i8*, i64}, {i8*, i64}* %4, align 8
	%28 = bitcast {i8*, i64}* %5 to %..rawptr
	%29 = call %..rawptr @mem.zero(%..rawptr %28, i64 16) noinline
	store {i8*, i64} zeroinitializer, {i8*, i64}* %5
	store {i8*, i64} %27, {i8*, i64}* %5
	call void @fmt.write_bytes({i8*, i64, i64, %mem.Allocator}* %17, {i8*, i64}* %5, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	ret void
}

define void @fmt.write_encoded_rune({i8*, i64, i64, %mem.Allocator}* %buf, i32 %r, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca {i8*, i64, i64, %mem.Allocator}*, align 16
	%1 = alloca i32, align 16
	%2 = alloca [2 x i8], align 16
	%3 = alloca %..string, align 16
	%4 = alloca {i8*, i64}, align 16
	%5 = alloca {i8*, i64}, align 16
	store {i8*, i64, i64, %mem.Allocator}* %buf, {i8*, i64, i64, %mem.Allocator}** %0
	store i32 %r, i32* %1
	%6 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	call void @fmt.write_byte({i8*, i64, i64, %mem.Allocator}* %6, i8 39, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	; SwitchStmt
	%7 = load i32, i32* %1, align 4
	%8 = icmp eq i32 %7, 7
	br i1 %8, label %switch.case.body-2, label %switch.case.next-1

switch.case.next-1:
	%9 = icmp eq i32 %7, 8
	br i1 %9, label %switch.fall.body-4, label %switch.case.next-3

switch.case.body-2:
	%10 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %10, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @str$a8, i64 0, i32 0), i64 2}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %switch.done-27

switch.case.next-3:
	%11 = icmp eq i32 %7, 27
	br i1 %11, label %switch.fall.body-6, label %switch.case.next-5

switch.fall.body-4:
	%12 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %12, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @str$a9, i64 0, i32 0), i64 2}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %switch.done-27

switch.case.next-5:
	%13 = icmp eq i32 %7, 12
	br i1 %13, label %switch.fall.body-8, label %switch.case.next-7

switch.fall.body-6:
	%14 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %14, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @str$aa, i64 0, i32 0), i64 2}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %switch.done-27

switch.case.next-7:
	%15 = icmp eq i32 %7, 10
	br i1 %15, label %switch.fall.body-10, label %switch.case.next-9

switch.fall.body-8:
	%16 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %16, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @str$ab, i64 0, i32 0), i64 2}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %switch.done-27

switch.case.next-9:
	%17 = icmp eq i32 %7, 13
	br i1 %17, label %switch.fall.body-12, label %switch.case.next-11

switch.fall.body-10:
	%18 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %18, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @str$ac, i64 0, i32 0), i64 2}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %switch.done-27

switch.case.next-11:
	%19 = icmp eq i32 %7, 9
	br i1 %19, label %switch.fall.body-14, label %switch.case.next-13

switch.fall.body-12:
	%20 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %20, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @str$ad, i64 0, i32 0), i64 2}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %switch.done-27

switch.case.next-13:
	%21 = icmp eq i32 %7, 11
	br i1 %21, label %switch.fall.body-16, label %switch.case.next-15

switch.fall.body-14:
	%22 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %22, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @str$ae, i64 0, i32 0), i64 2}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %switch.done-27

switch.case.next-15:
	; IfStmt
	%23 = load i32, i32* %1, align 4
	%24 = icmp slt i32 %23, 32
	%25 = zext i1 %24 to i8
	%26 = trunc i8 %25 to i1
	br i1 %26, label %if.then-17, label %if.else-25

switch.fall.body-16:
	%27 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %27, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @str$af, i64 0, i32 0), i64 2}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %switch.done-27

if.then-17:
	%28 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %28, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @str$b0, i64 0, i32 0), i64 2}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	; b
	%29 = bitcast [2 x i8]* %2 to %..rawptr
	%30 = call %..rawptr @mem.zero(%..rawptr %29, i64 2) noinline
	store [2 x i8] zeroinitializer, [2 x i8]* %2
	; s
	; SelectorExpr
	; SliceExpr
	%31 = load [2 x i8], [2 x i8]* %2, align 1
	call void @runtime.slice_expr_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @str$b1, i64 0, i32 0), i64 25}, i64 87, i64 30, i64 0, i64 2, i64 2)
	%32 = getelementptr inbounds [2 x i8], [2 x i8]* %2, i64 0, i32 0
	%33 = getelementptr inbounds i8, i8* %32, i64 0
	%34 = sub i64 2, 0
	%35 = bitcast {i8*, i64}* %4 to %..rawptr
	%36 = call %..rawptr @mem.zero(%..rawptr %35, i64 16) noinline
	store {i8*, i64} zeroinitializer, {i8*, i64}* %4
	%37 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %4, i64 0, i32 0
	store i8* %33, i8** %37
	%38 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %4, i64 0, i32 1
	store i64 %34, i64* %38
	%39 = load {i8*, i64}, {i8*, i64}* %4, align 8
	%40 = load i32, i32* %1, align 4
	%41 = sext i32 %40 to i64
	; SelectorExpr
	%42 = load %..string, %..string* @strconv.digits, align 8
	%43 = bitcast {i8*, i64}* %5 to %..rawptr
	%44 = call %..rawptr @mem.zero(%..rawptr %43, i64 16) noinline
	store {i8*, i64} zeroinitializer, {i8*, i64}* %5
	store {i8*, i64} %39, {i8*, i64}* %5
	%45 = call %..string @strconv.append_bits({i8*, i64}* %5, i64 %41, i64 16, i1 true, i64 64, %..string %42, i8 zeroinitializer, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	store %..string %45, %..string* %3
	; SwitchStmt
	%46 = load %..string, %..string* %3, align 8
	%47 = extractvalue %..string %46, 1
	%48 = icmp eq i64 %47, 0
	br i1 %48, label %switch.case.body-19, label %switch.case.next-18

switch.case.next-18:
	%49 = icmp eq i64 %47, 1
	br i1 %49, label %switch.fall.body-21, label %switch.case.next-20

switch.case.body-19:
	%50 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %50, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @str$b2, i64 0, i32 0), i64 2}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %switch.done-24

switch.case.next-20:
	%51 = icmp eq i64 %47, 2
	br i1 %51, label %switch.fall.body-23, label %switch.case.next-22

switch.fall.body-21:
	%52 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	call void @fmt.write_rune({i8*, i64, i64, %mem.Allocator}* %52, i32 48, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %switch.done-24

switch.case.next-22:
	br label %switch.done-24

switch.fall.body-23:
	%53 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	%54 = load %..string, %..string* %3, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %53, %..string %54, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %switch.done-24

switch.done-24:
	br label %if.done-26

if.else-25:
	%55 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	%56 = load i32, i32* %1, align 4
	call void @fmt.write_rune({i8*, i64, i64, %mem.Allocator}* %55, i32 %56, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %if.done-26

if.done-26:
	br label %switch.done-27

switch.done-27:
	%57 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	call void @fmt.write_byte({i8*, i64, i64, %mem.Allocator}* %57, i8 39, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	ret void
}

define void @fmt.write_u64({i8*, i64, i64, %mem.Allocator}* %buf, i64 %i, i64 %base, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca {i8*, i64, i64, %mem.Allocator}*, align 16
	%1 = alloca i64, align 16
	%2 = alloca i64, align 16
	%3 = alloca [129 x i8], align 16
	%4 = alloca %..string, align 16
	%5 = alloca {i8*, i64}, align 16
	%6 = alloca {i8*, i64}, align 16
	store {i8*, i64, i64, %mem.Allocator}* %buf, {i8*, i64, i64, %mem.Allocator}** %0
	store i64 %i, i64* %1
	store i64 %base, i64* %2
	; b
	%7 = bitcast [129 x i8]* %3 to %..rawptr
	%8 = call %..rawptr @mem.zero(%..rawptr %7, i64 129) noinline
	store [129 x i8] zeroinitializer, [129 x i8]* %3
	; s
	; SelectorExpr
	; SliceExpr
	%9 = load [129 x i8], [129 x i8]* %3, align 1
	call void @runtime.slice_expr_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @str$b3, i64 0, i32 0), i64 25}, i64 103, i64 28, i64 0, i64 129, i64 129)
	%10 = getelementptr inbounds [129 x i8], [129 x i8]* %3, i64 0, i32 0
	%11 = getelementptr inbounds i8, i8* %10, i64 0
	%12 = sub i64 129, 0
	%13 = bitcast {i8*, i64}* %5 to %..rawptr
	%14 = call %..rawptr @mem.zero(%..rawptr %13, i64 16) noinline
	store {i8*, i64} zeroinitializer, {i8*, i64}* %5
	%15 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %5, i64 0, i32 0
	store i8* %11, i8** %15
	%16 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %5, i64 0, i32 1
	store i64 %12, i64* %16
	%17 = load {i8*, i64}, {i8*, i64}* %5, align 8
	%18 = load i64, i64* %1, align 8
	%19 = load i64, i64* %2, align 8
	; SelectorExpr
	%20 = load %..string, %..string* @strconv.digits, align 8
	%21 = bitcast {i8*, i64}* %6 to %..rawptr
	%22 = call %..rawptr @mem.zero(%..rawptr %21, i64 16) noinline
	store {i8*, i64} zeroinitializer, {i8*, i64}* %6
	store {i8*, i64} %17, {i8*, i64}* %6
	%23 = call %..string @strconv.append_bits({i8*, i64}* %6, i64 %18, i64 %19, i1 false, i64 64, %..string %20, i8 zeroinitializer, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	store %..string %23, %..string* %4
	%24 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	%25 = load %..string, %..string* %4, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %24, %..string %25, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	ret void
}

define void @fmt.write_i64({i8*, i64, i64, %mem.Allocator}* %buf, i64 %i, i64 %base, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca {i8*, i64, i64, %mem.Allocator}*, align 16
	%1 = alloca i64, align 16
	%2 = alloca i64, align 16
	%3 = alloca [129 x i8], align 16
	%4 = alloca %..string, align 16
	%5 = alloca {i8*, i64}, align 16
	%6 = alloca {i8*, i64}, align 16
	store {i8*, i64, i64, %mem.Allocator}* %buf, {i8*, i64, i64, %mem.Allocator}** %0
	store i64 %i, i64* %1
	store i64 %base, i64* %2
	; b
	%7 = bitcast [129 x i8]* %3 to %..rawptr
	%8 = call %..rawptr @mem.zero(%..rawptr %7, i64 129) noinline
	store [129 x i8] zeroinitializer, [129 x i8]* %3
	; s
	; SelectorExpr
	; SliceExpr
	%9 = load [129 x i8], [129 x i8]* %3, align 1
	call void @runtime.slice_expr_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @str$b4, i64 0, i32 0), i64 25}, i64 108, i64 28, i64 0, i64 129, i64 129)
	%10 = getelementptr inbounds [129 x i8], [129 x i8]* %3, i64 0, i32 0
	%11 = getelementptr inbounds i8, i8* %10, i64 0
	%12 = sub i64 129, 0
	%13 = bitcast {i8*, i64}* %5 to %..rawptr
	%14 = call %..rawptr @mem.zero(%..rawptr %13, i64 16) noinline
	store {i8*, i64} zeroinitializer, {i8*, i64}* %5
	%15 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %5, i64 0, i32 0
	store i8* %11, i8** %15
	%16 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %5, i64 0, i32 1
	store i64 %12, i64* %16
	%17 = load {i8*, i64}, {i8*, i64}* %5, align 8
	%18 = load i64, i64* %1, align 8
	%19 = bitcast i64 %18 to i64
	%20 = load i64, i64* %2, align 8
	; SelectorExpr
	%21 = load %..string, %..string* @strconv.digits, align 8
	%22 = bitcast {i8*, i64}* %6 to %..rawptr
	%23 = call %..rawptr @mem.zero(%..rawptr %22, i64 16) noinline
	store {i8*, i64} zeroinitializer, {i8*, i64}* %6
	store {i8*, i64} %17, {i8*, i64}* %6
	%24 = call %..string @strconv.append_bits({i8*, i64}* %6, i64 %19, i64 %20, i1 true, i64 64, %..string %21, i8 zeroinitializer, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	store %..string %24, %..string* %4
	%25 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	%26 = load %..string, %..string* %4, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %25, %..string %26, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	ret void
}

define i64 @fmt.fprintln(i64 %fd, {%..any*, i64}* %args, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca i64, align 16
	%1 = alloca [4096 x i8], align 16
	%2 = alloca {i8*, i64, i64, %mem.Allocator}, align 16
	%3 = alloca {i8*, i64}, align 16
	%4 = alloca {i8*, i64}, align 16
	%5 = alloca %..string, align 16
	%6 = alloca {%..any*, i64}, align 16
	store i64 %fd, i64* %0
	%7 = load {%..any*, i64}, {%..any*, i64}* %args, align 8
	; data
	%8 = bitcast [4096 x i8]* %1 to %..rawptr
	%9 = call %..rawptr @mem.zero(%..rawptr %8, i64 4096) noinline
	store [4096 x i8] zeroinitializer, [4096 x i8]* %1
	; buf
	; SliceExpr
	%10 = load [4096 x i8], [4096 x i8]* %1, align 1
	call void @runtime.slice_expr_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @str$b5, i64 0, i32 0), i64 25}, i64 122, i64 38, i64 0, i64 4096, i64 4096)
	%11 = getelementptr inbounds [4096 x i8], [4096 x i8]* %1, i64 0, i32 0
	%12 = getelementptr inbounds i8, i8* %11, i64 0
	%13 = sub i64 4096, 0
	%14 = bitcast {i8*, i64}* %3 to %..rawptr
	%15 = call %..rawptr @mem.zero(%..rawptr %14, i64 16) noinline
	store {i8*, i64} zeroinitializer, {i8*, i64}* %3
	%16 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %3, i64 0, i32 0
	store i8* %12, i8** %16
	%17 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %3, i64 0, i32 1
	store i64 %13, i64* %17
	%18 = load {i8*, i64}, {i8*, i64}* %3, align 8
	%19 = bitcast {i8*, i64}* %4 to %..rawptr
	%20 = call %..rawptr @mem.zero(%..rawptr %19, i64 16) noinline
	store {i8*, i64} zeroinitializer, {i8*, i64}* %4
	store {i8*, i64} %18, {i8*, i64}* %4
	%21 = call {i8*, i64, i64, %mem.Allocator} @fmt.string_buffer_from_slice({i8*, i64}* %4, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	store {i8*, i64, i64, %mem.Allocator} %21, {i8*, i64, i64, %mem.Allocator}* %2
	; res
	%22 = load {%..any*, i64}, {%..any*, i64}* %args, align 8
	%23 = bitcast {%..any*, i64}* %6 to %..rawptr
	%24 = call %..rawptr @mem.zero(%..rawptr %23, i64 16) noinline
	store {%..any*, i64} zeroinitializer, {%..any*, i64}* %6
	store {%..any*, i64} %22, {%..any*, i64}* %6
	%25 = call %..string @fmt.sbprintln({i8*, i64, i64, %mem.Allocator}* %2, {%..any*, i64}* %6, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	store %..string %25, %..string* %5
	; SelectorExpr
	%26 = load i64, i64* %0, align 8
	%27 = load %..string, %..string* %5, align 8
	%28 = call {i64, i64} @os.write_string(i64 %26, %..string %27, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	; ReturnStmt
	%29 = load %..string, %..string* %5, align 8
	%30 = extractvalue %..string %29, 1
	ret i64 %30
}

define i64 @fmt.println({%..any*, i64}* %args, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca {%..any*, i64}, align 16
	%1 = load {%..any*, i64}, {%..any*, i64}* %args, align 8
	; ReturnStmt
	; SelectorExpr
	%2 = load i64, i64* @os.stdout, align 8
	%3 = load {%..any*, i64}, {%..any*, i64}* %args, align 8
	%4 = bitcast {%..any*, i64}* %0 to %..rawptr
	%5 = call %..rawptr @mem.zero(%..rawptr %4, i64 16) noinline
	store {%..any*, i64} zeroinitializer, {%..any*, i64}* %0
	store {%..any*, i64} %3, {%..any*, i64}* %0
	%6 = call i64 @fmt.fprintln(i64 %2, {%..any*, i64}* %0, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	ret i64 %6
}

define %..string @fmt.tprint({%..any*, i64}* %args, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca {i8*, i64, i64, %mem.Allocator}, align 16
	%1 = alloca %mem.Allocator, align 16
	%2 = alloca %runtime.Source_Code_Location, align 16
	%3 = alloca {i8*, i64, i64, %mem.Allocator}, align 16
	%4 = alloca {%..any*, i64}, align 16
	%5 = alloca {i8*, i64, i64, %mem.Allocator}, align 16
	%6 = load {%..any*, i64}, {%..any*, i64}* %args, align 8
	; buf
	; SelectorExpr
	%7 = getelementptr inbounds %runtime.Context, %runtime.Context* %__.context_ptr, i64 0, i32 1
	%8 = load %mem.Allocator, %mem.Allocator* %7, align 8
	%9 = bitcast %mem.Allocator* %1 to %..rawptr
	%10 = call %..rawptr @mem.zero(%..rawptr %9, i64 16) noinline
	store %mem.Allocator zeroinitializer, %mem.Allocator* %1
	store %mem.Allocator %8, %mem.Allocator* %1
	%11 = bitcast %runtime.Source_Code_Location* %2 to %..rawptr
	%12 = call %..rawptr @mem.zero(%..rawptr %11, i64 48) noinline
	store %runtime.Source_Code_Location zeroinitializer, %runtime.Source_Code_Location* %2
	store %runtime.Source_Code_Location {%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @str$b6, i64 0, i32 0), i64 25}, i64 166, i64 23, %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str$b7, i64 0, i32 0), i64 6}}, %runtime.Source_Code_Location* %2
	%13 = call {i8*, i64, i64, %mem.Allocator} @mem.make_dynamic_array-5748(%mem.Allocator* %1, %runtime.Source_Code_Location* %2, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%14 = bitcast {i8*, i64, i64, %mem.Allocator}* %3 to %..rawptr
	%15 = call %..rawptr @mem.zero(%..rawptr %14, i64 40) noinline
	store {i8*, i64, i64, %mem.Allocator} zeroinitializer, {i8*, i64, i64, %mem.Allocator}* %3
	store {i8*, i64, i64, %mem.Allocator} %13, {i8*, i64, i64, %mem.Allocator}* %3
	%16 = bitcast {i8*, i64, i64, %mem.Allocator}* %3 to {i8*, i64, i64, %mem.Allocator}*
	%17 = load {i8*, i64, i64, %mem.Allocator}, {i8*, i64, i64, %mem.Allocator}* %16, align 8
	store {i8*, i64, i64, %mem.Allocator} %17, {i8*, i64, i64, %mem.Allocator}* %0
	%18 = load {%..any*, i64}, {%..any*, i64}* %args, align 8
	%19 = bitcast {%..any*, i64}* %4 to %..rawptr
	%20 = call %..rawptr @mem.zero(%..rawptr %19, i64 16) noinline
	store {%..any*, i64} zeroinitializer, {%..any*, i64}* %4
	store {%..any*, i64} %18, {%..any*, i64}* %4
	%21 = call %..string @fmt.sbprint({i8*, i64, i64, %mem.Allocator}* %0, {%..any*, i64}* %4, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	; ReturnStmt
	%22 = load {i8*, i64, i64, %mem.Allocator}, {i8*, i64, i64, %mem.Allocator}* %0, align 8
	%23 = bitcast {i8*, i64, i64, %mem.Allocator}* %5 to %..rawptr
	%24 = call %..rawptr @mem.zero(%..rawptr %23, i64 40) noinline
	store {i8*, i64, i64, %mem.Allocator} zeroinitializer, {i8*, i64, i64, %mem.Allocator}* %5
	store {i8*, i64, i64, %mem.Allocator} %22, {i8*, i64, i64, %mem.Allocator}* %5
	%25 = call %..string @fmt.to_string({i8*, i64, i64, %mem.Allocator}* %5, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	ret %..string %25
}

define void @fmt.write_typeid({i8*, i64, i64, %mem.Allocator}* %buf, %..typeid %id, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca {i8*, i64, i64, %mem.Allocator}*, align 16
	%1 = alloca %..typeid, align 16
	store {i8*, i64, i64, %mem.Allocator}* %buf, {i8*, i64, i64, %mem.Allocator}** %0
	store %..typeid %id, %..typeid* %1
	%2 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	%3 = load %..typeid, %..typeid* %1, align 8
	%4 = call %runtime.Type_Info* @runtime.__type_info_of(%..typeid %3)
	call void @fmt.write_type({i8*, i64, i64, %mem.Allocator}* %2, %runtime.Type_Info* %4, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	ret void
}

define void @fmt.write_type({i8*, i64, i64, %mem.Allocator}* %buf, %runtime.Type_Info* %ti, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca {i8*, i64, i64, %mem.Allocator}*, align 16
	%1 = alloca %runtime.Type_Info*, align 16
	%2 = alloca %runtime.Type_Info_Named, align 16
	%3 = alloca %runtime.Type_Info_Integer, align 16
	%4 = alloca %runtime.Type_Info_Rune, align 16
	%5 = alloca %runtime.Type_Info_Float, align 16
	%6 = alloca %runtime.Type_Info_Complex, align 16
	%7 = alloca %runtime.Type_Info_String, align 16
	%8 = alloca %runtime.Type_Info_Boolean, align 16
	%9 = alloca %runtime.Type_Info_Any, align 16
	%10 = alloca %runtime.Type_Info_Type_Id, align 16
	%11 = alloca %runtime.Type_Info_Pointer, align 16
	%12 = alloca %runtime.Type_Info_Procedure, align 16
	%13 = alloca %runtime.Type_Info_Tuple, align 16
	%14 = alloca {%runtime.Type_Info_Tuple, i8}, align 16
	%15 = alloca %runtime.Type_Info*, align 16
	%16 = alloca i64, align 16
	%17 = alloca i64, align 16
	%18 = alloca i64, align 16
	%19 = alloca %runtime.Type_Info_Tuple, align 16
	%20 = alloca i64, align 16
	%21 = alloca %..string, align 16
	%22 = alloca i64, align 16
	%23 = alloca i64, align 16
	%24 = alloca i64, align 16
	%25 = alloca %runtime.Type_Info*, align 16
	%26 = alloca %runtime.Type_Info_Array, align 16
	%27 = alloca %runtime.Type_Info_Dynamic_Array, align 16
	%28 = alloca %runtime.Type_Info_Slice, align 16
	%29 = alloca %runtime.Type_Info_Map, align 16
	%30 = alloca %runtime.Type_Info_Struct, align 16
	%31 = alloca %..string, align 16
	%32 = alloca i64, align 16
	%33 = alloca i64, align 16
	%34 = alloca i64, align 16
	%35 = alloca %runtime.Type_Info_Union, align 16
	%36 = alloca %runtime.Type_Info*, align 16
	%37 = alloca i64, align 16
	%38 = alloca i64, align 16
	%39 = alloca i64, align 16
	%40 = alloca %runtime.Type_Info_Enum, align 16
	%41 = alloca %..string, align 16
	%42 = alloca i64, align 16
	%43 = alloca i64, align 16
	%44 = alloca i64, align 16
	%45 = alloca %runtime.Type_Info_Bit_Field, align 16
	%46 = alloca %..string, align 16
	%47 = alloca i64, align 16
	%48 = alloca i64, align 16
	%49 = alloca i64, align 16
	%50 = alloca %runtime.Type_Info_Bit_Set, align 16
	%51 = alloca %runtime.Type_Info_Opaque, align 16
	store {i8*, i64, i64, %mem.Allocator}* %buf, {i8*, i64, i64, %mem.Allocator}** %0
	store %runtime.Type_Info* %ti, %runtime.Type_Info** %1
	; IfStmt
	%52 = load %runtime.Type_Info*, %runtime.Type_Info** %1, align 8
	%53 = icmp eq %runtime.Type_Info* %52, zeroinitializer
	%54 = zext i1 %53 to i8
	%55 = trunc i8 %54 to i1
	br i1 %55, label %if.then-1, label %if.done-2

if.then-1:
	%56 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %56, %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str$b8, i64 0, i32 0), i64 3}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	; ReturnStmt
	ret void

if.done-2:
	; TypeSwitchStmt
	; SelectorExpr
	%57 = load %runtime.Type_Info*, %runtime.Type_Info** %1, align 8
	%58 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %57, i64 0
	%59 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %58, i64 0, i32 3
	%60 = load {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %59, align 8
	; get union's tag
	%61 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %59, i64 0, i32 2 ; UnionTagPtr
	%62 = load i64, i64* %61, align 8
	%63 = bitcast {[0 x i64], [72 x i8], i64}* %59 to %..rawptr
	%64 = icmp eq i64 %62, 1
	br i1 %64, label %typeswitch.body-4, label %typeswitch.next-3

typeswitch.next-3:
	%65 = icmp eq i64 %62, 2
	br i1 %65, label %typeswitch.body-6, label %typeswitch.next-5

typeswitch.body-4:
	%66 = bitcast %..rawptr %63 to %runtime.Type_Info_Named*
	%67 = load %runtime.Type_Info_Named, %runtime.Type_Info_Named* %66, align 8
	store %runtime.Type_Info_Named %67, %runtime.Type_Info_Named* %2
	%68 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	; SelectorExpr
	%69 = getelementptr inbounds %runtime.Type_Info_Named, %runtime.Type_Info_Named* %2, i64 0, i32 0
	%70 = load %..string, %..string* %69, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %68, %..string %70, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %typeswitch.done-126

typeswitch.next-5:
	%71 = icmp eq i64 %62, 3
	br i1 %71, label %typeswitch.body-18, label %typeswitch.next-17

typeswitch.body-6:
	%72 = bitcast %..rawptr %63 to %runtime.Type_Info_Integer*
	%73 = load %runtime.Type_Info_Integer, %runtime.Type_Info_Integer* %72, align 1
	store %runtime.Type_Info_Integer %73, %runtime.Type_Info_Integer* %3
	; SwitchStmt
	; SelectorExpr
	%74 = load %runtime.Type_Info*, %runtime.Type_Info** %1, align 8
	%75 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %74, i64 0
	%76 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %75, i64 0, i32 2
	%77 = load %..typeid, %..typeid* %76, align 8
	%78 = icmp eq %..typeid %77, 4683743612465315848
	br i1 %78, label %switch.case.body-8, label %switch.case.next-7

switch.case.next-7:
	%79 = icmp eq %..typeid %77, 72057594037928006
	br i1 %79, label %switch.fall.body-10, label %switch.case.next-9

switch.case.body-8:
	%80 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %80, %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str$b9, i64 0, i32 0), i64 3}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %switch.done-16

switch.case.next-9:
	%81 = icmp eq %..typeid %77, 72057594037927987
	br i1 %81, label %switch.fall.body-12, label %switch.case.next-11

switch.fall.body-10:
	%82 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %82, %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str$ba, i64 0, i32 0), i64 4}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %switch.done-16

switch.case.next-11:
	%83 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	; TernaryExpr
	; SelectorExpr
	%84 = getelementptr inbounds %runtime.Type_Info_Integer, %runtime.Type_Info_Integer* %3, i64 0, i32 0
	%85 = load i8, i8* %84, align 1
	%86 = trunc i8 %85 to i1
	br i1 %86, label %if.then-13, label %if.else-14

switch.fall.body-12:
	%87 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %87, %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str$bb, i64 0, i32 0), i64 7}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %switch.done-16

if.then-13:
	br label %if.done-15

if.else-14:
	br label %if.done-15

if.done-15:
	%88 = phi i32 [ 105, %if.then-13 ], [ 117, %if.else-14 ]
	%89 = trunc i32 %88 to i8
	call void @fmt.write_byte({i8*, i64, i64, %mem.Allocator}* %83, i8 %89, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%90 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	; SelectorExpr
	%91 = load %runtime.Type_Info*, %runtime.Type_Info** %1, align 8
	%92 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %91, i64 0
	%93 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %92, i64 0, i32 0
	%94 = load i64, i64* %93, align 8
	%95 = mul i64 8, %94
	%96 = bitcast i64 %95 to i64
	call void @fmt.write_i64({i8*, i64, i64, %mem.Allocator}* %90, i64 %96, i64 10, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %switch.done-16

switch.done-16:
	br label %typeswitch.done-126

typeswitch.next-17:
	%97 = icmp eq i64 %62, 4
	br i1 %97, label %typeswitch.body-20, label %typeswitch.next-19

typeswitch.body-18:
	%98 = bitcast %..rawptr %63 to %runtime.Type_Info_Rune*
	%99 = load %runtime.Type_Info_Rune, %runtime.Type_Info_Rune* %98, align 1
	store %runtime.Type_Info_Rune %99, %runtime.Type_Info_Rune* %4
	%100 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %100, %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str$bc, i64 0, i32 0), i64 4}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %typeswitch.done-126

typeswitch.next-19:
	%101 = icmp eq i64 %62, 5
	br i1 %101, label %typeswitch.body-22, label %typeswitch.next-21

typeswitch.body-20:
	%102 = bitcast %..rawptr %63 to %runtime.Type_Info_Float*
	%103 = load %runtime.Type_Info_Float, %runtime.Type_Info_Float* %102, align 1
	store %runtime.Type_Info_Float %103, %runtime.Type_Info_Float* %5
	%104 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	call void @fmt.write_byte({i8*, i64, i64, %mem.Allocator}* %104, i8 102, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%105 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	; SelectorExpr
	%106 = load %runtime.Type_Info*, %runtime.Type_Info** %1, align 8
	%107 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %106, i64 0
	%108 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %107, i64 0, i32 0
	%109 = load i64, i64* %108, align 8
	%110 = mul i64 8, %109
	%111 = bitcast i64 %110 to i64
	call void @fmt.write_i64({i8*, i64, i64, %mem.Allocator}* %105, i64 %111, i64 10, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %typeswitch.done-126

typeswitch.next-21:
	%112 = icmp eq i64 %62, 6
	br i1 %112, label %typeswitch.body-24, label %typeswitch.next-23

typeswitch.body-22:
	%113 = bitcast %..rawptr %63 to %runtime.Type_Info_Complex*
	%114 = load %runtime.Type_Info_Complex, %runtime.Type_Info_Complex* %113, align 1
	store %runtime.Type_Info_Complex %114, %runtime.Type_Info_Complex* %6
	%115 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %115, %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str$bd, i64 0, i32 0), i64 7}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%116 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	; SelectorExpr
	%117 = load %runtime.Type_Info*, %runtime.Type_Info** %1, align 8
	%118 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %117, i64 0
	%119 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %118, i64 0, i32 0
	%120 = load i64, i64* %119, align 8
	%121 = mul i64 8, %120
	%122 = bitcast i64 %121 to i64
	call void @fmt.write_i64({i8*, i64, i64, %mem.Allocator}* %116, i64 %122, i64 10, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %typeswitch.done-126

typeswitch.next-23:
	%123 = icmp eq i64 %62, 7
	br i1 %123, label %typeswitch.body-29, label %typeswitch.next-28

typeswitch.body-24:
	%124 = bitcast %..rawptr %63 to %runtime.Type_Info_String*
	%125 = load %runtime.Type_Info_String, %runtime.Type_Info_String* %124, align 1
	store %runtime.Type_Info_String %125, %runtime.Type_Info_String* %7
	; IfStmt
	; SelectorExpr
	%126 = getelementptr inbounds %runtime.Type_Info_String, %runtime.Type_Info_String* %7, i64 0, i32 0
	%127 = load i8, i8* %126, align 1
	%128 = trunc i8 %127 to i1
	br i1 %128, label %if.then-25, label %if.else-26

if.then-25:
	%129 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %129, %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str$be, i64 0, i32 0), i64 7}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %if.done-27

if.else-26:
	%130 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %130, %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str$bf, i64 0, i32 0), i64 6}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %if.done-27

if.done-27:
	br label %typeswitch.done-126

typeswitch.next-28:
	%131 = icmp eq i64 %62, 8
	br i1 %131, label %typeswitch.body-34, label %typeswitch.next-33

typeswitch.body-29:
	%132 = bitcast %..rawptr %63 to %runtime.Type_Info_Boolean*
	%133 = load %runtime.Type_Info_Boolean, %runtime.Type_Info_Boolean* %132, align 1
	store %runtime.Type_Info_Boolean %133, %runtime.Type_Info_Boolean* %8
	; SwitchStmt
	; SelectorExpr
	%134 = load %runtime.Type_Info*, %runtime.Type_Info** %1, align 8
	%135 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %134, i64 0
	%136 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %135, i64 0, i32 2
	%137 = load %..typeid, %..typeid* %136, align 8
	%138 = icmp eq %..typeid %137, 432345564227567635
	br i1 %138, label %switch.case.body-31, label %switch.case.next-30

switch.case.next-30:
	%139 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	call void @fmt.write_byte({i8*, i64, i64, %mem.Allocator}* %139, i8 98, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%140 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	; SelectorExpr
	%141 = load %runtime.Type_Info*, %runtime.Type_Info** %1, align 8
	%142 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %141, i64 0
	%143 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %142, i64 0, i32 0
	%144 = load i64, i64* %143, align 8
	%145 = mul i64 8, %144
	%146 = bitcast i64 %145 to i64
	call void @fmt.write_i64({i8*, i64, i64, %mem.Allocator}* %140, i64 %146, i64 10, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %switch.done-32

switch.case.body-31:
	%147 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %147, %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str$c0, i64 0, i32 0), i64 4}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %switch.done-32

switch.done-32:
	br label %typeswitch.done-126

typeswitch.next-33:
	%148 = icmp eq i64 %62, 9
	br i1 %148, label %typeswitch.body-36, label %typeswitch.next-35

typeswitch.body-34:
	%149 = bitcast %..rawptr %63 to %runtime.Type_Info_Any*
	%150 = load %runtime.Type_Info_Any, %runtime.Type_Info_Any* %149, align 1
	store %runtime.Type_Info_Any %150, %runtime.Type_Info_Any* %9
	%151 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %151, %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str$c1, i64 0, i32 0), i64 3}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %typeswitch.done-126

typeswitch.next-35:
	%152 = icmp eq i64 %62, 10
	br i1 %152, label %typeswitch.body-38, label %typeswitch.next-37

typeswitch.body-36:
	%153 = bitcast %..rawptr %63 to %runtime.Type_Info_Type_Id*
	%154 = load %runtime.Type_Info_Type_Id, %runtime.Type_Info_Type_Id* %153, align 1
	store %runtime.Type_Info_Type_Id %154, %runtime.Type_Info_Type_Id* %10
	%155 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %155, %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str$c2, i64 0, i32 0), i64 6}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %typeswitch.done-126

typeswitch.next-37:
	%156 = icmp eq i64 %62, 11
	br i1 %156, label %typeswitch.body-43, label %typeswitch.next-42

typeswitch.body-38:
	%157 = bitcast %..rawptr %63 to %runtime.Type_Info_Pointer*
	%158 = load %runtime.Type_Info_Pointer, %runtime.Type_Info_Pointer* %157, align 8
	store %runtime.Type_Info_Pointer %158, %runtime.Type_Info_Pointer* %11
	; IfStmt
	; SelectorExpr
	%159 = getelementptr inbounds %runtime.Type_Info_Pointer, %runtime.Type_Info_Pointer* %11, i64 0, i32 0
	%160 = load %runtime.Type_Info*, %runtime.Type_Info** %159, align 8
	%161 = icmp eq %runtime.Type_Info* %160, zeroinitializer
	%162 = zext i1 %161 to i8
	%163 = trunc i8 %162 to i1
	br i1 %163, label %if.then-39, label %if.else-40

if.then-39:
	%164 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %164, %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str$c3, i64 0, i32 0), i64 6}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %if.done-41

if.else-40:
	%165 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %165, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str$c4, i64 0, i32 0), i64 1}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%166 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	; SelectorExpr
	%167 = getelementptr inbounds %runtime.Type_Info_Pointer, %runtime.Type_Info_Pointer* %11, i64 0, i32 0
	%168 = load %runtime.Type_Info*, %runtime.Type_Info** %167, align 8
	call void @fmt.write_type({i8*, i64, i64, %mem.Allocator}* %166, %runtime.Type_Info* %168, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %if.done-41

if.done-41:
	br label %typeswitch.done-126

typeswitch.next-42:
	%169 = icmp eq i64 %62, 15
	br i1 %169, label %typeswitch.body-57, label %typeswitch.next-56

typeswitch.body-43:
	%170 = bitcast %..rawptr %63 to %runtime.Type_Info_Procedure*
	%171 = load %runtime.Type_Info_Procedure, %runtime.Type_Info_Procedure* %170, align 8
	store %runtime.Type_Info_Procedure %171, %runtime.Type_Info_Procedure* %12
	%172 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %172, %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str$c5, i64 0, i32 0), i64 4}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	; IfStmt
	; SelectorExpr
	%173 = getelementptr inbounds %runtime.Type_Info_Procedure, %runtime.Type_Info_Procedure* %12, i64 0, i32 0
	%174 = load %runtime.Type_Info*, %runtime.Type_Info** %173, align 8
	%175 = icmp eq %runtime.Type_Info* %174, zeroinitializer
	%176 = zext i1 %175 to i8
	%177 = trunc i8 %176 to i1
	br i1 %177, label %if.then-44, label %if.else-45

if.then-44:
	%178 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %178, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @str$c6, i64 0, i32 0), i64 2}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %if.done-53

if.else-45:
	; t
	; SelectorExpr
	; SelectorExpr
	%179 = getelementptr inbounds %runtime.Type_Info_Procedure, %runtime.Type_Info_Procedure* %12, i64 0, i32 0
	%180 = load %runtime.Type_Info*, %runtime.Type_Info** %179, align 8
	%181 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %180, i64 0
	%182 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %181, i64 0, i32 3
	%183 = load {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %182, align 8
	; cast - union_cast
	%184 = bitcast {%runtime.Type_Info_Tuple, i8}* %14 to %..rawptr
	%185 = call %..rawptr @mem.zero(%..rawptr %184, i64 40) noinline
	store {%runtime.Type_Info_Tuple, i8} zeroinitializer, {%runtime.Type_Info_Tuple, i8}* %14
	%186 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %182, i64 0, i32 2 ; UnionTagPtr
	%187 = load i64, i64* %186, align 8
	%188 = icmp eq i64 %187, 15
	br i1 %188, label %union_cast.ok-46, label %union_cast.end-47

union_cast.ok-46:
	%189 = getelementptr inbounds {%runtime.Type_Info_Tuple, i8}, {%runtime.Type_Info_Tuple, i8}* %14, i64 0, i32 0
	%190 = getelementptr inbounds {%runtime.Type_Info_Tuple, i8}, {%runtime.Type_Info_Tuple, i8}* %14, i64 0, i32 1
	%191 = bitcast {[0 x i64], [72 x i8], i64}* %182 to %runtime.Type_Info_Tuple*
	%192 = load %runtime.Type_Info_Tuple, %runtime.Type_Info_Tuple* %191, align 8
	store %runtime.Type_Info_Tuple %192, %runtime.Type_Info_Tuple* %189
	store i8 1, i8* %190
	br label %union_cast.end-47

union_cast.end-47:
	%193 = getelementptr inbounds {%runtime.Type_Info_Tuple, i8}, {%runtime.Type_Info_Tuple, i8}* %14, i64 0, i32 1
	%194 = load i8, i8* %193, align 1
	%195 = trunc i8 %194 to i1
	call void @runtime.type_assertion_check(i1 %195, %..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @str$c7, i64 0, i32 0), i64 25}, i64 290, i64 21, %..typeid 1152921504606846990, %..typeid 3386706919782613034)
	%196 = getelementptr inbounds {%runtime.Type_Info_Tuple, i8}, {%runtime.Type_Info_Tuple, i8}* %14, i64 0, i32 0
	%197 = load %runtime.Type_Info_Tuple, %runtime.Type_Info_Tuple* %196, align 8
	store %runtime.Type_Info_Tuple %197, %runtime.Type_Info_Tuple* %13
	%198 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %198, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str$c8, i64 0, i32 0), i64 1}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	; RangeStmt
	; t
	%199 = bitcast %runtime.Type_Info** %15 to %..rawptr
	%200 = call %..rawptr @mem.zero(%..rawptr %199, i64 8) noinline
	store %runtime.Type_Info* zeroinitializer, %runtime.Type_Info** %15
	; i
	%201 = bitcast i64* %16 to %..rawptr
	%202 = call %..rawptr @mem.zero(%..rawptr %201, i64 8) noinline
	store i64 zeroinitializer, i64* %16
	; SelectorExpr
	%203 = getelementptr inbounds %runtime.Type_Info_Tuple, %runtime.Type_Info_Tuple* %13, i64 0, i32 0
	%204 = load {%runtime.Type_Info**, i64}, {%runtime.Type_Info**, i64}* %203, align 8
	%205 = bitcast i64* %17 to %..rawptr
	%206 = call %..rawptr @mem.zero(%..rawptr %205, i64 8) noinline
	store i64 zeroinitializer, i64* %17
	%207 = extractvalue {%runtime.Type_Info**, i64} %204, 1
	store i64 %207, i64* %17
	%208 = bitcast i64* %18 to %..rawptr
	%209 = call %..rawptr @mem.zero(%..rawptr %208, i64 8) noinline
	store i64 zeroinitializer, i64* %18
	store i64 -1, i64* %18
	br label %for.index.loop-48

for.index.loop-48:
	%210 = load i64, i64* %18, align 8
	%211 = add i64 %210, 1
	store i64 %211, i64* %18
	%212 = load i64, i64* %17, align 8
	%213 = icmp slt i64 %211, %212
	br i1 %213, label %for.index.body-49, label %for.index.done-52

for.index.body-49:
	%214 = load i64, i64* %18, align 8
	%215 = extractvalue {%runtime.Type_Info**, i64} %204, 0
	%216 = getelementptr inbounds %runtime.Type_Info*, %runtime.Type_Info** %215, i64 %214
	%217 = load %runtime.Type_Info*, %runtime.Type_Info** %216, align 8
	store %runtime.Type_Info* %217, %runtime.Type_Info** %15
	store i64 %214, i64* %16
	; IfStmt
	%218 = load i64, i64* %16, align 8
	%219 = icmp sgt i64 %218, 0
	%220 = zext i1 %219 to i8
	%221 = trunc i8 %220 to i1
	br i1 %221, label %if.then-50, label %if.done-51

if.then-50:
	%222 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %222, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @str$c9, i64 0, i32 0), i64 2}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %if.done-51

if.done-51:
	%223 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	%224 = load %runtime.Type_Info*, %runtime.Type_Info** %15, align 8
	call void @fmt.write_type({i8*, i64, i64, %mem.Allocator}* %223, %runtime.Type_Info* %224, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %for.index.loop-48

for.index.done-52:
	%225 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %225, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str$ca, i64 0, i32 0), i64 1}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %if.done-53

if.done-53:
	; IfStmt
	; SelectorExpr
	%226 = getelementptr inbounds %runtime.Type_Info_Procedure, %runtime.Type_Info_Procedure* %12, i64 0, i32 1
	%227 = load %runtime.Type_Info*, %runtime.Type_Info** %226, align 8
	%228 = icmp ne %runtime.Type_Info* %227, zeroinitializer
	%229 = zext i1 %228 to i8
	%230 = trunc i8 %229 to i1
	br i1 %230, label %if.then-54, label %if.done-55

if.then-54:
	%231 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %231, %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str$cb, i64 0, i32 0), i64 4}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%232 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	; SelectorExpr
	%233 = getelementptr inbounds %runtime.Type_Info_Procedure, %runtime.Type_Info_Procedure* %12, i64 0, i32 1
	%234 = load %runtime.Type_Info*, %runtime.Type_Info** %233, align 8
	call void @fmt.write_type({i8*, i64, i64, %mem.Allocator}* %232, %runtime.Type_Info* %234, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %if.done-55

if.done-55:
	br label %typeswitch.done-126

typeswitch.next-56:
	%235 = icmp eq i64 %62, 12
	br i1 %235, label %typeswitch.body-70, label %typeswitch.next-69

typeswitch.body-57:
	%236 = bitcast %..rawptr %63 to %runtime.Type_Info_Tuple*
	%237 = load %runtime.Type_Info_Tuple, %runtime.Type_Info_Tuple* %236, align 8
	store %runtime.Type_Info_Tuple %237, %runtime.Type_Info_Tuple* %19
	; count
	; SelectorExpr
	%238 = getelementptr inbounds %runtime.Type_Info_Tuple, %runtime.Type_Info_Tuple* %19, i64 0, i32 1
	%239 = load {%..string*, i64}, {%..string*, i64}* %238, align 8
	%240 = extractvalue {%..string*, i64} %239, 1
	store i64 %240, i64* %20
	; IfStmt
	%241 = load i64, i64* %20, align 8
	%242 = icmp ne i64 %241, 1
	%243 = zext i1 %242 to i8
	%244 = trunc i8 %243 to i1
	br i1 %244, label %if.then-58, label %if.done-59

if.then-58:
	%245 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %245, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str$cc, i64 0, i32 0), i64 1}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %if.done-59

if.done-59:
	; RangeStmt
	; name
	%246 = bitcast %..string* %21 to %..rawptr
	%247 = call %..rawptr @mem.zero(%..rawptr %246, i64 16) noinline
	store %..string zeroinitializer, %..string* %21
	; i
	%248 = bitcast i64* %22 to %..rawptr
	%249 = call %..rawptr @mem.zero(%..rawptr %248, i64 8) noinline
	store i64 zeroinitializer, i64* %22
	; SelectorExpr
	%250 = getelementptr inbounds %runtime.Type_Info_Tuple, %runtime.Type_Info_Tuple* %19, i64 0, i32 1
	%251 = load {%..string*, i64}, {%..string*, i64}* %250, align 8
	%252 = bitcast i64* %23 to %..rawptr
	%253 = call %..rawptr @mem.zero(%..rawptr %252, i64 8) noinline
	store i64 zeroinitializer, i64* %23
	%254 = extractvalue {%..string*, i64} %251, 1
	store i64 %254, i64* %23
	%255 = bitcast i64* %24 to %..rawptr
	%256 = call %..rawptr @mem.zero(%..rawptr %255, i64 8) noinline
	store i64 zeroinitializer, i64* %24
	store i64 -1, i64* %24
	br label %for.index.loop-60

for.index.loop-60:
	%257 = load i64, i64* %24, align 8
	%258 = add i64 %257, 1
	store i64 %258, i64* %24
	%259 = load i64, i64* %23, align 8
	%260 = icmp slt i64 %258, %259
	br i1 %260, label %for.index.body-61, label %for.index.done-66

for.index.body-61:
	%261 = load i64, i64* %24, align 8
	%262 = extractvalue {%..string*, i64} %251, 0
	%263 = getelementptr inbounds %..string, %..string* %262, i64 %261
	%264 = load %..string, %..string* %263, align 8
	store %..string %264, %..string* %21
	store i64 %261, i64* %22
	; IfStmt
	%265 = load i64, i64* %22, align 8
	%266 = icmp sgt i64 %265, 0
	%267 = zext i1 %266 to i8
	%268 = trunc i8 %267 to i1
	br i1 %268, label %if.then-62, label %if.done-63

if.then-62:
	%269 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %269, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @str$cd, i64 0, i32 0), i64 2}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %if.done-63

if.done-63:
	; t
	; IndexExpr
	; SelectorExpr
	%270 = getelementptr inbounds %runtime.Type_Info_Tuple, %runtime.Type_Info_Tuple* %19, i64 0, i32 0
	%271 = load {%runtime.Type_Info**, i64}, {%runtime.Type_Info**, i64}* %270, align 8
	%272 = extractvalue {%runtime.Type_Info**, i64} %271, 0
	%273 = load i64, i64* %22, align 8
	%274 = extractvalue {%runtime.Type_Info**, i64} %271, 1
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @str$ce, i64 0, i32 0), i64 25}, i64 308, i64 20, i64 %273, i64 %274)
	%275 = getelementptr inbounds %runtime.Type_Info*, %runtime.Type_Info** %272, i64 %273
	%276 = load %runtime.Type_Info*, %runtime.Type_Info** %275, align 8
	store %runtime.Type_Info* %276, %runtime.Type_Info** %25
	; IfStmt
	%277 = load %..string, %..string* %21, align 8
	%278 = extractvalue %..string %277, 1
	%279 = icmp sgt i64 %278, 0
	%280 = zext i1 %279 to i8
	%281 = trunc i8 %280 to i1
	br i1 %281, label %if.then-64, label %if.done-65

if.then-64:
	%282 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	%283 = load %..string, %..string* %21, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %282, %..string %283, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%284 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %284, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @str$cf, i64 0, i32 0), i64 2}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %if.done-65

if.done-65:
	%285 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	%286 = load %runtime.Type_Info*, %runtime.Type_Info** %25, align 8
	call void @fmt.write_type({i8*, i64, i64, %mem.Allocator}* %285, %runtime.Type_Info* %286, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %for.index.loop-60

for.index.done-66:
	; IfStmt
	%287 = load i64, i64* %20, align 8
	%288 = icmp ne i64 %287, 1
	%289 = zext i1 %288 to i8
	%290 = trunc i8 %289 to i1
	br i1 %290, label %if.then-67, label %if.done-68

if.then-67:
	%291 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %291, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str$d0, i64 0, i32 0), i64 1}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %if.done-68

if.done-68:
	br label %typeswitch.done-126

typeswitch.next-69:
	%292 = icmp eq i64 %62, 13
	br i1 %292, label %typeswitch.body-72, label %typeswitch.next-71

typeswitch.body-70:
	%293 = bitcast %..rawptr %63 to %runtime.Type_Info_Array*
	%294 = load %runtime.Type_Info_Array, %runtime.Type_Info_Array* %293, align 8
	store %runtime.Type_Info_Array %294, %runtime.Type_Info_Array* %26
	%295 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %295, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str$d1, i64 0, i32 0), i64 1}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%296 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	; SelectorExpr
	%297 = getelementptr inbounds %runtime.Type_Info_Array, %runtime.Type_Info_Array* %26, i64 0, i32 2
	%298 = load i64, i64* %297, align 8
	%299 = bitcast i64 %298 to i64
	call void @fmt.write_i64({i8*, i64, i64, %mem.Allocator}* %296, i64 %299, i64 10, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%300 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %300, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str$d2, i64 0, i32 0), i64 1}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%301 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	; SelectorExpr
	%302 = getelementptr inbounds %runtime.Type_Info_Array, %runtime.Type_Info_Array* %26, i64 0, i32 0
	%303 = load %runtime.Type_Info*, %runtime.Type_Info** %302, align 8
	call void @fmt.write_type({i8*, i64, i64, %mem.Allocator}* %301, %runtime.Type_Info* %303, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %typeswitch.done-126

typeswitch.next-71:
	%304 = icmp eq i64 %62, 14
	br i1 %304, label %typeswitch.body-74, label %typeswitch.next-73

typeswitch.body-72:
	%305 = bitcast %..rawptr %63 to %runtime.Type_Info_Dynamic_Array*
	%306 = load %runtime.Type_Info_Dynamic_Array, %runtime.Type_Info_Dynamic_Array* %305, align 8
	store %runtime.Type_Info_Dynamic_Array %306, %runtime.Type_Info_Dynamic_Array* %27
	%307 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %307, %..string {i8* getelementptr inbounds ([10 x i8], [10 x i8]* @str$d3, i64 0, i32 0), i64 9}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%308 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	; SelectorExpr
	%309 = getelementptr inbounds %runtime.Type_Info_Dynamic_Array, %runtime.Type_Info_Dynamic_Array* %27, i64 0, i32 0
	%310 = load %runtime.Type_Info*, %runtime.Type_Info** %309, align 8
	call void @fmt.write_type({i8*, i64, i64, %mem.Allocator}* %308, %runtime.Type_Info* %310, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %typeswitch.done-126

typeswitch.next-73:
	%311 = icmp eq i64 %62, 19
	br i1 %311, label %typeswitch.body-76, label %typeswitch.next-75

typeswitch.body-74:
	%312 = bitcast %..rawptr %63 to %runtime.Type_Info_Slice*
	%313 = load %runtime.Type_Info_Slice, %runtime.Type_Info_Slice* %312, align 8
	store %runtime.Type_Info_Slice %313, %runtime.Type_Info_Slice* %28
	%314 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %314, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @str$d4, i64 0, i32 0), i64 2}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%315 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	; SelectorExpr
	%316 = getelementptr inbounds %runtime.Type_Info_Slice, %runtime.Type_Info_Slice* %28, i64 0, i32 0
	%317 = load %runtime.Type_Info*, %runtime.Type_Info** %316, align 8
	call void @fmt.write_type({i8*, i64, i64, %mem.Allocator}* %315, %runtime.Type_Info* %317, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %typeswitch.done-126

typeswitch.next-75:
	%318 = icmp eq i64 %62, 16
	br i1 %318, label %typeswitch.body-78, label %typeswitch.next-77

typeswitch.body-76:
	%319 = bitcast %..rawptr %63 to %runtime.Type_Info_Map*
	%320 = load %runtime.Type_Info_Map, %runtime.Type_Info_Map* %319, align 8
	store %runtime.Type_Info_Map %320, %runtime.Type_Info_Map* %29
	%321 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %321, %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str$d5, i64 0, i32 0), i64 4}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%322 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	; SelectorExpr
	%323 = getelementptr inbounds %runtime.Type_Info_Map, %runtime.Type_Info_Map* %29, i64 0, i32 0
	%324 = load %runtime.Type_Info*, %runtime.Type_Info** %323, align 8
	call void @fmt.write_type({i8*, i64, i64, %mem.Allocator}* %322, %runtime.Type_Info* %324, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%325 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	call void @fmt.write_byte({i8*, i64, i64, %mem.Allocator}* %325, i8 93, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%326 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	; SelectorExpr
	%327 = getelementptr inbounds %runtime.Type_Info_Map, %runtime.Type_Info_Map* %29, i64 0, i32 1
	%328 = load %runtime.Type_Info*, %runtime.Type_Info** %327, align 8
	call void @fmt.write_type({i8*, i64, i64, %mem.Allocator}* %326, %runtime.Type_Info* %328, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %typeswitch.done-126

typeswitch.next-77:
	%329 = icmp eq i64 %62, 17
	br i1 %329, label %typeswitch.body-91, label %typeswitch.next-90

typeswitch.body-78:
	%330 = bitcast %..rawptr %63 to %runtime.Type_Info_Struct*
	%331 = load %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %330, align 8
	store %runtime.Type_Info_Struct %331, %runtime.Type_Info_Struct* %30
	%332 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %332, %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str$d6, i64 0, i32 0), i64 7}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	; IfStmt
	; SelectorExpr
	%333 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %30, i64 0, i32 4
	%334 = load i8, i8* %333, align 1
	%335 = trunc i8 %334 to i1
	br i1 %335, label %if.then-79, label %if.done-80

if.then-79:
	%336 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %336, %..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @str$d7, i64 0, i32 0), i64 8}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %if.done-80

if.done-80:
	; IfStmt
	; SelectorExpr
	%337 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %30, i64 0, i32 5
	%338 = load i8, i8* %337, align 1
	%339 = trunc i8 %338 to i1
	br i1 %339, label %if.then-81, label %if.done-82

if.then-81:
	%340 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %340, %..string {i8* getelementptr inbounds ([12 x i8], [12 x i8]* @str$d8, i64 0, i32 0), i64 11}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %if.done-82

if.done-82:
	; IfStmt
	; SelectorExpr
	%341 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %30, i64 0, i32 6
	%342 = load i8, i8* %341, align 1
	%343 = trunc i8 %342 to i1
	br i1 %343, label %if.then-83, label %if.done-84

if.then-83:
	%344 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %344, %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str$d9, i64 0, i32 0), i64 7}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%345 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	; SelectorExpr
	%346 = load %runtime.Type_Info*, %runtime.Type_Info** %1, align 8
	%347 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %346, i64 0
	%348 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %347, i64 0, i32 1
	%349 = load i64, i64* %348, align 8
	%350 = bitcast i64 %349 to i64
	call void @fmt.write_i64({i8*, i64, i64, %mem.Allocator}* %345, i64 %350, i64 10, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%351 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	call void @fmt.write_byte({i8*, i64, i64, %mem.Allocator}* %351, i8 32, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %if.done-84

if.done-84:
	%352 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	call void @fmt.write_byte({i8*, i64, i64, %mem.Allocator}* %352, i8 123, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	; RangeStmt
	; name
	%353 = bitcast %..string* %31 to %..rawptr
	%354 = call %..rawptr @mem.zero(%..rawptr %353, i64 16) noinline
	store %..string zeroinitializer, %..string* %31
	; i
	%355 = bitcast i64* %32 to %..rawptr
	%356 = call %..rawptr @mem.zero(%..rawptr %355, i64 8) noinline
	store i64 zeroinitializer, i64* %32
	; SelectorExpr
	%357 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %30, i64 0, i32 1
	%358 = load {%..string*, i64}, {%..string*, i64}* %357, align 8
	%359 = bitcast i64* %33 to %..rawptr
	%360 = call %..rawptr @mem.zero(%..rawptr %359, i64 8) noinline
	store i64 zeroinitializer, i64* %33
	%361 = extractvalue {%..string*, i64} %358, 1
	store i64 %361, i64* %33
	%362 = bitcast i64* %34 to %..rawptr
	%363 = call %..rawptr @mem.zero(%..rawptr %362, i64 8) noinline
	store i64 zeroinitializer, i64* %34
	store i64 -1, i64* %34
	br label %for.index.loop-85

for.index.loop-85:
	%364 = load i64, i64* %34, align 8
	%365 = add i64 %364, 1
	store i64 %365, i64* %34
	%366 = load i64, i64* %33, align 8
	%367 = icmp slt i64 %365, %366
	br i1 %367, label %for.index.body-86, label %for.index.done-89

for.index.body-86:
	%368 = load i64, i64* %34, align 8
	%369 = extractvalue {%..string*, i64} %358, 0
	%370 = getelementptr inbounds %..string, %..string* %369, i64 %368
	%371 = load %..string, %..string* %370, align 8
	store %..string %371, %..string* %31
	store i64 %368, i64* %32
	; IfStmt
	%372 = load i64, i64* %32, align 8
	%373 = icmp sgt i64 %372, 0
	%374 = zext i1 %373 to i8
	%375 = trunc i8 %374 to i1
	br i1 %375, label %if.then-87, label %if.done-88

if.then-87:
	%376 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %376, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @str$da, i64 0, i32 0), i64 2}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %if.done-88

if.done-88:
	%377 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	%378 = load %..string, %..string* %31, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %377, %..string %378, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%379 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %379, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @str$db, i64 0, i32 0), i64 2}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%380 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	; IndexExpr
	; SelectorExpr
	%381 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %30, i64 0, i32 0
	%382 = load {%runtime.Type_Info**, i64}, {%runtime.Type_Info**, i64}* %381, align 8
	%383 = extractvalue {%runtime.Type_Info**, i64} %382, 0
	%384 = load i64, i64* %32, align 8
	%385 = extractvalue {%runtime.Type_Info**, i64} %382, 1
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @str$dc, i64 0, i32 0), i64 25}, i64 350, i64 31, i64 %384, i64 %385)
	%386 = getelementptr inbounds %runtime.Type_Info*, %runtime.Type_Info** %383, i64 %384
	%387 = load %runtime.Type_Info*, %runtime.Type_Info** %386, align 8
	call void @fmt.write_type({i8*, i64, i64, %mem.Allocator}* %380, %runtime.Type_Info* %387, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %for.index.loop-85

for.index.done-89:
	%388 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	call void @fmt.write_byte({i8*, i64, i64, %mem.Allocator}* %388, i8 125, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %typeswitch.done-126

typeswitch.next-90:
	%389 = icmp eq i64 %62, 18
	br i1 %389, label %typeswitch.body-100, label %typeswitch.next-99

typeswitch.body-91:
	%390 = bitcast %..rawptr %63 to %runtime.Type_Info_Union*
	%391 = load %runtime.Type_Info_Union, %runtime.Type_Info_Union* %390, align 8
	store %runtime.Type_Info_Union %391, %runtime.Type_Info_Union* %35
	%392 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %392, %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str$dd, i64 0, i32 0), i64 6}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	; IfStmt
	; SelectorExpr
	%393 = getelementptr inbounds %runtime.Type_Info_Union, %runtime.Type_Info_Union* %35, i64 0, i32 3
	%394 = load i8, i8* %393, align 1
	%395 = trunc i8 %394 to i1
	br i1 %395, label %if.then-92, label %if.done-93

if.then-92:
	%396 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %396, %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str$de, i64 0, i32 0), i64 7}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%397 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	; SelectorExpr
	%398 = load %runtime.Type_Info*, %runtime.Type_Info** %1, align 8
	%399 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %398, i64 0
	%400 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %399, i64 0, i32 1
	%401 = load i64, i64* %400, align 8
	%402 = bitcast i64 %401 to i64
	call void @fmt.write_i64({i8*, i64, i64, %mem.Allocator}* %397, i64 %402, i64 10, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%403 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	call void @fmt.write_byte({i8*, i64, i64, %mem.Allocator}* %403, i8 32, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %if.done-93

if.done-93:
	%404 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	call void @fmt.write_byte({i8*, i64, i64, %mem.Allocator}* %404, i8 123, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	; RangeStmt
	; variant
	%405 = bitcast %runtime.Type_Info** %36 to %..rawptr
	%406 = call %..rawptr @mem.zero(%..rawptr %405, i64 8) noinline
	store %runtime.Type_Info* zeroinitializer, %runtime.Type_Info** %36
	; i
	%407 = bitcast i64* %37 to %..rawptr
	%408 = call %..rawptr @mem.zero(%..rawptr %407, i64 8) noinline
	store i64 zeroinitializer, i64* %37
	; SelectorExpr
	%409 = getelementptr inbounds %runtime.Type_Info_Union, %runtime.Type_Info_Union* %35, i64 0, i32 0
	%410 = load {%runtime.Type_Info**, i64}, {%runtime.Type_Info**, i64}* %409, align 8
	%411 = bitcast i64* %38 to %..rawptr
	%412 = call %..rawptr @mem.zero(%..rawptr %411, i64 8) noinline
	store i64 zeroinitializer, i64* %38
	%413 = extractvalue {%runtime.Type_Info**, i64} %410, 1
	store i64 %413, i64* %38
	%414 = bitcast i64* %39 to %..rawptr
	%415 = call %..rawptr @mem.zero(%..rawptr %414, i64 8) noinline
	store i64 zeroinitializer, i64* %39
	store i64 -1, i64* %39
	br label %for.index.loop-94

for.index.loop-94:
	%416 = load i64, i64* %39, align 8
	%417 = add i64 %416, 1
	store i64 %417, i64* %39
	%418 = load i64, i64* %38, align 8
	%419 = icmp slt i64 %417, %418
	br i1 %419, label %for.index.body-95, label %for.index.done-98

for.index.body-95:
	%420 = load i64, i64* %39, align 8
	%421 = extractvalue {%runtime.Type_Info**, i64} %410, 0
	%422 = getelementptr inbounds %runtime.Type_Info*, %runtime.Type_Info** %421, i64 %420
	%423 = load %runtime.Type_Info*, %runtime.Type_Info** %422, align 8
	store %runtime.Type_Info* %423, %runtime.Type_Info** %36
	store i64 %420, i64* %37
	; IfStmt
	%424 = load i64, i64* %37, align 8
	%425 = icmp sgt i64 %424, 0
	%426 = zext i1 %425 to i8
	%427 = trunc i8 %426 to i1
	br i1 %427, label %if.then-96, label %if.done-97

if.then-96:
	%428 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %428, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @str$df, i64 0, i32 0), i64 2}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %if.done-97

if.done-97:
	%429 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	%430 = load %runtime.Type_Info*, %runtime.Type_Info** %36, align 8
	call void @fmt.write_type({i8*, i64, i64, %mem.Allocator}* %429, %runtime.Type_Info* %430, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %for.index.loop-94

for.index.done-98:
	%431 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %431, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str$e0, i64 0, i32 0), i64 1}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %typeswitch.done-126

typeswitch.next-99:
	%432 = icmp eq i64 %62, 20
	br i1 %432, label %typeswitch.body-107, label %typeswitch.next-106

typeswitch.body-100:
	%433 = bitcast %..rawptr %63 to %runtime.Type_Info_Enum*
	%434 = load %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %433, align 8
	store %runtime.Type_Info_Enum %434, %runtime.Type_Info_Enum* %40
	%435 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %435, %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str$e1, i64 0, i32 0), i64 5}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%436 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	; SelectorExpr
	%437 = getelementptr inbounds %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %40, i64 0, i32 0
	%438 = load %runtime.Type_Info*, %runtime.Type_Info** %437, align 8
	call void @fmt.write_type({i8*, i64, i64, %mem.Allocator}* %436, %runtime.Type_Info* %438, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%439 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %439, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @str$e2, i64 0, i32 0), i64 2}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	; RangeStmt
	; name
	%440 = bitcast %..string* %41 to %..rawptr
	%441 = call %..rawptr @mem.zero(%..rawptr %440, i64 16) noinline
	store %..string zeroinitializer, %..string* %41
	; i
	%442 = bitcast i64* %42 to %..rawptr
	%443 = call %..rawptr @mem.zero(%..rawptr %442, i64 8) noinline
	store i64 zeroinitializer, i64* %42
	; SelectorExpr
	%444 = getelementptr inbounds %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %40, i64 0, i32 1
	%445 = load {%..string*, i64}, {%..string*, i64}* %444, align 8
	%446 = bitcast i64* %43 to %..rawptr
	%447 = call %..rawptr @mem.zero(%..rawptr %446, i64 8) noinline
	store i64 zeroinitializer, i64* %43
	%448 = extractvalue {%..string*, i64} %445, 1
	store i64 %448, i64* %43
	%449 = bitcast i64* %44 to %..rawptr
	%450 = call %..rawptr @mem.zero(%..rawptr %449, i64 8) noinline
	store i64 zeroinitializer, i64* %44
	store i64 -1, i64* %44
	br label %for.index.loop-101

for.index.loop-101:
	%451 = load i64, i64* %44, align 8
	%452 = add i64 %451, 1
	store i64 %452, i64* %44
	%453 = load i64, i64* %43, align 8
	%454 = icmp slt i64 %452, %453
	br i1 %454, label %for.index.body-102, label %for.index.done-105

for.index.body-102:
	%455 = load i64, i64* %44, align 8
	%456 = extractvalue {%..string*, i64} %445, 0
	%457 = getelementptr inbounds %..string, %..string* %456, i64 %455
	%458 = load %..string, %..string* %457, align 8
	store %..string %458, %..string* %41
	store i64 %455, i64* %42
	; IfStmt
	%459 = load i64, i64* %42, align 8
	%460 = icmp sgt i64 %459, 0
	%461 = zext i1 %460 to i8
	%462 = trunc i8 %461 to i1
	br i1 %462, label %if.then-103, label %if.done-104

if.then-103:
	%463 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %463, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @str$e3, i64 0, i32 0), i64 2}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %if.done-104

if.done-104:
	%464 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	%465 = load %..string, %..string* %41, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %464, %..string %465, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %for.index.loop-101

for.index.done-105:
	%466 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %466, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str$e4, i64 0, i32 0), i64 1}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %typeswitch.done-126

typeswitch.next-106:
	%467 = icmp eq i64 %62, 21
	br i1 %467, label %typeswitch.body-116, label %typeswitch.next-115

typeswitch.body-107:
	%468 = bitcast %..rawptr %63 to %runtime.Type_Info_Bit_Field*
	%469 = load %runtime.Type_Info_Bit_Field, %runtime.Type_Info_Bit_Field* %468, align 8
	store %runtime.Type_Info_Bit_Field %469, %runtime.Type_Info_Bit_Field* %45
	%470 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %470, %..string {i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str$e5, i64 0, i32 0), i64 10}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	; IfStmt
	; SelectorExpr
	%471 = load %runtime.Type_Info*, %runtime.Type_Info** %1, align 8
	%472 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %471, i64 0
	%473 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %472, i64 0, i32 1
	%474 = load i64, i64* %473, align 8
	%475 = icmp ne i64 %474, 1
	%476 = zext i1 %475 to i8
	%477 = trunc i8 %476 to i1
	br i1 %477, label %if.then-108, label %if.done-109

if.then-108:
	%478 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %478, %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str$e6, i64 0, i32 0), i64 7}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%479 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	; SelectorExpr
	%480 = load %runtime.Type_Info*, %runtime.Type_Info** %1, align 8
	%481 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %480, i64 0
	%482 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %481, i64 0, i32 1
	%483 = load i64, i64* %482, align 8
	%484 = bitcast i64 %483 to i64
	call void @fmt.write_i64({i8*, i64, i64, %mem.Allocator}* %479, i64 %484, i64 10, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%485 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	call void @fmt.write_rune({i8*, i64, i64, %mem.Allocator}* %485, i32 32, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %if.done-109

if.done-109:
	%486 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %486, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @str$e7, i64 0, i32 0), i64 2}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	; RangeStmt
	; name
	%487 = bitcast %..string* %46 to %..rawptr
	%488 = call %..rawptr @mem.zero(%..rawptr %487, i64 16) noinline
	store %..string zeroinitializer, %..string* %46
	; i
	%489 = bitcast i64* %47 to %..rawptr
	%490 = call %..rawptr @mem.zero(%..rawptr %489, i64 8) noinline
	store i64 zeroinitializer, i64* %47
	; SelectorExpr
	%491 = getelementptr inbounds %runtime.Type_Info_Bit_Field, %runtime.Type_Info_Bit_Field* %45, i64 0, i32 0
	%492 = load {%..string*, i64}, {%..string*, i64}* %491, align 8
	%493 = bitcast i64* %48 to %..rawptr
	%494 = call %..rawptr @mem.zero(%..rawptr %493, i64 8) noinline
	store i64 zeroinitializer, i64* %48
	%495 = extractvalue {%..string*, i64} %492, 1
	store i64 %495, i64* %48
	%496 = bitcast i64* %49 to %..rawptr
	%497 = call %..rawptr @mem.zero(%..rawptr %496, i64 8) noinline
	store i64 zeroinitializer, i64* %49
	store i64 -1, i64* %49
	br label %for.index.loop-110

for.index.loop-110:
	%498 = load i64, i64* %49, align 8
	%499 = add i64 %498, 1
	store i64 %499, i64* %49
	%500 = load i64, i64* %48, align 8
	%501 = icmp slt i64 %499, %500
	br i1 %501, label %for.index.body-111, label %for.index.done-114

for.index.body-111:
	%502 = load i64, i64* %49, align 8
	%503 = extractvalue {%..string*, i64} %492, 0
	%504 = getelementptr inbounds %..string, %..string* %503, i64 %502
	%505 = load %..string, %..string* %504, align 8
	store %..string %505, %..string* %46
	store i64 %502, i64* %47
	; IfStmt
	%506 = load i64, i64* %47, align 8
	%507 = icmp sgt i64 %506, 0
	%508 = zext i1 %507 to i8
	%509 = trunc i8 %508 to i1
	br i1 %509, label %if.then-112, label %if.done-113

if.then-112:
	%510 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %510, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @str$e8, i64 0, i32 0), i64 2}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %if.done-113

if.done-113:
	%511 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	%512 = load %..string, %..string* %46, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %511, %..string %512, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%513 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %513, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @str$e9, i64 0, i32 0), i64 2}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%514 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	; IndexExpr
	; SelectorExpr
	%515 = getelementptr inbounds %runtime.Type_Info_Bit_Field, %runtime.Type_Info_Bit_Field* %45, i64 0, i32 1
	%516 = load {i32*, i64}, {i32*, i64}* %515, align 8
	%517 = extractvalue {i32*, i64} %516, 0
	%518 = load i64, i64* %47, align 8
	%519 = extractvalue {i32*, i64} %516, 1
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @str$ea, i64 0, i32 0), i64 25}, i64 390, i64 33, i64 %518, i64 %519)
	%520 = getelementptr inbounds i32, i32* %517, i64 %518
	%521 = load i32, i32* %520, align 4
	%522 = sext i32 %521 to i64
	call void @fmt.write_i64({i8*, i64, i64, %mem.Allocator}* %514, i64 %522, i64 10, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %for.index.loop-110

for.index.done-114:
	%523 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %523, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str$eb, i64 0, i32 0), i64 1}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %typeswitch.done-126

typeswitch.next-115:
	%524 = icmp eq i64 %62, 22
	br i1 %524, label %typeswitch.body-125, label %typeswitch.next-124

typeswitch.body-116:
	%525 = bitcast %..rawptr %63 to %runtime.Type_Info_Bit_Set*
	%526 = load %runtime.Type_Info_Bit_Set, %runtime.Type_Info_Bit_Set* %525, align 8
	store %runtime.Type_Info_Bit_Set %526, %runtime.Type_Info_Bit_Set* %50
	%527 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %527, %..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @str$ec, i64 0, i32 0), i64 8}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	; SwitchStmt
	; SelectorExpr
	; SelectorExpr
	%528 = getelementptr inbounds %runtime.Type_Info_Bit_Set, %runtime.Type_Info_Bit_Set* %50, i64 0, i32 0
	%529 = load %runtime.Type_Info*, %runtime.Type_Info** %528, align 8
	%530 = call i8 @types.is_enum(%runtime.Type_Info* %529, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%531 = icmp eq i8 1, %530
	br i1 %531, label %switch.case.body-118, label %switch.case.next-117

switch.case.next-117:
	; SelectorExpr
	; SelectorExpr
	%532 = getelementptr inbounds %runtime.Type_Info_Bit_Set, %runtime.Type_Info_Bit_Set* %50, i64 0, i32 0
	%533 = load %runtime.Type_Info*, %runtime.Type_Info** %532, align 8
	%534 = call i8 @types.is_rune(%runtime.Type_Info* %533, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%535 = icmp eq i8 1, %534
	br i1 %535, label %switch.fall.body-120, label %switch.case.next-119

switch.case.body-118:
	%536 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	; SelectorExpr
	%537 = getelementptr inbounds %runtime.Type_Info_Bit_Set, %runtime.Type_Info_Bit_Set* %50, i64 0, i32 0
	%538 = load %runtime.Type_Info*, %runtime.Type_Info** %537, align 8
	call void @fmt.write_type({i8*, i64, i64, %mem.Allocator}* %536, %runtime.Type_Info* %538, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %switch.done-121

switch.case.next-119:
	%539 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	; SelectorExpr
	%540 = getelementptr inbounds %runtime.Type_Info_Bit_Set, %runtime.Type_Info_Bit_Set* %50, i64 0, i32 2
	%541 = load i64, i64* %540, align 8
	call void @fmt.write_i64({i8*, i64, i64, %mem.Allocator}* %539, i64 %541, i64 10, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%542 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %542, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @str$ed, i64 0, i32 0), i64 2}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%543 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	; SelectorExpr
	%544 = getelementptr inbounds %runtime.Type_Info_Bit_Set, %runtime.Type_Info_Bit_Set* %50, i64 0, i32 3
	%545 = load i64, i64* %544, align 8
	call void @fmt.write_i64({i8*, i64, i64, %mem.Allocator}* %543, i64 %545, i64 10, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %switch.done-121

switch.fall.body-120:
	%546 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	; SelectorExpr
	%547 = getelementptr inbounds %runtime.Type_Info_Bit_Set, %runtime.Type_Info_Bit_Set* %50, i64 0, i32 2
	%548 = load i64, i64* %547, align 8
	%549 = trunc i64 %548 to i32
	call void @fmt.write_encoded_rune({i8*, i64, i64, %mem.Allocator}* %546, i32 %549, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%550 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %550, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @str$ee, i64 0, i32 0), i64 2}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%551 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	; SelectorExpr
	%552 = getelementptr inbounds %runtime.Type_Info_Bit_Set, %runtime.Type_Info_Bit_Set* %50, i64 0, i32 3
	%553 = load i64, i64* %552, align 8
	%554 = trunc i64 %553 to i32
	call void @fmt.write_encoded_rune({i8*, i64, i64, %mem.Allocator}* %551, i32 %554, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %switch.done-121

switch.done-121:
	; IfStmt
	; SelectorExpr
	%555 = getelementptr inbounds %runtime.Type_Info_Bit_Set, %runtime.Type_Info_Bit_Set* %50, i64 0, i32 1
	%556 = load %runtime.Type_Info*, %runtime.Type_Info** %555, align 8
	%557 = icmp ne %runtime.Type_Info* %556, zeroinitializer
	%558 = zext i1 %557 to i8
	%559 = trunc i8 %558 to i1
	br i1 %559, label %if.then-122, label %if.done-123

if.then-122:
	%560 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %560, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @str$ef, i64 0, i32 0), i64 2}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%561 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	; SelectorExpr
	%562 = getelementptr inbounds %runtime.Type_Info_Bit_Set, %runtime.Type_Info_Bit_Set* %50, i64 0, i32 1
	%563 = load %runtime.Type_Info*, %runtime.Type_Info** %562, align 8
	call void @fmt.write_type({i8*, i64, i64, %mem.Allocator}* %561, %runtime.Type_Info* %563, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %if.done-123

if.done-123:
	%564 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	call void @fmt.write_byte({i8*, i64, i64, %mem.Allocator}* %564, i8 93, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %typeswitch.done-126

typeswitch.next-124:
	br label %typeswitch.done-126

typeswitch.body-125:
	%565 = bitcast %..rawptr %63 to %runtime.Type_Info_Opaque*
	%566 = load %runtime.Type_Info_Opaque, %runtime.Type_Info_Opaque* %565, align 8
	store %runtime.Type_Info_Opaque %566, %runtime.Type_Info_Opaque* %51
	%567 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %567, %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str$f0, i64 0, i32 0), i64 7}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%568 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	; SelectorExpr
	%569 = getelementptr inbounds %runtime.Type_Info_Opaque, %runtime.Type_Info_Opaque* %51, i64 0, i32 0
	%570 = load %runtime.Type_Info*, %runtime.Type_Info** %569, align 8
	call void @fmt.write_type({i8*, i64, i64, %mem.Allocator}* %568, %runtime.Type_Info* %570, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %typeswitch.done-126

typeswitch.done-126:
	ret void
}

define void @fmt.fmt_bad_verb(%fmt.Fmt_Info* %fi, i32 %verb, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca %fmt.Fmt_Info*, align 16
	%1 = alloca i32, align 16
	store %fmt.Fmt_Info* %fi, %fmt.Fmt_Info** %0
	store i32 %verb, i32* %1
	%2 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%3 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %2, i64 0
	%4 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %3, i64 0, i32 12
	%5 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %4, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %5, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @str$f1, i64 0, i32 0), i64 2}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%6 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%7 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %6, i64 0
	%8 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %7, i64 0, i32 12
	%9 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %8, align 8
	%10 = load i32, i32* %1, align 4
	call void @fmt.write_rune({i8*, i64, i64, %mem.Allocator}* %9, i32 %10, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%11 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%12 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %11, i64 0
	%13 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %12, i64 0, i32 12
	%14 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %13, align 8
	call void @fmt.write_byte({i8*, i64, i64, %mem.Allocator}* %14, i8 40, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	; IfStmt
	; SelectorExpr
	%15 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%16 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %15, i64 0
	%17 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %16, i64 0, i32 13
	%18 = getelementptr inbounds %..any, %..any* %17, i64 0, i32 1
	%19 = load %..typeid, %..typeid* %18, align 8
	%20 = icmp ne %..typeid %19, 0
	%21 = zext i1 %20 to i8
	%22 = trunc i8 %21 to i1
	br i1 %22, label %if.then-1, label %if.else-2

if.then-1:
	%23 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%24 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %23, i64 0
	%25 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %24, i64 0, i32 12
	%26 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %25, align 8
	; SelectorExpr
	%27 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%28 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %27, i64 0
	%29 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %28, i64 0, i32 13
	%30 = getelementptr inbounds %..any, %..any* %29, i64 0, i32 1
	%31 = load %..typeid, %..typeid* %30, align 8
	call void @fmt.write_typeid({i8*, i64, i64, %mem.Allocator}* %26, %..typeid %31, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%32 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%33 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %32, i64 0
	%34 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %33, i64 0, i32 12
	%35 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %34, align 8
	call void @fmt.write_byte({i8*, i64, i64, %mem.Allocator}* %35, i8 61, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%36 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%37 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%38 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %37, i64 0
	%39 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %38, i64 0, i32 13
	%40 = load %..any, %..any* %39, align 8
	call void @fmt.fmt_value(%fmt.Fmt_Info* %36, %..any %40, i32 118, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %if.done-3

if.else-2:
	%41 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%42 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %41, i64 0
	%43 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %42, i64 0, i32 12
	%44 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %43, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %44, %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str$f2, i64 0, i32 0), i64 5}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %if.done-3

if.done-3:
	%45 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%46 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %45, i64 0
	%47 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %46, i64 0, i32 12
	%48 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %47, align 8
	call void @fmt.write_byte({i8*, i64, i64, %mem.Allocator}* %48, i8 41, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	ret void
}

define void @fmt.fmt_bool(%fmt.Fmt_Info* %fi, i1 %b, i32 %verb, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca %fmt.Fmt_Info*, align 16
	%1 = alloca i8, align 16
	%2 = alloca i32, align 16
	store %fmt.Fmt_Info* %fi, %fmt.Fmt_Info** %0
	%3 = zext i1 %b to i8
	store i8 %3, i8* %1
	store i32 %verb, i32* %2
	; SwitchStmt
	%4 = load i32, i32* %2, align 4
	%5 = icmp eq i32 %4, 116
	br i1 %5, label %switch.case.body-3, label %switch.case.next-1

switch.case.next-1:
	%6 = icmp eq i32 %4, 118
	br i1 %6, label %switch.case.body-3, label %switch.case.next-2

switch.case.next-2:
	%7 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%8 = load i32, i32* %2, align 4
	call void @fmt.fmt_bad_verb(%fmt.Fmt_Info* %7, i32 %8, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %switch.done-7

switch.case.body-3:
	%9 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%10 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %9, i64 0
	%11 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %10, i64 0, i32 12
	%12 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %11, align 8
	; TernaryExpr
	%13 = load i8, i8* %1, align 1
	%14 = trunc i8 %13 to i1
	br i1 %14, label %if.then-4, label %if.else-5

if.then-4:
	br label %if.done-6

if.else-5:
	br label %if.done-6

if.done-6:
	%15 = phi %..string [ {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str$f3, i64 0, i32 0), i64 4}, %if.then-4 ], [ {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str$f4, i64 0, i32 0), i64 5}, %if.else-5 ]
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %12, %..string %15, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %switch.done-7

switch.done-7:
	ret void
}

define void @fmt.fmt_write_padding(%fmt.Fmt_Info* %fi, i64 %width, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca %fmt.Fmt_Info*, align 16
	%1 = alloca i64, align 16
	%2 = alloca i8, align 16
	%3 = alloca i64, align 16
	%4 = alloca i64, align 16
	store %fmt.Fmt_Info* %fi, %fmt.Fmt_Info** %0
	store i64 %width, i64* %1
	; IfStmt
	%5 = load i64, i64* %1, align 8
	%6 = icmp sle i64 %5, 0
	%7 = zext i1 %6 to i8
	%8 = trunc i8 %7 to i1
	br i1 %8, label %if.then-1, label %if.done-2

if.then-1:
	; ReturnStmt
	ret void

if.done-2:
	; pad_byte
	store i8 48, i8* %2
	; IfStmt
	; SelectorExpr
	%9 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%10 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %9, i64 0
	%11 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %10, i64 0, i32 2
	%12 = load i8, i8* %11, align 1
	%13 = trunc i8 %12 to i1
	br i1 %13, label %if.then-3, label %if.done-4

if.then-3:
	; AssignStmt
	store i8 32, i8* %2
	br label %if.done-4

if.done-4:
	; RangeStmt
	%14 = bitcast i64* %3 to %..rawptr
	%15 = call %..rawptr @mem.zero(%..rawptr %14, i64 8) noinline
	store i64 zeroinitializer, i64* %3
	store i64 0, i64* %3
	%16 = bitcast i64* %4 to %..rawptr
	%17 = call %..rawptr @mem.zero(%..rawptr %16, i64 8) noinline
	store i64 zeroinitializer, i64* %4
	store i64 0, i64* %4
	br label %for.interval.loop-5

for.interval.loop-5:
	%18 = load i64, i64* %1, align 8
	%19 = sub i64 %18, 1
	%20 = load i64, i64* %3, align 8
	%21 = icmp sle i64 %20, %19
	br i1 %21, label %for.interval.body-6, label %for.interval.done-7

for.interval.body-6:
	%22 = load i64, i64* %3, align 8
	%23 = load i64, i64* %4, align 8
	%24 = load i64, i64* %3, align 8
	%25 = add i64 %24, 1
	store i64 %25, i64* %3
	%26 = load i64, i64* %4, align 8
	%27 = add i64 %26, 1
	store i64 %27, i64* %4
	; SelectorExpr
	%28 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%29 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %28, i64 0
	%30 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %29, i64 0, i32 12
	%31 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %30, align 8
	%32 = load i8, i8* %2, align 1
	call void @fmt.write_byte({i8*, i64, i64, %mem.Allocator}* %31, i8 %32, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %for.interval.loop-5

for.interval.done-7:
	ret void
}

define void @fmt._fmt_int(%fmt.Fmt_Info* %fi, i64 %u, i64 %base, i1 %is_signed, i64 %bit_size, %..string %digits, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca %fmt.Fmt_Info*, align 16
	%1 = alloca i64, align 16
	%2 = alloca i64, align 16
	%3 = alloca i8, align 16
	%4 = alloca i64, align 16
	%5 = alloca %..string, align 16
	%6 = alloca i8, align 16
	%7 = alloca i64, align 16
	%8 = alloca %runtime.Source_Code_Location, align 16
	%9 = alloca i64, align 16
	%10 = alloca i8, align 16
	%11 = alloca %runtime.Source_Code_Location, align 16
	%12 = alloca [256 x i8], align 16
	%13 = alloca i64, align 16
	%14 = alloca i8, align 16
	%15 = alloca %..string, align 16
	%16 = alloca {i8*, i64}, align 16
	%17 = alloca {i8*, i64}, align 16
	%18 = alloca i8, align 16
	%19 = alloca i8, align 16
	store %fmt.Fmt_Info* %fi, %fmt.Fmt_Info** %0
	store i64 %u, i64* %1
	store i64 %base, i64* %2
	%20 = zext i1 %is_signed to i8
	store i8 %20, i8* %3
	store i64 %bit_size, i64* %4
	store %..string %digits, %..string* %5
	; neg
	; SelectorExpr
	%21 = load i64, i64* %1, align 8
	%22 = load i8, i8* %3, align 1
	%23 = load i64, i64* %4, align 8
	%24 = trunc i8 %22 to i1
	%25 = call {i64, i8} @strconv.is_integer_negative(i64 %21, i1 %24, i64 %23, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%26 = extractvalue {i64, i8} %25, 0
	%27 = extractvalue {i64, i8} %25, 1
	store i8 %27, i8* %6
	; IfStmt
	; SelectorExpr
	%28 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%29 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %28, i64 0
	%30 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %29, i64 0, i32 5
	%31 = load i8, i8* %30, align 1
	%32 = trunc i8 %31 to i1
	br i1 %32, label %if.then-2, label %cmp.or-1

cmp.or-1:
	; SelectorExpr
	%33 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%34 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %33, i64 0
	%35 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %34, i64 0, i32 6
	%36 = load i8, i8* %35, align 1
	%37 = trunc i8 %36 to i1
	br i1 %37, label %if.then-2, label %if.done-5

if.then-2:
	; width
	; SelectorExpr
	%38 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%39 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %38, i64 0
	%40 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %39, i64 0, i32 7
	%41 = load i64, i64* %40, align 8
	; SelectorExpr
	%42 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%43 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %42, i64 0
	%44 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %43, i64 0, i32 8
	%45 = load i64, i64* %44, align 8
	%46 = add i64 %41, %45
	%47 = add i64 %46, 3
	store i64 %47, i64* %7
	; IfStmt
	%48 = load i64, i64* %7, align 8
	%49 = icmp sgt i64 %48, 256
	%50 = zext i1 %49 to i8
	%51 = trunc i8 %50 to i1
	br i1 %51, label %if.then-3, label %if.done-4

if.then-3:
	%52 = bitcast %runtime.Source_Code_Location* %8 to %..rawptr
	%53 = call %..rawptr @mem.zero(%..rawptr %52, i64 48) noinline
	store %runtime.Source_Code_Location zeroinitializer, %runtime.Source_Code_Location* %8
	store %runtime.Source_Code_Location {%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @str$f5, i64 0, i32 0), i64 25}, i64 539, i64 4, %..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @str$f6, i64 0, i32 0), i64 8}}, %runtime.Source_Code_Location* %8
	call void @runtime.panic(%..string {i8* getelementptr inbounds ([54 x i8], [54 x i8]* @str$f7, i64 0, i32 0), i64 53}, %runtime.Source_Code_Location* %8) noreturn
	br label %if.done-4

if.done-4:
	br label %if.done-5

if.done-5:
	; prec
	store i64 0, i64* %9
	; IfStmt
	; SelectorExpr
	%54 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%55 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %54, i64 0
	%56 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %55, i64 0, i32 6
	%57 = load i8, i8* %56, align 1
	%58 = trunc i8 %57 to i1
	br i1 %58, label %if.then-6, label %if.else-10

if.then-6:
	; AssignStmt
	; SelectorExpr
	%59 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%60 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %59, i64 0
	%61 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %60, i64 0, i32 8
	%62 = load i64, i64* %61, align 8
	store i64 %62, i64* %9
	; IfStmt
	%63 = load i64, i64* %9, align 8
	%64 = icmp eq i64 %63, 0
	%65 = zext i1 %64 to i8
	%66 = trunc i8 %65 to i1
	br i1 %66, label %cmp.and-7, label %if.done-9

cmp.and-7:
	%67 = load i64, i64* %1, align 8
	%68 = icmp eq i64 %67, 0
	%69 = zext i1 %68 to i8
	%70 = trunc i8 %69 to i1
	br i1 %70, label %if.then-8, label %if.done-9

if.then-8:
	; prev_zero
	; SelectorExpr
	%71 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%72 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %71, i64 0
	%73 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %72, i64 0, i32 3
	%74 = load i8, i8* %73, align 1
	store i8 %74, i8* %10
	; AssignStmt
	; SelectorExpr
	%75 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%76 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %75, i64 0
	%77 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %76, i64 0, i32 3
	store i8 0, i8* %77
	%78 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	; SelectorExpr
	%79 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%80 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %79, i64 0
	%81 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %80, i64 0, i32 7
	%82 = load i64, i64* %81, align 8
	call void @fmt.fmt_write_padding(%fmt.Fmt_Info* %78, i64 %82, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	; AssignStmt
	; SelectorExpr
	%83 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%84 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %83, i64 0
	%85 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %84, i64 0, i32 3
	%86 = load i8, i8* %10, align 1
	store i8 %86, i8* %85
	; ReturnStmt
	ret void

if.done-9:
	br label %if.done-18

if.else-10:
	; IfStmt
	; SelectorExpr
	%87 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%88 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %87, i64 0
	%89 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %88, i64 0, i32 3
	%90 = load i8, i8* %89, align 1
	%91 = trunc i8 %90 to i1
	br i1 %91, label %cmp.and-11, label %if.done-17

cmp.and-11:
	; SelectorExpr
	%92 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%93 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %92, i64 0
	%94 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %93, i64 0, i32 5
	%95 = load i8, i8* %94, align 1
	%96 = trunc i8 %95 to i1
	br i1 %96, label %if.then-12, label %if.done-17

if.then-12:
	; AssignStmt
	; SelectorExpr
	%97 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%98 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %97, i64 0
	%99 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %98, i64 0, i32 7
	%100 = load i64, i64* %99, align 8
	store i64 %100, i64* %9
	; IfStmt
	%101 = load i8, i8* %6, align 1
	%102 = trunc i8 %101 to i1
	br i1 %102, label %if.then-15, label %cmp.or-13

cmp.or-13:
	; SelectorExpr
	%103 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%104 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %103, i64 0
	%105 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %104, i64 0, i32 1
	%106 = load i8, i8* %105, align 1
	%107 = trunc i8 %106 to i1
	br i1 %107, label %if.then-15, label %cmp.or-14

cmp.or-14:
	; SelectorExpr
	%108 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%109 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %108, i64 0
	%110 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %109, i64 0, i32 2
	%111 = load i8, i8* %110, align 1
	%112 = trunc i8 %111 to i1
	br i1 %112, label %if.then-15, label %if.done-16

if.then-15:
	; AssignStmt
	%113 = load i64, i64* %9, align 8
	%114 = sub i64 %113, 1
	store i64 %114, i64* %9
	br label %if.done-16

if.done-16:
	br label %if.done-17

if.done-17:
	br label %if.done-18

if.done-18:
	; SwitchStmt
	%115 = load i64, i64* %2, align 8
	%116 = icmp eq i64 %115, 2
	br i1 %116, label %switch.case.body-24, label %switch.case.next-19

switch.case.next-19:
	%117 = icmp eq i64 %115, 8
	br i1 %117, label %switch.case.body-24, label %switch.case.next-20

switch.case.next-20:
	%118 = icmp eq i64 %115, 10
	br i1 %118, label %switch.case.body-24, label %switch.case.next-21

switch.case.next-21:
	%119 = icmp eq i64 %115, 12
	br i1 %119, label %switch.case.body-24, label %switch.case.next-22

switch.case.next-22:
	%120 = icmp eq i64 %115, 16
	br i1 %120, label %switch.case.body-24, label %switch.case.next-23

switch.case.next-23:
	%121 = bitcast %runtime.Source_Code_Location* %11 to %..rawptr
	%122 = call %..rawptr @mem.zero(%..rawptr %121, i64 48) noinline
	store %runtime.Source_Code_Location zeroinitializer, %runtime.Source_Code_Location* %11
	store %runtime.Source_Code_Location {%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @str$f8, i64 0, i32 0), i64 25}, i64 565, i64 3, %..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @str$f9, i64 0, i32 0), i64 8}}, %runtime.Source_Code_Location* %11
	call void @runtime.panic(%..string {i8* getelementptr inbounds ([31 x i8], [31 x i8]* @str$fa, i64 0, i32 0), i64 30}, %runtime.Source_Code_Location* %11) noreturn
	br label %switch.done-25

switch.case.body-24:
	; break
	br label %switch.done-25

switch.done-25:
	; buf
	%123 = bitcast [256 x i8]* %12 to %..rawptr
	%124 = call %..rawptr @mem.zero(%..rawptr %123, i64 256) noinline
	store [256 x i8] zeroinitializer, [256 x i8]* %12
	; start
	store i64 0, i64* %13
	; flags
	%125 = bitcast i8* %14 to %..rawptr
	%126 = call %..rawptr @mem.zero(%..rawptr %125, i64 1) noinline
	store i8 zeroinitializer, i8* %14
	; IfStmt
	; SelectorExpr
	%127 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%128 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %127, i64 0
	%129 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %128, i64 0, i32 4
	%130 = load i8, i8* %129, align 1
	%131 = trunc i8 %130 to i1
	br i1 %131, label %cmp.and-26, label %if.done-28

cmp.and-26:
	; SelectorExpr
	%132 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%133 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %132, i64 0
	%134 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %133, i64 0, i32 3
	%135 = load i8, i8* %134, align 1
	%136 = trunc i8 %135 to i1
	br i1 %136, label %if.done-28, label %if.then-27

if.then-27:
	; AssignStmt
	%137 = load i8, i8* %14, align 1
	%138 = or i8 %137, 1
	store i8 %138, i8* %14
	br label %if.done-28

if.done-28:
	; IfStmt
	; SelectorExpr
	%139 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%140 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %139, i64 0
	%141 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %140, i64 0, i32 1
	%142 = load i8, i8* %141, align 1
	%143 = trunc i8 %142 to i1
	br i1 %143, label %if.then-29, label %if.done-30

if.then-29:
	; AssignStmt
	%144 = load i8, i8* %14, align 1
	%145 = or i8 %144, 2
	store i8 %145, i8* %14
	br label %if.done-30

if.done-30:
	; IfStmt
	; SelectorExpr
	%146 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%147 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %146, i64 0
	%148 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %147, i64 0, i32 2
	%149 = load i8, i8* %148, align 1
	%150 = trunc i8 %149 to i1
	br i1 %150, label %if.then-31, label %if.done-32

if.then-31:
	; AssignStmt
	%151 = load i8, i8* %14, align 1
	%152 = or i8 %151, 4
	store i8 %152, i8* %14
	br label %if.done-32

if.done-32:
	; s
	; SelectorExpr
	; SliceExpr
	%153 = load i64, i64* %13, align 8
	%154 = load [256 x i8], [256 x i8]* %12, align 1
	call void @runtime.slice_expr_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @str$fb, i64 0, i32 0), i64 25}, i64 576, i64 30, i64 %153, i64 256, i64 256)
	%155 = getelementptr inbounds [256 x i8], [256 x i8]* %12, i64 0, i32 0
	%156 = getelementptr inbounds i8, i8* %155, i64 %153
	%157 = sub i64 256, %153
	%158 = bitcast {i8*, i64}* %16 to %..rawptr
	%159 = call %..rawptr @mem.zero(%..rawptr %158, i64 16) noinline
	store {i8*, i64} zeroinitializer, {i8*, i64}* %16
	%160 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %16, i64 0, i32 0
	store i8* %156, i8** %160
	%161 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %16, i64 0, i32 1
	store i64 %157, i64* %161
	%162 = load {i8*, i64}, {i8*, i64}* %16, align 8
	%163 = load i64, i64* %1, align 8
	%164 = load i64, i64* %2, align 8
	%165 = load i8, i8* %3, align 1
	%166 = load i64, i64* %4, align 8
	%167 = load %..string, %..string* %5, align 8
	%168 = load i8, i8* %14, align 1
	%169 = bitcast {i8*, i64}* %17 to %..rawptr
	%170 = call %..rawptr @mem.zero(%..rawptr %169, i64 16) noinline
	store {i8*, i64} zeroinitializer, {i8*, i64}* %17
	store {i8*, i64} %162, {i8*, i64}* %17
	%171 = trunc i8 %165 to i1
	%172 = call %..string @strconv.append_bits({i8*, i64}* %17, i64 %163, i64 %164, i1 %171, i64 %166, %..string %167, i8 %168, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	store %..string %172, %..string* %15
	; IfStmt
	; SelectorExpr
	%173 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%174 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %173, i64 0
	%175 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %174, i64 0, i32 4
	%176 = load i8, i8* %175, align 1
	%177 = trunc i8 %176 to i1
	br i1 %177, label %cmp.and-33, label %if.done-46

cmp.and-33:
	; SelectorExpr
	%178 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%179 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %178, i64 0
	%180 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %179, i64 0, i32 3
	%181 = load i8, i8* %180, align 1
	%182 = trunc i8 %181 to i1
	br i1 %182, label %if.then-34, label %if.done-46

if.then-34:
	; c
	store i8 0, i8* %18
	; SwitchStmt
	%183 = load i64, i64* %2, align 8
	%184 = icmp eq i64 %183, 2
	br i1 %184, label %switch.case.body-36, label %switch.case.next-35

switch.case.next-35:
	%185 = icmp eq i64 %183, 8
	br i1 %185, label %switch.fall.body-38, label %switch.case.next-37

switch.case.body-36:
	; AssignStmt
	store i8 98, i8* %18
	br label %switch.done-43

switch.case.next-37:
	%186 = icmp eq i64 %183, 12
	br i1 %186, label %switch.fall.body-40, label %switch.case.next-39

switch.fall.body-38:
	; AssignStmt
	store i8 111, i8* %18
	br label %switch.done-43

switch.case.next-39:
	%187 = icmp eq i64 %183, 16
	br i1 %187, label %switch.fall.body-42, label %switch.case.next-41

switch.fall.body-40:
	; AssignStmt
	store i8 122, i8* %18
	br label %switch.done-43

switch.case.next-41:
	br label %switch.done-43

switch.fall.body-42:
	; AssignStmt
	store i8 120, i8* %18
	br label %switch.done-43

switch.done-43:
	; IfStmt
	%188 = load i8, i8* %18, align 1
	%189 = icmp ne i8 %188, 0
	%190 = zext i1 %189 to i8
	%191 = trunc i8 %190 to i1
	br i1 %191, label %if.then-44, label %if.done-45

if.then-44:
	; SelectorExpr
	%192 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%193 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %192, i64 0
	%194 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %193, i64 0, i32 12
	%195 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %194, align 8
	call void @fmt.write_byte({i8*, i64, i64, %mem.Allocator}* %195, i8 48, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	; SelectorExpr
	%196 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%197 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %196, i64 0
	%198 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %197, i64 0, i32 12
	%199 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %198, align 8
	%200 = load i8, i8* %18, align 1
	call void @fmt.write_byte({i8*, i64, i64, %mem.Allocator}* %199, i8 %200, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %if.done-45

if.done-45:
	br label %if.done-46

if.done-46:
	; prev_zero
	; SelectorExpr
	%201 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%202 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %201, i64 0
	%203 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %202, i64 0, i32 3
	%204 = load i8, i8* %203, align 1
	store i8 %204, i8* %19
	; DeferStmt
	; AssignStmt
	; SelectorExpr
	%205 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%206 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %205, i64 0
	%207 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %206, i64 0, i32 3
	store i8 0, i8* %207
	%208 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%209 = load %..string, %..string* %15, align 8
	call void @fmt._pad(%fmt.Fmt_Info* %208, %..string %209, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	; defer
	; AssignStmt
	; SelectorExpr
	%210 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%211 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %210, i64 0
	%212 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %211, i64 0, i32 3
	%213 = load i8, i8* %19, align 1
	store i8 %213, i8* %212
	ret void
}

define void @fmt.fmt_rune(%fmt.Fmt_Info* %fi, i32 %r, i32 %verb, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca %fmt.Fmt_Info*, align 16
	%1 = alloca i32, align 16
	%2 = alloca i32, align 16
	store %fmt.Fmt_Info* %fi, %fmt.Fmt_Info** %0
	store i32 %r, i32* %1
	store i32 %verb, i32* %2
	; SwitchStmt
	%3 = load i32, i32* %2, align 4
	%4 = icmp eq i32 %3, 99
	br i1 %4, label %switch.case.body-4, label %switch.case.next-1

switch.case.next-1:
	%5 = icmp eq i32 %3, 114
	br i1 %5, label %switch.case.body-4, label %switch.case.next-2

switch.case.next-2:
	%6 = icmp eq i32 %3, 118
	br i1 %6, label %switch.case.body-4, label %switch.case.next-3

switch.case.next-3:
	%7 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%8 = load i32, i32* %1, align 4
	%9 = sext i32 %8 to i64
	%10 = load i32, i32* %2, align 4
	call void @fmt.fmt_int(%fmt.Fmt_Info* %7, i64 %9, i1 false, i64 32, i32 %10, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %switch.done-5

switch.case.body-4:
	; SelectorExpr
	%11 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%12 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %11, i64 0
	%13 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %12, i64 0, i32 12
	%14 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %13, align 8
	%15 = load i32, i32* %1, align 4
	call void @fmt.write_rune({i8*, i64, i64, %mem.Allocator}* %14, i32 %15, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %switch.done-5

switch.done-5:
	ret void
}

define void @fmt.fmt_int(%fmt.Fmt_Info* %fi, i64 %u, i1 %is_signed, i64 %bit_size, i32 %verb, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca %fmt.Fmt_Info*, align 16
	%1 = alloca i64, align 16
	%2 = alloca i8, align 16
	%3 = alloca i64, align 16
	%4 = alloca i32, align 16
	%5 = alloca i32, align 16
	store %fmt.Fmt_Info* %fi, %fmt.Fmt_Info** %0
	store i64 %u, i64* %1
	%6 = zext i1 %is_signed to i8
	store i8 %6, i8* %2
	store i64 %bit_size, i64* %3
	store i32 %verb, i32* %4
	; SwitchStmt
	%7 = load i32, i32* %4, align 4
	%8 = icmp eq i32 %7, 118
	br i1 %8, label %switch.case.body-2, label %switch.case.next-1

switch.case.next-1:
	%9 = icmp eq i32 %7, 98
	br i1 %9, label %switch.fall.body-4, label %switch.case.next-3

switch.case.body-2:
	%10 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%11 = load i64, i64* %1, align 8
	%12 = load i8, i8* %2, align 1
	%13 = load i64, i64* %3, align 8
	%14 = load %..string, %..string* @fmt.__DIGITS_LOWER, align 8
	%15 = trunc i8 %12 to i1
	call void @fmt._fmt_int(%fmt.Fmt_Info* %10, i64 %11, i64 10, i1 %15, i64 %13, %..string %14, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %switch.done-24

switch.case.next-3:
	%16 = icmp eq i32 %7, 111
	br i1 %16, label %switch.fall.body-6, label %switch.case.next-5

switch.fall.body-4:
	%17 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%18 = load i64, i64* %1, align 8
	%19 = load i8, i8* %2, align 1
	%20 = load i64, i64* %3, align 8
	%21 = load %..string, %..string* @fmt.__DIGITS_LOWER, align 8
	%22 = trunc i8 %19 to i1
	call void @fmt._fmt_int(%fmt.Fmt_Info* %17, i64 %18, i64 2, i1 %22, i64 %20, %..string %21, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %switch.done-24

switch.case.next-5:
	%23 = icmp eq i32 %7, 100
	br i1 %23, label %switch.fall.body-8, label %switch.case.next-7

switch.fall.body-6:
	%24 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%25 = load i64, i64* %1, align 8
	%26 = load i8, i8* %2, align 1
	%27 = load i64, i64* %3, align 8
	%28 = load %..string, %..string* @fmt.__DIGITS_LOWER, align 8
	%29 = trunc i8 %26 to i1
	call void @fmt._fmt_int(%fmt.Fmt_Info* %24, i64 %25, i64 8, i1 %29, i64 %27, %..string %28, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %switch.done-24

switch.case.next-7:
	%30 = icmp eq i32 %7, 122
	br i1 %30, label %switch.fall.body-10, label %switch.case.next-9

switch.fall.body-8:
	%31 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%32 = load i64, i64* %1, align 8
	%33 = load i8, i8* %2, align 1
	%34 = load i64, i64* %3, align 8
	%35 = load %..string, %..string* @fmt.__DIGITS_LOWER, align 8
	%36 = trunc i8 %33 to i1
	call void @fmt._fmt_int(%fmt.Fmt_Info* %31, i64 %32, i64 10, i1 %36, i64 %34, %..string %35, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %switch.done-24

switch.case.next-9:
	%37 = icmp eq i32 %7, 120
	br i1 %37, label %switch.fall.body-12, label %switch.case.next-11

switch.fall.body-10:
	%38 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%39 = load i64, i64* %1, align 8
	%40 = load i8, i8* %2, align 1
	%41 = load i64, i64* %3, align 8
	%42 = load %..string, %..string* @fmt.__DIGITS_LOWER, align 8
	%43 = trunc i8 %40 to i1
	call void @fmt._fmt_int(%fmt.Fmt_Info* %38, i64 %39, i64 12, i1 %43, i64 %41, %..string %42, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %switch.done-24

switch.case.next-11:
	%44 = icmp eq i32 %7, 88
	br i1 %44, label %switch.fall.body-14, label %switch.case.next-13

switch.fall.body-12:
	%45 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%46 = load i64, i64* %1, align 8
	%47 = load i8, i8* %2, align 1
	%48 = load i64, i64* %3, align 8
	%49 = load %..string, %..string* @fmt.__DIGITS_LOWER, align 8
	%50 = trunc i8 %47 to i1
	call void @fmt._fmt_int(%fmt.Fmt_Info* %45, i64 %46, i64 16, i1 %50, i64 %48, %..string %49, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %switch.done-24

switch.case.next-13:
	%51 = icmp eq i32 %7, 99
	br i1 %51, label %switch.fall.body-17, label %switch.case.next-15

switch.fall.body-14:
	%52 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%53 = load i64, i64* %1, align 8
	%54 = load i8, i8* %2, align 1
	%55 = load i64, i64* %3, align 8
	%56 = load %..string, %..string* @fmt.__DIGITS_UPPER, align 8
	%57 = trunc i8 %54 to i1
	call void @fmt._fmt_int(%fmt.Fmt_Info* %52, i64 %53, i64 16, i1 %57, i64 %55, %..string %56, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %switch.done-24

switch.case.next-15:
	%58 = icmp eq i32 %7, 114
	br i1 %58, label %switch.fall.body-17, label %switch.case.next-16

switch.case.next-16:
	%59 = icmp eq i32 %7, 85
	br i1 %59, label %switch.fall.body-19, label %switch.case.next-18

switch.fall.body-17:
	%60 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%61 = load i64, i64* %1, align 8
	%62 = trunc i64 %61 to i32
	%63 = load i32, i32* %4, align 4
	call void @fmt.fmt_rune(%fmt.Fmt_Info* %60, i32 %62, i32 %63, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %switch.done-24

switch.case.next-18:
	%64 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%65 = load i32, i32* %4, align 4
	call void @fmt.fmt_bad_verb(%fmt.Fmt_Info* %64, i32 %65, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %switch.done-24

switch.fall.body-19:
	; r
	%66 = load i64, i64* %1, align 8
	%67 = trunc i64 %66 to i32
	store i32 %67, i32* %5
	; IfStmt
	%68 = load i32, i32* %5, align 4
	%69 = icmp slt i32 %68, 0
	%70 = zext i1 %69 to i8
	%71 = trunc i8 %70 to i1
	br i1 %71, label %if.then-21, label %cmp.or-20

cmp.or-20:
	%72 = load i32, i32* %5, align 4
	%73 = icmp sgt i32 %72, 1114111
	%74 = zext i1 %73 to i8
	%75 = trunc i8 %74 to i1
	br i1 %75, label %if.then-21, label %if.else-22

if.then-21:
	%76 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%77 = load i32, i32* %4, align 4
	call void @fmt.fmt_bad_verb(%fmt.Fmt_Info* %76, i32 %77, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %if.done-23

if.else-22:
	; SelectorExpr
	%78 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%79 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %78, i64 0
	%80 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %79, i64 0, i32 12
	%81 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %80, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %81, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @str$fc, i64 0, i32 0), i64 2}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%82 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%83 = load i64, i64* %1, align 8
	%84 = load i64, i64* %3, align 8
	%85 = load %..string, %..string* @fmt.__DIGITS_UPPER, align 8
	call void @fmt._fmt_int(%fmt.Fmt_Info* %82, i64 %83, i64 16, i1 false, i64 %84, %..string %85, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %if.done-23

if.done-23:
	br label %switch.done-24

switch.done-24:
	ret void
}

define void @fmt._pad(%fmt.Fmt_Info* %fi, %..string %s, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca %fmt.Fmt_Info*, align 16
	%1 = alloca %..string, align 16
	%2 = alloca i64, align 16
	store %fmt.Fmt_Info* %fi, %fmt.Fmt_Info** %0
	store %..string %s, %..string* %1
	; IfStmt
	; SelectorExpr
	%3 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%4 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %3, i64 0
	%5 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %4, i64 0, i32 5
	%6 = load i8, i8* %5, align 1
	%7 = trunc i8 %6 to i1
	br i1 %7, label %if.done-2, label %if.then-1

if.then-1:
	; SelectorExpr
	%8 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%9 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %8, i64 0
	%10 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %9, i64 0, i32 12
	%11 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %10, align 8
	%12 = load %..string, %..string* %1, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %11, %..string %12, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	; ReturnStmt
	ret void

if.done-2:
	; width
	; SelectorExpr
	%13 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%14 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %13, i64 0
	%15 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %14, i64 0, i32 7
	%16 = load i64, i64* %15, align 8
	; SelectorExpr
	%17 = load %..string, %..string* %1, align 8
	%18 = call i64 @utf8.rune_count_from_string(%..string %17, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%19 = sub i64 %16, %18
	store i64 %19, i64* %2
	; IfStmt
	; SelectorExpr
	%20 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%21 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %20, i64 0
	%22 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %21, i64 0, i32 0
	%23 = load i8, i8* %22, align 1
	%24 = trunc i8 %23 to i1
	br i1 %24, label %if.then-3, label %if.else-4

if.then-3:
	; SelectorExpr
	%25 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%26 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %25, i64 0
	%27 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %26, i64 0, i32 12
	%28 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %27, align 8
	%29 = load %..string, %..string* %1, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %28, %..string %29, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%30 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%31 = load i64, i64* %2, align 8
	call void @fmt.fmt_write_padding(%fmt.Fmt_Info* %30, i64 %31, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %if.done-5

if.else-4:
	%32 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%33 = load i64, i64* %2, align 8
	call void @fmt.fmt_write_padding(%fmt.Fmt_Info* %32, i64 %33, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	; SelectorExpr
	%34 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%35 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %34, i64 0
	%36 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %35, i64 0, i32 12
	%37 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %36, align 8
	%38 = load %..string, %..string* %1, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %37, %..string %38, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %if.done-5

if.done-5:
	ret void
}

define void @fmt.fmt_float(%fmt.Fmt_Info* %fi, double %v, i64 %bit_size, i32 %verb, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca %fmt.Fmt_Info*, align 16
	%1 = alloca double, align 16
	%2 = alloca i64, align 16
	%3 = alloca i32, align 16
	%4 = alloca i64, align 16
	%5 = alloca [386 x i8], align 16
	%6 = alloca %..string, align 16
	%7 = alloca {i8*, i64}, align 16
	%8 = alloca {i8*, i64}, align 16
	%9 = alloca {i8*, i64}, align 16
	%10 = alloca %..string, align 16
	%11 = alloca %..string, align 16
	%12 = alloca %..string, align 16
	%13 = alloca %..string, align 16
	store %fmt.Fmt_Info* %fi, %fmt.Fmt_Info** %0
	store double %v, double* %1
	store i64 %bit_size, i64* %2
	store i32 %verb, i32* %3
	; SwitchStmt
	%14 = load i32, i32* %3, align 4
	%15 = icmp eq i32 %14, 102
	br i1 %15, label %switch.case.body-4, label %switch.case.next-1

switch.case.next-1:
	%16 = icmp eq i32 %14, 70
	br i1 %16, label %switch.case.body-4, label %switch.case.next-2

switch.case.next-2:
	%17 = icmp eq i32 %14, 118
	br i1 %17, label %switch.case.body-4, label %switch.case.next-3

switch.case.next-3:
	%18 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%19 = load i32, i32* %3, align 4
	call void @fmt.fmt_bad_verb(%fmt.Fmt_Info* %18, i32 %19, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %switch.done-28

switch.case.body-4:
	; prec
	store i64 3, i64* %4
	; IfStmt
	; SelectorExpr
	%20 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%21 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %20, i64 0
	%22 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %21, i64 0, i32 6
	%23 = load i8, i8* %22, align 1
	%24 = trunc i8 %23 to i1
	br i1 %24, label %if.then-5, label %if.done-6

if.then-5:
	; AssignStmt
	; SelectorExpr
	%25 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%26 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %25, i64 0
	%27 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %26, i64 0, i32 8
	%28 = load i64, i64* %27, align 8
	store i64 %28, i64* %4
	br label %if.done-6

if.done-6:
	; buf
	%29 = bitcast [386 x i8]* %5 to %..rawptr
	%30 = call %..rawptr @mem.zero(%..rawptr %29, i64 386) noinline
	store [386 x i8] zeroinitializer, [386 x i8]* %5
	; str
	; SelectorExpr
	; SliceExpr
	%31 = load [386 x i8], [386 x i8]* %5, align 1
	call void @runtime.slice_expr_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @str$fd, i64 0, i32 0), i64 25}, i64 663, i64 34, i64 1, i64 386, i64 386)
	%32 = getelementptr inbounds [386 x i8], [386 x i8]* %5, i64 0, i32 0
	%33 = getelementptr inbounds i8, i8* %32, i64 1
	%34 = sub i64 386, 1
	%35 = bitcast {i8*, i64}* %7 to %..rawptr
	%36 = call %..rawptr @mem.zero(%..rawptr %35, i64 16) noinline
	store {i8*, i64} zeroinitializer, {i8*, i64}* %7
	%37 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %7, i64 0, i32 0
	store i8* %33, i8** %37
	%38 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %7, i64 0, i32 1
	store i64 %34, i64* %38
	%39 = load {i8*, i64}, {i8*, i64}* %7, align 8
	%40 = load double, double* %1, align 8
	%41 = load i64, i64* %4, align 8
	%42 = load i64, i64* %2, align 8
	%43 = bitcast {i8*, i64}* %8 to %..rawptr
	%44 = call %..rawptr @mem.zero(%..rawptr %43, i64 16) noinline
	store {i8*, i64} zeroinitializer, {i8*, i64}* %8
	store {i8*, i64} %39, {i8*, i64}* %8
	%45 = call %..string @strconv.append_float({i8*, i64}* %8, double %40, i8 102, i64 %41, i64 %42, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	store %..string %45, %..string* %6
	; AssignStmt
	; SliceExpr
	%46 = load %..string, %..string* %6, align 8
	%47 = extractvalue %..string %46, 1
	%48 = add i64 %47, 1
	%49 = load [386 x i8], [386 x i8]* %5, align 1
	call void @runtime.slice_expr_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @str$fe, i64 0, i32 0), i64 25}, i64 664, i64 19, i64 0, i64 %48, i64 386)
	%50 = getelementptr inbounds [386 x i8], [386 x i8]* %5, i64 0, i32 0
	%51 = getelementptr inbounds i8, i8* %50, i64 0
	%52 = sub i64 %48, 0
	%53 = bitcast {i8*, i64}* %9 to %..rawptr
	%54 = call %..rawptr @mem.zero(%..rawptr %53, i64 16) noinline
	store {i8*, i64} zeroinitializer, {i8*, i64}* %9
	%55 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %9, i64 0, i32 0
	store i8* %51, i8** %55
	%56 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %9, i64 0, i32 1
	store i64 %52, i64* %56
	%57 = load {i8*, i64}, {i8*, i64}* %9, align 8
	%58 = extractvalue {i8*, i64} %57, 0
	%59 = extractvalue {i8*, i64} %57, 1
	%60 = bitcast %..string* %10 to %..rawptr
	%61 = call %..rawptr @mem.zero(%..rawptr %60, i64 16) noinline
	store %..string zeroinitializer, %..string* %10
	%62 = getelementptr inbounds %..string, %..string* %10, i64 0, i32 0
	store i8* %58, i8** %62
	%63 = getelementptr inbounds %..string, %..string* %10, i64 0, i32 1
	store i64 %59, i64* %63
	%64 = load %..string, %..string* %10, align 8
	store %..string %64, %..string* %6
	; IfStmt
	; IndexExpr
	%65 = load %..string, %..string* %6, align 8
	%66 = extractvalue %..string %65, 0
	%67 = extractvalue %..string %65, 1
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @str$ff, i64 0, i32 0), i64 25}, i64 665, i64 10, i64 1, i64 %67)
	%68 = getelementptr inbounds i8, i8* %66, i64 1
	%69 = load i8, i8* %68, align 1
	%70 = icmp eq i8 %69, 43
	%71 = zext i1 %70 to i8
	%72 = trunc i8 %71 to i1
	br i1 %72, label %if.then-8, label %cmp.or-7

cmp.or-7:
	; IndexExpr
	%73 = load %..string, %..string* %6, align 8
	%74 = extractvalue %..string %73, 0
	%75 = extractvalue %..string %73, 1
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @str$100, i64 0, i32 0), i64 25}, i64 665, i64 27, i64 1, i64 %75)
	%76 = getelementptr inbounds i8, i8* %74, i64 1
	%77 = load i8, i8* %76, align 1
	%78 = icmp eq i8 %77, 45
	%79 = zext i1 %78 to i8
	%80 = trunc i8 %79 to i1
	br i1 %80, label %if.then-8, label %if.else-9

if.then-8:
	; AssignStmt
	; SliceExpr
	%81 = load %..string, %..string* %6, align 8
	%82 = extractvalue %..string %81, 1
	call void @runtime.slice_expr_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @str$101, i64 0, i32 0), i64 25}, i64 666, i64 13, i64 1, i64 %82, i64 %82)
	%83 = extractvalue %..string %81, 0
	%84 = getelementptr inbounds i8, i8* %83, i64 1
	%85 = sub i64 %82, 1
	%86 = bitcast %..string* %11 to %..rawptr
	%87 = call %..rawptr @mem.zero(%..rawptr %86, i64 16) noinline
	store %..string zeroinitializer, %..string* %11
	%88 = getelementptr inbounds %..string, %..string* %11, i64 0, i32 0
	store i8* %84, i8** %88
	%89 = getelementptr inbounds %..string, %..string* %11, i64 0, i32 1
	store i64 %85, i64* %89
	%90 = load %..string, %..string* %11, align 8
	store %..string %90, %..string* %6
	br label %if.done-10

if.else-9:
	; AssignStmt
	; IndexExpr
	%91 = load %..string, %..string* %6, align 8
	%92 = extractvalue %..string %91, 0
	%93 = extractvalue %..string %91, 1
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @str$102, i64 0, i32 0), i64 25}, i64 668, i64 8, i64 0, i64 %93)
	%94 = getelementptr inbounds i8, i8* %92, i64 0
	store i8 43, i8* %94
	br label %if.done-10

if.done-10:
	; IfStmt
	; SelectorExpr
	%95 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%96 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %95, i64 0
	%97 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %96, i64 0, i32 2
	%98 = load i8, i8* %97, align 1
	%99 = trunc i8 %98 to i1
	br i1 %99, label %cmp.and-11, label %if.done-14

cmp.and-11:
	; SelectorExpr
	%100 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%101 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %100, i64 0
	%102 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %101, i64 0, i32 1
	%103 = load i8, i8* %102, align 1
	%104 = trunc i8 %103 to i1
	br i1 %104, label %if.done-14, label %cmp.and-12

cmp.and-12:
	; IndexExpr
	%105 = load %..string, %..string* %6, align 8
	%106 = extractvalue %..string %105, 0
	%107 = extractvalue %..string %105, 1
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @str$103, i64 0, i32 0), i64 25}, i64 671, i64 34, i64 0, i64 %107)
	%108 = getelementptr inbounds i8, i8* %106, i64 0
	%109 = load i8, i8* %108, align 1
	%110 = icmp eq i8 %109, 43
	%111 = zext i1 %110 to i8
	%112 = trunc i8 %111 to i1
	br i1 %112, label %if.then-13, label %if.done-14

if.then-13:
	; AssignStmt
	; IndexExpr
	%113 = load %..string, %..string* %6, align 8
	%114 = extractvalue %..string %113, 0
	%115 = extractvalue %..string %113, 1
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @str$104, i64 0, i32 0), i64 25}, i64 672, i64 8, i64 0, i64 %115)
	%116 = getelementptr inbounds i8, i8* %114, i64 0
	store i8 32, i8* %116
	br label %if.done-14

if.done-14:
	; IfStmt
	%117 = load %..string, %..string* %6, align 8
	%118 = extractvalue %..string %117, 1
	%119 = icmp sgt i64 %118, 1
	%120 = zext i1 %119 to i8
	%121 = trunc i8 %120 to i1
	br i1 %121, label %cmp.and-15, label %if.done-18

cmp.and-15:
	; IndexExpr
	%122 = load %..string, %..string* %6, align 8
	%123 = extractvalue %..string %122, 0
	%124 = extractvalue %..string %122, 1
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @str$105, i64 0, i32 0), i64 25}, i64 675, i64 26, i64 1, i64 %124)
	%125 = getelementptr inbounds i8, i8* %123, i64 1
	%126 = load i8, i8* %125, align 1
	%127 = icmp eq i8 %126, 78
	%128 = zext i1 %127 to i8
	%129 = trunc i8 %128 to i1
	br i1 %129, label %cmp.and-16, label %if.done-18

cmp.and-16:
	; IndexExpr
	%130 = load %..string, %..string* %6, align 8
	%131 = extractvalue %..string %130, 0
	%132 = extractvalue %..string %130, 1
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @str$106, i64 0, i32 0), i64 25}, i64 675, i64 43, i64 1, i64 %132)
	%133 = getelementptr inbounds i8, i8* %131, i64 1
	%134 = load i8, i8* %133, align 1
	%135 = icmp eq i8 %134, 73
	%136 = zext i1 %135 to i8
	%137 = trunc i8 %136 to i1
	br i1 %137, label %if.then-17, label %if.done-18

if.then-17:
	; SelectorExpr
	%138 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%139 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %138, i64 0
	%140 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %139, i64 0, i32 12
	%141 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %140, align 8
	%142 = load %..string, %..string* %6, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %141, %..string %142, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	; ReturnStmt
	ret void

if.done-18:
	; IfStmt
	; SelectorExpr
	%143 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%144 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %143, i64 0
	%145 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %144, i64 0, i32 1
	%146 = load i8, i8* %145, align 1
	%147 = trunc i8 %146 to i1
	br i1 %147, label %if.then-20, label %cmp.or-19

cmp.or-19:
	; IndexExpr
	%148 = load %..string, %..string* %6, align 8
	%149 = extractvalue %..string %148, 0
	%150 = extractvalue %..string %148, 1
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @str$107, i64 0, i32 0), i64 25}, i64 680, i64 21, i64 0, i64 %150)
	%151 = getelementptr inbounds i8, i8* %149, i64 0
	%152 = load i8, i8* %151, align 1
	%153 = icmp ne i8 %152, 43
	%154 = zext i1 %153 to i8
	%155 = trunc i8 %154 to i1
	br i1 %155, label %if.then-20, label %if.else-26

if.then-20:
	; IfStmt
	; SelectorExpr
	%156 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%157 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %156, i64 0
	%158 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %157, i64 0, i32 3
	%159 = load i8, i8* %158, align 1
	%160 = trunc i8 %159 to i1
	br i1 %160, label %cmp.and-21, label %if.else-24

cmp.and-21:
	; SelectorExpr
	%161 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%162 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %161, i64 0
	%163 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %162, i64 0, i32 5
	%164 = load i8, i8* %163, align 1
	%165 = trunc i8 %164 to i1
	br i1 %165, label %cmp.and-22, label %if.else-24

cmp.and-22:
	; SelectorExpr
	%166 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%167 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %166, i64 0
	%168 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %167, i64 0, i32 7
	%169 = load i64, i64* %168, align 8
	%170 = load %..string, %..string* %6, align 8
	%171 = extractvalue %..string %170, 1
	%172 = icmp sgt i64 %169, %171
	%173 = zext i1 %172 to i8
	%174 = trunc i8 %173 to i1
	br i1 %174, label %if.then-23, label %if.else-24

if.then-23:
	; SelectorExpr
	%175 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%176 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %175, i64 0
	%177 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %176, i64 0, i32 12
	%178 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %177, align 8
	; IndexExpr
	%179 = load %..string, %..string* %6, align 8
	%180 = extractvalue %..string %179, 0
	%181 = extractvalue %..string %179, 1
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @str$108, i64 0, i32 0), i64 25}, i64 682, i64 28, i64 0, i64 %181)
	%182 = getelementptr inbounds i8, i8* %180, i64 0
	%183 = load i8, i8* %182, align 1
	call void @fmt.write_byte({i8*, i64, i64, %mem.Allocator}* %178, i8 %183, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%184 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	; SelectorExpr
	%185 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%186 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %185, i64 0
	%187 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %186, i64 0, i32 7
	%188 = load i64, i64* %187, align 8
	%189 = load %..string, %..string* %6, align 8
	%190 = extractvalue %..string %189, 1
	%191 = sub i64 %188, %190
	call void @fmt.fmt_write_padding(%fmt.Fmt_Info* %184, i64 %191, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	; SelectorExpr
	%192 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%193 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %192, i64 0
	%194 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %193, i64 0, i32 12
	%195 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %194, align 8
	; SliceExpr
	%196 = load %..string, %..string* %6, align 8
	%197 = extractvalue %..string %196, 1
	call void @runtime.slice_expr_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @str$109, i64 0, i32 0), i64 25}, i64 684, i64 29, i64 1, i64 %197, i64 %197)
	%198 = extractvalue %..string %196, 0
	%199 = getelementptr inbounds i8, i8* %198, i64 1
	%200 = sub i64 %197, 1
	%201 = bitcast %..string* %12 to %..rawptr
	%202 = call %..rawptr @mem.zero(%..rawptr %201, i64 16) noinline
	store %..string zeroinitializer, %..string* %12
	%203 = getelementptr inbounds %..string, %..string* %12, i64 0, i32 0
	store i8* %199, i8** %203
	%204 = getelementptr inbounds %..string, %..string* %12, i64 0, i32 1
	store i64 %200, i64* %204
	%205 = load %..string, %..string* %12, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %195, %..string %205, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %if.done-25

if.else-24:
	%206 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%207 = load %..string, %..string* %6, align 8
	call void @fmt._pad(%fmt.Fmt_Info* %206, %..string %207, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %if.done-25

if.done-25:
	br label %if.done-27

if.else-26:
	%208 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	; SliceExpr
	%209 = load %..string, %..string* %6, align 8
	%210 = extractvalue %..string %209, 1
	call void @runtime.slice_expr_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @str$10a, i64 0, i32 0), i64 25}, i64 689, i64 16, i64 1, i64 %210, i64 %210)
	%211 = extractvalue %..string %209, 0
	%212 = getelementptr inbounds i8, i8* %211, i64 1
	%213 = sub i64 %210, 1
	%214 = bitcast %..string* %13 to %..rawptr
	%215 = call %..rawptr @mem.zero(%..rawptr %214, i64 16) noinline
	store %..string zeroinitializer, %..string* %13
	%216 = getelementptr inbounds %..string, %..string* %13, i64 0, i32 0
	store i8* %212, i8** %216
	%217 = getelementptr inbounds %..string, %..string* %13, i64 0, i32 1
	store i64 %213, i64* %217
	%218 = load %..string, %..string* %13, align 8
	call void @fmt._pad(%fmt.Fmt_Info* %208, %..string %218, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %if.done-27

if.done-27:
	br label %switch.done-28

switch.done-28:
	ret void
}

define void @fmt.fmt_string(%fmt.Fmt_Info* %fi, %..string %s, i32 %verb, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca %fmt.Fmt_Info*, align 16
	%1 = alloca %..string, align 16
	%2 = alloca i32, align 16
	%3 = alloca i8, align 16
	%4 = alloca i64, align 16
	%5 = alloca i64, align 16
	%6 = alloca i64, align 16
	%7 = alloca %..string, align 16
	store %fmt.Fmt_Info* %fi, %fmt.Fmt_Info** %0
	store %..string %s, %..string* %1
	store i32 %verb, i32* %2
	; SwitchStmt
	%8 = load i32, i32* %2, align 4
	%9 = icmp eq i32 %8, 115
	br i1 %9, label %switch.case.body-3, label %switch.case.next-1

switch.case.next-1:
	%10 = icmp eq i32 %8, 118
	br i1 %10, label %switch.case.body-3, label %switch.case.next-2

switch.case.next-2:
	%11 = icmp eq i32 %8, 120
	br i1 %11, label %switch.fall.body-6, label %switch.case.next-4

switch.case.body-3:
	; SelectorExpr
	%12 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%13 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %12, i64 0
	%14 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %13, i64 0, i32 12
	%15 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %14, align 8
	%16 = load %..string, %..string* %1, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %15, %..string %16, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %switch.done-15

switch.case.next-4:
	%17 = icmp eq i32 %8, 88
	br i1 %17, label %switch.fall.body-6, label %switch.case.next-5

switch.case.next-5:
	%18 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%19 = load i32, i32* %2, align 4
	call void @fmt.fmt_bad_verb(%fmt.Fmt_Info* %18, i32 %19, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %switch.done-15

switch.fall.body-6:
	; space
	; SelectorExpr
	%20 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%21 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %20, i64 0
	%22 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %21, i64 0, i32 2
	%23 = load i8, i8* %22, align 1
	store i8 %23, i8* %3
	; AssignStmt
	; SelectorExpr
	%24 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%25 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %24, i64 0
	%26 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %25, i64 0, i32 2
	store i8 0, i8* %26
	; DeferStmt
	; RangeStmt
	; i
	%27 = bitcast i64* %4 to %..rawptr
	%28 = call %..rawptr @mem.zero(%..rawptr %27, i64 8) noinline
	store i64 zeroinitializer, i64* %4
	%29 = bitcast i64* %5 to %..rawptr
	%30 = call %..rawptr @mem.zero(%..rawptr %29, i64 8) noinline
	store i64 zeroinitializer, i64* %5
	store i64 0, i64* %5
	%31 = bitcast i64* %6 to %..rawptr
	%32 = call %..rawptr @mem.zero(%..rawptr %31, i64 8) noinline
	store i64 zeroinitializer, i64* %6
	store i64 0, i64* %6
	br label %for.interval.loop-7

for.interval.loop-7:
	%33 = load %..string, %..string* %1, align 8
	%34 = extractvalue %..string %33, 1
	%35 = sub i64 %34, 1
	%36 = load i64, i64* %5, align 8
	%37 = icmp sle i64 %36, %35
	br i1 %37, label %for.interval.body-8, label %for.interval.done-14

for.interval.body-8:
	%38 = load i64, i64* %5, align 8
	%39 = load i64, i64* %6, align 8
	%40 = load i64, i64* %5, align 8
	%41 = add i64 %40, 1
	store i64 %41, i64* %5
	%42 = load i64, i64* %6, align 8
	%43 = add i64 %42, 1
	store i64 %43, i64* %6
	store i64 %38, i64* %4
	; IfStmt
	%44 = load i64, i64* %4, align 8
	%45 = icmp sgt i64 %44, 0
	%46 = zext i1 %45 to i8
	%47 = trunc i8 %46 to i1
	br i1 %47, label %cmp.and-9, label %if.done-11

cmp.and-9:
	%48 = load i8, i8* %3, align 1
	%49 = trunc i8 %48 to i1
	br i1 %49, label %if.then-10, label %if.done-11

if.then-10:
	; SelectorExpr
	%50 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%51 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %50, i64 0
	%52 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %51, i64 0, i32 12
	%53 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %52, align 8
	call void @fmt.write_byte({i8*, i64, i64, %mem.Allocator}* %53, i8 32, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %if.done-11

if.done-11:
	; char_set
	%54 = load %..string, %..string* @fmt.__DIGITS_UPPER, align 8
	store %..string %54, %..string* %7
	; IfStmt
	%55 = load i32, i32* %2, align 4
	%56 = icmp eq i32 %55, 120
	%57 = zext i1 %56 to i8
	%58 = trunc i8 %57 to i1
	br i1 %58, label %if.then-12, label %if.done-13

if.then-12:
	; AssignStmt
	%59 = load %..string, %..string* @fmt.__DIGITS_LOWER, align 8
	store %..string %59, %..string* %7
	br label %if.done-13

if.done-13:
	%60 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	; IndexExpr
	%61 = load %..string, %..string* %1, align 8
	%62 = extractvalue %..string %61, 0
	%63 = extractvalue %..string %61, 1
	%64 = load i64, i64* %4, align 8
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @str$10b, i64 0, i32 0), i64 25}, i64 710, i64 23, i64 %64, i64 %63)
	%65 = getelementptr inbounds i8, i8* %62, i64 %64
	%66 = load i8, i8* %65, align 1
	%67 = zext i8 %66 to i64
	%68 = load %..string, %..string* %7, align 8
	call void @fmt._fmt_int(%fmt.Fmt_Info* %60, i64 %67, i64 16, i1 false, i64 8, %..string %68, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %for.interval.loop-7

for.interval.done-14:
	; defer
	; AssignStmt
	; SelectorExpr
	%69 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%70 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %69, i64 0
	%71 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %70, i64 0, i32 2
	%72 = load i8, i8* %3, align 1
	store i8 %72, i8* %71
	br label %switch.done-15

switch.done-15:
	ret void
}

define void @fmt.fmt_cstring(%fmt.Fmt_Info* %fi, i8* %s, i32 %verb, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca %fmt.Fmt_Info*, align 16
	%1 = alloca i8*, align 16
	%2 = alloca i32, align 16
	store %fmt.Fmt_Info* %fi, %fmt.Fmt_Info** %0
	store i8* %s, i8** %1
	store i32 %verb, i32* %2
	%3 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%4 = load i8*, i8** %1, align 8
	%5 = call %..string @runtime.cstring_to_string(i8* %4)
	%6 = load i32, i32* %2, align 4
	call void @fmt.fmt_string(%fmt.Fmt_Info* %3, %..string %5, i32 %6, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	ret void
}

define void @fmt.fmt_pointer(%fmt.Fmt_Info* %fi, %..rawptr %p, i32 %verb, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca %fmt.Fmt_Info*, align 16
	%1 = alloca %..rawptr, align 16
	%2 = alloca i32, align 16
	%3 = alloca i64, align 16
	store %fmt.Fmt_Info* %fi, %fmt.Fmt_Info** %0
	store %..rawptr %p, %..rawptr* %1
	store i32 %verb, i32* %2
	; SwitchStmt
	%4 = load i32, i32* %2, align 4
	%5 = icmp eq i32 %4, 112
	br i1 %5, label %switch.case.body-3, label %switch.case.next-1

switch.case.next-1:
	%6 = icmp eq i32 %4, 118
	br i1 %6, label %switch.case.body-3, label %switch.case.next-2

switch.case.next-2:
	%7 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%8 = load i32, i32* %2, align 4
	call void @fmt.fmt_bad_verb(%fmt.Fmt_Info* %7, i32 %8, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %switch.done-7

switch.case.body-3:
	; u
	%9 = load %..rawptr, %..rawptr* %1, align 8
	%10 = ptrtoint %..rawptr %9 to i64
	%11 = bitcast i64 %10 to i64
	store i64 %11, i64* %3
	; IfStmt
	; SelectorExpr
	%12 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%13 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %12, i64 0
	%14 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %13, i64 0, i32 4
	%15 = load i8, i8* %14, align 1
	%16 = trunc i8 %15 to i1
	br i1 %16, label %cmp.or-4, label %if.then-5

cmp.or-4:
	%17 = load i32, i32* %2, align 4
	%18 = icmp eq i32 %17, 118
	%19 = zext i1 %18 to i8
	%20 = trunc i8 %19 to i1
	br i1 %20, label %if.then-5, label %if.done-6

if.then-5:
	; SelectorExpr
	%21 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%22 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %21, i64 0
	%23 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %22, i64 0, i32 12
	%24 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %23, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %24, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @str$10c, i64 0, i32 0), i64 2}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %if.done-6

if.done-6:
	%25 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%26 = load i64, i64* %3, align 8
	%27 = load %..string, %..string* @fmt.__DIGITS_UPPER, align 8
	call void @fmt._fmt_int(%fmt.Fmt_Info* %25, i64 %26, i64 16, i1 false, i64 64, %..string %27, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %switch.done-7

switch.done-7:
	ret void
}

define {%..string, i8} @fmt.enum_value_to_string(%..any %v, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca %..any, align 16
	%1 = alloca %runtime.Type_Info*, align 16
	%2 = alloca %runtime.Type_Info_Enum, align 16
	%3 = alloca %..any, align 16
	%4 = alloca %..any, align 16
	%5 = alloca %runtime.Type_Info*, align 16
	%6 = alloca i32, align 16
	%7 = alloca %runtime.Type_Info_Enum, align 16
	%8 = alloca {%..string, i8}, align 16
	%9 = alloca i8, align 16
	%10 = alloca %runtime.Type_Info_Enum, align 16
	%11 = alloca {%..string, i8}, align 16
	%12 = alloca i16, align 16
	%13 = alloca %runtime.Type_Info_Enum, align 16
	%14 = alloca {%..string, i8}, align 16
	%15 = alloca i32, align 16
	%16 = alloca %runtime.Type_Info_Enum, align 16
	%17 = alloca {%..string, i8}, align 16
	%18 = alloca i64, align 16
	%19 = alloca %runtime.Type_Info_Enum, align 16
	%20 = alloca {%..string, i8}, align 16
	%21 = alloca i64, align 16
	%22 = alloca %runtime.Type_Info_Enum, align 16
	%23 = alloca {%..string, i8}, align 16
	%24 = alloca i8, align 16
	%25 = alloca %runtime.Type_Info_Enum, align 16
	%26 = alloca {%..string, i8}, align 16
	%27 = alloca i16, align 16
	%28 = alloca %runtime.Type_Info_Enum, align 16
	%29 = alloca {%..string, i8}, align 16
	%30 = alloca i32, align 16
	%31 = alloca %runtime.Type_Info_Enum, align 16
	%32 = alloca {%..string, i8}, align 16
	%33 = alloca i64, align 16
	%34 = alloca %runtime.Type_Info_Enum, align 16
	%35 = alloca {%..string, i8}, align 16
	%36 = alloca i64, align 16
	%37 = alloca %runtime.Type_Info_Enum, align 16
	%38 = alloca {%..string, i8}, align 16
	%39 = alloca i64, align 16
	%40 = alloca %runtime.Type_Info_Enum, align 16
	%41 = alloca {%..string, i8}, align 16
	%42 = alloca {[0 x i64], [72 x i8], i64}, align 16
	%43 = alloca {%..string, i8}, align 16
	%44 = alloca {%..string, i8}, align 16
	store %..any %v, %..any* %0
	; AssignStmt
	; SelectorExpr
	%45 = getelementptr inbounds %..any, %..any* %0, i64 0, i32 1
	; SelectorExpr
	; SelectorExpr
	%46 = getelementptr inbounds %..any, %..any* %0, i64 0, i32 1
	%47 = load %..typeid, %..typeid* %46, align 8
	%48 = call %..typeid @runtime.typeid_base(%..typeid %47)
	store %..typeid %48, %..typeid* %45
	; type_info
	; SelectorExpr
	%49 = getelementptr inbounds %..any, %..any* %0, i64 0, i32 1
	%50 = load %..typeid, %..typeid* %49, align 8
	%51 = call %runtime.Type_Info* @runtime.__type_info_of(%..typeid %50)
	store %runtime.Type_Info* %51, %runtime.Type_Info** %1
	; TypeSwitchStmt
	; SelectorExpr
	%52 = load %runtime.Type_Info*, %runtime.Type_Info** %1, align 8
	%53 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %52, i64 0
	%54 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %53, i64 0, i32 3
	%55 = load {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %54, align 8
	; get union's tag
	%56 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %54, i64 0, i32 2 ; UnionTagPtr
	%57 = load i64, i64* %56, align 8
	%58 = bitcast {[0 x i64], [72 x i8], i64}* %54 to %..rawptr
	%59 = icmp eq i64 %57, 18
	br i1 %59, label %typeswitch.body-2, label %typeswitch.next-1

typeswitch.next-1:
	store {[0 x i64], [72 x i8], i64} %55, {[0 x i64], [72 x i8], i64}* %42
	; ReturnStmt
	%60 = bitcast {%..string, i8}* %43 to %..rawptr
	%61 = call %..rawptr @mem.zero(%..rawptr %60, i64 24) noinline
	store {%..string, i8} zeroinitializer, {%..string, i8}* %43
	%62 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %43, i64 0, i32 0
	store %..string zeroinitializer, %..string* %62
	%63 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %43, i64 0, i32 1
	store i8 0, i8* %63
	%64 = load {%..string, i8}, {%..string, i8}* %43, align 8
	ret {%..string, i8} %64

typeswitch.body-2:
	%65 = bitcast %..rawptr %58 to %runtime.Type_Info_Enum*
	%66 = load %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %65, align 8
	store %runtime.Type_Info_Enum %66, %runtime.Type_Info_Enum* %2
	; a
	; CompoundLit
	%67 = bitcast %..any* %4 to %..rawptr
	%68 = call %..rawptr @mem.zero(%..rawptr %67, i64 16) noinline
	store %..any zeroinitializer, %..any* %4
	store %..any zeroinitializer, %..any* %4
	; SelectorExpr
	%69 = getelementptr inbounds %..any, %..any* %0, i64 0, i32 0
	%70 = load %..rawptr, %..rawptr* %69, align 8
	%71 = getelementptr inbounds %..any, %..any* %4, i64 0, i32 0
	store %..rawptr %70, %..rawptr* %71
	; SelectorExpr
	; SelectorExpr
	; SelectorExpr
	%72 = getelementptr inbounds %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %2, i64 0, i32 0
	%73 = load %runtime.Type_Info*, %runtime.Type_Info** %72, align 8
	%74 = call %runtime.Type_Info* @runtime.type_info_base(%runtime.Type_Info* %73)
	%75 = bitcast %runtime.Type_Info** %5 to %..rawptr
	%76 = call %..rawptr @mem.zero(%..rawptr %75, i64 8) noinline
	store %runtime.Type_Info* zeroinitializer, %runtime.Type_Info** %5
	store %runtime.Type_Info* %74, %runtime.Type_Info** %5
	%77 = load %runtime.Type_Info*, %runtime.Type_Info** %5, align 8
	%78 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %77, i64 0
	%79 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %78, i64 0, i32 2
	%80 = load %..typeid, %..typeid* %79, align 8
	%81 = getelementptr inbounds %..any, %..any* %4, i64 0, i32 1
	store %..typeid %80, %..typeid* %81
	%82 = load %..any, %..any* %4, align 8
	store %..any %82, %..any* %3
	; TypeSwitchStmt
	%83 = load %..any, %..any* %3, align 8
	%84 = getelementptr inbounds %..any, %..any* %3, i64 0, i32 1
	%85 = load %..typeid, %..typeid* %84, align 8
	%86 = icmp eq %..typeid %85, 4755801206503243838
	br i1 %86, label %typeswitch.body-4, label %typeswitch.next-3

typeswitch.next-3:
	%87 = getelementptr inbounds %..any, %..any* %3, i64 0, i32 1
	%88 = load %..typeid, %..typeid* %87, align 8
	%89 = icmp eq %..typeid %88, 4683743612465315903
	br i1 %89, label %typeswitch.body-6, label %typeswitch.next-5

typeswitch.body-4:
	%90 = getelementptr inbounds %..any, %..any* %3, i64 0, i32 0
	%91 = load %..rawptr, %..rawptr* %90, align 8
	%92 = bitcast %..rawptr %91 to i32*
	%93 = load i32, i32* %92, align 4
	store i32 %93, i32* %6
	; ReturnStmt
	%94 = load i32, i32* %6, align 4
	%95 = load %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %2, align 8
	%96 = bitcast %runtime.Type_Info_Enum* %7 to %..rawptr
	%97 = call %..rawptr @mem.zero(%..rawptr %96, i64 40) noinline
	store %runtime.Type_Info_Enum zeroinitializer, %runtime.Type_Info_Enum* %7
	store %runtime.Type_Info_Enum %95, %runtime.Type_Info_Enum* %7
	%98 = call {%..string, i8} @fmt.enum_value_to_string.get_str-0(i32 %94, %runtime.Type_Info_Enum* %7, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%99 = extractvalue {%..string, i8} %98, 0
	%100 = extractvalue {%..string, i8} %98, 1
	%101 = bitcast {%..string, i8}* %8 to %..rawptr
	%102 = call %..rawptr @mem.zero(%..rawptr %101, i64 24) noinline
	store {%..string, i8} zeroinitializer, {%..string, i8}* %8
	%103 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %8, i64 0, i32 0
	store %..string %99, %..string* %103
	%104 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %8, i64 0, i32 1
	store i8 %100, i8* %104
	%105 = load {%..string, i8}, {%..string, i8}* %8, align 8
	ret {%..string, i8} %105

typeswitch.next-5:
	%106 = getelementptr inbounds %..any, %..any* %3, i64 0, i32 1
	%107 = load %..typeid, %..typeid* %106, align 8
	%108 = icmp eq %..typeid %107, 4683743612465315904
	br i1 %108, label %typeswitch.body-8, label %typeswitch.next-7

typeswitch.body-6:
	%109 = getelementptr inbounds %..any, %..any* %3, i64 0, i32 0
	%110 = load %..rawptr, %..rawptr* %109, align 8
	%111 = bitcast %..rawptr %110 to i8*
	%112 = load i8, i8* %111, align 1
	store i8 %112, i8* %9
	; ReturnStmt
	%113 = load i8, i8* %9, align 1
	%114 = load %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %2, align 8
	%115 = bitcast %runtime.Type_Info_Enum* %10 to %..rawptr
	%116 = call %..rawptr @mem.zero(%..rawptr %115, i64 40) noinline
	store %runtime.Type_Info_Enum zeroinitializer, %runtime.Type_Info_Enum* %10
	store %runtime.Type_Info_Enum %114, %runtime.Type_Info_Enum* %10
	%117 = call {%..string, i8} @fmt.enum_value_to_string.get_str-1(i8 %113, %runtime.Type_Info_Enum* %10, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%118 = extractvalue {%..string, i8} %117, 0
	%119 = extractvalue {%..string, i8} %117, 1
	%120 = bitcast {%..string, i8}* %11 to %..rawptr
	%121 = call %..rawptr @mem.zero(%..rawptr %120, i64 24) noinline
	store {%..string, i8} zeroinitializer, {%..string, i8}* %11
	%122 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %11, i64 0, i32 0
	store %..string %118, %..string* %122
	%123 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %11, i64 0, i32 1
	store i8 %119, i8* %123
	%124 = load {%..string, i8}, {%..string, i8}* %11, align 8
	ret {%..string, i8} %124

typeswitch.next-7:
	%125 = getelementptr inbounds %..any, %..any* %3, i64 0, i32 1
	%126 = load %..typeid, %..typeid* %125, align 8
	%127 = icmp eq %..typeid %126, 4683743612465315905
	br i1 %127, label %typeswitch.body-10, label %typeswitch.next-9

typeswitch.body-8:
	%128 = getelementptr inbounds %..any, %..any* %3, i64 0, i32 0
	%129 = load %..rawptr, %..rawptr* %128, align 8
	%130 = bitcast %..rawptr %129 to i16*
	%131 = load i16, i16* %130, align 2
	store i16 %131, i16* %12
	; ReturnStmt
	%132 = load i16, i16* %12, align 2
	%133 = load %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %2, align 8
	%134 = bitcast %runtime.Type_Info_Enum* %13 to %..rawptr
	%135 = call %..rawptr @mem.zero(%..rawptr %134, i64 40) noinline
	store %runtime.Type_Info_Enum zeroinitializer, %runtime.Type_Info_Enum* %13
	store %runtime.Type_Info_Enum %133, %runtime.Type_Info_Enum* %13
	%136 = call {%..string, i8} @fmt.enum_value_to_string.get_str-2(i16 %132, %runtime.Type_Info_Enum* %13, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%137 = extractvalue {%..string, i8} %136, 0
	%138 = extractvalue {%..string, i8} %136, 1
	%139 = bitcast {%..string, i8}* %14 to %..rawptr
	%140 = call %..rawptr @mem.zero(%..rawptr %139, i64 24) noinline
	store {%..string, i8} zeroinitializer, {%..string, i8}* %14
	%141 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %14, i64 0, i32 0
	store %..string %137, %..string* %141
	%142 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %14, i64 0, i32 1
	store i8 %138, i8* %142
	%143 = load {%..string, i8}, {%..string, i8}* %14, align 8
	ret {%..string, i8} %143

typeswitch.next-9:
	%144 = getelementptr inbounds %..any, %..any* %3, i64 0, i32 1
	%145 = load %..typeid, %..typeid* %144, align 8
	%146 = icmp eq %..typeid %145, 4683743612465315906
	br i1 %146, label %typeswitch.body-12, label %typeswitch.next-11

typeswitch.body-10:
	%147 = getelementptr inbounds %..any, %..any* %3, i64 0, i32 0
	%148 = load %..rawptr, %..rawptr* %147, align 8
	%149 = bitcast %..rawptr %148 to i32*
	%150 = load i32, i32* %149, align 4
	store i32 %150, i32* %15
	; ReturnStmt
	%151 = load i32, i32* %15, align 4
	%152 = load %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %2, align 8
	%153 = bitcast %runtime.Type_Info_Enum* %16 to %..rawptr
	%154 = call %..rawptr @mem.zero(%..rawptr %153, i64 40) noinline
	store %runtime.Type_Info_Enum zeroinitializer, %runtime.Type_Info_Enum* %16
	store %runtime.Type_Info_Enum %152, %runtime.Type_Info_Enum* %16
	%155 = call {%..string, i8} @fmt.enum_value_to_string.get_str-3(i32 %151, %runtime.Type_Info_Enum* %16, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%156 = extractvalue {%..string, i8} %155, 0
	%157 = extractvalue {%..string, i8} %155, 1
	%158 = bitcast {%..string, i8}* %17 to %..rawptr
	%159 = call %..rawptr @mem.zero(%..rawptr %158, i64 24) noinline
	store {%..string, i8} zeroinitializer, {%..string, i8}* %17
	%160 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %17, i64 0, i32 0
	store %..string %156, %..string* %160
	%161 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %17, i64 0, i32 1
	store i8 %157, i8* %161
	%162 = load {%..string, i8}, {%..string, i8}* %17, align 8
	ret {%..string, i8} %162

typeswitch.next-11:
	%163 = getelementptr inbounds %..any, %..any* %3, i64 0, i32 1
	%164 = load %..typeid, %..typeid* %163, align 8
	%165 = icmp eq %..typeid %164, 4683743612465315848
	br i1 %165, label %typeswitch.body-14, label %typeswitch.next-13

typeswitch.body-12:
	%166 = getelementptr inbounds %..any, %..any* %3, i64 0, i32 0
	%167 = load %..rawptr, %..rawptr* %166, align 8
	%168 = bitcast %..rawptr %167 to i64*
	%169 = load i64, i64* %168, align 8
	store i64 %169, i64* %18
	; ReturnStmt
	%170 = load i64, i64* %18, align 8
	%171 = load %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %2, align 8
	%172 = bitcast %runtime.Type_Info_Enum* %19 to %..rawptr
	%173 = call %..rawptr @mem.zero(%..rawptr %172, i64 40) noinline
	store %runtime.Type_Info_Enum zeroinitializer, %runtime.Type_Info_Enum* %19
	store %runtime.Type_Info_Enum %171, %runtime.Type_Info_Enum* %19
	%174 = call {%..string, i8} @fmt.enum_value_to_string.get_str-4(i64 %170, %runtime.Type_Info_Enum* %19, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%175 = extractvalue {%..string, i8} %174, 0
	%176 = extractvalue {%..string, i8} %174, 1
	%177 = bitcast {%..string, i8}* %20 to %..rawptr
	%178 = call %..rawptr @mem.zero(%..rawptr %177, i64 24) noinline
	store {%..string, i8} zeroinitializer, {%..string, i8}* %20
	%179 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %20, i64 0, i32 0
	store %..string %175, %..string* %179
	%180 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %20, i64 0, i32 1
	store i8 %176, i8* %180
	%181 = load {%..string, i8}, {%..string, i8}* %20, align 8
	ret {%..string, i8} %181

typeswitch.next-13:
	%182 = getelementptr inbounds %..any, %..any* %3, i64 0, i32 1
	%183 = load %..typeid, %..typeid* %182, align 8
	%184 = icmp eq %..typeid %183, 72057594037927939
	br i1 %184, label %typeswitch.body-16, label %typeswitch.next-15

typeswitch.body-14:
	%185 = getelementptr inbounds %..any, %..any* %3, i64 0, i32 0
	%186 = load %..rawptr, %..rawptr* %185, align 8
	%187 = bitcast %..rawptr %186 to i64*
	%188 = load i64, i64* %187, align 8
	store i64 %188, i64* %21
	; ReturnStmt
	%189 = load i64, i64* %21, align 8
	%190 = load %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %2, align 8
	%191 = bitcast %runtime.Type_Info_Enum* %22 to %..rawptr
	%192 = call %..rawptr @mem.zero(%..rawptr %191, i64 40) noinline
	store %runtime.Type_Info_Enum zeroinitializer, %runtime.Type_Info_Enum* %22
	store %runtime.Type_Info_Enum %190, %runtime.Type_Info_Enum* %22
	%193 = call {%..string, i8} @fmt.enum_value_to_string.get_str-5(i64 %189, %runtime.Type_Info_Enum* %22, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%194 = extractvalue {%..string, i8} %193, 0
	%195 = extractvalue {%..string, i8} %193, 1
	%196 = bitcast {%..string, i8}* %23 to %..rawptr
	%197 = call %..rawptr @mem.zero(%..rawptr %196, i64 24) noinline
	store {%..string, i8} zeroinitializer, {%..string, i8}* %23
	%198 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %23, i64 0, i32 0
	store %..string %194, %..string* %198
	%199 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %23, i64 0, i32 1
	store i8 %195, i8* %199
	%200 = load {%..string, i8}, {%..string, i8}* %23, align 8
	ret {%..string, i8} %200

typeswitch.next-15:
	%201 = getelementptr inbounds %..any, %..any* %3, i64 0, i32 1
	%202 = load %..typeid, %..typeid* %201, align 8
	%203 = icmp eq %..typeid %202, 72057594037928003
	br i1 %203, label %typeswitch.body-18, label %typeswitch.next-17

typeswitch.body-16:
	%204 = getelementptr inbounds %..any, %..any* %3, i64 0, i32 0
	%205 = load %..rawptr, %..rawptr* %204, align 8
	%206 = bitcast %..rawptr %205 to i8*
	%207 = load i8, i8* %206, align 1
	store i8 %207, i8* %24
	; ReturnStmt
	%208 = load i8, i8* %24, align 1
	%209 = load %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %2, align 8
	%210 = bitcast %runtime.Type_Info_Enum* %25 to %..rawptr
	%211 = call %..rawptr @mem.zero(%..rawptr %210, i64 40) noinline
	store %runtime.Type_Info_Enum zeroinitializer, %runtime.Type_Info_Enum* %25
	store %runtime.Type_Info_Enum %209, %runtime.Type_Info_Enum* %25
	%212 = call {%..string, i8} @fmt.enum_value_to_string.get_str-6(i8 %208, %runtime.Type_Info_Enum* %25, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%213 = extractvalue {%..string, i8} %212, 0
	%214 = extractvalue {%..string, i8} %212, 1
	%215 = bitcast {%..string, i8}* %26 to %..rawptr
	%216 = call %..rawptr @mem.zero(%..rawptr %215, i64 24) noinline
	store {%..string, i8} zeroinitializer, {%..string, i8}* %26
	%217 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %26, i64 0, i32 0
	store %..string %213, %..string* %217
	%218 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %26, i64 0, i32 1
	store i8 %214, i8* %218
	%219 = load {%..string, i8}, {%..string, i8}* %26, align 8
	ret {%..string, i8} %219

typeswitch.next-17:
	%220 = getelementptr inbounds %..any, %..any* %3, i64 0, i32 1
	%221 = load %..typeid, %..typeid* %220, align 8
	%222 = icmp eq %..typeid %221, 72057594037928004
	br i1 %222, label %typeswitch.body-20, label %typeswitch.next-19

typeswitch.body-18:
	%223 = getelementptr inbounds %..any, %..any* %3, i64 0, i32 0
	%224 = load %..rawptr, %..rawptr* %223, align 8
	%225 = bitcast %..rawptr %224 to i16*
	%226 = load i16, i16* %225, align 2
	store i16 %226, i16* %27
	; ReturnStmt
	%227 = load i16, i16* %27, align 2
	%228 = load %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %2, align 8
	%229 = bitcast %runtime.Type_Info_Enum* %28 to %..rawptr
	%230 = call %..rawptr @mem.zero(%..rawptr %229, i64 40) noinline
	store %runtime.Type_Info_Enum zeroinitializer, %runtime.Type_Info_Enum* %28
	store %runtime.Type_Info_Enum %228, %runtime.Type_Info_Enum* %28
	%231 = call {%..string, i8} @fmt.enum_value_to_string.get_str-7(i16 %227, %runtime.Type_Info_Enum* %28, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%232 = extractvalue {%..string, i8} %231, 0
	%233 = extractvalue {%..string, i8} %231, 1
	%234 = bitcast {%..string, i8}* %29 to %..rawptr
	%235 = call %..rawptr @mem.zero(%..rawptr %234, i64 24) noinline
	store {%..string, i8} zeroinitializer, {%..string, i8}* %29
	%236 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %29, i64 0, i32 0
	store %..string %232, %..string* %236
	%237 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %29, i64 0, i32 1
	store i8 %233, i8* %237
	%238 = load {%..string, i8}, {%..string, i8}* %29, align 8
	ret {%..string, i8} %238

typeswitch.next-19:
	%239 = getelementptr inbounds %..any, %..any* %3, i64 0, i32 1
	%240 = load %..typeid, %..typeid* %239, align 8
	%241 = icmp eq %..typeid %240, 72057594037928005
	br i1 %241, label %typeswitch.body-22, label %typeswitch.next-21

typeswitch.body-20:
	%242 = getelementptr inbounds %..any, %..any* %3, i64 0, i32 0
	%243 = load %..rawptr, %..rawptr* %242, align 8
	%244 = bitcast %..rawptr %243 to i32*
	%245 = load i32, i32* %244, align 4
	store i32 %245, i32* %30
	; ReturnStmt
	%246 = load i32, i32* %30, align 4
	%247 = load %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %2, align 8
	%248 = bitcast %runtime.Type_Info_Enum* %31 to %..rawptr
	%249 = call %..rawptr @mem.zero(%..rawptr %248, i64 40) noinline
	store %runtime.Type_Info_Enum zeroinitializer, %runtime.Type_Info_Enum* %31
	store %runtime.Type_Info_Enum %247, %runtime.Type_Info_Enum* %31
	%250 = call {%..string, i8} @fmt.enum_value_to_string.get_str-8(i32 %246, %runtime.Type_Info_Enum* %31, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%251 = extractvalue {%..string, i8} %250, 0
	%252 = extractvalue {%..string, i8} %250, 1
	%253 = bitcast {%..string, i8}* %32 to %..rawptr
	%254 = call %..rawptr @mem.zero(%..rawptr %253, i64 24) noinline
	store {%..string, i8} zeroinitializer, {%..string, i8}* %32
	%255 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %32, i64 0, i32 0
	store %..string %251, %..string* %255
	%256 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %32, i64 0, i32 1
	store i8 %252, i8* %256
	%257 = load {%..string, i8}, {%..string, i8}* %32, align 8
	ret {%..string, i8} %257

typeswitch.next-21:
	%258 = getelementptr inbounds %..any, %..any* %3, i64 0, i32 1
	%259 = load %..typeid, %..typeid* %258, align 8
	%260 = icmp eq %..typeid %259, 72057594037928006
	br i1 %260, label %typeswitch.body-24, label %typeswitch.next-23

typeswitch.body-22:
	%261 = getelementptr inbounds %..any, %..any* %3, i64 0, i32 0
	%262 = load %..rawptr, %..rawptr* %261, align 8
	%263 = bitcast %..rawptr %262 to i64*
	%264 = load i64, i64* %263, align 8
	store i64 %264, i64* %33
	; ReturnStmt
	%265 = load i64, i64* %33, align 8
	%266 = load %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %2, align 8
	%267 = bitcast %runtime.Type_Info_Enum* %34 to %..rawptr
	%268 = call %..rawptr @mem.zero(%..rawptr %267, i64 40) noinline
	store %runtime.Type_Info_Enum zeroinitializer, %runtime.Type_Info_Enum* %34
	store %runtime.Type_Info_Enum %266, %runtime.Type_Info_Enum* %34
	%269 = call {%..string, i8} @fmt.enum_value_to_string.get_str-9(i64 %265, %runtime.Type_Info_Enum* %34, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%270 = extractvalue {%..string, i8} %269, 0
	%271 = extractvalue {%..string, i8} %269, 1
	%272 = bitcast {%..string, i8}* %35 to %..rawptr
	%273 = call %..rawptr @mem.zero(%..rawptr %272, i64 24) noinline
	store {%..string, i8} zeroinitializer, {%..string, i8}* %35
	%274 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %35, i64 0, i32 0
	store %..string %270, %..string* %274
	%275 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %35, i64 0, i32 1
	store i8 %271, i8* %275
	%276 = load {%..string, i8}, {%..string, i8}* %35, align 8
	ret {%..string, i8} %276

typeswitch.next-23:
	%277 = getelementptr inbounds %..any, %..any* %3, i64 0, i32 1
	%278 = load %..typeid, %..typeid* %277, align 8
	%279 = icmp eq %..typeid %278, 72057594037927987
	br i1 %279, label %typeswitch.body-26, label %typeswitch.next-25

typeswitch.body-24:
	%280 = getelementptr inbounds %..any, %..any* %3, i64 0, i32 0
	%281 = load %..rawptr, %..rawptr* %280, align 8
	%282 = bitcast %..rawptr %281 to i64*
	%283 = load i64, i64* %282, align 8
	store i64 %283, i64* %36
	; ReturnStmt
	%284 = load i64, i64* %36, align 8
	%285 = load %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %2, align 8
	%286 = bitcast %runtime.Type_Info_Enum* %37 to %..rawptr
	%287 = call %..rawptr @mem.zero(%..rawptr %286, i64 40) noinline
	store %runtime.Type_Info_Enum zeroinitializer, %runtime.Type_Info_Enum* %37
	store %runtime.Type_Info_Enum %285, %runtime.Type_Info_Enum* %37
	%288 = call {%..string, i8} @fmt.enum_value_to_string.get_str-10(i64 %284, %runtime.Type_Info_Enum* %37, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%289 = extractvalue {%..string, i8} %288, 0
	%290 = extractvalue {%..string, i8} %288, 1
	%291 = bitcast {%..string, i8}* %38 to %..rawptr
	%292 = call %..rawptr @mem.zero(%..rawptr %291, i64 24) noinline
	store {%..string, i8} zeroinitializer, {%..string, i8}* %38
	%293 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %38, i64 0, i32 0
	store %..string %289, %..string* %293
	%294 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %38, i64 0, i32 1
	store i8 %290, i8* %294
	%295 = load {%..string, i8}, {%..string, i8}* %38, align 8
	ret {%..string, i8} %295

typeswitch.next-25:
	; ReturnStmt
	%296 = bitcast {%..string, i8}* %44 to %..rawptr
	%297 = call %..rawptr @mem.zero(%..rawptr %296, i64 24) noinline
	store {%..string, i8} zeroinitializer, {%..string, i8}* %44
	%298 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %44, i64 0, i32 0
	store %..string zeroinitializer, %..string* %298
	%299 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %44, i64 0, i32 1
	store i8 0, i8* %299
	%300 = load {%..string, i8}, {%..string, i8}* %44, align 8
	ret {%..string, i8} %300

typeswitch.body-26:
	%301 = getelementptr inbounds %..any, %..any* %3, i64 0, i32 0
	%302 = load %..rawptr, %..rawptr* %301, align 8
	%303 = bitcast %..rawptr %302 to i64*
	%304 = load i64, i64* %303, align 8
	store i64 %304, i64* %39
	; ReturnStmt
	%305 = load i64, i64* %39, align 8
	%306 = load %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %2, align 8
	%307 = bitcast %runtime.Type_Info_Enum* %40 to %..rawptr
	%308 = call %..rawptr @mem.zero(%..rawptr %307, i64 40) noinline
	store %runtime.Type_Info_Enum zeroinitializer, %runtime.Type_Info_Enum* %40
	store %runtime.Type_Info_Enum %306, %runtime.Type_Info_Enum* %40
	%309 = call {%..string, i8} @fmt.enum_value_to_string.get_str-11(i64 %305, %runtime.Type_Info_Enum* %40, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%310 = extractvalue {%..string, i8} %309, 0
	%311 = extractvalue {%..string, i8} %309, 1
	%312 = bitcast {%..string, i8}* %41 to %..rawptr
	%313 = call %..rawptr @mem.zero(%..rawptr %312, i64 24) noinline
	store {%..string, i8} zeroinitializer, {%..string, i8}* %41
	%314 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %41, i64 0, i32 0
	store %..string %310, %..string* %314
	%315 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %41, i64 0, i32 1
	store i8 %311, i8* %315
	%316 = load {%..string, i8}, {%..string, i8}* %41, align 8
	ret {%..string, i8} %316
}

define {%..string, i8} @fmt.enum_value_to_string.get_str-0(i32 %i, %runtime.Type_Info_Enum* %e, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca i32, align 16
	%1 = alloca %runtime.Type_Info_Enum_Value, align 16
	%2 = alloca i64, align 16
	%3 = alloca i64, align 16
	%4 = alloca i64, align 16
	%5 = alloca i32, align 16
	%6 = alloca i8, align 16
	%7 = alloca {i32, i8}, align 16
	%8 = alloca {%..string, i8}, align 16
	%9 = alloca {%..string, i8}, align 16
	%10 = alloca %runtime.Type_Info_Enum_Value, align 16
	%11 = alloca i64, align 16
	%12 = alloca i64, align 16
	%13 = alloca i64, align 16
	%14 = alloca i32, align 16
	%15 = alloca i8, align 16
	%16 = alloca {i32, i8}, align 16
	%17 = alloca {%..string, i8}, align 16
	%18 = alloca {%..string, i8}, align 16
	store i32 %i, i32* %0
	%19 = load %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %e, align 8
	; IfStmt
	; SelectorExpr
	; SelectorExpr
	%20 = getelementptr inbounds %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %e, i64 0, i32 0
	%21 = load %runtime.Type_Info*, %runtime.Type_Info** %20, align 8
	%22 = call i8 @types.is_string(%runtime.Type_Info* %21, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%23 = trunc i8 %22 to i1
	br i1 %23, label %if.then-1, label %if.else-10

if.then-1:
	; RangeStmt
	; val
	%24 = bitcast %runtime.Type_Info_Enum_Value* %1 to %..rawptr
	%25 = call %..rawptr @mem.zero(%..rawptr %24, i64 16) noinline
	store %runtime.Type_Info_Enum_Value zeroinitializer, %runtime.Type_Info_Enum_Value* %1
	; idx
	%26 = bitcast i64* %2 to %..rawptr
	%27 = call %..rawptr @mem.zero(%..rawptr %26, i64 8) noinline
	store i64 zeroinitializer, i64* %2
	; SelectorExpr
	%28 = getelementptr inbounds %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %e, i64 0, i32 2
	%29 = load {%runtime.Type_Info_Enum_Value*, i64}, {%runtime.Type_Info_Enum_Value*, i64}* %28, align 8
	%30 = bitcast i64* %3 to %..rawptr
	%31 = call %..rawptr @mem.zero(%..rawptr %30, i64 8) noinline
	store i64 zeroinitializer, i64* %3
	%32 = extractvalue {%runtime.Type_Info_Enum_Value*, i64} %29, 1
	store i64 %32, i64* %3
	%33 = bitcast i64* %4 to %..rawptr
	%34 = call %..rawptr @mem.zero(%..rawptr %33, i64 8) noinline
	store i64 zeroinitializer, i64* %4
	store i64 -1, i64* %4
	br label %for.index.loop-2

for.index.loop-2:
	%35 = load i64, i64* %4, align 8
	%36 = add i64 %35, 1
	store i64 %36, i64* %4
	%37 = load i64, i64* %3, align 8
	%38 = icmp slt i64 %36, %37
	br i1 %38, label %for.index.body-3, label %for.index.done-9

for.index.body-3:
	%39 = load i64, i64* %4, align 8
	%40 = extractvalue {%runtime.Type_Info_Enum_Value*, i64} %29, 0
	%41 = getelementptr inbounds %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %40, i64 %39
	%42 = load %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %41, align 8
	store %runtime.Type_Info_Enum_Value %42, %runtime.Type_Info_Enum_Value* %1
	store i64 %39, i64* %2
	; IfStmt
	; v
	; ok
	%43 = load %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %1, align 8
	; cast - union_cast
	%44 = bitcast {i32, i8}* %7 to %..rawptr
	%45 = call %..rawptr @mem.zero(%..rawptr %44, i64 8) noinline
	store {i32, i8} zeroinitializer, {i32, i8}* %7
	%46 = getelementptr inbounds %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %1, i64 0, i32 2 ; UnionTagPtr
	%47 = load i64, i64* %46, align 8
	%48 = icmp eq i64 %47, 1
	br i1 %48, label %union_cast.ok-4, label %union_cast.end-5

union_cast.ok-4:
	%49 = getelementptr inbounds {i32, i8}, {i32, i8}* %7, i64 0, i32 0
	%50 = getelementptr inbounds {i32, i8}, {i32, i8}* %7, i64 0, i32 1
	%51 = bitcast %runtime.Type_Info_Enum_Value* %1 to i32*
	%52 = load i32, i32* %51, align 4
	store i32 %52, i32* %49
	store i8 1, i8* %50
	br label %union_cast.end-5

union_cast.end-5:
	%53 = load {i32, i8}, {i32, i8}* %7, align 4
	%54 = extractvalue {i32, i8} %53, 0
	%55 = extractvalue {i32, i8} %53, 1
	store i32 %54, i32* %5
	store i8 %55, i8* %6
	%56 = load i8, i8* %6, align 1
	%57 = trunc i8 %56 to i1
	br i1 %57, label %cmp.and-6, label %if.done-8

cmp.and-6:
	%58 = load i32, i32* %5, align 4
	%59 = load i32, i32* %0, align 4
	%60 = icmp eq i32 %58, %59
	%61 = zext i1 %60 to i8
	%62 = trunc i8 %61 to i1
	br i1 %62, label %if.then-7, label %if.done-8

if.then-7:
	; ReturnStmt
	; IndexExpr
	; SelectorExpr
	%63 = getelementptr inbounds %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %e, i64 0, i32 1
	%64 = load {%..string*, i64}, {%..string*, i64}* %63, align 8
	%65 = extractvalue {%..string*, i64} %64, 0
	%66 = load i64, i64* %2, align 8
	%67 = extractvalue {%..string*, i64} %64, 1
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @str$10d, i64 0, i32 0), i64 25}, i64 745, i64 22, i64 %66, i64 %67)
	%68 = getelementptr inbounds %..string, %..string* %65, i64 %66
	%69 = load %..string, %..string* %68, align 8
	%70 = bitcast {%..string, i8}* %8 to %..rawptr
	%71 = call %..rawptr @mem.zero(%..rawptr %70, i64 24) noinline
	store {%..string, i8} zeroinitializer, {%..string, i8}* %8
	%72 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %8, i64 0, i32 0
	store %..string %69, %..string* %72
	%73 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %8, i64 0, i32 1
	store i8 1, i8* %73
	%74 = load {%..string, i8}, {%..string, i8}* %8, align 8
	ret {%..string, i8} %74

if.done-8:
	br label %for.index.loop-2

for.index.done-9:
	br label %if.done-21

if.else-10:
	; IfStmt
	; SelectorExpr
	%75 = getelementptr inbounds %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %e, i64 0, i32 2
	%76 = load {%runtime.Type_Info_Enum_Value*, i64}, {%runtime.Type_Info_Enum_Value*, i64}* %75, align 8
	%77 = extractvalue {%runtime.Type_Info_Enum_Value*, i64} %76, 1
	%78 = icmp eq i64 %77, 0
	%79 = zext i1 %78 to i8
	%80 = trunc i8 %79 to i1
	br i1 %80, label %if.then-11, label %if.else-12

if.then-11:
	; ReturnStmt
	%81 = bitcast {%..string, i8}* %9 to %..rawptr
	%82 = call %..rawptr @mem.zero(%..rawptr %81, i64 24) noinline
	store {%..string, i8} zeroinitializer, {%..string, i8}* %9
	%83 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %9, i64 0, i32 0
	store %..string zeroinitializer, %..string* %83
	%84 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %9, i64 0, i32 1
	store i8 1, i8* %84
	%85 = load {%..string, i8}, {%..string, i8}* %9, align 8
	ret {%..string, i8} %85

if.else-12:
	; RangeStmt
	; val
	%86 = bitcast %runtime.Type_Info_Enum_Value* %10 to %..rawptr
	%87 = call %..rawptr @mem.zero(%..rawptr %86, i64 16) noinline
	store %runtime.Type_Info_Enum_Value zeroinitializer, %runtime.Type_Info_Enum_Value* %10
	; idx
	%88 = bitcast i64* %11 to %..rawptr
	%89 = call %..rawptr @mem.zero(%..rawptr %88, i64 8) noinline
	store i64 zeroinitializer, i64* %11
	; SelectorExpr
	%90 = getelementptr inbounds %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %e, i64 0, i32 2
	%91 = load {%runtime.Type_Info_Enum_Value*, i64}, {%runtime.Type_Info_Enum_Value*, i64}* %90, align 8
	%92 = bitcast i64* %12 to %..rawptr
	%93 = call %..rawptr @mem.zero(%..rawptr %92, i64 8) noinline
	store i64 zeroinitializer, i64* %12
	%94 = extractvalue {%runtime.Type_Info_Enum_Value*, i64} %91, 1
	store i64 %94, i64* %12
	%95 = bitcast i64* %13 to %..rawptr
	%96 = call %..rawptr @mem.zero(%..rawptr %95, i64 8) noinline
	store i64 zeroinitializer, i64* %13
	store i64 -1, i64* %13
	br label %for.index.loop-13

for.index.loop-13:
	%97 = load i64, i64* %13, align 8
	%98 = add i64 %97, 1
	store i64 %98, i64* %13
	%99 = load i64, i64* %12, align 8
	%100 = icmp slt i64 %98, %99
	br i1 %100, label %for.index.body-14, label %for.index.done-20

for.index.body-14:
	%101 = load i64, i64* %13, align 8
	%102 = extractvalue {%runtime.Type_Info_Enum_Value*, i64} %91, 0
	%103 = getelementptr inbounds %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %102, i64 %101
	%104 = load %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %103, align 8
	store %runtime.Type_Info_Enum_Value %104, %runtime.Type_Info_Enum_Value* %10
	store i64 %101, i64* %11
	; IfStmt
	; v
	; ok
	%105 = load %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %10, align 8
	; cast - union_cast
	%106 = bitcast {i32, i8}* %16 to %..rawptr
	%107 = call %..rawptr @mem.zero(%..rawptr %106, i64 8) noinline
	store {i32, i8} zeroinitializer, {i32, i8}* %16
	%108 = getelementptr inbounds %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %10, i64 0, i32 2 ; UnionTagPtr
	%109 = load i64, i64* %108, align 8
	%110 = icmp eq i64 %109, 1
	br i1 %110, label %union_cast.ok-15, label %union_cast.end-16

union_cast.ok-15:
	%111 = getelementptr inbounds {i32, i8}, {i32, i8}* %16, i64 0, i32 0
	%112 = getelementptr inbounds {i32, i8}, {i32, i8}* %16, i64 0, i32 1
	%113 = bitcast %runtime.Type_Info_Enum_Value* %10 to i32*
	%114 = load i32, i32* %113, align 4
	store i32 %114, i32* %111
	store i8 1, i8* %112
	br label %union_cast.end-16

union_cast.end-16:
	%115 = load {i32, i8}, {i32, i8}* %16, align 4
	%116 = extractvalue {i32, i8} %115, 0
	%117 = extractvalue {i32, i8} %115, 1
	store i32 %116, i32* %14
	store i8 %117, i8* %15
	%118 = load i8, i8* %15, align 1
	%119 = trunc i8 %118 to i1
	br i1 %119, label %cmp.and-17, label %if.done-19

cmp.and-17:
	%120 = load i32, i32* %14, align 4
	%121 = load i32, i32* %0, align 4
	%122 = icmp eq i32 %120, %121
	%123 = zext i1 %122 to i8
	%124 = trunc i8 %123 to i1
	br i1 %124, label %if.then-18, label %if.done-19

if.then-18:
	; ReturnStmt
	; IndexExpr
	; SelectorExpr
	%125 = getelementptr inbounds %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %e, i64 0, i32 1
	%126 = load {%..string*, i64}, {%..string*, i64}* %125, align 8
	%127 = extractvalue {%..string*, i64} %126, 0
	%128 = load i64, i64* %11, align 8
	%129 = extractvalue {%..string*, i64} %126, 1
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @str$10e, i64 0, i32 0), i64 25}, i64 753, i64 22, i64 %128, i64 %129)
	%130 = getelementptr inbounds %..string, %..string* %127, i64 %128
	%131 = load %..string, %..string* %130, align 8
	%132 = bitcast {%..string, i8}* %17 to %..rawptr
	%133 = call %..rawptr @mem.zero(%..rawptr %132, i64 24) noinline
	store {%..string, i8} zeroinitializer, {%..string, i8}* %17
	%134 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %17, i64 0, i32 0
	store %..string %131, %..string* %134
	%135 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %17, i64 0, i32 1
	store i8 1, i8* %135
	%136 = load {%..string, i8}, {%..string, i8}* %17, align 8
	ret {%..string, i8} %136

if.done-19:
	br label %for.index.loop-13

for.index.done-20:
	br label %if.done-21

if.done-21:
	; ReturnStmt
	%137 = bitcast {%..string, i8}* %18 to %..rawptr
	%138 = call %..rawptr @mem.zero(%..rawptr %137, i64 24) noinline
	store {%..string, i8} zeroinitializer, {%..string, i8}* %18
	%139 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %18, i64 0, i32 0
	store %..string zeroinitializer, %..string* %139
	%140 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %18, i64 0, i32 1
	store i8 0, i8* %140
	%141 = load {%..string, i8}, {%..string, i8}* %18, align 8
	ret {%..string, i8} %141
}

define {%..string, i8} @fmt.enum_value_to_string.get_str-1(i8 %i, %runtime.Type_Info_Enum* %e, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca i8, align 16
	%1 = alloca %runtime.Type_Info_Enum_Value, align 16
	%2 = alloca i64, align 16
	%3 = alloca i64, align 16
	%4 = alloca i64, align 16
	%5 = alloca i8, align 16
	%6 = alloca i8, align 16
	%7 = alloca {i8, i8}, align 16
	%8 = alloca {%..string, i8}, align 16
	%9 = alloca {%..string, i8}, align 16
	%10 = alloca %runtime.Type_Info_Enum_Value, align 16
	%11 = alloca i64, align 16
	%12 = alloca i64, align 16
	%13 = alloca i64, align 16
	%14 = alloca i8, align 16
	%15 = alloca i8, align 16
	%16 = alloca {i8, i8}, align 16
	%17 = alloca {%..string, i8}, align 16
	%18 = alloca {%..string, i8}, align 16
	store i8 %i, i8* %0
	%19 = load %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %e, align 8
	; IfStmt
	; SelectorExpr
	; SelectorExpr
	%20 = getelementptr inbounds %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %e, i64 0, i32 0
	%21 = load %runtime.Type_Info*, %runtime.Type_Info** %20, align 8
	%22 = call i8 @types.is_string(%runtime.Type_Info* %21, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%23 = trunc i8 %22 to i1
	br i1 %23, label %if.then-1, label %if.else-10

if.then-1:
	; RangeStmt
	; val
	%24 = bitcast %runtime.Type_Info_Enum_Value* %1 to %..rawptr
	%25 = call %..rawptr @mem.zero(%..rawptr %24, i64 16) noinline
	store %runtime.Type_Info_Enum_Value zeroinitializer, %runtime.Type_Info_Enum_Value* %1
	; idx
	%26 = bitcast i64* %2 to %..rawptr
	%27 = call %..rawptr @mem.zero(%..rawptr %26, i64 8) noinline
	store i64 zeroinitializer, i64* %2
	; SelectorExpr
	%28 = getelementptr inbounds %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %e, i64 0, i32 2
	%29 = load {%runtime.Type_Info_Enum_Value*, i64}, {%runtime.Type_Info_Enum_Value*, i64}* %28, align 8
	%30 = bitcast i64* %3 to %..rawptr
	%31 = call %..rawptr @mem.zero(%..rawptr %30, i64 8) noinline
	store i64 zeroinitializer, i64* %3
	%32 = extractvalue {%runtime.Type_Info_Enum_Value*, i64} %29, 1
	store i64 %32, i64* %3
	%33 = bitcast i64* %4 to %..rawptr
	%34 = call %..rawptr @mem.zero(%..rawptr %33, i64 8) noinline
	store i64 zeroinitializer, i64* %4
	store i64 -1, i64* %4
	br label %for.index.loop-2

for.index.loop-2:
	%35 = load i64, i64* %4, align 8
	%36 = add i64 %35, 1
	store i64 %36, i64* %4
	%37 = load i64, i64* %3, align 8
	%38 = icmp slt i64 %36, %37
	br i1 %38, label %for.index.body-3, label %for.index.done-9

for.index.body-3:
	%39 = load i64, i64* %4, align 8
	%40 = extractvalue {%runtime.Type_Info_Enum_Value*, i64} %29, 0
	%41 = getelementptr inbounds %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %40, i64 %39
	%42 = load %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %41, align 8
	store %runtime.Type_Info_Enum_Value %42, %runtime.Type_Info_Enum_Value* %1
	store i64 %39, i64* %2
	; IfStmt
	; v
	; ok
	%43 = load %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %1, align 8
	; cast - union_cast
	%44 = bitcast {i8, i8}* %7 to %..rawptr
	%45 = call %..rawptr @mem.zero(%..rawptr %44, i64 2) noinline
	store {i8, i8} zeroinitializer, {i8, i8}* %7
	%46 = getelementptr inbounds %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %1, i64 0, i32 2 ; UnionTagPtr
	%47 = load i64, i64* %46, align 8
	%48 = icmp eq i64 %47, 2
	br i1 %48, label %union_cast.ok-4, label %union_cast.end-5

union_cast.ok-4:
	%49 = getelementptr inbounds {i8, i8}, {i8, i8}* %7, i64 0, i32 0
	%50 = getelementptr inbounds {i8, i8}, {i8, i8}* %7, i64 0, i32 1
	%51 = bitcast %runtime.Type_Info_Enum_Value* %1 to i8*
	%52 = load i8, i8* %51, align 1
	store i8 %52, i8* %49
	store i8 1, i8* %50
	br label %union_cast.end-5

union_cast.end-5:
	%53 = load {i8, i8}, {i8, i8}* %7, align 1
	%54 = extractvalue {i8, i8} %53, 0
	%55 = extractvalue {i8, i8} %53, 1
	store i8 %54, i8* %5
	store i8 %55, i8* %6
	%56 = load i8, i8* %6, align 1
	%57 = trunc i8 %56 to i1
	br i1 %57, label %cmp.and-6, label %if.done-8

cmp.and-6:
	%58 = load i8, i8* %5, align 1
	%59 = load i8, i8* %0, align 1
	%60 = icmp eq i8 %58, %59
	%61 = zext i1 %60 to i8
	%62 = trunc i8 %61 to i1
	br i1 %62, label %if.then-7, label %if.done-8

if.then-7:
	; ReturnStmt
	; IndexExpr
	; SelectorExpr
	%63 = getelementptr inbounds %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %e, i64 0, i32 1
	%64 = load {%..string*, i64}, {%..string*, i64}* %63, align 8
	%65 = extractvalue {%..string*, i64} %64, 0
	%66 = load i64, i64* %2, align 8
	%67 = extractvalue {%..string*, i64} %64, 1
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @str$10f, i64 0, i32 0), i64 25}, i64 745, i64 22, i64 %66, i64 %67)
	%68 = getelementptr inbounds %..string, %..string* %65, i64 %66
	%69 = load %..string, %..string* %68, align 8
	%70 = bitcast {%..string, i8}* %8 to %..rawptr
	%71 = call %..rawptr @mem.zero(%..rawptr %70, i64 24) noinline
	store {%..string, i8} zeroinitializer, {%..string, i8}* %8
	%72 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %8, i64 0, i32 0
	store %..string %69, %..string* %72
	%73 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %8, i64 0, i32 1
	store i8 1, i8* %73
	%74 = load {%..string, i8}, {%..string, i8}* %8, align 8
	ret {%..string, i8} %74

if.done-8:
	br label %for.index.loop-2

for.index.done-9:
	br label %if.done-21

if.else-10:
	; IfStmt
	; SelectorExpr
	%75 = getelementptr inbounds %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %e, i64 0, i32 2
	%76 = load {%runtime.Type_Info_Enum_Value*, i64}, {%runtime.Type_Info_Enum_Value*, i64}* %75, align 8
	%77 = extractvalue {%runtime.Type_Info_Enum_Value*, i64} %76, 1
	%78 = icmp eq i64 %77, 0
	%79 = zext i1 %78 to i8
	%80 = trunc i8 %79 to i1
	br i1 %80, label %if.then-11, label %if.else-12

if.then-11:
	; ReturnStmt
	%81 = bitcast {%..string, i8}* %9 to %..rawptr
	%82 = call %..rawptr @mem.zero(%..rawptr %81, i64 24) noinline
	store {%..string, i8} zeroinitializer, {%..string, i8}* %9
	%83 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %9, i64 0, i32 0
	store %..string zeroinitializer, %..string* %83
	%84 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %9, i64 0, i32 1
	store i8 1, i8* %84
	%85 = load {%..string, i8}, {%..string, i8}* %9, align 8
	ret {%..string, i8} %85

if.else-12:
	; RangeStmt
	; val
	%86 = bitcast %runtime.Type_Info_Enum_Value* %10 to %..rawptr
	%87 = call %..rawptr @mem.zero(%..rawptr %86, i64 16) noinline
	store %runtime.Type_Info_Enum_Value zeroinitializer, %runtime.Type_Info_Enum_Value* %10
	; idx
	%88 = bitcast i64* %11 to %..rawptr
	%89 = call %..rawptr @mem.zero(%..rawptr %88, i64 8) noinline
	store i64 zeroinitializer, i64* %11
	; SelectorExpr
	%90 = getelementptr inbounds %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %e, i64 0, i32 2
	%91 = load {%runtime.Type_Info_Enum_Value*, i64}, {%runtime.Type_Info_Enum_Value*, i64}* %90, align 8
	%92 = bitcast i64* %12 to %..rawptr
	%93 = call %..rawptr @mem.zero(%..rawptr %92, i64 8) noinline
	store i64 zeroinitializer, i64* %12
	%94 = extractvalue {%runtime.Type_Info_Enum_Value*, i64} %91, 1
	store i64 %94, i64* %12
	%95 = bitcast i64* %13 to %..rawptr
	%96 = call %..rawptr @mem.zero(%..rawptr %95, i64 8) noinline
	store i64 zeroinitializer, i64* %13
	store i64 -1, i64* %13
	br label %for.index.loop-13

for.index.loop-13:
	%97 = load i64, i64* %13, align 8
	%98 = add i64 %97, 1
	store i64 %98, i64* %13
	%99 = load i64, i64* %12, align 8
	%100 = icmp slt i64 %98, %99
	br i1 %100, label %for.index.body-14, label %for.index.done-20

for.index.body-14:
	%101 = load i64, i64* %13, align 8
	%102 = extractvalue {%runtime.Type_Info_Enum_Value*, i64} %91, 0
	%103 = getelementptr inbounds %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %102, i64 %101
	%104 = load %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %103, align 8
	store %runtime.Type_Info_Enum_Value %104, %runtime.Type_Info_Enum_Value* %10
	store i64 %101, i64* %11
	; IfStmt
	; v
	; ok
	%105 = load %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %10, align 8
	; cast - union_cast
	%106 = bitcast {i8, i8}* %16 to %..rawptr
	%107 = call %..rawptr @mem.zero(%..rawptr %106, i64 2) noinline
	store {i8, i8} zeroinitializer, {i8, i8}* %16
	%108 = getelementptr inbounds %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %10, i64 0, i32 2 ; UnionTagPtr
	%109 = load i64, i64* %108, align 8
	%110 = icmp eq i64 %109, 2
	br i1 %110, label %union_cast.ok-15, label %union_cast.end-16

union_cast.ok-15:
	%111 = getelementptr inbounds {i8, i8}, {i8, i8}* %16, i64 0, i32 0
	%112 = getelementptr inbounds {i8, i8}, {i8, i8}* %16, i64 0, i32 1
	%113 = bitcast %runtime.Type_Info_Enum_Value* %10 to i8*
	%114 = load i8, i8* %113, align 1
	store i8 %114, i8* %111
	store i8 1, i8* %112
	br label %union_cast.end-16

union_cast.end-16:
	%115 = load {i8, i8}, {i8, i8}* %16, align 1
	%116 = extractvalue {i8, i8} %115, 0
	%117 = extractvalue {i8, i8} %115, 1
	store i8 %116, i8* %14
	store i8 %117, i8* %15
	%118 = load i8, i8* %15, align 1
	%119 = trunc i8 %118 to i1
	br i1 %119, label %cmp.and-17, label %if.done-19

cmp.and-17:
	%120 = load i8, i8* %14, align 1
	%121 = load i8, i8* %0, align 1
	%122 = icmp eq i8 %120, %121
	%123 = zext i1 %122 to i8
	%124 = trunc i8 %123 to i1
	br i1 %124, label %if.then-18, label %if.done-19

if.then-18:
	; ReturnStmt
	; IndexExpr
	; SelectorExpr
	%125 = getelementptr inbounds %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %e, i64 0, i32 1
	%126 = load {%..string*, i64}, {%..string*, i64}* %125, align 8
	%127 = extractvalue {%..string*, i64} %126, 0
	%128 = load i64, i64* %11, align 8
	%129 = extractvalue {%..string*, i64} %126, 1
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @str$110, i64 0, i32 0), i64 25}, i64 753, i64 22, i64 %128, i64 %129)
	%130 = getelementptr inbounds %..string, %..string* %127, i64 %128
	%131 = load %..string, %..string* %130, align 8
	%132 = bitcast {%..string, i8}* %17 to %..rawptr
	%133 = call %..rawptr @mem.zero(%..rawptr %132, i64 24) noinline
	store {%..string, i8} zeroinitializer, {%..string, i8}* %17
	%134 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %17, i64 0, i32 0
	store %..string %131, %..string* %134
	%135 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %17, i64 0, i32 1
	store i8 1, i8* %135
	%136 = load {%..string, i8}, {%..string, i8}* %17, align 8
	ret {%..string, i8} %136

if.done-19:
	br label %for.index.loop-13

for.index.done-20:
	br label %if.done-21

if.done-21:
	; ReturnStmt
	%137 = bitcast {%..string, i8}* %18 to %..rawptr
	%138 = call %..rawptr @mem.zero(%..rawptr %137, i64 24) noinline
	store {%..string, i8} zeroinitializer, {%..string, i8}* %18
	%139 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %18, i64 0, i32 0
	store %..string zeroinitializer, %..string* %139
	%140 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %18, i64 0, i32 1
	store i8 0, i8* %140
	%141 = load {%..string, i8}, {%..string, i8}* %18, align 8
	ret {%..string, i8} %141
}

define {%..string, i8} @fmt.enum_value_to_string.get_str-2(i16 %i, %runtime.Type_Info_Enum* %e, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca i16, align 16
	%1 = alloca %runtime.Type_Info_Enum_Value, align 16
	%2 = alloca i64, align 16
	%3 = alloca i64, align 16
	%4 = alloca i64, align 16
	%5 = alloca i16, align 16
	%6 = alloca i8, align 16
	%7 = alloca {i16, i8}, align 16
	%8 = alloca {%..string, i8}, align 16
	%9 = alloca {%..string, i8}, align 16
	%10 = alloca %runtime.Type_Info_Enum_Value, align 16
	%11 = alloca i64, align 16
	%12 = alloca i64, align 16
	%13 = alloca i64, align 16
	%14 = alloca i16, align 16
	%15 = alloca i8, align 16
	%16 = alloca {i16, i8}, align 16
	%17 = alloca {%..string, i8}, align 16
	%18 = alloca {%..string, i8}, align 16
	store i16 %i, i16* %0
	%19 = load %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %e, align 8
	; IfStmt
	; SelectorExpr
	; SelectorExpr
	%20 = getelementptr inbounds %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %e, i64 0, i32 0
	%21 = load %runtime.Type_Info*, %runtime.Type_Info** %20, align 8
	%22 = call i8 @types.is_string(%runtime.Type_Info* %21, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%23 = trunc i8 %22 to i1
	br i1 %23, label %if.then-1, label %if.else-10

if.then-1:
	; RangeStmt
	; val
	%24 = bitcast %runtime.Type_Info_Enum_Value* %1 to %..rawptr
	%25 = call %..rawptr @mem.zero(%..rawptr %24, i64 16) noinline
	store %runtime.Type_Info_Enum_Value zeroinitializer, %runtime.Type_Info_Enum_Value* %1
	; idx
	%26 = bitcast i64* %2 to %..rawptr
	%27 = call %..rawptr @mem.zero(%..rawptr %26, i64 8) noinline
	store i64 zeroinitializer, i64* %2
	; SelectorExpr
	%28 = getelementptr inbounds %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %e, i64 0, i32 2
	%29 = load {%runtime.Type_Info_Enum_Value*, i64}, {%runtime.Type_Info_Enum_Value*, i64}* %28, align 8
	%30 = bitcast i64* %3 to %..rawptr
	%31 = call %..rawptr @mem.zero(%..rawptr %30, i64 8) noinline
	store i64 zeroinitializer, i64* %3
	%32 = extractvalue {%runtime.Type_Info_Enum_Value*, i64} %29, 1
	store i64 %32, i64* %3
	%33 = bitcast i64* %4 to %..rawptr
	%34 = call %..rawptr @mem.zero(%..rawptr %33, i64 8) noinline
	store i64 zeroinitializer, i64* %4
	store i64 -1, i64* %4
	br label %for.index.loop-2

for.index.loop-2:
	%35 = load i64, i64* %4, align 8
	%36 = add i64 %35, 1
	store i64 %36, i64* %4
	%37 = load i64, i64* %3, align 8
	%38 = icmp slt i64 %36, %37
	br i1 %38, label %for.index.body-3, label %for.index.done-9

for.index.body-3:
	%39 = load i64, i64* %4, align 8
	%40 = extractvalue {%runtime.Type_Info_Enum_Value*, i64} %29, 0
	%41 = getelementptr inbounds %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %40, i64 %39
	%42 = load %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %41, align 8
	store %runtime.Type_Info_Enum_Value %42, %runtime.Type_Info_Enum_Value* %1
	store i64 %39, i64* %2
	; IfStmt
	; v
	; ok
	%43 = load %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %1, align 8
	; cast - union_cast
	%44 = bitcast {i16, i8}* %7 to %..rawptr
	%45 = call %..rawptr @mem.zero(%..rawptr %44, i64 4) noinline
	store {i16, i8} zeroinitializer, {i16, i8}* %7
	%46 = getelementptr inbounds %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %1, i64 0, i32 2 ; UnionTagPtr
	%47 = load i64, i64* %46, align 8
	%48 = icmp eq i64 %47, 3
	br i1 %48, label %union_cast.ok-4, label %union_cast.end-5

union_cast.ok-4:
	%49 = getelementptr inbounds {i16, i8}, {i16, i8}* %7, i64 0, i32 0
	%50 = getelementptr inbounds {i16, i8}, {i16, i8}* %7, i64 0, i32 1
	%51 = bitcast %runtime.Type_Info_Enum_Value* %1 to i16*
	%52 = load i16, i16* %51, align 2
	store i16 %52, i16* %49
	store i8 1, i8* %50
	br label %union_cast.end-5

union_cast.end-5:
	%53 = load {i16, i8}, {i16, i8}* %7, align 2
	%54 = extractvalue {i16, i8} %53, 0
	%55 = extractvalue {i16, i8} %53, 1
	store i16 %54, i16* %5
	store i8 %55, i8* %6
	%56 = load i8, i8* %6, align 1
	%57 = trunc i8 %56 to i1
	br i1 %57, label %cmp.and-6, label %if.done-8

cmp.and-6:
	%58 = load i16, i16* %5, align 2
	%59 = load i16, i16* %0, align 2
	%60 = icmp eq i16 %58, %59
	%61 = zext i1 %60 to i8
	%62 = trunc i8 %61 to i1
	br i1 %62, label %if.then-7, label %if.done-8

if.then-7:
	; ReturnStmt
	; IndexExpr
	; SelectorExpr
	%63 = getelementptr inbounds %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %e, i64 0, i32 1
	%64 = load {%..string*, i64}, {%..string*, i64}* %63, align 8
	%65 = extractvalue {%..string*, i64} %64, 0
	%66 = load i64, i64* %2, align 8
	%67 = extractvalue {%..string*, i64} %64, 1
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @str$111, i64 0, i32 0), i64 25}, i64 745, i64 22, i64 %66, i64 %67)
	%68 = getelementptr inbounds %..string, %..string* %65, i64 %66
	%69 = load %..string, %..string* %68, align 8
	%70 = bitcast {%..string, i8}* %8 to %..rawptr
	%71 = call %..rawptr @mem.zero(%..rawptr %70, i64 24) noinline
	store {%..string, i8} zeroinitializer, {%..string, i8}* %8
	%72 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %8, i64 0, i32 0
	store %..string %69, %..string* %72
	%73 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %8, i64 0, i32 1
	store i8 1, i8* %73
	%74 = load {%..string, i8}, {%..string, i8}* %8, align 8
	ret {%..string, i8} %74

if.done-8:
	br label %for.index.loop-2

for.index.done-9:
	br label %if.done-21

if.else-10:
	; IfStmt
	; SelectorExpr
	%75 = getelementptr inbounds %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %e, i64 0, i32 2
	%76 = load {%runtime.Type_Info_Enum_Value*, i64}, {%runtime.Type_Info_Enum_Value*, i64}* %75, align 8
	%77 = extractvalue {%runtime.Type_Info_Enum_Value*, i64} %76, 1
	%78 = icmp eq i64 %77, 0
	%79 = zext i1 %78 to i8
	%80 = trunc i8 %79 to i1
	br i1 %80, label %if.then-11, label %if.else-12

if.then-11:
	; ReturnStmt
	%81 = bitcast {%..string, i8}* %9 to %..rawptr
	%82 = call %..rawptr @mem.zero(%..rawptr %81, i64 24) noinline
	store {%..string, i8} zeroinitializer, {%..string, i8}* %9
	%83 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %9, i64 0, i32 0
	store %..string zeroinitializer, %..string* %83
	%84 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %9, i64 0, i32 1
	store i8 1, i8* %84
	%85 = load {%..string, i8}, {%..string, i8}* %9, align 8
	ret {%..string, i8} %85

if.else-12:
	; RangeStmt
	; val
	%86 = bitcast %runtime.Type_Info_Enum_Value* %10 to %..rawptr
	%87 = call %..rawptr @mem.zero(%..rawptr %86, i64 16) noinline
	store %runtime.Type_Info_Enum_Value zeroinitializer, %runtime.Type_Info_Enum_Value* %10
	; idx
	%88 = bitcast i64* %11 to %..rawptr
	%89 = call %..rawptr @mem.zero(%..rawptr %88, i64 8) noinline
	store i64 zeroinitializer, i64* %11
	; SelectorExpr
	%90 = getelementptr inbounds %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %e, i64 0, i32 2
	%91 = load {%runtime.Type_Info_Enum_Value*, i64}, {%runtime.Type_Info_Enum_Value*, i64}* %90, align 8
	%92 = bitcast i64* %12 to %..rawptr
	%93 = call %..rawptr @mem.zero(%..rawptr %92, i64 8) noinline
	store i64 zeroinitializer, i64* %12
	%94 = extractvalue {%runtime.Type_Info_Enum_Value*, i64} %91, 1
	store i64 %94, i64* %12
	%95 = bitcast i64* %13 to %..rawptr
	%96 = call %..rawptr @mem.zero(%..rawptr %95, i64 8) noinline
	store i64 zeroinitializer, i64* %13
	store i64 -1, i64* %13
	br label %for.index.loop-13

for.index.loop-13:
	%97 = load i64, i64* %13, align 8
	%98 = add i64 %97, 1
	store i64 %98, i64* %13
	%99 = load i64, i64* %12, align 8
	%100 = icmp slt i64 %98, %99
	br i1 %100, label %for.index.body-14, label %for.index.done-20

for.index.body-14:
	%101 = load i64, i64* %13, align 8
	%102 = extractvalue {%runtime.Type_Info_Enum_Value*, i64} %91, 0
	%103 = getelementptr inbounds %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %102, i64 %101
	%104 = load %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %103, align 8
	store %runtime.Type_Info_Enum_Value %104, %runtime.Type_Info_Enum_Value* %10
	store i64 %101, i64* %11
	; IfStmt
	; v
	; ok
	%105 = load %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %10, align 8
	; cast - union_cast
	%106 = bitcast {i16, i8}* %16 to %..rawptr
	%107 = call %..rawptr @mem.zero(%..rawptr %106, i64 4) noinline
	store {i16, i8} zeroinitializer, {i16, i8}* %16
	%108 = getelementptr inbounds %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %10, i64 0, i32 2 ; UnionTagPtr
	%109 = load i64, i64* %108, align 8
	%110 = icmp eq i64 %109, 3
	br i1 %110, label %union_cast.ok-15, label %union_cast.end-16

union_cast.ok-15:
	%111 = getelementptr inbounds {i16, i8}, {i16, i8}* %16, i64 0, i32 0
	%112 = getelementptr inbounds {i16, i8}, {i16, i8}* %16, i64 0, i32 1
	%113 = bitcast %runtime.Type_Info_Enum_Value* %10 to i16*
	%114 = load i16, i16* %113, align 2
	store i16 %114, i16* %111
	store i8 1, i8* %112
	br label %union_cast.end-16

union_cast.end-16:
	%115 = load {i16, i8}, {i16, i8}* %16, align 2
	%116 = extractvalue {i16, i8} %115, 0
	%117 = extractvalue {i16, i8} %115, 1
	store i16 %116, i16* %14
	store i8 %117, i8* %15
	%118 = load i8, i8* %15, align 1
	%119 = trunc i8 %118 to i1
	br i1 %119, label %cmp.and-17, label %if.done-19

cmp.and-17:
	%120 = load i16, i16* %14, align 2
	%121 = load i16, i16* %0, align 2
	%122 = icmp eq i16 %120, %121
	%123 = zext i1 %122 to i8
	%124 = trunc i8 %123 to i1
	br i1 %124, label %if.then-18, label %if.done-19

if.then-18:
	; ReturnStmt
	; IndexExpr
	; SelectorExpr
	%125 = getelementptr inbounds %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %e, i64 0, i32 1
	%126 = load {%..string*, i64}, {%..string*, i64}* %125, align 8
	%127 = extractvalue {%..string*, i64} %126, 0
	%128 = load i64, i64* %11, align 8
	%129 = extractvalue {%..string*, i64} %126, 1
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @str$112, i64 0, i32 0), i64 25}, i64 753, i64 22, i64 %128, i64 %129)
	%130 = getelementptr inbounds %..string, %..string* %127, i64 %128
	%131 = load %..string, %..string* %130, align 8
	%132 = bitcast {%..string, i8}* %17 to %..rawptr
	%133 = call %..rawptr @mem.zero(%..rawptr %132, i64 24) noinline
	store {%..string, i8} zeroinitializer, {%..string, i8}* %17
	%134 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %17, i64 0, i32 0
	store %..string %131, %..string* %134
	%135 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %17, i64 0, i32 1
	store i8 1, i8* %135
	%136 = load {%..string, i8}, {%..string, i8}* %17, align 8
	ret {%..string, i8} %136

if.done-19:
	br label %for.index.loop-13

for.index.done-20:
	br label %if.done-21

if.done-21:
	; ReturnStmt
	%137 = bitcast {%..string, i8}* %18 to %..rawptr
	%138 = call %..rawptr @mem.zero(%..rawptr %137, i64 24) noinline
	store {%..string, i8} zeroinitializer, {%..string, i8}* %18
	%139 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %18, i64 0, i32 0
	store %..string zeroinitializer, %..string* %139
	%140 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %18, i64 0, i32 1
	store i8 0, i8* %140
	%141 = load {%..string, i8}, {%..string, i8}* %18, align 8
	ret {%..string, i8} %141
}

define {%..string, i8} @fmt.enum_value_to_string.get_str-3(i32 %i, %runtime.Type_Info_Enum* %e, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca i32, align 16
	%1 = alloca %runtime.Type_Info_Enum_Value, align 16
	%2 = alloca i64, align 16
	%3 = alloca i64, align 16
	%4 = alloca i64, align 16
	%5 = alloca i32, align 16
	%6 = alloca i8, align 16
	%7 = alloca {i32, i8}, align 16
	%8 = alloca {%..string, i8}, align 16
	%9 = alloca {%..string, i8}, align 16
	%10 = alloca %runtime.Type_Info_Enum_Value, align 16
	%11 = alloca i64, align 16
	%12 = alloca i64, align 16
	%13 = alloca i64, align 16
	%14 = alloca i32, align 16
	%15 = alloca i8, align 16
	%16 = alloca {i32, i8}, align 16
	%17 = alloca {%..string, i8}, align 16
	%18 = alloca {%..string, i8}, align 16
	store i32 %i, i32* %0
	%19 = load %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %e, align 8
	; IfStmt
	; SelectorExpr
	; SelectorExpr
	%20 = getelementptr inbounds %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %e, i64 0, i32 0
	%21 = load %runtime.Type_Info*, %runtime.Type_Info** %20, align 8
	%22 = call i8 @types.is_string(%runtime.Type_Info* %21, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%23 = trunc i8 %22 to i1
	br i1 %23, label %if.then-1, label %if.else-10

if.then-1:
	; RangeStmt
	; val
	%24 = bitcast %runtime.Type_Info_Enum_Value* %1 to %..rawptr
	%25 = call %..rawptr @mem.zero(%..rawptr %24, i64 16) noinline
	store %runtime.Type_Info_Enum_Value zeroinitializer, %runtime.Type_Info_Enum_Value* %1
	; idx
	%26 = bitcast i64* %2 to %..rawptr
	%27 = call %..rawptr @mem.zero(%..rawptr %26, i64 8) noinline
	store i64 zeroinitializer, i64* %2
	; SelectorExpr
	%28 = getelementptr inbounds %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %e, i64 0, i32 2
	%29 = load {%runtime.Type_Info_Enum_Value*, i64}, {%runtime.Type_Info_Enum_Value*, i64}* %28, align 8
	%30 = bitcast i64* %3 to %..rawptr
	%31 = call %..rawptr @mem.zero(%..rawptr %30, i64 8) noinline
	store i64 zeroinitializer, i64* %3
	%32 = extractvalue {%runtime.Type_Info_Enum_Value*, i64} %29, 1
	store i64 %32, i64* %3
	%33 = bitcast i64* %4 to %..rawptr
	%34 = call %..rawptr @mem.zero(%..rawptr %33, i64 8) noinline
	store i64 zeroinitializer, i64* %4
	store i64 -1, i64* %4
	br label %for.index.loop-2

for.index.loop-2:
	%35 = load i64, i64* %4, align 8
	%36 = add i64 %35, 1
	store i64 %36, i64* %4
	%37 = load i64, i64* %3, align 8
	%38 = icmp slt i64 %36, %37
	br i1 %38, label %for.index.body-3, label %for.index.done-9

for.index.body-3:
	%39 = load i64, i64* %4, align 8
	%40 = extractvalue {%runtime.Type_Info_Enum_Value*, i64} %29, 0
	%41 = getelementptr inbounds %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %40, i64 %39
	%42 = load %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %41, align 8
	store %runtime.Type_Info_Enum_Value %42, %runtime.Type_Info_Enum_Value* %1
	store i64 %39, i64* %2
	; IfStmt
	; v
	; ok
	%43 = load %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %1, align 8
	; cast - union_cast
	%44 = bitcast {i32, i8}* %7 to %..rawptr
	%45 = call %..rawptr @mem.zero(%..rawptr %44, i64 8) noinline
	store {i32, i8} zeroinitializer, {i32, i8}* %7
	%46 = getelementptr inbounds %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %1, i64 0, i32 2 ; UnionTagPtr
	%47 = load i64, i64* %46, align 8
	%48 = icmp eq i64 %47, 4
	br i1 %48, label %union_cast.ok-4, label %union_cast.end-5

union_cast.ok-4:
	%49 = getelementptr inbounds {i32, i8}, {i32, i8}* %7, i64 0, i32 0
	%50 = getelementptr inbounds {i32, i8}, {i32, i8}* %7, i64 0, i32 1
	%51 = bitcast %runtime.Type_Info_Enum_Value* %1 to i32*
	%52 = load i32, i32* %51, align 4
	store i32 %52, i32* %49
	store i8 1, i8* %50
	br label %union_cast.end-5

union_cast.end-5:
	%53 = load {i32, i8}, {i32, i8}* %7, align 4
	%54 = extractvalue {i32, i8} %53, 0
	%55 = extractvalue {i32, i8} %53, 1
	store i32 %54, i32* %5
	store i8 %55, i8* %6
	%56 = load i8, i8* %6, align 1
	%57 = trunc i8 %56 to i1
	br i1 %57, label %cmp.and-6, label %if.done-8

cmp.and-6:
	%58 = load i32, i32* %5, align 4
	%59 = load i32, i32* %0, align 4
	%60 = icmp eq i32 %58, %59
	%61 = zext i1 %60 to i8
	%62 = trunc i8 %61 to i1
	br i1 %62, label %if.then-7, label %if.done-8

if.then-7:
	; ReturnStmt
	; IndexExpr
	; SelectorExpr
	%63 = getelementptr inbounds %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %e, i64 0, i32 1
	%64 = load {%..string*, i64}, {%..string*, i64}* %63, align 8
	%65 = extractvalue {%..string*, i64} %64, 0
	%66 = load i64, i64* %2, align 8
	%67 = extractvalue {%..string*, i64} %64, 1
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @str$113, i64 0, i32 0), i64 25}, i64 745, i64 22, i64 %66, i64 %67)
	%68 = getelementptr inbounds %..string, %..string* %65, i64 %66
	%69 = load %..string, %..string* %68, align 8
	%70 = bitcast {%..string, i8}* %8 to %..rawptr
	%71 = call %..rawptr @mem.zero(%..rawptr %70, i64 24) noinline
	store {%..string, i8} zeroinitializer, {%..string, i8}* %8
	%72 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %8, i64 0, i32 0
	store %..string %69, %..string* %72
	%73 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %8, i64 0, i32 1
	store i8 1, i8* %73
	%74 = load {%..string, i8}, {%..string, i8}* %8, align 8
	ret {%..string, i8} %74

if.done-8:
	br label %for.index.loop-2

for.index.done-9:
	br label %if.done-21

if.else-10:
	; IfStmt
	; SelectorExpr
	%75 = getelementptr inbounds %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %e, i64 0, i32 2
	%76 = load {%runtime.Type_Info_Enum_Value*, i64}, {%runtime.Type_Info_Enum_Value*, i64}* %75, align 8
	%77 = extractvalue {%runtime.Type_Info_Enum_Value*, i64} %76, 1
	%78 = icmp eq i64 %77, 0
	%79 = zext i1 %78 to i8
	%80 = trunc i8 %79 to i1
	br i1 %80, label %if.then-11, label %if.else-12

if.then-11:
	; ReturnStmt
	%81 = bitcast {%..string, i8}* %9 to %..rawptr
	%82 = call %..rawptr @mem.zero(%..rawptr %81, i64 24) noinline
	store {%..string, i8} zeroinitializer, {%..string, i8}* %9
	%83 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %9, i64 0, i32 0
	store %..string zeroinitializer, %..string* %83
	%84 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %9, i64 0, i32 1
	store i8 1, i8* %84
	%85 = load {%..string, i8}, {%..string, i8}* %9, align 8
	ret {%..string, i8} %85

if.else-12:
	; RangeStmt
	; val
	%86 = bitcast %runtime.Type_Info_Enum_Value* %10 to %..rawptr
	%87 = call %..rawptr @mem.zero(%..rawptr %86, i64 16) noinline
	store %runtime.Type_Info_Enum_Value zeroinitializer, %runtime.Type_Info_Enum_Value* %10
	; idx
	%88 = bitcast i64* %11 to %..rawptr
	%89 = call %..rawptr @mem.zero(%..rawptr %88, i64 8) noinline
	store i64 zeroinitializer, i64* %11
	; SelectorExpr
	%90 = getelementptr inbounds %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %e, i64 0, i32 2
	%91 = load {%runtime.Type_Info_Enum_Value*, i64}, {%runtime.Type_Info_Enum_Value*, i64}* %90, align 8
	%92 = bitcast i64* %12 to %..rawptr
	%93 = call %..rawptr @mem.zero(%..rawptr %92, i64 8) noinline
	store i64 zeroinitializer, i64* %12
	%94 = extractvalue {%runtime.Type_Info_Enum_Value*, i64} %91, 1
	store i64 %94, i64* %12
	%95 = bitcast i64* %13 to %..rawptr
	%96 = call %..rawptr @mem.zero(%..rawptr %95, i64 8) noinline
	store i64 zeroinitializer, i64* %13
	store i64 -1, i64* %13
	br label %for.index.loop-13

for.index.loop-13:
	%97 = load i64, i64* %13, align 8
	%98 = add i64 %97, 1
	store i64 %98, i64* %13
	%99 = load i64, i64* %12, align 8
	%100 = icmp slt i64 %98, %99
	br i1 %100, label %for.index.body-14, label %for.index.done-20

for.index.body-14:
	%101 = load i64, i64* %13, align 8
	%102 = extractvalue {%runtime.Type_Info_Enum_Value*, i64} %91, 0
	%103 = getelementptr inbounds %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %102, i64 %101
	%104 = load %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %103, align 8
	store %runtime.Type_Info_Enum_Value %104, %runtime.Type_Info_Enum_Value* %10
	store i64 %101, i64* %11
	; IfStmt
	; v
	; ok
	%105 = load %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %10, align 8
	; cast - union_cast
	%106 = bitcast {i32, i8}* %16 to %..rawptr
	%107 = call %..rawptr @mem.zero(%..rawptr %106, i64 8) noinline
	store {i32, i8} zeroinitializer, {i32, i8}* %16
	%108 = getelementptr inbounds %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %10, i64 0, i32 2 ; UnionTagPtr
	%109 = load i64, i64* %108, align 8
	%110 = icmp eq i64 %109, 4
	br i1 %110, label %union_cast.ok-15, label %union_cast.end-16

union_cast.ok-15:
	%111 = getelementptr inbounds {i32, i8}, {i32, i8}* %16, i64 0, i32 0
	%112 = getelementptr inbounds {i32, i8}, {i32, i8}* %16, i64 0, i32 1
	%113 = bitcast %runtime.Type_Info_Enum_Value* %10 to i32*
	%114 = load i32, i32* %113, align 4
	store i32 %114, i32* %111
	store i8 1, i8* %112
	br label %union_cast.end-16

union_cast.end-16:
	%115 = load {i32, i8}, {i32, i8}* %16, align 4
	%116 = extractvalue {i32, i8} %115, 0
	%117 = extractvalue {i32, i8} %115, 1
	store i32 %116, i32* %14
	store i8 %117, i8* %15
	%118 = load i8, i8* %15, align 1
	%119 = trunc i8 %118 to i1
	br i1 %119, label %cmp.and-17, label %if.done-19

cmp.and-17:
	%120 = load i32, i32* %14, align 4
	%121 = load i32, i32* %0, align 4
	%122 = icmp eq i32 %120, %121
	%123 = zext i1 %122 to i8
	%124 = trunc i8 %123 to i1
	br i1 %124, label %if.then-18, label %if.done-19

if.then-18:
	; ReturnStmt
	; IndexExpr
	; SelectorExpr
	%125 = getelementptr inbounds %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %e, i64 0, i32 1
	%126 = load {%..string*, i64}, {%..string*, i64}* %125, align 8
	%127 = extractvalue {%..string*, i64} %126, 0
	%128 = load i64, i64* %11, align 8
	%129 = extractvalue {%..string*, i64} %126, 1
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @str$114, i64 0, i32 0), i64 25}, i64 753, i64 22, i64 %128, i64 %129)
	%130 = getelementptr inbounds %..string, %..string* %127, i64 %128
	%131 = load %..string, %..string* %130, align 8
	%132 = bitcast {%..string, i8}* %17 to %..rawptr
	%133 = call %..rawptr @mem.zero(%..rawptr %132, i64 24) noinline
	store {%..string, i8} zeroinitializer, {%..string, i8}* %17
	%134 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %17, i64 0, i32 0
	store %..string %131, %..string* %134
	%135 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %17, i64 0, i32 1
	store i8 1, i8* %135
	%136 = load {%..string, i8}, {%..string, i8}* %17, align 8
	ret {%..string, i8} %136

if.done-19:
	br label %for.index.loop-13

for.index.done-20:
	br label %if.done-21

if.done-21:
	; ReturnStmt
	%137 = bitcast {%..string, i8}* %18 to %..rawptr
	%138 = call %..rawptr @mem.zero(%..rawptr %137, i64 24) noinline
	store {%..string, i8} zeroinitializer, {%..string, i8}* %18
	%139 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %18, i64 0, i32 0
	store %..string zeroinitializer, %..string* %139
	%140 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %18, i64 0, i32 1
	store i8 0, i8* %140
	%141 = load {%..string, i8}, {%..string, i8}* %18, align 8
	ret {%..string, i8} %141
}

define {%..string, i8} @fmt.enum_value_to_string.get_str-4(i64 %i, %runtime.Type_Info_Enum* %e, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca i64, align 16
	%1 = alloca %runtime.Type_Info_Enum_Value, align 16
	%2 = alloca i64, align 16
	%3 = alloca i64, align 16
	%4 = alloca i64, align 16
	%5 = alloca i64, align 16
	%6 = alloca i8, align 16
	%7 = alloca {i64, i8}, align 16
	%8 = alloca {%..string, i8}, align 16
	%9 = alloca {%..string, i8}, align 16
	%10 = alloca %runtime.Type_Info_Enum_Value, align 16
	%11 = alloca i64, align 16
	%12 = alloca i64, align 16
	%13 = alloca i64, align 16
	%14 = alloca i64, align 16
	%15 = alloca i8, align 16
	%16 = alloca {i64, i8}, align 16
	%17 = alloca {%..string, i8}, align 16
	%18 = alloca {%..string, i8}, align 16
	store i64 %i, i64* %0
	%19 = load %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %e, align 8
	; IfStmt
	; SelectorExpr
	; SelectorExpr
	%20 = getelementptr inbounds %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %e, i64 0, i32 0
	%21 = load %runtime.Type_Info*, %runtime.Type_Info** %20, align 8
	%22 = call i8 @types.is_string(%runtime.Type_Info* %21, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%23 = trunc i8 %22 to i1
	br i1 %23, label %if.then-1, label %if.else-10

if.then-1:
	; RangeStmt
	; val
	%24 = bitcast %runtime.Type_Info_Enum_Value* %1 to %..rawptr
	%25 = call %..rawptr @mem.zero(%..rawptr %24, i64 16) noinline
	store %runtime.Type_Info_Enum_Value zeroinitializer, %runtime.Type_Info_Enum_Value* %1
	; idx
	%26 = bitcast i64* %2 to %..rawptr
	%27 = call %..rawptr @mem.zero(%..rawptr %26, i64 8) noinline
	store i64 zeroinitializer, i64* %2
	; SelectorExpr
	%28 = getelementptr inbounds %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %e, i64 0, i32 2
	%29 = load {%runtime.Type_Info_Enum_Value*, i64}, {%runtime.Type_Info_Enum_Value*, i64}* %28, align 8
	%30 = bitcast i64* %3 to %..rawptr
	%31 = call %..rawptr @mem.zero(%..rawptr %30, i64 8) noinline
	store i64 zeroinitializer, i64* %3
	%32 = extractvalue {%runtime.Type_Info_Enum_Value*, i64} %29, 1
	store i64 %32, i64* %3
	%33 = bitcast i64* %4 to %..rawptr
	%34 = call %..rawptr @mem.zero(%..rawptr %33, i64 8) noinline
	store i64 zeroinitializer, i64* %4
	store i64 -1, i64* %4
	br label %for.index.loop-2

for.index.loop-2:
	%35 = load i64, i64* %4, align 8
	%36 = add i64 %35, 1
	store i64 %36, i64* %4
	%37 = load i64, i64* %3, align 8
	%38 = icmp slt i64 %36, %37
	br i1 %38, label %for.index.body-3, label %for.index.done-9

for.index.body-3:
	%39 = load i64, i64* %4, align 8
	%40 = extractvalue {%runtime.Type_Info_Enum_Value*, i64} %29, 0
	%41 = getelementptr inbounds %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %40, i64 %39
	%42 = load %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %41, align 8
	store %runtime.Type_Info_Enum_Value %42, %runtime.Type_Info_Enum_Value* %1
	store i64 %39, i64* %2
	; IfStmt
	; v
	; ok
	%43 = load %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %1, align 8
	; cast - union_cast
	%44 = bitcast {i64, i8}* %7 to %..rawptr
	%45 = call %..rawptr @mem.zero(%..rawptr %44, i64 16) noinline
	store {i64, i8} zeroinitializer, {i64, i8}* %7
	%46 = getelementptr inbounds %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %1, i64 0, i32 2 ; UnionTagPtr
	%47 = load i64, i64* %46, align 8
	%48 = icmp eq i64 %47, 5
	br i1 %48, label %union_cast.ok-4, label %union_cast.end-5

union_cast.ok-4:
	%49 = getelementptr inbounds {i64, i8}, {i64, i8}* %7, i64 0, i32 0
	%50 = getelementptr inbounds {i64, i8}, {i64, i8}* %7, i64 0, i32 1
	%51 = bitcast %runtime.Type_Info_Enum_Value* %1 to i64*
	%52 = load i64, i64* %51, align 8
	store i64 %52, i64* %49
	store i8 1, i8* %50
	br label %union_cast.end-5

union_cast.end-5:
	%53 = load {i64, i8}, {i64, i8}* %7, align 8
	%54 = extractvalue {i64, i8} %53, 0
	%55 = extractvalue {i64, i8} %53, 1
	store i64 %54, i64* %5
	store i8 %55, i8* %6
	%56 = load i8, i8* %6, align 1
	%57 = trunc i8 %56 to i1
	br i1 %57, label %cmp.and-6, label %if.done-8

cmp.and-6:
	%58 = load i64, i64* %5, align 8
	%59 = load i64, i64* %0, align 8
	%60 = icmp eq i64 %58, %59
	%61 = zext i1 %60 to i8
	%62 = trunc i8 %61 to i1
	br i1 %62, label %if.then-7, label %if.done-8

if.then-7:
	; ReturnStmt
	; IndexExpr
	; SelectorExpr
	%63 = getelementptr inbounds %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %e, i64 0, i32 1
	%64 = load {%..string*, i64}, {%..string*, i64}* %63, align 8
	%65 = extractvalue {%..string*, i64} %64, 0
	%66 = load i64, i64* %2, align 8
	%67 = extractvalue {%..string*, i64} %64, 1
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @str$115, i64 0, i32 0), i64 25}, i64 745, i64 22, i64 %66, i64 %67)
	%68 = getelementptr inbounds %..string, %..string* %65, i64 %66
	%69 = load %..string, %..string* %68, align 8
	%70 = bitcast {%..string, i8}* %8 to %..rawptr
	%71 = call %..rawptr @mem.zero(%..rawptr %70, i64 24) noinline
	store {%..string, i8} zeroinitializer, {%..string, i8}* %8
	%72 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %8, i64 0, i32 0
	store %..string %69, %..string* %72
	%73 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %8, i64 0, i32 1
	store i8 1, i8* %73
	%74 = load {%..string, i8}, {%..string, i8}* %8, align 8
	ret {%..string, i8} %74

if.done-8:
	br label %for.index.loop-2

for.index.done-9:
	br label %if.done-21

if.else-10:
	; IfStmt
	; SelectorExpr
	%75 = getelementptr inbounds %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %e, i64 0, i32 2
	%76 = load {%runtime.Type_Info_Enum_Value*, i64}, {%runtime.Type_Info_Enum_Value*, i64}* %75, align 8
	%77 = extractvalue {%runtime.Type_Info_Enum_Value*, i64} %76, 1
	%78 = icmp eq i64 %77, 0
	%79 = zext i1 %78 to i8
	%80 = trunc i8 %79 to i1
	br i1 %80, label %if.then-11, label %if.else-12

if.then-11:
	; ReturnStmt
	%81 = bitcast {%..string, i8}* %9 to %..rawptr
	%82 = call %..rawptr @mem.zero(%..rawptr %81, i64 24) noinline
	store {%..string, i8} zeroinitializer, {%..string, i8}* %9
	%83 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %9, i64 0, i32 0
	store %..string zeroinitializer, %..string* %83
	%84 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %9, i64 0, i32 1
	store i8 1, i8* %84
	%85 = load {%..string, i8}, {%..string, i8}* %9, align 8
	ret {%..string, i8} %85

if.else-12:
	; RangeStmt
	; val
	%86 = bitcast %runtime.Type_Info_Enum_Value* %10 to %..rawptr
	%87 = call %..rawptr @mem.zero(%..rawptr %86, i64 16) noinline
	store %runtime.Type_Info_Enum_Value zeroinitializer, %runtime.Type_Info_Enum_Value* %10
	; idx
	%88 = bitcast i64* %11 to %..rawptr
	%89 = call %..rawptr @mem.zero(%..rawptr %88, i64 8) noinline
	store i64 zeroinitializer, i64* %11
	; SelectorExpr
	%90 = getelementptr inbounds %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %e, i64 0, i32 2
	%91 = load {%runtime.Type_Info_Enum_Value*, i64}, {%runtime.Type_Info_Enum_Value*, i64}* %90, align 8
	%92 = bitcast i64* %12 to %..rawptr
	%93 = call %..rawptr @mem.zero(%..rawptr %92, i64 8) noinline
	store i64 zeroinitializer, i64* %12
	%94 = extractvalue {%runtime.Type_Info_Enum_Value*, i64} %91, 1
	store i64 %94, i64* %12
	%95 = bitcast i64* %13 to %..rawptr
	%96 = call %..rawptr @mem.zero(%..rawptr %95, i64 8) noinline
	store i64 zeroinitializer, i64* %13
	store i64 -1, i64* %13
	br label %for.index.loop-13

for.index.loop-13:
	%97 = load i64, i64* %13, align 8
	%98 = add i64 %97, 1
	store i64 %98, i64* %13
	%99 = load i64, i64* %12, align 8
	%100 = icmp slt i64 %98, %99
	br i1 %100, label %for.index.body-14, label %for.index.done-20

for.index.body-14:
	%101 = load i64, i64* %13, align 8
	%102 = extractvalue {%runtime.Type_Info_Enum_Value*, i64} %91, 0
	%103 = getelementptr inbounds %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %102, i64 %101
	%104 = load %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %103, align 8
	store %runtime.Type_Info_Enum_Value %104, %runtime.Type_Info_Enum_Value* %10
	store i64 %101, i64* %11
	; IfStmt
	; v
	; ok
	%105 = load %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %10, align 8
	; cast - union_cast
	%106 = bitcast {i64, i8}* %16 to %..rawptr
	%107 = call %..rawptr @mem.zero(%..rawptr %106, i64 16) noinline
	store {i64, i8} zeroinitializer, {i64, i8}* %16
	%108 = getelementptr inbounds %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %10, i64 0, i32 2 ; UnionTagPtr
	%109 = load i64, i64* %108, align 8
	%110 = icmp eq i64 %109, 5
	br i1 %110, label %union_cast.ok-15, label %union_cast.end-16

union_cast.ok-15:
	%111 = getelementptr inbounds {i64, i8}, {i64, i8}* %16, i64 0, i32 0
	%112 = getelementptr inbounds {i64, i8}, {i64, i8}* %16, i64 0, i32 1
	%113 = bitcast %runtime.Type_Info_Enum_Value* %10 to i64*
	%114 = load i64, i64* %113, align 8
	store i64 %114, i64* %111
	store i8 1, i8* %112
	br label %union_cast.end-16

union_cast.end-16:
	%115 = load {i64, i8}, {i64, i8}* %16, align 8
	%116 = extractvalue {i64, i8} %115, 0
	%117 = extractvalue {i64, i8} %115, 1
	store i64 %116, i64* %14
	store i8 %117, i8* %15
	%118 = load i8, i8* %15, align 1
	%119 = trunc i8 %118 to i1
	br i1 %119, label %cmp.and-17, label %if.done-19

cmp.and-17:
	%120 = load i64, i64* %14, align 8
	%121 = load i64, i64* %0, align 8
	%122 = icmp eq i64 %120, %121
	%123 = zext i1 %122 to i8
	%124 = trunc i8 %123 to i1
	br i1 %124, label %if.then-18, label %if.done-19

if.then-18:
	; ReturnStmt
	; IndexExpr
	; SelectorExpr
	%125 = getelementptr inbounds %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %e, i64 0, i32 1
	%126 = load {%..string*, i64}, {%..string*, i64}* %125, align 8
	%127 = extractvalue {%..string*, i64} %126, 0
	%128 = load i64, i64* %11, align 8
	%129 = extractvalue {%..string*, i64} %126, 1
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @str$116, i64 0, i32 0), i64 25}, i64 753, i64 22, i64 %128, i64 %129)
	%130 = getelementptr inbounds %..string, %..string* %127, i64 %128
	%131 = load %..string, %..string* %130, align 8
	%132 = bitcast {%..string, i8}* %17 to %..rawptr
	%133 = call %..rawptr @mem.zero(%..rawptr %132, i64 24) noinline
	store {%..string, i8} zeroinitializer, {%..string, i8}* %17
	%134 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %17, i64 0, i32 0
	store %..string %131, %..string* %134
	%135 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %17, i64 0, i32 1
	store i8 1, i8* %135
	%136 = load {%..string, i8}, {%..string, i8}* %17, align 8
	ret {%..string, i8} %136

if.done-19:
	br label %for.index.loop-13

for.index.done-20:
	br label %if.done-21

if.done-21:
	; ReturnStmt
	%137 = bitcast {%..string, i8}* %18 to %..rawptr
	%138 = call %..rawptr @mem.zero(%..rawptr %137, i64 24) noinline
	store {%..string, i8} zeroinitializer, {%..string, i8}* %18
	%139 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %18, i64 0, i32 0
	store %..string zeroinitializer, %..string* %139
	%140 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %18, i64 0, i32 1
	store i8 0, i8* %140
	%141 = load {%..string, i8}, {%..string, i8}* %18, align 8
	ret {%..string, i8} %141
}

define {%..string, i8} @fmt.enum_value_to_string.get_str-5(i64 %i, %runtime.Type_Info_Enum* %e, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca i64, align 16
	%1 = alloca %runtime.Type_Info_Enum_Value, align 16
	%2 = alloca i64, align 16
	%3 = alloca i64, align 16
	%4 = alloca i64, align 16
	%5 = alloca i64, align 16
	%6 = alloca i8, align 16
	%7 = alloca {i64, i8}, align 16
	%8 = alloca {%..string, i8}, align 16
	%9 = alloca {%..string, i8}, align 16
	%10 = alloca %runtime.Type_Info_Enum_Value, align 16
	%11 = alloca i64, align 16
	%12 = alloca i64, align 16
	%13 = alloca i64, align 16
	%14 = alloca i64, align 16
	%15 = alloca i8, align 16
	%16 = alloca {i64, i8}, align 16
	%17 = alloca {%..string, i8}, align 16
	%18 = alloca {%..string, i8}, align 16
	store i64 %i, i64* %0
	%19 = load %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %e, align 8
	; IfStmt
	; SelectorExpr
	; SelectorExpr
	%20 = getelementptr inbounds %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %e, i64 0, i32 0
	%21 = load %runtime.Type_Info*, %runtime.Type_Info** %20, align 8
	%22 = call i8 @types.is_string(%runtime.Type_Info* %21, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%23 = trunc i8 %22 to i1
	br i1 %23, label %if.then-1, label %if.else-10

if.then-1:
	; RangeStmt
	; val
	%24 = bitcast %runtime.Type_Info_Enum_Value* %1 to %..rawptr
	%25 = call %..rawptr @mem.zero(%..rawptr %24, i64 16) noinline
	store %runtime.Type_Info_Enum_Value zeroinitializer, %runtime.Type_Info_Enum_Value* %1
	; idx
	%26 = bitcast i64* %2 to %..rawptr
	%27 = call %..rawptr @mem.zero(%..rawptr %26, i64 8) noinline
	store i64 zeroinitializer, i64* %2
	; SelectorExpr
	%28 = getelementptr inbounds %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %e, i64 0, i32 2
	%29 = load {%runtime.Type_Info_Enum_Value*, i64}, {%runtime.Type_Info_Enum_Value*, i64}* %28, align 8
	%30 = bitcast i64* %3 to %..rawptr
	%31 = call %..rawptr @mem.zero(%..rawptr %30, i64 8) noinline
	store i64 zeroinitializer, i64* %3
	%32 = extractvalue {%runtime.Type_Info_Enum_Value*, i64} %29, 1
	store i64 %32, i64* %3
	%33 = bitcast i64* %4 to %..rawptr
	%34 = call %..rawptr @mem.zero(%..rawptr %33, i64 8) noinline
	store i64 zeroinitializer, i64* %4
	store i64 -1, i64* %4
	br label %for.index.loop-2

for.index.loop-2:
	%35 = load i64, i64* %4, align 8
	%36 = add i64 %35, 1
	store i64 %36, i64* %4
	%37 = load i64, i64* %3, align 8
	%38 = icmp slt i64 %36, %37
	br i1 %38, label %for.index.body-3, label %for.index.done-9

for.index.body-3:
	%39 = load i64, i64* %4, align 8
	%40 = extractvalue {%runtime.Type_Info_Enum_Value*, i64} %29, 0
	%41 = getelementptr inbounds %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %40, i64 %39
	%42 = load %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %41, align 8
	store %runtime.Type_Info_Enum_Value %42, %runtime.Type_Info_Enum_Value* %1
	store i64 %39, i64* %2
	; IfStmt
	; v
	; ok
	%43 = load %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %1, align 8
	; cast - union_cast
	%44 = bitcast {i64, i8}* %7 to %..rawptr
	%45 = call %..rawptr @mem.zero(%..rawptr %44, i64 16) noinline
	store {i64, i8} zeroinitializer, {i64, i8}* %7
	%46 = getelementptr inbounds %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %1, i64 0, i32 2 ; UnionTagPtr
	%47 = load i64, i64* %46, align 8
	%48 = icmp eq i64 %47, 6
	br i1 %48, label %union_cast.ok-4, label %union_cast.end-5

union_cast.ok-4:
	%49 = getelementptr inbounds {i64, i8}, {i64, i8}* %7, i64 0, i32 0
	%50 = getelementptr inbounds {i64, i8}, {i64, i8}* %7, i64 0, i32 1
	%51 = bitcast %runtime.Type_Info_Enum_Value* %1 to i64*
	%52 = load i64, i64* %51, align 8
	store i64 %52, i64* %49
	store i8 1, i8* %50
	br label %union_cast.end-5

union_cast.end-5:
	%53 = load {i64, i8}, {i64, i8}* %7, align 8
	%54 = extractvalue {i64, i8} %53, 0
	%55 = extractvalue {i64, i8} %53, 1
	store i64 %54, i64* %5
	store i8 %55, i8* %6
	%56 = load i8, i8* %6, align 1
	%57 = trunc i8 %56 to i1
	br i1 %57, label %cmp.and-6, label %if.done-8

cmp.and-6:
	%58 = load i64, i64* %5, align 8
	%59 = load i64, i64* %0, align 8
	%60 = icmp eq i64 %58, %59
	%61 = zext i1 %60 to i8
	%62 = trunc i8 %61 to i1
	br i1 %62, label %if.then-7, label %if.done-8

if.then-7:
	; ReturnStmt
	; IndexExpr
	; SelectorExpr
	%63 = getelementptr inbounds %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %e, i64 0, i32 1
	%64 = load {%..string*, i64}, {%..string*, i64}* %63, align 8
	%65 = extractvalue {%..string*, i64} %64, 0
	%66 = load i64, i64* %2, align 8
	%67 = extractvalue {%..string*, i64} %64, 1
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @str$117, i64 0, i32 0), i64 25}, i64 745, i64 22, i64 %66, i64 %67)
	%68 = getelementptr inbounds %..string, %..string* %65, i64 %66
	%69 = load %..string, %..string* %68, align 8
	%70 = bitcast {%..string, i8}* %8 to %..rawptr
	%71 = call %..rawptr @mem.zero(%..rawptr %70, i64 24) noinline
	store {%..string, i8} zeroinitializer, {%..string, i8}* %8
	%72 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %8, i64 0, i32 0
	store %..string %69, %..string* %72
	%73 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %8, i64 0, i32 1
	store i8 1, i8* %73
	%74 = load {%..string, i8}, {%..string, i8}* %8, align 8
	ret {%..string, i8} %74

if.done-8:
	br label %for.index.loop-2

for.index.done-9:
	br label %if.done-21

if.else-10:
	; IfStmt
	; SelectorExpr
	%75 = getelementptr inbounds %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %e, i64 0, i32 2
	%76 = load {%runtime.Type_Info_Enum_Value*, i64}, {%runtime.Type_Info_Enum_Value*, i64}* %75, align 8
	%77 = extractvalue {%runtime.Type_Info_Enum_Value*, i64} %76, 1
	%78 = icmp eq i64 %77, 0
	%79 = zext i1 %78 to i8
	%80 = trunc i8 %79 to i1
	br i1 %80, label %if.then-11, label %if.else-12

if.then-11:
	; ReturnStmt
	%81 = bitcast {%..string, i8}* %9 to %..rawptr
	%82 = call %..rawptr @mem.zero(%..rawptr %81, i64 24) noinline
	store {%..string, i8} zeroinitializer, {%..string, i8}* %9
	%83 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %9, i64 0, i32 0
	store %..string zeroinitializer, %..string* %83
	%84 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %9, i64 0, i32 1
	store i8 1, i8* %84
	%85 = load {%..string, i8}, {%..string, i8}* %9, align 8
	ret {%..string, i8} %85

if.else-12:
	; RangeStmt
	; val
	%86 = bitcast %runtime.Type_Info_Enum_Value* %10 to %..rawptr
	%87 = call %..rawptr @mem.zero(%..rawptr %86, i64 16) noinline
	store %runtime.Type_Info_Enum_Value zeroinitializer, %runtime.Type_Info_Enum_Value* %10
	; idx
	%88 = bitcast i64* %11 to %..rawptr
	%89 = call %..rawptr @mem.zero(%..rawptr %88, i64 8) noinline
	store i64 zeroinitializer, i64* %11
	; SelectorExpr
	%90 = getelementptr inbounds %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %e, i64 0, i32 2
	%91 = load {%runtime.Type_Info_Enum_Value*, i64}, {%runtime.Type_Info_Enum_Value*, i64}* %90, align 8
	%92 = bitcast i64* %12 to %..rawptr
	%93 = call %..rawptr @mem.zero(%..rawptr %92, i64 8) noinline
	store i64 zeroinitializer, i64* %12
	%94 = extractvalue {%runtime.Type_Info_Enum_Value*, i64} %91, 1
	store i64 %94, i64* %12
	%95 = bitcast i64* %13 to %..rawptr
	%96 = call %..rawptr @mem.zero(%..rawptr %95, i64 8) noinline
	store i64 zeroinitializer, i64* %13
	store i64 -1, i64* %13
	br label %for.index.loop-13

for.index.loop-13:
	%97 = load i64, i64* %13, align 8
	%98 = add i64 %97, 1
	store i64 %98, i64* %13
	%99 = load i64, i64* %12, align 8
	%100 = icmp slt i64 %98, %99
	br i1 %100, label %for.index.body-14, label %for.index.done-20

for.index.body-14:
	%101 = load i64, i64* %13, align 8
	%102 = extractvalue {%runtime.Type_Info_Enum_Value*, i64} %91, 0
	%103 = getelementptr inbounds %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %102, i64 %101
	%104 = load %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %103, align 8
	store %runtime.Type_Info_Enum_Value %104, %runtime.Type_Info_Enum_Value* %10
	store i64 %101, i64* %11
	; IfStmt
	; v
	; ok
	%105 = load %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %10, align 8
	; cast - union_cast
	%106 = bitcast {i64, i8}* %16 to %..rawptr
	%107 = call %..rawptr @mem.zero(%..rawptr %106, i64 16) noinline
	store {i64, i8} zeroinitializer, {i64, i8}* %16
	%108 = getelementptr inbounds %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %10, i64 0, i32 2 ; UnionTagPtr
	%109 = load i64, i64* %108, align 8
	%110 = icmp eq i64 %109, 6
	br i1 %110, label %union_cast.ok-15, label %union_cast.end-16

union_cast.ok-15:
	%111 = getelementptr inbounds {i64, i8}, {i64, i8}* %16, i64 0, i32 0
	%112 = getelementptr inbounds {i64, i8}, {i64, i8}* %16, i64 0, i32 1
	%113 = bitcast %runtime.Type_Info_Enum_Value* %10 to i64*
	%114 = load i64, i64* %113, align 8
	store i64 %114, i64* %111
	store i8 1, i8* %112
	br label %union_cast.end-16

union_cast.end-16:
	%115 = load {i64, i8}, {i64, i8}* %16, align 8
	%116 = extractvalue {i64, i8} %115, 0
	%117 = extractvalue {i64, i8} %115, 1
	store i64 %116, i64* %14
	store i8 %117, i8* %15
	%118 = load i8, i8* %15, align 1
	%119 = trunc i8 %118 to i1
	br i1 %119, label %cmp.and-17, label %if.done-19

cmp.and-17:
	%120 = load i64, i64* %14, align 8
	%121 = load i64, i64* %0, align 8
	%122 = icmp eq i64 %120, %121
	%123 = zext i1 %122 to i8
	%124 = trunc i8 %123 to i1
	br i1 %124, label %if.then-18, label %if.done-19

if.then-18:
	; ReturnStmt
	; IndexExpr
	; SelectorExpr
	%125 = getelementptr inbounds %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %e, i64 0, i32 1
	%126 = load {%..string*, i64}, {%..string*, i64}* %125, align 8
	%127 = extractvalue {%..string*, i64} %126, 0
	%128 = load i64, i64* %11, align 8
	%129 = extractvalue {%..string*, i64} %126, 1
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @str$118, i64 0, i32 0), i64 25}, i64 753, i64 22, i64 %128, i64 %129)
	%130 = getelementptr inbounds %..string, %..string* %127, i64 %128
	%131 = load %..string, %..string* %130, align 8
	%132 = bitcast {%..string, i8}* %17 to %..rawptr
	%133 = call %..rawptr @mem.zero(%..rawptr %132, i64 24) noinline
	store {%..string, i8} zeroinitializer, {%..string, i8}* %17
	%134 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %17, i64 0, i32 0
	store %..string %131, %..string* %134
	%135 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %17, i64 0, i32 1
	store i8 1, i8* %135
	%136 = load {%..string, i8}, {%..string, i8}* %17, align 8
	ret {%..string, i8} %136

if.done-19:
	br label %for.index.loop-13

for.index.done-20:
	br label %if.done-21

if.done-21:
	; ReturnStmt
	%137 = bitcast {%..string, i8}* %18 to %..rawptr
	%138 = call %..rawptr @mem.zero(%..rawptr %137, i64 24) noinline
	store {%..string, i8} zeroinitializer, {%..string, i8}* %18
	%139 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %18, i64 0, i32 0
	store %..string zeroinitializer, %..string* %139
	%140 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %18, i64 0, i32 1
	store i8 0, i8* %140
	%141 = load {%..string, i8}, {%..string, i8}* %18, align 8
	ret {%..string, i8} %141
}

define {%..string, i8} @fmt.enum_value_to_string.get_str-6(i8 %i, %runtime.Type_Info_Enum* %e, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca i8, align 16
	%1 = alloca %runtime.Type_Info_Enum_Value, align 16
	%2 = alloca i64, align 16
	%3 = alloca i64, align 16
	%4 = alloca i64, align 16
	%5 = alloca i8, align 16
	%6 = alloca i8, align 16
	%7 = alloca {i8, i8}, align 16
	%8 = alloca {%..string, i8}, align 16
	%9 = alloca {%..string, i8}, align 16
	%10 = alloca %runtime.Type_Info_Enum_Value, align 16
	%11 = alloca i64, align 16
	%12 = alloca i64, align 16
	%13 = alloca i64, align 16
	%14 = alloca i8, align 16
	%15 = alloca i8, align 16
	%16 = alloca {i8, i8}, align 16
	%17 = alloca {%..string, i8}, align 16
	%18 = alloca {%..string, i8}, align 16
	store i8 %i, i8* %0
	%19 = load %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %e, align 8
	; IfStmt
	; SelectorExpr
	; SelectorExpr
	%20 = getelementptr inbounds %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %e, i64 0, i32 0
	%21 = load %runtime.Type_Info*, %runtime.Type_Info** %20, align 8
	%22 = call i8 @types.is_string(%runtime.Type_Info* %21, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%23 = trunc i8 %22 to i1
	br i1 %23, label %if.then-1, label %if.else-10

if.then-1:
	; RangeStmt
	; val
	%24 = bitcast %runtime.Type_Info_Enum_Value* %1 to %..rawptr
	%25 = call %..rawptr @mem.zero(%..rawptr %24, i64 16) noinline
	store %runtime.Type_Info_Enum_Value zeroinitializer, %runtime.Type_Info_Enum_Value* %1
	; idx
	%26 = bitcast i64* %2 to %..rawptr
	%27 = call %..rawptr @mem.zero(%..rawptr %26, i64 8) noinline
	store i64 zeroinitializer, i64* %2
	; SelectorExpr
	%28 = getelementptr inbounds %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %e, i64 0, i32 2
	%29 = load {%runtime.Type_Info_Enum_Value*, i64}, {%runtime.Type_Info_Enum_Value*, i64}* %28, align 8
	%30 = bitcast i64* %3 to %..rawptr
	%31 = call %..rawptr @mem.zero(%..rawptr %30, i64 8) noinline
	store i64 zeroinitializer, i64* %3
	%32 = extractvalue {%runtime.Type_Info_Enum_Value*, i64} %29, 1
	store i64 %32, i64* %3
	%33 = bitcast i64* %4 to %..rawptr
	%34 = call %..rawptr @mem.zero(%..rawptr %33, i64 8) noinline
	store i64 zeroinitializer, i64* %4
	store i64 -1, i64* %4
	br label %for.index.loop-2

for.index.loop-2:
	%35 = load i64, i64* %4, align 8
	%36 = add i64 %35, 1
	store i64 %36, i64* %4
	%37 = load i64, i64* %3, align 8
	%38 = icmp slt i64 %36, %37
	br i1 %38, label %for.index.body-3, label %for.index.done-9

for.index.body-3:
	%39 = load i64, i64* %4, align 8
	%40 = extractvalue {%runtime.Type_Info_Enum_Value*, i64} %29, 0
	%41 = getelementptr inbounds %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %40, i64 %39
	%42 = load %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %41, align 8
	store %runtime.Type_Info_Enum_Value %42, %runtime.Type_Info_Enum_Value* %1
	store i64 %39, i64* %2
	; IfStmt
	; v
	; ok
	%43 = load %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %1, align 8
	; cast - union_cast
	%44 = bitcast {i8, i8}* %7 to %..rawptr
	%45 = call %..rawptr @mem.zero(%..rawptr %44, i64 2) noinline
	store {i8, i8} zeroinitializer, {i8, i8}* %7
	%46 = getelementptr inbounds %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %1, i64 0, i32 2 ; UnionTagPtr
	%47 = load i64, i64* %46, align 8
	%48 = icmp eq i64 %47, 7
	br i1 %48, label %union_cast.ok-4, label %union_cast.end-5

union_cast.ok-4:
	%49 = getelementptr inbounds {i8, i8}, {i8, i8}* %7, i64 0, i32 0
	%50 = getelementptr inbounds {i8, i8}, {i8, i8}* %7, i64 0, i32 1
	%51 = bitcast %runtime.Type_Info_Enum_Value* %1 to i8*
	%52 = load i8, i8* %51, align 1
	store i8 %52, i8* %49
	store i8 1, i8* %50
	br label %union_cast.end-5

union_cast.end-5:
	%53 = load {i8, i8}, {i8, i8}* %7, align 1
	%54 = extractvalue {i8, i8} %53, 0
	%55 = extractvalue {i8, i8} %53, 1
	store i8 %54, i8* %5
	store i8 %55, i8* %6
	%56 = load i8, i8* %6, align 1
	%57 = trunc i8 %56 to i1
	br i1 %57, label %cmp.and-6, label %if.done-8

cmp.and-6:
	%58 = load i8, i8* %5, align 1
	%59 = load i8, i8* %0, align 1
	%60 = icmp eq i8 %58, %59
	%61 = zext i1 %60 to i8
	%62 = trunc i8 %61 to i1
	br i1 %62, label %if.then-7, label %if.done-8

if.then-7:
	; ReturnStmt
	; IndexExpr
	; SelectorExpr
	%63 = getelementptr inbounds %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %e, i64 0, i32 1
	%64 = load {%..string*, i64}, {%..string*, i64}* %63, align 8
	%65 = extractvalue {%..string*, i64} %64, 0
	%66 = load i64, i64* %2, align 8
	%67 = extractvalue {%..string*, i64} %64, 1
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @str$119, i64 0, i32 0), i64 25}, i64 745, i64 22, i64 %66, i64 %67)
	%68 = getelementptr inbounds %..string, %..string* %65, i64 %66
	%69 = load %..string, %..string* %68, align 8
	%70 = bitcast {%..string, i8}* %8 to %..rawptr
	%71 = call %..rawptr @mem.zero(%..rawptr %70, i64 24) noinline
	store {%..string, i8} zeroinitializer, {%..string, i8}* %8
	%72 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %8, i64 0, i32 0
	store %..string %69, %..string* %72
	%73 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %8, i64 0, i32 1
	store i8 1, i8* %73
	%74 = load {%..string, i8}, {%..string, i8}* %8, align 8
	ret {%..string, i8} %74

if.done-8:
	br label %for.index.loop-2

for.index.done-9:
	br label %if.done-21

if.else-10:
	; IfStmt
	; SelectorExpr
	%75 = getelementptr inbounds %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %e, i64 0, i32 2
	%76 = load {%runtime.Type_Info_Enum_Value*, i64}, {%runtime.Type_Info_Enum_Value*, i64}* %75, align 8
	%77 = extractvalue {%runtime.Type_Info_Enum_Value*, i64} %76, 1
	%78 = icmp eq i64 %77, 0
	%79 = zext i1 %78 to i8
	%80 = trunc i8 %79 to i1
	br i1 %80, label %if.then-11, label %if.else-12

if.then-11:
	; ReturnStmt
	%81 = bitcast {%..string, i8}* %9 to %..rawptr
	%82 = call %..rawptr @mem.zero(%..rawptr %81, i64 24) noinline
	store {%..string, i8} zeroinitializer, {%..string, i8}* %9
	%83 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %9, i64 0, i32 0
	store %..string zeroinitializer, %..string* %83
	%84 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %9, i64 0, i32 1
	store i8 1, i8* %84
	%85 = load {%..string, i8}, {%..string, i8}* %9, align 8
	ret {%..string, i8} %85

if.else-12:
	; RangeStmt
	; val
	%86 = bitcast %runtime.Type_Info_Enum_Value* %10 to %..rawptr
	%87 = call %..rawptr @mem.zero(%..rawptr %86, i64 16) noinline
	store %runtime.Type_Info_Enum_Value zeroinitializer, %runtime.Type_Info_Enum_Value* %10
	; idx
	%88 = bitcast i64* %11 to %..rawptr
	%89 = call %..rawptr @mem.zero(%..rawptr %88, i64 8) noinline
	store i64 zeroinitializer, i64* %11
	; SelectorExpr
	%90 = getelementptr inbounds %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %e, i64 0, i32 2
	%91 = load {%runtime.Type_Info_Enum_Value*, i64}, {%runtime.Type_Info_Enum_Value*, i64}* %90, align 8
	%92 = bitcast i64* %12 to %..rawptr
	%93 = call %..rawptr @mem.zero(%..rawptr %92, i64 8) noinline
	store i64 zeroinitializer, i64* %12
	%94 = extractvalue {%runtime.Type_Info_Enum_Value*, i64} %91, 1
	store i64 %94, i64* %12
	%95 = bitcast i64* %13 to %..rawptr
	%96 = call %..rawptr @mem.zero(%..rawptr %95, i64 8) noinline
	store i64 zeroinitializer, i64* %13
	store i64 -1, i64* %13
	br label %for.index.loop-13

for.index.loop-13:
	%97 = load i64, i64* %13, align 8
	%98 = add i64 %97, 1
	store i64 %98, i64* %13
	%99 = load i64, i64* %12, align 8
	%100 = icmp slt i64 %98, %99
	br i1 %100, label %for.index.body-14, label %for.index.done-20

for.index.body-14:
	%101 = load i64, i64* %13, align 8
	%102 = extractvalue {%runtime.Type_Info_Enum_Value*, i64} %91, 0
	%103 = getelementptr inbounds %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %102, i64 %101
	%104 = load %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %103, align 8
	store %runtime.Type_Info_Enum_Value %104, %runtime.Type_Info_Enum_Value* %10
	store i64 %101, i64* %11
	; IfStmt
	; v
	; ok
	%105 = load %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %10, align 8
	; cast - union_cast
	%106 = bitcast {i8, i8}* %16 to %..rawptr
	%107 = call %..rawptr @mem.zero(%..rawptr %106, i64 2) noinline
	store {i8, i8} zeroinitializer, {i8, i8}* %16
	%108 = getelementptr inbounds %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %10, i64 0, i32 2 ; UnionTagPtr
	%109 = load i64, i64* %108, align 8
	%110 = icmp eq i64 %109, 7
	br i1 %110, label %union_cast.ok-15, label %union_cast.end-16

union_cast.ok-15:
	%111 = getelementptr inbounds {i8, i8}, {i8, i8}* %16, i64 0, i32 0
	%112 = getelementptr inbounds {i8, i8}, {i8, i8}* %16, i64 0, i32 1
	%113 = bitcast %runtime.Type_Info_Enum_Value* %10 to i8*
	%114 = load i8, i8* %113, align 1
	store i8 %114, i8* %111
	store i8 1, i8* %112
	br label %union_cast.end-16

union_cast.end-16:
	%115 = load {i8, i8}, {i8, i8}* %16, align 1
	%116 = extractvalue {i8, i8} %115, 0
	%117 = extractvalue {i8, i8} %115, 1
	store i8 %116, i8* %14
	store i8 %117, i8* %15
	%118 = load i8, i8* %15, align 1
	%119 = trunc i8 %118 to i1
	br i1 %119, label %cmp.and-17, label %if.done-19

cmp.and-17:
	%120 = load i8, i8* %14, align 1
	%121 = load i8, i8* %0, align 1
	%122 = icmp eq i8 %120, %121
	%123 = zext i1 %122 to i8
	%124 = trunc i8 %123 to i1
	br i1 %124, label %if.then-18, label %if.done-19

if.then-18:
	; ReturnStmt
	; IndexExpr
	; SelectorExpr
	%125 = getelementptr inbounds %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %e, i64 0, i32 1
	%126 = load {%..string*, i64}, {%..string*, i64}* %125, align 8
	%127 = extractvalue {%..string*, i64} %126, 0
	%128 = load i64, i64* %11, align 8
	%129 = extractvalue {%..string*, i64} %126, 1
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @str$11a, i64 0, i32 0), i64 25}, i64 753, i64 22, i64 %128, i64 %129)
	%130 = getelementptr inbounds %..string, %..string* %127, i64 %128
	%131 = load %..string, %..string* %130, align 8
	%132 = bitcast {%..string, i8}* %17 to %..rawptr
	%133 = call %..rawptr @mem.zero(%..rawptr %132, i64 24) noinline
	store {%..string, i8} zeroinitializer, {%..string, i8}* %17
	%134 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %17, i64 0, i32 0
	store %..string %131, %..string* %134
	%135 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %17, i64 0, i32 1
	store i8 1, i8* %135
	%136 = load {%..string, i8}, {%..string, i8}* %17, align 8
	ret {%..string, i8} %136

if.done-19:
	br label %for.index.loop-13

for.index.done-20:
	br label %if.done-21

if.done-21:
	; ReturnStmt
	%137 = bitcast {%..string, i8}* %18 to %..rawptr
	%138 = call %..rawptr @mem.zero(%..rawptr %137, i64 24) noinline
	store {%..string, i8} zeroinitializer, {%..string, i8}* %18
	%139 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %18, i64 0, i32 0
	store %..string zeroinitializer, %..string* %139
	%140 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %18, i64 0, i32 1
	store i8 0, i8* %140
	%141 = load {%..string, i8}, {%..string, i8}* %18, align 8
	ret {%..string, i8} %141
}

define {%..string, i8} @fmt.enum_value_to_string.get_str-7(i16 %i, %runtime.Type_Info_Enum* %e, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca i16, align 16
	%1 = alloca %runtime.Type_Info_Enum_Value, align 16
	%2 = alloca i64, align 16
	%3 = alloca i64, align 16
	%4 = alloca i64, align 16
	%5 = alloca i16, align 16
	%6 = alloca i8, align 16
	%7 = alloca {i16, i8}, align 16
	%8 = alloca {%..string, i8}, align 16
	%9 = alloca {%..string, i8}, align 16
	%10 = alloca %runtime.Type_Info_Enum_Value, align 16
	%11 = alloca i64, align 16
	%12 = alloca i64, align 16
	%13 = alloca i64, align 16
	%14 = alloca i16, align 16
	%15 = alloca i8, align 16
	%16 = alloca {i16, i8}, align 16
	%17 = alloca {%..string, i8}, align 16
	%18 = alloca {%..string, i8}, align 16
	store i16 %i, i16* %0
	%19 = load %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %e, align 8
	; IfStmt
	; SelectorExpr
	; SelectorExpr
	%20 = getelementptr inbounds %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %e, i64 0, i32 0
	%21 = load %runtime.Type_Info*, %runtime.Type_Info** %20, align 8
	%22 = call i8 @types.is_string(%runtime.Type_Info* %21, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%23 = trunc i8 %22 to i1
	br i1 %23, label %if.then-1, label %if.else-10

if.then-1:
	; RangeStmt
	; val
	%24 = bitcast %runtime.Type_Info_Enum_Value* %1 to %..rawptr
	%25 = call %..rawptr @mem.zero(%..rawptr %24, i64 16) noinline
	store %runtime.Type_Info_Enum_Value zeroinitializer, %runtime.Type_Info_Enum_Value* %1
	; idx
	%26 = bitcast i64* %2 to %..rawptr
	%27 = call %..rawptr @mem.zero(%..rawptr %26, i64 8) noinline
	store i64 zeroinitializer, i64* %2
	; SelectorExpr
	%28 = getelementptr inbounds %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %e, i64 0, i32 2
	%29 = load {%runtime.Type_Info_Enum_Value*, i64}, {%runtime.Type_Info_Enum_Value*, i64}* %28, align 8
	%30 = bitcast i64* %3 to %..rawptr
	%31 = call %..rawptr @mem.zero(%..rawptr %30, i64 8) noinline
	store i64 zeroinitializer, i64* %3
	%32 = extractvalue {%runtime.Type_Info_Enum_Value*, i64} %29, 1
	store i64 %32, i64* %3
	%33 = bitcast i64* %4 to %..rawptr
	%34 = call %..rawptr @mem.zero(%..rawptr %33, i64 8) noinline
	store i64 zeroinitializer, i64* %4
	store i64 -1, i64* %4
	br label %for.index.loop-2

for.index.loop-2:
	%35 = load i64, i64* %4, align 8
	%36 = add i64 %35, 1
	store i64 %36, i64* %4
	%37 = load i64, i64* %3, align 8
	%38 = icmp slt i64 %36, %37
	br i1 %38, label %for.index.body-3, label %for.index.done-9

for.index.body-3:
	%39 = load i64, i64* %4, align 8
	%40 = extractvalue {%runtime.Type_Info_Enum_Value*, i64} %29, 0
	%41 = getelementptr inbounds %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %40, i64 %39
	%42 = load %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %41, align 8
	store %runtime.Type_Info_Enum_Value %42, %runtime.Type_Info_Enum_Value* %1
	store i64 %39, i64* %2
	; IfStmt
	; v
	; ok
	%43 = load %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %1, align 8
	; cast - union_cast
	%44 = bitcast {i16, i8}* %7 to %..rawptr
	%45 = call %..rawptr @mem.zero(%..rawptr %44, i64 4) noinline
	store {i16, i8} zeroinitializer, {i16, i8}* %7
	%46 = getelementptr inbounds %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %1, i64 0, i32 2 ; UnionTagPtr
	%47 = load i64, i64* %46, align 8
	%48 = icmp eq i64 %47, 8
	br i1 %48, label %union_cast.ok-4, label %union_cast.end-5

union_cast.ok-4:
	%49 = getelementptr inbounds {i16, i8}, {i16, i8}* %7, i64 0, i32 0
	%50 = getelementptr inbounds {i16, i8}, {i16, i8}* %7, i64 0, i32 1
	%51 = bitcast %runtime.Type_Info_Enum_Value* %1 to i16*
	%52 = load i16, i16* %51, align 2
	store i16 %52, i16* %49
	store i8 1, i8* %50
	br label %union_cast.end-5

union_cast.end-5:
	%53 = load {i16, i8}, {i16, i8}* %7, align 2
	%54 = extractvalue {i16, i8} %53, 0
	%55 = extractvalue {i16, i8} %53, 1
	store i16 %54, i16* %5
	store i8 %55, i8* %6
	%56 = load i8, i8* %6, align 1
	%57 = trunc i8 %56 to i1
	br i1 %57, label %cmp.and-6, label %if.done-8

cmp.and-6:
	%58 = load i16, i16* %5, align 2
	%59 = load i16, i16* %0, align 2
	%60 = icmp eq i16 %58, %59
	%61 = zext i1 %60 to i8
	%62 = trunc i8 %61 to i1
	br i1 %62, label %if.then-7, label %if.done-8

if.then-7:
	; ReturnStmt
	; IndexExpr
	; SelectorExpr
	%63 = getelementptr inbounds %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %e, i64 0, i32 1
	%64 = load {%..string*, i64}, {%..string*, i64}* %63, align 8
	%65 = extractvalue {%..string*, i64} %64, 0
	%66 = load i64, i64* %2, align 8
	%67 = extractvalue {%..string*, i64} %64, 1
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @str$11b, i64 0, i32 0), i64 25}, i64 745, i64 22, i64 %66, i64 %67)
	%68 = getelementptr inbounds %..string, %..string* %65, i64 %66
	%69 = load %..string, %..string* %68, align 8
	%70 = bitcast {%..string, i8}* %8 to %..rawptr
	%71 = call %..rawptr @mem.zero(%..rawptr %70, i64 24) noinline
	store {%..string, i8} zeroinitializer, {%..string, i8}* %8
	%72 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %8, i64 0, i32 0
	store %..string %69, %..string* %72
	%73 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %8, i64 0, i32 1
	store i8 1, i8* %73
	%74 = load {%..string, i8}, {%..string, i8}* %8, align 8
	ret {%..string, i8} %74

if.done-8:
	br label %for.index.loop-2

for.index.done-9:
	br label %if.done-21

if.else-10:
	; IfStmt
	; SelectorExpr
	%75 = getelementptr inbounds %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %e, i64 0, i32 2
	%76 = load {%runtime.Type_Info_Enum_Value*, i64}, {%runtime.Type_Info_Enum_Value*, i64}* %75, align 8
	%77 = extractvalue {%runtime.Type_Info_Enum_Value*, i64} %76, 1
	%78 = icmp eq i64 %77, 0
	%79 = zext i1 %78 to i8
	%80 = trunc i8 %79 to i1
	br i1 %80, label %if.then-11, label %if.else-12

if.then-11:
	; ReturnStmt
	%81 = bitcast {%..string, i8}* %9 to %..rawptr
	%82 = call %..rawptr @mem.zero(%..rawptr %81, i64 24) noinline
	store {%..string, i8} zeroinitializer, {%..string, i8}* %9
	%83 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %9, i64 0, i32 0
	store %..string zeroinitializer, %..string* %83
	%84 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %9, i64 0, i32 1
	store i8 1, i8* %84
	%85 = load {%..string, i8}, {%..string, i8}* %9, align 8
	ret {%..string, i8} %85

if.else-12:
	; RangeStmt
	; val
	%86 = bitcast %runtime.Type_Info_Enum_Value* %10 to %..rawptr
	%87 = call %..rawptr @mem.zero(%..rawptr %86, i64 16) noinline
	store %runtime.Type_Info_Enum_Value zeroinitializer, %runtime.Type_Info_Enum_Value* %10
	; idx
	%88 = bitcast i64* %11 to %..rawptr
	%89 = call %..rawptr @mem.zero(%..rawptr %88, i64 8) noinline
	store i64 zeroinitializer, i64* %11
	; SelectorExpr
	%90 = getelementptr inbounds %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %e, i64 0, i32 2
	%91 = load {%runtime.Type_Info_Enum_Value*, i64}, {%runtime.Type_Info_Enum_Value*, i64}* %90, align 8
	%92 = bitcast i64* %12 to %..rawptr
	%93 = call %..rawptr @mem.zero(%..rawptr %92, i64 8) noinline
	store i64 zeroinitializer, i64* %12
	%94 = extractvalue {%runtime.Type_Info_Enum_Value*, i64} %91, 1
	store i64 %94, i64* %12
	%95 = bitcast i64* %13 to %..rawptr
	%96 = call %..rawptr @mem.zero(%..rawptr %95, i64 8) noinline
	store i64 zeroinitializer, i64* %13
	store i64 -1, i64* %13
	br label %for.index.loop-13

for.index.loop-13:
	%97 = load i64, i64* %13, align 8
	%98 = add i64 %97, 1
	store i64 %98, i64* %13
	%99 = load i64, i64* %12, align 8
	%100 = icmp slt i64 %98, %99
	br i1 %100, label %for.index.body-14, label %for.index.done-20

for.index.body-14:
	%101 = load i64, i64* %13, align 8
	%102 = extractvalue {%runtime.Type_Info_Enum_Value*, i64} %91, 0
	%103 = getelementptr inbounds %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %102, i64 %101
	%104 = load %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %103, align 8
	store %runtime.Type_Info_Enum_Value %104, %runtime.Type_Info_Enum_Value* %10
	store i64 %101, i64* %11
	; IfStmt
	; v
	; ok
	%105 = load %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %10, align 8
	; cast - union_cast
	%106 = bitcast {i16, i8}* %16 to %..rawptr
	%107 = call %..rawptr @mem.zero(%..rawptr %106, i64 4) noinline
	store {i16, i8} zeroinitializer, {i16, i8}* %16
	%108 = getelementptr inbounds %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %10, i64 0, i32 2 ; UnionTagPtr
	%109 = load i64, i64* %108, align 8
	%110 = icmp eq i64 %109, 8
	br i1 %110, label %union_cast.ok-15, label %union_cast.end-16

union_cast.ok-15:
	%111 = getelementptr inbounds {i16, i8}, {i16, i8}* %16, i64 0, i32 0
	%112 = getelementptr inbounds {i16, i8}, {i16, i8}* %16, i64 0, i32 1
	%113 = bitcast %runtime.Type_Info_Enum_Value* %10 to i16*
	%114 = load i16, i16* %113, align 2
	store i16 %114, i16* %111
	store i8 1, i8* %112
	br label %union_cast.end-16

union_cast.end-16:
	%115 = load {i16, i8}, {i16, i8}* %16, align 2
	%116 = extractvalue {i16, i8} %115, 0
	%117 = extractvalue {i16, i8} %115, 1
	store i16 %116, i16* %14
	store i8 %117, i8* %15
	%118 = load i8, i8* %15, align 1
	%119 = trunc i8 %118 to i1
	br i1 %119, label %cmp.and-17, label %if.done-19

cmp.and-17:
	%120 = load i16, i16* %14, align 2
	%121 = load i16, i16* %0, align 2
	%122 = icmp eq i16 %120, %121
	%123 = zext i1 %122 to i8
	%124 = trunc i8 %123 to i1
	br i1 %124, label %if.then-18, label %if.done-19

if.then-18:
	; ReturnStmt
	; IndexExpr
	; SelectorExpr
	%125 = getelementptr inbounds %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %e, i64 0, i32 1
	%126 = load {%..string*, i64}, {%..string*, i64}* %125, align 8
	%127 = extractvalue {%..string*, i64} %126, 0
	%128 = load i64, i64* %11, align 8
	%129 = extractvalue {%..string*, i64} %126, 1
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @str$11c, i64 0, i32 0), i64 25}, i64 753, i64 22, i64 %128, i64 %129)
	%130 = getelementptr inbounds %..string, %..string* %127, i64 %128
	%131 = load %..string, %..string* %130, align 8
	%132 = bitcast {%..string, i8}* %17 to %..rawptr
	%133 = call %..rawptr @mem.zero(%..rawptr %132, i64 24) noinline
	store {%..string, i8} zeroinitializer, {%..string, i8}* %17
	%134 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %17, i64 0, i32 0
	store %..string %131, %..string* %134
	%135 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %17, i64 0, i32 1
	store i8 1, i8* %135
	%136 = load {%..string, i8}, {%..string, i8}* %17, align 8
	ret {%..string, i8} %136

if.done-19:
	br label %for.index.loop-13

for.index.done-20:
	br label %if.done-21

if.done-21:
	; ReturnStmt
	%137 = bitcast {%..string, i8}* %18 to %..rawptr
	%138 = call %..rawptr @mem.zero(%..rawptr %137, i64 24) noinline
	store {%..string, i8} zeroinitializer, {%..string, i8}* %18
	%139 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %18, i64 0, i32 0
	store %..string zeroinitializer, %..string* %139
	%140 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %18, i64 0, i32 1
	store i8 0, i8* %140
	%141 = load {%..string, i8}, {%..string, i8}* %18, align 8
	ret {%..string, i8} %141
}

define {%..string, i8} @fmt.enum_value_to_string.get_str-8(i32 %i, %runtime.Type_Info_Enum* %e, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca i32, align 16
	%1 = alloca %runtime.Type_Info_Enum_Value, align 16
	%2 = alloca i64, align 16
	%3 = alloca i64, align 16
	%4 = alloca i64, align 16
	%5 = alloca i32, align 16
	%6 = alloca i8, align 16
	%7 = alloca {i32, i8}, align 16
	%8 = alloca {%..string, i8}, align 16
	%9 = alloca {%..string, i8}, align 16
	%10 = alloca %runtime.Type_Info_Enum_Value, align 16
	%11 = alloca i64, align 16
	%12 = alloca i64, align 16
	%13 = alloca i64, align 16
	%14 = alloca i32, align 16
	%15 = alloca i8, align 16
	%16 = alloca {i32, i8}, align 16
	%17 = alloca {%..string, i8}, align 16
	%18 = alloca {%..string, i8}, align 16
	store i32 %i, i32* %0
	%19 = load %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %e, align 8
	; IfStmt
	; SelectorExpr
	; SelectorExpr
	%20 = getelementptr inbounds %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %e, i64 0, i32 0
	%21 = load %runtime.Type_Info*, %runtime.Type_Info** %20, align 8
	%22 = call i8 @types.is_string(%runtime.Type_Info* %21, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%23 = trunc i8 %22 to i1
	br i1 %23, label %if.then-1, label %if.else-10

if.then-1:
	; RangeStmt
	; val
	%24 = bitcast %runtime.Type_Info_Enum_Value* %1 to %..rawptr
	%25 = call %..rawptr @mem.zero(%..rawptr %24, i64 16) noinline
	store %runtime.Type_Info_Enum_Value zeroinitializer, %runtime.Type_Info_Enum_Value* %1
	; idx
	%26 = bitcast i64* %2 to %..rawptr
	%27 = call %..rawptr @mem.zero(%..rawptr %26, i64 8) noinline
	store i64 zeroinitializer, i64* %2
	; SelectorExpr
	%28 = getelementptr inbounds %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %e, i64 0, i32 2
	%29 = load {%runtime.Type_Info_Enum_Value*, i64}, {%runtime.Type_Info_Enum_Value*, i64}* %28, align 8
	%30 = bitcast i64* %3 to %..rawptr
	%31 = call %..rawptr @mem.zero(%..rawptr %30, i64 8) noinline
	store i64 zeroinitializer, i64* %3
	%32 = extractvalue {%runtime.Type_Info_Enum_Value*, i64} %29, 1
	store i64 %32, i64* %3
	%33 = bitcast i64* %4 to %..rawptr
	%34 = call %..rawptr @mem.zero(%..rawptr %33, i64 8) noinline
	store i64 zeroinitializer, i64* %4
	store i64 -1, i64* %4
	br label %for.index.loop-2

for.index.loop-2:
	%35 = load i64, i64* %4, align 8
	%36 = add i64 %35, 1
	store i64 %36, i64* %4
	%37 = load i64, i64* %3, align 8
	%38 = icmp slt i64 %36, %37
	br i1 %38, label %for.index.body-3, label %for.index.done-9

for.index.body-3:
	%39 = load i64, i64* %4, align 8
	%40 = extractvalue {%runtime.Type_Info_Enum_Value*, i64} %29, 0
	%41 = getelementptr inbounds %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %40, i64 %39
	%42 = load %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %41, align 8
	store %runtime.Type_Info_Enum_Value %42, %runtime.Type_Info_Enum_Value* %1
	store i64 %39, i64* %2
	; IfStmt
	; v
	; ok
	%43 = load %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %1, align 8
	; cast - union_cast
	%44 = bitcast {i32, i8}* %7 to %..rawptr
	%45 = call %..rawptr @mem.zero(%..rawptr %44, i64 8) noinline
	store {i32, i8} zeroinitializer, {i32, i8}* %7
	%46 = getelementptr inbounds %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %1, i64 0, i32 2 ; UnionTagPtr
	%47 = load i64, i64* %46, align 8
	%48 = icmp eq i64 %47, 9
	br i1 %48, label %union_cast.ok-4, label %union_cast.end-5

union_cast.ok-4:
	%49 = getelementptr inbounds {i32, i8}, {i32, i8}* %7, i64 0, i32 0
	%50 = getelementptr inbounds {i32, i8}, {i32, i8}* %7, i64 0, i32 1
	%51 = bitcast %runtime.Type_Info_Enum_Value* %1 to i32*
	%52 = load i32, i32* %51, align 4
	store i32 %52, i32* %49
	store i8 1, i8* %50
	br label %union_cast.end-5

union_cast.end-5:
	%53 = load {i32, i8}, {i32, i8}* %7, align 4
	%54 = extractvalue {i32, i8} %53, 0
	%55 = extractvalue {i32, i8} %53, 1
	store i32 %54, i32* %5
	store i8 %55, i8* %6
	%56 = load i8, i8* %6, align 1
	%57 = trunc i8 %56 to i1
	br i1 %57, label %cmp.and-6, label %if.done-8

cmp.and-6:
	%58 = load i32, i32* %5, align 4
	%59 = load i32, i32* %0, align 4
	%60 = icmp eq i32 %58, %59
	%61 = zext i1 %60 to i8
	%62 = trunc i8 %61 to i1
	br i1 %62, label %if.then-7, label %if.done-8

if.then-7:
	; ReturnStmt
	; IndexExpr
	; SelectorExpr
	%63 = getelementptr inbounds %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %e, i64 0, i32 1
	%64 = load {%..string*, i64}, {%..string*, i64}* %63, align 8
	%65 = extractvalue {%..string*, i64} %64, 0
	%66 = load i64, i64* %2, align 8
	%67 = extractvalue {%..string*, i64} %64, 1
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @str$11d, i64 0, i32 0), i64 25}, i64 745, i64 22, i64 %66, i64 %67)
	%68 = getelementptr inbounds %..string, %..string* %65, i64 %66
	%69 = load %..string, %..string* %68, align 8
	%70 = bitcast {%..string, i8}* %8 to %..rawptr
	%71 = call %..rawptr @mem.zero(%..rawptr %70, i64 24) noinline
	store {%..string, i8} zeroinitializer, {%..string, i8}* %8
	%72 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %8, i64 0, i32 0
	store %..string %69, %..string* %72
	%73 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %8, i64 0, i32 1
	store i8 1, i8* %73
	%74 = load {%..string, i8}, {%..string, i8}* %8, align 8
	ret {%..string, i8} %74

if.done-8:
	br label %for.index.loop-2

for.index.done-9:
	br label %if.done-21

if.else-10:
	; IfStmt
	; SelectorExpr
	%75 = getelementptr inbounds %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %e, i64 0, i32 2
	%76 = load {%runtime.Type_Info_Enum_Value*, i64}, {%runtime.Type_Info_Enum_Value*, i64}* %75, align 8
	%77 = extractvalue {%runtime.Type_Info_Enum_Value*, i64} %76, 1
	%78 = icmp eq i64 %77, 0
	%79 = zext i1 %78 to i8
	%80 = trunc i8 %79 to i1
	br i1 %80, label %if.then-11, label %if.else-12

if.then-11:
	; ReturnStmt
	%81 = bitcast {%..string, i8}* %9 to %..rawptr
	%82 = call %..rawptr @mem.zero(%..rawptr %81, i64 24) noinline
	store {%..string, i8} zeroinitializer, {%..string, i8}* %9
	%83 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %9, i64 0, i32 0
	store %..string zeroinitializer, %..string* %83
	%84 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %9, i64 0, i32 1
	store i8 1, i8* %84
	%85 = load {%..string, i8}, {%..string, i8}* %9, align 8
	ret {%..string, i8} %85

if.else-12:
	; RangeStmt
	; val
	%86 = bitcast %runtime.Type_Info_Enum_Value* %10 to %..rawptr
	%87 = call %..rawptr @mem.zero(%..rawptr %86, i64 16) noinline
	store %runtime.Type_Info_Enum_Value zeroinitializer, %runtime.Type_Info_Enum_Value* %10
	; idx
	%88 = bitcast i64* %11 to %..rawptr
	%89 = call %..rawptr @mem.zero(%..rawptr %88, i64 8) noinline
	store i64 zeroinitializer, i64* %11
	; SelectorExpr
	%90 = getelementptr inbounds %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %e, i64 0, i32 2
	%91 = load {%runtime.Type_Info_Enum_Value*, i64}, {%runtime.Type_Info_Enum_Value*, i64}* %90, align 8
	%92 = bitcast i64* %12 to %..rawptr
	%93 = call %..rawptr @mem.zero(%..rawptr %92, i64 8) noinline
	store i64 zeroinitializer, i64* %12
	%94 = extractvalue {%runtime.Type_Info_Enum_Value*, i64} %91, 1
	store i64 %94, i64* %12
	%95 = bitcast i64* %13 to %..rawptr
	%96 = call %..rawptr @mem.zero(%..rawptr %95, i64 8) noinline
	store i64 zeroinitializer, i64* %13
	store i64 -1, i64* %13
	br label %for.index.loop-13

for.index.loop-13:
	%97 = load i64, i64* %13, align 8
	%98 = add i64 %97, 1
	store i64 %98, i64* %13
	%99 = load i64, i64* %12, align 8
	%100 = icmp slt i64 %98, %99
	br i1 %100, label %for.index.body-14, label %for.index.done-20

for.index.body-14:
	%101 = load i64, i64* %13, align 8
	%102 = extractvalue {%runtime.Type_Info_Enum_Value*, i64} %91, 0
	%103 = getelementptr inbounds %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %102, i64 %101
	%104 = load %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %103, align 8
	store %runtime.Type_Info_Enum_Value %104, %runtime.Type_Info_Enum_Value* %10
	store i64 %101, i64* %11
	; IfStmt
	; v
	; ok
	%105 = load %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %10, align 8
	; cast - union_cast
	%106 = bitcast {i32, i8}* %16 to %..rawptr
	%107 = call %..rawptr @mem.zero(%..rawptr %106, i64 8) noinline
	store {i32, i8} zeroinitializer, {i32, i8}* %16
	%108 = getelementptr inbounds %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %10, i64 0, i32 2 ; UnionTagPtr
	%109 = load i64, i64* %108, align 8
	%110 = icmp eq i64 %109, 9
	br i1 %110, label %union_cast.ok-15, label %union_cast.end-16

union_cast.ok-15:
	%111 = getelementptr inbounds {i32, i8}, {i32, i8}* %16, i64 0, i32 0
	%112 = getelementptr inbounds {i32, i8}, {i32, i8}* %16, i64 0, i32 1
	%113 = bitcast %runtime.Type_Info_Enum_Value* %10 to i32*
	%114 = load i32, i32* %113, align 4
	store i32 %114, i32* %111
	store i8 1, i8* %112
	br label %union_cast.end-16

union_cast.end-16:
	%115 = load {i32, i8}, {i32, i8}* %16, align 4
	%116 = extractvalue {i32, i8} %115, 0
	%117 = extractvalue {i32, i8} %115, 1
	store i32 %116, i32* %14
	store i8 %117, i8* %15
	%118 = load i8, i8* %15, align 1
	%119 = trunc i8 %118 to i1
	br i1 %119, label %cmp.and-17, label %if.done-19

cmp.and-17:
	%120 = load i32, i32* %14, align 4
	%121 = load i32, i32* %0, align 4
	%122 = icmp eq i32 %120, %121
	%123 = zext i1 %122 to i8
	%124 = trunc i8 %123 to i1
	br i1 %124, label %if.then-18, label %if.done-19

if.then-18:
	; ReturnStmt
	; IndexExpr
	; SelectorExpr
	%125 = getelementptr inbounds %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %e, i64 0, i32 1
	%126 = load {%..string*, i64}, {%..string*, i64}* %125, align 8
	%127 = extractvalue {%..string*, i64} %126, 0
	%128 = load i64, i64* %11, align 8
	%129 = extractvalue {%..string*, i64} %126, 1
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @str$11e, i64 0, i32 0), i64 25}, i64 753, i64 22, i64 %128, i64 %129)
	%130 = getelementptr inbounds %..string, %..string* %127, i64 %128
	%131 = load %..string, %..string* %130, align 8
	%132 = bitcast {%..string, i8}* %17 to %..rawptr
	%133 = call %..rawptr @mem.zero(%..rawptr %132, i64 24) noinline
	store {%..string, i8} zeroinitializer, {%..string, i8}* %17
	%134 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %17, i64 0, i32 0
	store %..string %131, %..string* %134
	%135 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %17, i64 0, i32 1
	store i8 1, i8* %135
	%136 = load {%..string, i8}, {%..string, i8}* %17, align 8
	ret {%..string, i8} %136

if.done-19:
	br label %for.index.loop-13

for.index.done-20:
	br label %if.done-21

if.done-21:
	; ReturnStmt
	%137 = bitcast {%..string, i8}* %18 to %..rawptr
	%138 = call %..rawptr @mem.zero(%..rawptr %137, i64 24) noinline
	store {%..string, i8} zeroinitializer, {%..string, i8}* %18
	%139 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %18, i64 0, i32 0
	store %..string zeroinitializer, %..string* %139
	%140 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %18, i64 0, i32 1
	store i8 0, i8* %140
	%141 = load {%..string, i8}, {%..string, i8}* %18, align 8
	ret {%..string, i8} %141
}

define {%..string, i8} @fmt.enum_value_to_string.get_str-9(i64 %i, %runtime.Type_Info_Enum* %e, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca i64, align 16
	%1 = alloca %runtime.Type_Info_Enum_Value, align 16
	%2 = alloca i64, align 16
	%3 = alloca i64, align 16
	%4 = alloca i64, align 16
	%5 = alloca i64, align 16
	%6 = alloca i8, align 16
	%7 = alloca {i64, i8}, align 16
	%8 = alloca {%..string, i8}, align 16
	%9 = alloca {%..string, i8}, align 16
	%10 = alloca %runtime.Type_Info_Enum_Value, align 16
	%11 = alloca i64, align 16
	%12 = alloca i64, align 16
	%13 = alloca i64, align 16
	%14 = alloca i64, align 16
	%15 = alloca i8, align 16
	%16 = alloca {i64, i8}, align 16
	%17 = alloca {%..string, i8}, align 16
	%18 = alloca {%..string, i8}, align 16
	store i64 %i, i64* %0
	%19 = load %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %e, align 8
	; IfStmt
	; SelectorExpr
	; SelectorExpr
	%20 = getelementptr inbounds %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %e, i64 0, i32 0
	%21 = load %runtime.Type_Info*, %runtime.Type_Info** %20, align 8
	%22 = call i8 @types.is_string(%runtime.Type_Info* %21, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%23 = trunc i8 %22 to i1
	br i1 %23, label %if.then-1, label %if.else-10

if.then-1:
	; RangeStmt
	; val
	%24 = bitcast %runtime.Type_Info_Enum_Value* %1 to %..rawptr
	%25 = call %..rawptr @mem.zero(%..rawptr %24, i64 16) noinline
	store %runtime.Type_Info_Enum_Value zeroinitializer, %runtime.Type_Info_Enum_Value* %1
	; idx
	%26 = bitcast i64* %2 to %..rawptr
	%27 = call %..rawptr @mem.zero(%..rawptr %26, i64 8) noinline
	store i64 zeroinitializer, i64* %2
	; SelectorExpr
	%28 = getelementptr inbounds %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %e, i64 0, i32 2
	%29 = load {%runtime.Type_Info_Enum_Value*, i64}, {%runtime.Type_Info_Enum_Value*, i64}* %28, align 8
	%30 = bitcast i64* %3 to %..rawptr
	%31 = call %..rawptr @mem.zero(%..rawptr %30, i64 8) noinline
	store i64 zeroinitializer, i64* %3
	%32 = extractvalue {%runtime.Type_Info_Enum_Value*, i64} %29, 1
	store i64 %32, i64* %3
	%33 = bitcast i64* %4 to %..rawptr
	%34 = call %..rawptr @mem.zero(%..rawptr %33, i64 8) noinline
	store i64 zeroinitializer, i64* %4
	store i64 -1, i64* %4
	br label %for.index.loop-2

for.index.loop-2:
	%35 = load i64, i64* %4, align 8
	%36 = add i64 %35, 1
	store i64 %36, i64* %4
	%37 = load i64, i64* %3, align 8
	%38 = icmp slt i64 %36, %37
	br i1 %38, label %for.index.body-3, label %for.index.done-9

for.index.body-3:
	%39 = load i64, i64* %4, align 8
	%40 = extractvalue {%runtime.Type_Info_Enum_Value*, i64} %29, 0
	%41 = getelementptr inbounds %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %40, i64 %39
	%42 = load %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %41, align 8
	store %runtime.Type_Info_Enum_Value %42, %runtime.Type_Info_Enum_Value* %1
	store i64 %39, i64* %2
	; IfStmt
	; v
	; ok
	%43 = load %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %1, align 8
	; cast - union_cast
	%44 = bitcast {i64, i8}* %7 to %..rawptr
	%45 = call %..rawptr @mem.zero(%..rawptr %44, i64 16) noinline
	store {i64, i8} zeroinitializer, {i64, i8}* %7
	%46 = getelementptr inbounds %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %1, i64 0, i32 2 ; UnionTagPtr
	%47 = load i64, i64* %46, align 8
	%48 = icmp eq i64 %47, 10
	br i1 %48, label %union_cast.ok-4, label %union_cast.end-5

union_cast.ok-4:
	%49 = getelementptr inbounds {i64, i8}, {i64, i8}* %7, i64 0, i32 0
	%50 = getelementptr inbounds {i64, i8}, {i64, i8}* %7, i64 0, i32 1
	%51 = bitcast %runtime.Type_Info_Enum_Value* %1 to i64*
	%52 = load i64, i64* %51, align 8
	store i64 %52, i64* %49
	store i8 1, i8* %50
	br label %union_cast.end-5

union_cast.end-5:
	%53 = load {i64, i8}, {i64, i8}* %7, align 8
	%54 = extractvalue {i64, i8} %53, 0
	%55 = extractvalue {i64, i8} %53, 1
	store i64 %54, i64* %5
	store i8 %55, i8* %6
	%56 = load i8, i8* %6, align 1
	%57 = trunc i8 %56 to i1
	br i1 %57, label %cmp.and-6, label %if.done-8

cmp.and-6:
	%58 = load i64, i64* %5, align 8
	%59 = load i64, i64* %0, align 8
	%60 = icmp eq i64 %58, %59
	%61 = zext i1 %60 to i8
	%62 = trunc i8 %61 to i1
	br i1 %62, label %if.then-7, label %if.done-8

if.then-7:
	; ReturnStmt
	; IndexExpr
	; SelectorExpr
	%63 = getelementptr inbounds %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %e, i64 0, i32 1
	%64 = load {%..string*, i64}, {%..string*, i64}* %63, align 8
	%65 = extractvalue {%..string*, i64} %64, 0
	%66 = load i64, i64* %2, align 8
	%67 = extractvalue {%..string*, i64} %64, 1
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @str$11f, i64 0, i32 0), i64 25}, i64 745, i64 22, i64 %66, i64 %67)
	%68 = getelementptr inbounds %..string, %..string* %65, i64 %66
	%69 = load %..string, %..string* %68, align 8
	%70 = bitcast {%..string, i8}* %8 to %..rawptr
	%71 = call %..rawptr @mem.zero(%..rawptr %70, i64 24) noinline
	store {%..string, i8} zeroinitializer, {%..string, i8}* %8
	%72 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %8, i64 0, i32 0
	store %..string %69, %..string* %72
	%73 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %8, i64 0, i32 1
	store i8 1, i8* %73
	%74 = load {%..string, i8}, {%..string, i8}* %8, align 8
	ret {%..string, i8} %74

if.done-8:
	br label %for.index.loop-2

for.index.done-9:
	br label %if.done-21

if.else-10:
	; IfStmt
	; SelectorExpr
	%75 = getelementptr inbounds %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %e, i64 0, i32 2
	%76 = load {%runtime.Type_Info_Enum_Value*, i64}, {%runtime.Type_Info_Enum_Value*, i64}* %75, align 8
	%77 = extractvalue {%runtime.Type_Info_Enum_Value*, i64} %76, 1
	%78 = icmp eq i64 %77, 0
	%79 = zext i1 %78 to i8
	%80 = trunc i8 %79 to i1
	br i1 %80, label %if.then-11, label %if.else-12

if.then-11:
	; ReturnStmt
	%81 = bitcast {%..string, i8}* %9 to %..rawptr
	%82 = call %..rawptr @mem.zero(%..rawptr %81, i64 24) noinline
	store {%..string, i8} zeroinitializer, {%..string, i8}* %9
	%83 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %9, i64 0, i32 0
	store %..string zeroinitializer, %..string* %83
	%84 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %9, i64 0, i32 1
	store i8 1, i8* %84
	%85 = load {%..string, i8}, {%..string, i8}* %9, align 8
	ret {%..string, i8} %85

if.else-12:
	; RangeStmt
	; val
	%86 = bitcast %runtime.Type_Info_Enum_Value* %10 to %..rawptr
	%87 = call %..rawptr @mem.zero(%..rawptr %86, i64 16) noinline
	store %runtime.Type_Info_Enum_Value zeroinitializer, %runtime.Type_Info_Enum_Value* %10
	; idx
	%88 = bitcast i64* %11 to %..rawptr
	%89 = call %..rawptr @mem.zero(%..rawptr %88, i64 8) noinline
	store i64 zeroinitializer, i64* %11
	; SelectorExpr
	%90 = getelementptr inbounds %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %e, i64 0, i32 2
	%91 = load {%runtime.Type_Info_Enum_Value*, i64}, {%runtime.Type_Info_Enum_Value*, i64}* %90, align 8
	%92 = bitcast i64* %12 to %..rawptr
	%93 = call %..rawptr @mem.zero(%..rawptr %92, i64 8) noinline
	store i64 zeroinitializer, i64* %12
	%94 = extractvalue {%runtime.Type_Info_Enum_Value*, i64} %91, 1
	store i64 %94, i64* %12
	%95 = bitcast i64* %13 to %..rawptr
	%96 = call %..rawptr @mem.zero(%..rawptr %95, i64 8) noinline
	store i64 zeroinitializer, i64* %13
	store i64 -1, i64* %13
	br label %for.index.loop-13

for.index.loop-13:
	%97 = load i64, i64* %13, align 8
	%98 = add i64 %97, 1
	store i64 %98, i64* %13
	%99 = load i64, i64* %12, align 8
	%100 = icmp slt i64 %98, %99
	br i1 %100, label %for.index.body-14, label %for.index.done-20

for.index.body-14:
	%101 = load i64, i64* %13, align 8
	%102 = extractvalue {%runtime.Type_Info_Enum_Value*, i64} %91, 0
	%103 = getelementptr inbounds %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %102, i64 %101
	%104 = load %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %103, align 8
	store %runtime.Type_Info_Enum_Value %104, %runtime.Type_Info_Enum_Value* %10
	store i64 %101, i64* %11
	; IfStmt
	; v
	; ok
	%105 = load %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %10, align 8
	; cast - union_cast
	%106 = bitcast {i64, i8}* %16 to %..rawptr
	%107 = call %..rawptr @mem.zero(%..rawptr %106, i64 16) noinline
	store {i64, i8} zeroinitializer, {i64, i8}* %16
	%108 = getelementptr inbounds %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %10, i64 0, i32 2 ; UnionTagPtr
	%109 = load i64, i64* %108, align 8
	%110 = icmp eq i64 %109, 10
	br i1 %110, label %union_cast.ok-15, label %union_cast.end-16

union_cast.ok-15:
	%111 = getelementptr inbounds {i64, i8}, {i64, i8}* %16, i64 0, i32 0
	%112 = getelementptr inbounds {i64, i8}, {i64, i8}* %16, i64 0, i32 1
	%113 = bitcast %runtime.Type_Info_Enum_Value* %10 to i64*
	%114 = load i64, i64* %113, align 8
	store i64 %114, i64* %111
	store i8 1, i8* %112
	br label %union_cast.end-16

union_cast.end-16:
	%115 = load {i64, i8}, {i64, i8}* %16, align 8
	%116 = extractvalue {i64, i8} %115, 0
	%117 = extractvalue {i64, i8} %115, 1
	store i64 %116, i64* %14
	store i8 %117, i8* %15
	%118 = load i8, i8* %15, align 1
	%119 = trunc i8 %118 to i1
	br i1 %119, label %cmp.and-17, label %if.done-19

cmp.and-17:
	%120 = load i64, i64* %14, align 8
	%121 = load i64, i64* %0, align 8
	%122 = icmp eq i64 %120, %121
	%123 = zext i1 %122 to i8
	%124 = trunc i8 %123 to i1
	br i1 %124, label %if.then-18, label %if.done-19

if.then-18:
	; ReturnStmt
	; IndexExpr
	; SelectorExpr
	%125 = getelementptr inbounds %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %e, i64 0, i32 1
	%126 = load {%..string*, i64}, {%..string*, i64}* %125, align 8
	%127 = extractvalue {%..string*, i64} %126, 0
	%128 = load i64, i64* %11, align 8
	%129 = extractvalue {%..string*, i64} %126, 1
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @str$120, i64 0, i32 0), i64 25}, i64 753, i64 22, i64 %128, i64 %129)
	%130 = getelementptr inbounds %..string, %..string* %127, i64 %128
	%131 = load %..string, %..string* %130, align 8
	%132 = bitcast {%..string, i8}* %17 to %..rawptr
	%133 = call %..rawptr @mem.zero(%..rawptr %132, i64 24) noinline
	store {%..string, i8} zeroinitializer, {%..string, i8}* %17
	%134 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %17, i64 0, i32 0
	store %..string %131, %..string* %134
	%135 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %17, i64 0, i32 1
	store i8 1, i8* %135
	%136 = load {%..string, i8}, {%..string, i8}* %17, align 8
	ret {%..string, i8} %136

if.done-19:
	br label %for.index.loop-13

for.index.done-20:
	br label %if.done-21

if.done-21:
	; ReturnStmt
	%137 = bitcast {%..string, i8}* %18 to %..rawptr
	%138 = call %..rawptr @mem.zero(%..rawptr %137, i64 24) noinline
	store {%..string, i8} zeroinitializer, {%..string, i8}* %18
	%139 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %18, i64 0, i32 0
	store %..string zeroinitializer, %..string* %139
	%140 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %18, i64 0, i32 1
	store i8 0, i8* %140
	%141 = load {%..string, i8}, {%..string, i8}* %18, align 8
	ret {%..string, i8} %141
}

define {%..string, i8} @fmt.enum_value_to_string.get_str-10(i64 %i, %runtime.Type_Info_Enum* %e, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca i64, align 16
	%1 = alloca %runtime.Type_Info_Enum_Value, align 16
	%2 = alloca i64, align 16
	%3 = alloca i64, align 16
	%4 = alloca i64, align 16
	%5 = alloca i64, align 16
	%6 = alloca i8, align 16
	%7 = alloca {i64, i8}, align 16
	%8 = alloca {%..string, i8}, align 16
	%9 = alloca {%..string, i8}, align 16
	%10 = alloca %runtime.Type_Info_Enum_Value, align 16
	%11 = alloca i64, align 16
	%12 = alloca i64, align 16
	%13 = alloca i64, align 16
	%14 = alloca i64, align 16
	%15 = alloca i8, align 16
	%16 = alloca {i64, i8}, align 16
	%17 = alloca {%..string, i8}, align 16
	%18 = alloca {%..string, i8}, align 16
	store i64 %i, i64* %0
	%19 = load %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %e, align 8
	; IfStmt
	; SelectorExpr
	; SelectorExpr
	%20 = getelementptr inbounds %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %e, i64 0, i32 0
	%21 = load %runtime.Type_Info*, %runtime.Type_Info** %20, align 8
	%22 = call i8 @types.is_string(%runtime.Type_Info* %21, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%23 = trunc i8 %22 to i1
	br i1 %23, label %if.then-1, label %if.else-10

if.then-1:
	; RangeStmt
	; val
	%24 = bitcast %runtime.Type_Info_Enum_Value* %1 to %..rawptr
	%25 = call %..rawptr @mem.zero(%..rawptr %24, i64 16) noinline
	store %runtime.Type_Info_Enum_Value zeroinitializer, %runtime.Type_Info_Enum_Value* %1
	; idx
	%26 = bitcast i64* %2 to %..rawptr
	%27 = call %..rawptr @mem.zero(%..rawptr %26, i64 8) noinline
	store i64 zeroinitializer, i64* %2
	; SelectorExpr
	%28 = getelementptr inbounds %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %e, i64 0, i32 2
	%29 = load {%runtime.Type_Info_Enum_Value*, i64}, {%runtime.Type_Info_Enum_Value*, i64}* %28, align 8
	%30 = bitcast i64* %3 to %..rawptr
	%31 = call %..rawptr @mem.zero(%..rawptr %30, i64 8) noinline
	store i64 zeroinitializer, i64* %3
	%32 = extractvalue {%runtime.Type_Info_Enum_Value*, i64} %29, 1
	store i64 %32, i64* %3
	%33 = bitcast i64* %4 to %..rawptr
	%34 = call %..rawptr @mem.zero(%..rawptr %33, i64 8) noinline
	store i64 zeroinitializer, i64* %4
	store i64 -1, i64* %4
	br label %for.index.loop-2

for.index.loop-2:
	%35 = load i64, i64* %4, align 8
	%36 = add i64 %35, 1
	store i64 %36, i64* %4
	%37 = load i64, i64* %3, align 8
	%38 = icmp slt i64 %36, %37
	br i1 %38, label %for.index.body-3, label %for.index.done-9

for.index.body-3:
	%39 = load i64, i64* %4, align 8
	%40 = extractvalue {%runtime.Type_Info_Enum_Value*, i64} %29, 0
	%41 = getelementptr inbounds %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %40, i64 %39
	%42 = load %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %41, align 8
	store %runtime.Type_Info_Enum_Value %42, %runtime.Type_Info_Enum_Value* %1
	store i64 %39, i64* %2
	; IfStmt
	; v
	; ok
	%43 = load %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %1, align 8
	; cast - union_cast
	%44 = bitcast {i64, i8}* %7 to %..rawptr
	%45 = call %..rawptr @mem.zero(%..rawptr %44, i64 16) noinline
	store {i64, i8} zeroinitializer, {i64, i8}* %7
	%46 = getelementptr inbounds %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %1, i64 0, i32 2 ; UnionTagPtr
	%47 = load i64, i64* %46, align 8
	%48 = icmp eq i64 %47, 11
	br i1 %48, label %union_cast.ok-4, label %union_cast.end-5

union_cast.ok-4:
	%49 = getelementptr inbounds {i64, i8}, {i64, i8}* %7, i64 0, i32 0
	%50 = getelementptr inbounds {i64, i8}, {i64, i8}* %7, i64 0, i32 1
	%51 = bitcast %runtime.Type_Info_Enum_Value* %1 to i64*
	%52 = load i64, i64* %51, align 8
	store i64 %52, i64* %49
	store i8 1, i8* %50
	br label %union_cast.end-5

union_cast.end-5:
	%53 = load {i64, i8}, {i64, i8}* %7, align 8
	%54 = extractvalue {i64, i8} %53, 0
	%55 = extractvalue {i64, i8} %53, 1
	store i64 %54, i64* %5
	store i8 %55, i8* %6
	%56 = load i8, i8* %6, align 1
	%57 = trunc i8 %56 to i1
	br i1 %57, label %cmp.and-6, label %if.done-8

cmp.and-6:
	%58 = load i64, i64* %5, align 8
	%59 = load i64, i64* %0, align 8
	%60 = icmp eq i64 %58, %59
	%61 = zext i1 %60 to i8
	%62 = trunc i8 %61 to i1
	br i1 %62, label %if.then-7, label %if.done-8

if.then-7:
	; ReturnStmt
	; IndexExpr
	; SelectorExpr
	%63 = getelementptr inbounds %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %e, i64 0, i32 1
	%64 = load {%..string*, i64}, {%..string*, i64}* %63, align 8
	%65 = extractvalue {%..string*, i64} %64, 0
	%66 = load i64, i64* %2, align 8
	%67 = extractvalue {%..string*, i64} %64, 1
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @str$121, i64 0, i32 0), i64 25}, i64 745, i64 22, i64 %66, i64 %67)
	%68 = getelementptr inbounds %..string, %..string* %65, i64 %66
	%69 = load %..string, %..string* %68, align 8
	%70 = bitcast {%..string, i8}* %8 to %..rawptr
	%71 = call %..rawptr @mem.zero(%..rawptr %70, i64 24) noinline
	store {%..string, i8} zeroinitializer, {%..string, i8}* %8
	%72 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %8, i64 0, i32 0
	store %..string %69, %..string* %72
	%73 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %8, i64 0, i32 1
	store i8 1, i8* %73
	%74 = load {%..string, i8}, {%..string, i8}* %8, align 8
	ret {%..string, i8} %74

if.done-8:
	br label %for.index.loop-2

for.index.done-9:
	br label %if.done-21

if.else-10:
	; IfStmt
	; SelectorExpr
	%75 = getelementptr inbounds %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %e, i64 0, i32 2
	%76 = load {%runtime.Type_Info_Enum_Value*, i64}, {%runtime.Type_Info_Enum_Value*, i64}* %75, align 8
	%77 = extractvalue {%runtime.Type_Info_Enum_Value*, i64} %76, 1
	%78 = icmp eq i64 %77, 0
	%79 = zext i1 %78 to i8
	%80 = trunc i8 %79 to i1
	br i1 %80, label %if.then-11, label %if.else-12

if.then-11:
	; ReturnStmt
	%81 = bitcast {%..string, i8}* %9 to %..rawptr
	%82 = call %..rawptr @mem.zero(%..rawptr %81, i64 24) noinline
	store {%..string, i8} zeroinitializer, {%..string, i8}* %9
	%83 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %9, i64 0, i32 0
	store %..string zeroinitializer, %..string* %83
	%84 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %9, i64 0, i32 1
	store i8 1, i8* %84
	%85 = load {%..string, i8}, {%..string, i8}* %9, align 8
	ret {%..string, i8} %85

if.else-12:
	; RangeStmt
	; val
	%86 = bitcast %runtime.Type_Info_Enum_Value* %10 to %..rawptr
	%87 = call %..rawptr @mem.zero(%..rawptr %86, i64 16) noinline
	store %runtime.Type_Info_Enum_Value zeroinitializer, %runtime.Type_Info_Enum_Value* %10
	; idx
	%88 = bitcast i64* %11 to %..rawptr
	%89 = call %..rawptr @mem.zero(%..rawptr %88, i64 8) noinline
	store i64 zeroinitializer, i64* %11
	; SelectorExpr
	%90 = getelementptr inbounds %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %e, i64 0, i32 2
	%91 = load {%runtime.Type_Info_Enum_Value*, i64}, {%runtime.Type_Info_Enum_Value*, i64}* %90, align 8
	%92 = bitcast i64* %12 to %..rawptr
	%93 = call %..rawptr @mem.zero(%..rawptr %92, i64 8) noinline
	store i64 zeroinitializer, i64* %12
	%94 = extractvalue {%runtime.Type_Info_Enum_Value*, i64} %91, 1
	store i64 %94, i64* %12
	%95 = bitcast i64* %13 to %..rawptr
	%96 = call %..rawptr @mem.zero(%..rawptr %95, i64 8) noinline
	store i64 zeroinitializer, i64* %13
	store i64 -1, i64* %13
	br label %for.index.loop-13

for.index.loop-13:
	%97 = load i64, i64* %13, align 8
	%98 = add i64 %97, 1
	store i64 %98, i64* %13
	%99 = load i64, i64* %12, align 8
	%100 = icmp slt i64 %98, %99
	br i1 %100, label %for.index.body-14, label %for.index.done-20

for.index.body-14:
	%101 = load i64, i64* %13, align 8
	%102 = extractvalue {%runtime.Type_Info_Enum_Value*, i64} %91, 0
	%103 = getelementptr inbounds %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %102, i64 %101
	%104 = load %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %103, align 8
	store %runtime.Type_Info_Enum_Value %104, %runtime.Type_Info_Enum_Value* %10
	store i64 %101, i64* %11
	; IfStmt
	; v
	; ok
	%105 = load %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %10, align 8
	; cast - union_cast
	%106 = bitcast {i64, i8}* %16 to %..rawptr
	%107 = call %..rawptr @mem.zero(%..rawptr %106, i64 16) noinline
	store {i64, i8} zeroinitializer, {i64, i8}* %16
	%108 = getelementptr inbounds %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %10, i64 0, i32 2 ; UnionTagPtr
	%109 = load i64, i64* %108, align 8
	%110 = icmp eq i64 %109, 11
	br i1 %110, label %union_cast.ok-15, label %union_cast.end-16

union_cast.ok-15:
	%111 = getelementptr inbounds {i64, i8}, {i64, i8}* %16, i64 0, i32 0
	%112 = getelementptr inbounds {i64, i8}, {i64, i8}* %16, i64 0, i32 1
	%113 = bitcast %runtime.Type_Info_Enum_Value* %10 to i64*
	%114 = load i64, i64* %113, align 8
	store i64 %114, i64* %111
	store i8 1, i8* %112
	br label %union_cast.end-16

union_cast.end-16:
	%115 = load {i64, i8}, {i64, i8}* %16, align 8
	%116 = extractvalue {i64, i8} %115, 0
	%117 = extractvalue {i64, i8} %115, 1
	store i64 %116, i64* %14
	store i8 %117, i8* %15
	%118 = load i8, i8* %15, align 1
	%119 = trunc i8 %118 to i1
	br i1 %119, label %cmp.and-17, label %if.done-19

cmp.and-17:
	%120 = load i64, i64* %14, align 8
	%121 = load i64, i64* %0, align 8
	%122 = icmp eq i64 %120, %121
	%123 = zext i1 %122 to i8
	%124 = trunc i8 %123 to i1
	br i1 %124, label %if.then-18, label %if.done-19

if.then-18:
	; ReturnStmt
	; IndexExpr
	; SelectorExpr
	%125 = getelementptr inbounds %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %e, i64 0, i32 1
	%126 = load {%..string*, i64}, {%..string*, i64}* %125, align 8
	%127 = extractvalue {%..string*, i64} %126, 0
	%128 = load i64, i64* %11, align 8
	%129 = extractvalue {%..string*, i64} %126, 1
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @str$122, i64 0, i32 0), i64 25}, i64 753, i64 22, i64 %128, i64 %129)
	%130 = getelementptr inbounds %..string, %..string* %127, i64 %128
	%131 = load %..string, %..string* %130, align 8
	%132 = bitcast {%..string, i8}* %17 to %..rawptr
	%133 = call %..rawptr @mem.zero(%..rawptr %132, i64 24) noinline
	store {%..string, i8} zeroinitializer, {%..string, i8}* %17
	%134 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %17, i64 0, i32 0
	store %..string %131, %..string* %134
	%135 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %17, i64 0, i32 1
	store i8 1, i8* %135
	%136 = load {%..string, i8}, {%..string, i8}* %17, align 8
	ret {%..string, i8} %136

if.done-19:
	br label %for.index.loop-13

for.index.done-20:
	br label %if.done-21

if.done-21:
	; ReturnStmt
	%137 = bitcast {%..string, i8}* %18 to %..rawptr
	%138 = call %..rawptr @mem.zero(%..rawptr %137, i64 24) noinline
	store {%..string, i8} zeroinitializer, {%..string, i8}* %18
	%139 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %18, i64 0, i32 0
	store %..string zeroinitializer, %..string* %139
	%140 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %18, i64 0, i32 1
	store i8 0, i8* %140
	%141 = load {%..string, i8}, {%..string, i8}* %18, align 8
	ret {%..string, i8} %141
}

define {%..string, i8} @fmt.enum_value_to_string.get_str-11(i64 %i, %runtime.Type_Info_Enum* %e, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca i64, align 16
	%1 = alloca %runtime.Type_Info_Enum_Value, align 16
	%2 = alloca i64, align 16
	%3 = alloca i64, align 16
	%4 = alloca i64, align 16
	%5 = alloca i64, align 16
	%6 = alloca i8, align 16
	%7 = alloca {i64, i8}, align 16
	%8 = alloca {%..string, i8}, align 16
	%9 = alloca {%..string, i8}, align 16
	%10 = alloca %runtime.Type_Info_Enum_Value, align 16
	%11 = alloca i64, align 16
	%12 = alloca i64, align 16
	%13 = alloca i64, align 16
	%14 = alloca i64, align 16
	%15 = alloca i8, align 16
	%16 = alloca {i64, i8}, align 16
	%17 = alloca {%..string, i8}, align 16
	%18 = alloca {%..string, i8}, align 16
	store i64 %i, i64* %0
	%19 = load %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %e, align 8
	; IfStmt
	; SelectorExpr
	; SelectorExpr
	%20 = getelementptr inbounds %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %e, i64 0, i32 0
	%21 = load %runtime.Type_Info*, %runtime.Type_Info** %20, align 8
	%22 = call i8 @types.is_string(%runtime.Type_Info* %21, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%23 = trunc i8 %22 to i1
	br i1 %23, label %if.then-1, label %if.else-10

if.then-1:
	; RangeStmt
	; val
	%24 = bitcast %runtime.Type_Info_Enum_Value* %1 to %..rawptr
	%25 = call %..rawptr @mem.zero(%..rawptr %24, i64 16) noinline
	store %runtime.Type_Info_Enum_Value zeroinitializer, %runtime.Type_Info_Enum_Value* %1
	; idx
	%26 = bitcast i64* %2 to %..rawptr
	%27 = call %..rawptr @mem.zero(%..rawptr %26, i64 8) noinline
	store i64 zeroinitializer, i64* %2
	; SelectorExpr
	%28 = getelementptr inbounds %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %e, i64 0, i32 2
	%29 = load {%runtime.Type_Info_Enum_Value*, i64}, {%runtime.Type_Info_Enum_Value*, i64}* %28, align 8
	%30 = bitcast i64* %3 to %..rawptr
	%31 = call %..rawptr @mem.zero(%..rawptr %30, i64 8) noinline
	store i64 zeroinitializer, i64* %3
	%32 = extractvalue {%runtime.Type_Info_Enum_Value*, i64} %29, 1
	store i64 %32, i64* %3
	%33 = bitcast i64* %4 to %..rawptr
	%34 = call %..rawptr @mem.zero(%..rawptr %33, i64 8) noinline
	store i64 zeroinitializer, i64* %4
	store i64 -1, i64* %4
	br label %for.index.loop-2

for.index.loop-2:
	%35 = load i64, i64* %4, align 8
	%36 = add i64 %35, 1
	store i64 %36, i64* %4
	%37 = load i64, i64* %3, align 8
	%38 = icmp slt i64 %36, %37
	br i1 %38, label %for.index.body-3, label %for.index.done-9

for.index.body-3:
	%39 = load i64, i64* %4, align 8
	%40 = extractvalue {%runtime.Type_Info_Enum_Value*, i64} %29, 0
	%41 = getelementptr inbounds %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %40, i64 %39
	%42 = load %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %41, align 8
	store %runtime.Type_Info_Enum_Value %42, %runtime.Type_Info_Enum_Value* %1
	store i64 %39, i64* %2
	; IfStmt
	; v
	; ok
	%43 = load %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %1, align 8
	; cast - union_cast
	%44 = bitcast {i64, i8}* %7 to %..rawptr
	%45 = call %..rawptr @mem.zero(%..rawptr %44, i64 16) noinline
	store {i64, i8} zeroinitializer, {i64, i8}* %7
	%46 = getelementptr inbounds %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %1, i64 0, i32 2 ; UnionTagPtr
	%47 = load i64, i64* %46, align 8
	%48 = icmp eq i64 %47, 12
	br i1 %48, label %union_cast.ok-4, label %union_cast.end-5

union_cast.ok-4:
	%49 = getelementptr inbounds {i64, i8}, {i64, i8}* %7, i64 0, i32 0
	%50 = getelementptr inbounds {i64, i8}, {i64, i8}* %7, i64 0, i32 1
	%51 = bitcast %runtime.Type_Info_Enum_Value* %1 to i64*
	%52 = load i64, i64* %51, align 8
	store i64 %52, i64* %49
	store i8 1, i8* %50
	br label %union_cast.end-5

union_cast.end-5:
	%53 = load {i64, i8}, {i64, i8}* %7, align 8
	%54 = extractvalue {i64, i8} %53, 0
	%55 = extractvalue {i64, i8} %53, 1
	store i64 %54, i64* %5
	store i8 %55, i8* %6
	%56 = load i8, i8* %6, align 1
	%57 = trunc i8 %56 to i1
	br i1 %57, label %cmp.and-6, label %if.done-8

cmp.and-6:
	%58 = load i64, i64* %5, align 8
	%59 = load i64, i64* %0, align 8
	%60 = icmp eq i64 %58, %59
	%61 = zext i1 %60 to i8
	%62 = trunc i8 %61 to i1
	br i1 %62, label %if.then-7, label %if.done-8

if.then-7:
	; ReturnStmt
	; IndexExpr
	; SelectorExpr
	%63 = getelementptr inbounds %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %e, i64 0, i32 1
	%64 = load {%..string*, i64}, {%..string*, i64}* %63, align 8
	%65 = extractvalue {%..string*, i64} %64, 0
	%66 = load i64, i64* %2, align 8
	%67 = extractvalue {%..string*, i64} %64, 1
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @str$123, i64 0, i32 0), i64 25}, i64 745, i64 22, i64 %66, i64 %67)
	%68 = getelementptr inbounds %..string, %..string* %65, i64 %66
	%69 = load %..string, %..string* %68, align 8
	%70 = bitcast {%..string, i8}* %8 to %..rawptr
	%71 = call %..rawptr @mem.zero(%..rawptr %70, i64 24) noinline
	store {%..string, i8} zeroinitializer, {%..string, i8}* %8
	%72 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %8, i64 0, i32 0
	store %..string %69, %..string* %72
	%73 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %8, i64 0, i32 1
	store i8 1, i8* %73
	%74 = load {%..string, i8}, {%..string, i8}* %8, align 8
	ret {%..string, i8} %74

if.done-8:
	br label %for.index.loop-2

for.index.done-9:
	br label %if.done-21

if.else-10:
	; IfStmt
	; SelectorExpr
	%75 = getelementptr inbounds %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %e, i64 0, i32 2
	%76 = load {%runtime.Type_Info_Enum_Value*, i64}, {%runtime.Type_Info_Enum_Value*, i64}* %75, align 8
	%77 = extractvalue {%runtime.Type_Info_Enum_Value*, i64} %76, 1
	%78 = icmp eq i64 %77, 0
	%79 = zext i1 %78 to i8
	%80 = trunc i8 %79 to i1
	br i1 %80, label %if.then-11, label %if.else-12

if.then-11:
	; ReturnStmt
	%81 = bitcast {%..string, i8}* %9 to %..rawptr
	%82 = call %..rawptr @mem.zero(%..rawptr %81, i64 24) noinline
	store {%..string, i8} zeroinitializer, {%..string, i8}* %9
	%83 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %9, i64 0, i32 0
	store %..string zeroinitializer, %..string* %83
	%84 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %9, i64 0, i32 1
	store i8 1, i8* %84
	%85 = load {%..string, i8}, {%..string, i8}* %9, align 8
	ret {%..string, i8} %85

if.else-12:
	; RangeStmt
	; val
	%86 = bitcast %runtime.Type_Info_Enum_Value* %10 to %..rawptr
	%87 = call %..rawptr @mem.zero(%..rawptr %86, i64 16) noinline
	store %runtime.Type_Info_Enum_Value zeroinitializer, %runtime.Type_Info_Enum_Value* %10
	; idx
	%88 = bitcast i64* %11 to %..rawptr
	%89 = call %..rawptr @mem.zero(%..rawptr %88, i64 8) noinline
	store i64 zeroinitializer, i64* %11
	; SelectorExpr
	%90 = getelementptr inbounds %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %e, i64 0, i32 2
	%91 = load {%runtime.Type_Info_Enum_Value*, i64}, {%runtime.Type_Info_Enum_Value*, i64}* %90, align 8
	%92 = bitcast i64* %12 to %..rawptr
	%93 = call %..rawptr @mem.zero(%..rawptr %92, i64 8) noinline
	store i64 zeroinitializer, i64* %12
	%94 = extractvalue {%runtime.Type_Info_Enum_Value*, i64} %91, 1
	store i64 %94, i64* %12
	%95 = bitcast i64* %13 to %..rawptr
	%96 = call %..rawptr @mem.zero(%..rawptr %95, i64 8) noinline
	store i64 zeroinitializer, i64* %13
	store i64 -1, i64* %13
	br label %for.index.loop-13

for.index.loop-13:
	%97 = load i64, i64* %13, align 8
	%98 = add i64 %97, 1
	store i64 %98, i64* %13
	%99 = load i64, i64* %12, align 8
	%100 = icmp slt i64 %98, %99
	br i1 %100, label %for.index.body-14, label %for.index.done-20

for.index.body-14:
	%101 = load i64, i64* %13, align 8
	%102 = extractvalue {%runtime.Type_Info_Enum_Value*, i64} %91, 0
	%103 = getelementptr inbounds %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %102, i64 %101
	%104 = load %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %103, align 8
	store %runtime.Type_Info_Enum_Value %104, %runtime.Type_Info_Enum_Value* %10
	store i64 %101, i64* %11
	; IfStmt
	; v
	; ok
	%105 = load %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %10, align 8
	; cast - union_cast
	%106 = bitcast {i64, i8}* %16 to %..rawptr
	%107 = call %..rawptr @mem.zero(%..rawptr %106, i64 16) noinline
	store {i64, i8} zeroinitializer, {i64, i8}* %16
	%108 = getelementptr inbounds %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %10, i64 0, i32 2 ; UnionTagPtr
	%109 = load i64, i64* %108, align 8
	%110 = icmp eq i64 %109, 12
	br i1 %110, label %union_cast.ok-15, label %union_cast.end-16

union_cast.ok-15:
	%111 = getelementptr inbounds {i64, i8}, {i64, i8}* %16, i64 0, i32 0
	%112 = getelementptr inbounds {i64, i8}, {i64, i8}* %16, i64 0, i32 1
	%113 = bitcast %runtime.Type_Info_Enum_Value* %10 to i64*
	%114 = load i64, i64* %113, align 8
	store i64 %114, i64* %111
	store i8 1, i8* %112
	br label %union_cast.end-16

union_cast.end-16:
	%115 = load {i64, i8}, {i64, i8}* %16, align 8
	%116 = extractvalue {i64, i8} %115, 0
	%117 = extractvalue {i64, i8} %115, 1
	store i64 %116, i64* %14
	store i8 %117, i8* %15
	%118 = load i8, i8* %15, align 1
	%119 = trunc i8 %118 to i1
	br i1 %119, label %cmp.and-17, label %if.done-19

cmp.and-17:
	%120 = load i64, i64* %14, align 8
	%121 = load i64, i64* %0, align 8
	%122 = icmp eq i64 %120, %121
	%123 = zext i1 %122 to i8
	%124 = trunc i8 %123 to i1
	br i1 %124, label %if.then-18, label %if.done-19

if.then-18:
	; ReturnStmt
	; IndexExpr
	; SelectorExpr
	%125 = getelementptr inbounds %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %e, i64 0, i32 1
	%126 = load {%..string*, i64}, {%..string*, i64}* %125, align 8
	%127 = extractvalue {%..string*, i64} %126, 0
	%128 = load i64, i64* %11, align 8
	%129 = extractvalue {%..string*, i64} %126, 1
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @str$124, i64 0, i32 0), i64 25}, i64 753, i64 22, i64 %128, i64 %129)
	%130 = getelementptr inbounds %..string, %..string* %127, i64 %128
	%131 = load %..string, %..string* %130, align 8
	%132 = bitcast {%..string, i8}* %17 to %..rawptr
	%133 = call %..rawptr @mem.zero(%..rawptr %132, i64 24) noinline
	store {%..string, i8} zeroinitializer, {%..string, i8}* %17
	%134 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %17, i64 0, i32 0
	store %..string %131, %..string* %134
	%135 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %17, i64 0, i32 1
	store i8 1, i8* %135
	%136 = load {%..string, i8}, {%..string, i8}* %17, align 8
	ret {%..string, i8} %136

if.done-19:
	br label %for.index.loop-13

for.index.done-20:
	br label %if.done-21

if.done-21:
	; ReturnStmt
	%137 = bitcast {%..string, i8}* %18 to %..rawptr
	%138 = call %..rawptr @mem.zero(%..rawptr %137, i64 24) noinline
	store {%..string, i8} zeroinitializer, {%..string, i8}* %18
	%139 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %18, i64 0, i32 0
	store %..string zeroinitializer, %..string* %139
	%140 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %18, i64 0, i32 1
	store i8 0, i8* %140
	%141 = load {%..string, i8}, {%..string, i8}* %18, align 8
	ret {%..string, i8} %141
}

define void @fmt.fmt_enum(%fmt.Fmt_Info* %fi, %..any %v, i32 %verb, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca %fmt.Fmt_Info*, align 16
	%1 = alloca %..any, align 16
	%2 = alloca i32, align 16
	%3 = alloca %runtime.Type_Info*, align 16
	%4 = alloca %runtime.Type_Info_Enum, align 16
	%5 = alloca %..any, align 16
	%6 = alloca %runtime.Type_Info*, align 16
	%7 = alloca %..string, align 16
	%8 = alloca i8, align 16
	%9 = alloca {[0 x i64], [72 x i8], i64}, align 16
	store %fmt.Fmt_Info* %fi, %fmt.Fmt_Info** %0
	store %..any %v, %..any* %1
	store i32 %verb, i32* %2
	; IfStmt
	; SelectorExpr
	%10 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 1
	%11 = load %..typeid, %..typeid* %10, align 8
	%12 = icmp eq %..typeid %11, 0
	%13 = zext i1 %12 to i8
	%14 = trunc i8 %13 to i1
	br i1 %14, label %if.then-2, label %cmp.or-1

cmp.or-1:
	; SelectorExpr
	%15 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 0
	%16 = load %..rawptr, %..rawptr* %15, align 8
	%17 = icmp eq %..rawptr %16, zeroinitializer
	%18 = zext i1 %17 to i8
	%19 = trunc i8 %18 to i1
	br i1 %19, label %if.then-2, label %if.done-3

if.then-2:
	; SelectorExpr
	%20 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%21 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %20, i64 0
	%22 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %21, i64 0, i32 12
	%23 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %22, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %23, %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str$125, i64 0, i32 0), i64 5}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	; ReturnStmt
	ret void

if.done-3:
	; type_info
	; SelectorExpr
	%24 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 1
	%25 = load %..typeid, %..typeid* %24, align 8
	%26 = call %runtime.Type_Info* @runtime.__type_info_of(%..typeid %25)
	store %runtime.Type_Info* %26, %runtime.Type_Info** %3
	; TypeSwitchStmt
	; SelectorExpr
	%27 = load %runtime.Type_Info*, %runtime.Type_Info** %3, align 8
	%28 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %27, i64 0
	%29 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %28, i64 0, i32 3
	%30 = load {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %29, align 8
	; get union's tag
	%31 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %29, i64 0, i32 2 ; UnionTagPtr
	%32 = load i64, i64* %31, align 8
	%33 = bitcast {[0 x i64], [72 x i8], i64}* %29 to %..rawptr
	%34 = icmp eq i64 %32, 18
	br i1 %34, label %typeswitch.body-5, label %typeswitch.next-4

typeswitch.next-4:
	store {[0 x i64], [72 x i8], i64} %30, {[0 x i64], [72 x i8], i64}* %9
	%35 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%36 = load i32, i32* %2, align 4
	call void @fmt.fmt_bad_verb(%fmt.Fmt_Info* %35, i32 %36, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %typeswitch.done-15

typeswitch.body-5:
	%37 = bitcast %..rawptr %33 to %runtime.Type_Info_Enum*
	%38 = load %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %37, align 8
	store %runtime.Type_Info_Enum %38, %runtime.Type_Info_Enum* %4
	; SwitchStmt
	%39 = load i32, i32* %2, align 4
	%40 = icmp eq i32 %39, 100
	br i1 %40, label %switch.fall.body-8, label %switch.case.next-6

switch.case.next-6:
	%41 = icmp eq i32 %39, 102
	br i1 %41, label %switch.fall.body-8, label %switch.case.next-7

switch.case.next-7:
	%42 = icmp eq i32 %39, 115
	br i1 %42, label %switch.fall.body-11, label %switch.case.next-9

switch.fall.body-8:
	%43 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	; CompoundLit
	%44 = bitcast %..any* %5 to %..rawptr
	%45 = call %..rawptr @mem.zero(%..rawptr %44, i64 16) noinline
	store %..any zeroinitializer, %..any* %5
	store %..any zeroinitializer, %..any* %5
	; SelectorExpr
	%46 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 0
	%47 = load %..rawptr, %..rawptr* %46, align 8
	%48 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	store %..rawptr %47, %..rawptr* %48
	; SelectorExpr
	; SelectorExpr
	; SelectorExpr
	%49 = getelementptr inbounds %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %4, i64 0, i32 0
	%50 = load %runtime.Type_Info*, %runtime.Type_Info** %49, align 8
	%51 = call %runtime.Type_Info* @runtime.type_info_base(%runtime.Type_Info* %50)
	%52 = bitcast %runtime.Type_Info** %6 to %..rawptr
	%53 = call %..rawptr @mem.zero(%..rawptr %52, i64 8) noinline
	store %runtime.Type_Info* zeroinitializer, %runtime.Type_Info** %6
	store %runtime.Type_Info* %51, %runtime.Type_Info** %6
	%54 = load %runtime.Type_Info*, %runtime.Type_Info** %6, align 8
	%55 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %54, i64 0
	%56 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %55, i64 0, i32 2
	%57 = load %..typeid, %..typeid* %56, align 8
	%58 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	store %..typeid %57, %..typeid* %58
	%59 = load %..any, %..any* %5, align 8
	%60 = load i32, i32* %2, align 4
	call void @fmt.fmt_arg(%fmt.Fmt_Info* %43, %..any %59, i32 %60, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %switch.done-14

switch.case.next-9:
	%61 = icmp eq i32 %39, 118
	br i1 %61, label %switch.fall.body-11, label %switch.case.next-10

switch.case.next-10:
	%62 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%63 = load i32, i32* %2, align 4
	call void @fmt.fmt_bad_verb(%fmt.Fmt_Info* %62, i32 %63, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %switch.done-14

switch.fall.body-11:
	; str
	; ok
	%64 = load %..any, %..any* %1, align 8
	%65 = call {%..string, i8} @fmt.enum_value_to_string(%..any %64, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%66 = extractvalue {%..string, i8} %65, 0
	%67 = extractvalue {%..string, i8} %65, 1
	store %..string %66, %..string* %7
	store i8 %67, i8* %8
	; IfStmt
	%68 = load i8, i8* %8, align 1
	%69 = trunc i8 %68 to i1
	br i1 %69, label %if.done-13, label %if.then-12

if.then-12:
	; AssignStmt
	store %..string {i8* getelementptr inbounds ([19 x i8], [19 x i8]* @str$126, i64 0, i32 0), i64 18}, %..string* %7
	br label %if.done-13

if.done-13:
	; SelectorExpr
	%70 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%71 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %70, i64 0
	%72 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %71, i64 0, i32 12
	%73 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %72, align 8
	%74 = load %..string, %..string* %7, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %73, %..string %74, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %switch.done-14

switch.done-14:
	br label %typeswitch.done-15

typeswitch.done-15:
	ret void
}

define i64 @fmt.enum_value_to_u64(%runtime.Type_Info_Enum_Value* %ev, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca i32, align 16
	%1 = alloca i8, align 16
	%2 = alloca i16, align 16
	%3 = alloca i32, align 16
	%4 = alloca i64, align 16
	%5 = alloca i64, align 16
	%6 = alloca i8, align 16
	%7 = alloca i16, align 16
	%8 = alloca i32, align 16
	%9 = alloca i64, align 16
	%10 = alloca i64, align 16
	%11 = alloca i64, align 16
	%12 = load %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %ev, align 8
	; TypeSwitchStmt
	%13 = load %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %ev, align 8
	; get union's tag
	%14 = getelementptr inbounds %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %ev, i64 0, i32 2 ; UnionTagPtr
	%15 = load i64, i64* %14, align 8
	%16 = bitcast %runtime.Type_Info_Enum_Value* %ev to %..rawptr
	%17 = icmp eq i64 %15, 1
	br i1 %17, label %typeswitch.body-2, label %typeswitch.next-1

typeswitch.next-1:
	%18 = icmp eq i64 %15, 2
	br i1 %18, label %typeswitch.body-4, label %typeswitch.next-3

typeswitch.body-2:
	%19 = bitcast %..rawptr %16 to i32*
	%20 = load i32, i32* %19, align 4
	store i32 %20, i32* %0
	; ReturnStmt
	%21 = load i32, i32* %0, align 4
	%22 = sext i32 %21 to i64
	ret i64 %22

typeswitch.next-3:
	%23 = icmp eq i64 %15, 3
	br i1 %23, label %typeswitch.body-6, label %typeswitch.next-5

typeswitch.body-4:
	%24 = bitcast %..rawptr %16 to i8*
	%25 = load i8, i8* %24, align 1
	store i8 %25, i8* %1
	; ReturnStmt
	%26 = load i8, i8* %1, align 1
	%27 = sext i8 %26 to i64
	ret i64 %27

typeswitch.next-5:
	%28 = icmp eq i64 %15, 4
	br i1 %28, label %typeswitch.body-8, label %typeswitch.next-7

typeswitch.body-6:
	%29 = bitcast %..rawptr %16 to i16*
	%30 = load i16, i16* %29, align 2
	store i16 %30, i16* %2
	; ReturnStmt
	%31 = load i16, i16* %2, align 2
	%32 = sext i16 %31 to i64
	ret i64 %32

typeswitch.next-7:
	%33 = icmp eq i64 %15, 5
	br i1 %33, label %typeswitch.body-10, label %typeswitch.next-9

typeswitch.body-8:
	%34 = bitcast %..rawptr %16 to i32*
	%35 = load i32, i32* %34, align 4
	store i32 %35, i32* %3
	; ReturnStmt
	%36 = load i32, i32* %3, align 4
	%37 = sext i32 %36 to i64
	ret i64 %37

typeswitch.next-9:
	%38 = icmp eq i64 %15, 6
	br i1 %38, label %typeswitch.body-12, label %typeswitch.next-11

typeswitch.body-10:
	%39 = bitcast %..rawptr %16 to i64*
	%40 = load i64, i64* %39, align 8
	store i64 %40, i64* %4
	; ReturnStmt
	%41 = load i64, i64* %4, align 8
	%42 = bitcast i64 %41 to i64
	ret i64 %42

typeswitch.next-11:
	%43 = icmp eq i64 %15, 7
	br i1 %43, label %typeswitch.body-14, label %typeswitch.next-13

typeswitch.body-12:
	%44 = bitcast %..rawptr %16 to i64*
	%45 = load i64, i64* %44, align 8
	store i64 %45, i64* %5
	; ReturnStmt
	%46 = load i64, i64* %5, align 8
	%47 = bitcast i64 %46 to i64
	ret i64 %47

typeswitch.next-13:
	%48 = icmp eq i64 %15, 8
	br i1 %48, label %typeswitch.body-16, label %typeswitch.next-15

typeswitch.body-14:
	%49 = bitcast %..rawptr %16 to i8*
	%50 = load i8, i8* %49, align 1
	store i8 %50, i8* %6
	; ReturnStmt
	%51 = load i8, i8* %6, align 1
	%52 = zext i8 %51 to i64
	ret i64 %52

typeswitch.next-15:
	%53 = icmp eq i64 %15, 9
	br i1 %53, label %typeswitch.body-18, label %typeswitch.next-17

typeswitch.body-16:
	%54 = bitcast %..rawptr %16 to i16*
	%55 = load i16, i16* %54, align 2
	store i16 %55, i16* %7
	; ReturnStmt
	%56 = load i16, i16* %7, align 2
	%57 = zext i16 %56 to i64
	ret i64 %57

typeswitch.next-17:
	%58 = icmp eq i64 %15, 10
	br i1 %58, label %typeswitch.body-20, label %typeswitch.next-19

typeswitch.body-18:
	%59 = bitcast %..rawptr %16 to i32*
	%60 = load i32, i32* %59, align 4
	store i32 %60, i32* %8
	; ReturnStmt
	%61 = load i32, i32* %8, align 4
	%62 = zext i32 %61 to i64
	ret i64 %62

typeswitch.next-19:
	%63 = icmp eq i64 %15, 11
	br i1 %63, label %typeswitch.body-22, label %typeswitch.next-21

typeswitch.body-20:
	%64 = bitcast %..rawptr %16 to i64*
	%65 = load i64, i64* %64, align 8
	store i64 %65, i64* %9
	; ReturnStmt
	%66 = load i64, i64* %9, align 8
	ret i64 %66

typeswitch.next-21:
	%67 = icmp eq i64 %15, 12
	br i1 %67, label %typeswitch.body-24, label %typeswitch.next-23

typeswitch.body-22:
	%68 = bitcast %..rawptr %16 to i64*
	%69 = load i64, i64* %68, align 8
	store i64 %69, i64* %10
	; ReturnStmt
	%70 = load i64, i64* %10, align 8
	%71 = bitcast i64 %70 to i64
	ret i64 %71

typeswitch.next-23:
	; ReturnStmt
	ret i64 0

typeswitch.body-24:
	%72 = bitcast %..rawptr %16 to i64*
	%73 = load i64, i64* %72, align 8
	store i64 %73, i64* %11
	; ReturnStmt
	%74 = load i64, i64* %11, align 8
	%75 = bitcast i64 %74 to i64
	ret i64 %75
}

define void @fmt.fmt_bit_set(%fmt.Fmt_Info* %fi, %..any %v, %..string %name, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca %fmt.Fmt_Info*, align 16
	%1 = alloca %..any, align 16
	%2 = alloca %..string, align 16
	%3 = alloca %runtime.Type_Info*, align 16
	%4 = alloca %runtime.Type_Info_Named, align 16
	%5 = alloca %..any, align 16
	%6 = alloca %runtime.Type_Info_Bit_Set, align 16
	%7 = alloca i64, align 16
	%8 = alloca i64, align 16
	%9 = alloca i8, align 16
	%10 = alloca i8, align 16
	%11 = alloca i16, align 16
	%12 = alloca i32, align 16
	%13 = alloca i64, align 16
	%14 = alloca %runtime.Source_Code_Location, align 16
	%15 = alloca %runtime.Type_Info*, align 16
	%16 = alloca %runtime.Type_Info_Enum, align 16
	%17 = alloca i8, align 16
	%18 = alloca {%runtime.Type_Info_Enum, i8}, align 16
	%19 = alloca i64, align 16
	%20 = alloca i64, align 16
	%21 = alloca i64, align 16
	%22 = alloca i64, align 16
	%23 = alloca %runtime.Type_Info_Enum_Value, align 16
	%24 = alloca i64, align 16
	%25 = alloca i64, align 16
	%26 = alloca i64, align 16
	%27 = alloca i64, align 16
	%28 = alloca %runtime.Type_Info_Enum_Value, align 16
	store %fmt.Fmt_Info* %fi, %fmt.Fmt_Info** %0
	store %..any %v, %..any* %1
	store %..string %name, %..string* %2
	; type_info
	; SelectorExpr
	%29 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 1
	%30 = load %..typeid, %..typeid* %29, align 8
	%31 = call %runtime.Type_Info* @runtime.__type_info_of(%..typeid %30)
	store %runtime.Type_Info* %31, %runtime.Type_Info** %3
	; TypeSwitchStmt
	; SelectorExpr
	%32 = load %runtime.Type_Info*, %runtime.Type_Info** %3, align 8
	%33 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %32, i64 0
	%34 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %33, i64 0, i32 3
	%35 = load {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %34, align 8
	; get union's tag
	%36 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %34, i64 0, i32 2 ; UnionTagPtr
	%37 = load i64, i64* %36, align 8
	%38 = bitcast {[0 x i64], [72 x i8], i64}* %34 to %..rawptr
	%39 = icmp eq i64 %37, 1
	br i1 %39, label %typeswitch.body-2, label %typeswitch.next-1

typeswitch.next-1:
	%40 = icmp eq i64 %37, 21
	br i1 %40, label %typeswitch.body-4, label %typeswitch.next-3

typeswitch.body-2:
	%41 = bitcast %..rawptr %38 to %runtime.Type_Info_Named*
	%42 = load %runtime.Type_Info_Named, %runtime.Type_Info_Named* %41, align 8
	store %runtime.Type_Info_Named %42, %runtime.Type_Info_Named* %4
	; val
	%43 = load %..any, %..any* %1, align 8
	store %..any %43, %..any* %5
	; AssignStmt
	; SelectorExpr
	%44 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	; SelectorExpr
	; SelectorExpr
	%45 = getelementptr inbounds %runtime.Type_Info_Named, %runtime.Type_Info_Named* %4, i64 0, i32 1
	%46 = load %runtime.Type_Info*, %runtime.Type_Info** %45, align 8
	%47 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %46, i64 0
	%48 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %47, i64 0, i32 2
	%49 = load %..typeid, %..typeid* %48, align 8
	store %..typeid %49, %..typeid* %44
	%50 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%51 = load %..any, %..any* %5, align 8
	; SelectorExpr
	%52 = getelementptr inbounds %runtime.Type_Info_Named, %runtime.Type_Info_Named* %4, i64 0, i32 0
	%53 = load %..string, %..string* %52, align 8
	call void @fmt.fmt_bit_set(%fmt.Fmt_Info* %50, %..any %51, %..string %53, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %typeswitch.done-41

typeswitch.next-3:
	br label %typeswitch.done-41

typeswitch.body-4:
	%54 = bitcast %..rawptr %38 to %runtime.Type_Info_Bit_Set*
	%55 = load %runtime.Type_Info_Bit_Set, %runtime.Type_Info_Bit_Set* %54, align 8
	store %runtime.Type_Info_Bit_Set %55, %runtime.Type_Info_Bit_Set* %6
	; bits
	%56 = bitcast i64* %7 to %..rawptr
	%57 = call %..rawptr @mem.zero(%..rawptr %56, i64 8) noinline
	store i64 zeroinitializer, i64* %7
	; bit_size
	; SelectorExpr
	%58 = load %runtime.Type_Info*, %runtime.Type_Info** %3, align 8
	%59 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %58, i64 0
	%60 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %59, i64 0, i32 0
	%61 = load i64, i64* %60, align 8
	%62 = mul i64 8, %61
	%63 = bitcast i64 %62 to i64
	store i64 %63, i64* %8
	; do_byte_swap
	; SelectorExpr
	%64 = getelementptr inbounds %runtime.Type_Info_Bit_Set, %runtime.Type_Info_Bit_Set* %6, i64 0, i32 1
	%65 = load %runtime.Type_Info*, %runtime.Type_Info** %64, align 8
	%66 = call i8 @fmt.fmt_bit_set.is_bit_set_different_endian_to_platform-0(%runtime.Type_Info* %65, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	store i8 %66, i8* %9
	; SwitchStmt
	%67 = load i64, i64* %8, align 8
	%68 = icmp eq i64 %67, 0
	br i1 %68, label %switch.case.body-6, label %switch.case.next-5

switch.case.next-5:
	%69 = icmp eq i64 %67, 8
	br i1 %69, label %switch.fall.body-8, label %switch.case.next-7

switch.case.body-6:
	; AssignStmt
	store i64 0, i64* %7
	br label %switch.done-21

switch.case.next-7:
	%70 = icmp eq i64 %67, 16
	br i1 %70, label %switch.fall.body-10, label %switch.case.next-9

switch.fall.body-8:
	; x
	; SelectorExpr
	%71 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 0
	%72 = load %..rawptr, %..rawptr* %71, align 8
	%73 = bitcast %..rawptr %72 to i8*
	%74 = getelementptr inbounds i8, i8* %73, i64 0
	%75 = load i8, i8* %74, align 1
	store i8 %75, i8* %10
	; AssignStmt
	%76 = load i8, i8* %10, align 1
	%77 = zext i8 %76 to i64
	store i64 %77, i64* %7
	br label %switch.done-21

switch.case.next-9:
	%78 = icmp eq i64 %67, 32
	br i1 %78, label %switch.fall.body-14, label %switch.case.next-13

switch.fall.body-10:
	; x
	; SelectorExpr
	%79 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 0
	%80 = load %..rawptr, %..rawptr* %79, align 8
	%81 = bitcast %..rawptr %80 to i16*
	%82 = getelementptr inbounds i16, i16* %81, i64 0
	%83 = load i16, i16* %82, align 2
	store i16 %83, i16* %11
	; IfStmt
	%84 = load i8, i8* %9, align 1
	%85 = trunc i8 %84 to i1
	br i1 %85, label %if.then-11, label %if.done-12

if.then-11:
	; AssignStmt
	%86 = load i16, i16* %11, align 2
	%87 = call ccc i16 @llvm.bswap.i16(i16 %86)
	store i16 %87, i16* %11
	br label %if.done-12

if.done-12:
	; AssignStmt
	%88 = load i16, i16* %11, align 2
	%89 = zext i16 %88 to i64
	store i64 %89, i64* %7
	br label %switch.done-21

switch.case.next-13:
	%90 = icmp eq i64 %67, 64
	br i1 %90, label %switch.fall.body-18, label %switch.case.next-17

switch.fall.body-14:
	; x
	; SelectorExpr
	%91 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 0
	%92 = load %..rawptr, %..rawptr* %91, align 8
	%93 = bitcast %..rawptr %92 to i32*
	%94 = getelementptr inbounds i32, i32* %93, i64 0
	%95 = load i32, i32* %94, align 4
	store i32 %95, i32* %12
	; IfStmt
	%96 = load i8, i8* %9, align 1
	%97 = trunc i8 %96 to i1
	br i1 %97, label %if.then-15, label %if.done-16

if.then-15:
	; AssignStmt
	%98 = load i32, i32* %12, align 4
	%99 = call ccc i32 @llvm.bswap.i32(i32 %98)
	store i32 %99, i32* %12
	br label %if.done-16

if.done-16:
	; AssignStmt
	%100 = load i32, i32* %12, align 4
	%101 = zext i32 %100 to i64
	store i64 %101, i64* %7
	br label %switch.done-21

switch.case.next-17:
	%102 = bitcast %runtime.Source_Code_Location* %14 to %..rawptr
	%103 = call %..rawptr @mem.zero(%..rawptr %102, i64 48) noinline
	store %runtime.Source_Code_Location zeroinitializer, %runtime.Source_Code_Location* %14
	store %runtime.Source_Code_Location {%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @str$127, i64 0, i32 0), i64 25}, i64 886, i64 9, %..string {i8* getelementptr inbounds ([12 x i8], [12 x i8]* @str$128, i64 0, i32 0), i64 11}}, %runtime.Source_Code_Location* %14
	call void @runtime.panic(%..string {i8* getelementptr inbounds ([22 x i8], [22 x i8]* @str$129, i64 0, i32 0), i64 21}, %runtime.Source_Code_Location* %14) noreturn
	br label %switch.done-21

switch.fall.body-18:
	; x
	; SelectorExpr
	%104 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 0
	%105 = load %..rawptr, %..rawptr* %104, align 8
	%106 = bitcast %..rawptr %105 to i64*
	%107 = getelementptr inbounds i64, i64* %106, i64 0
	%108 = load i64, i64* %107, align 8
	store i64 %108, i64* %13
	; IfStmt
	%109 = load i8, i8* %9, align 1
	%110 = trunc i8 %109 to i1
	br i1 %110, label %if.then-19, label %if.done-20

if.then-19:
	; AssignStmt
	%111 = load i64, i64* %13, align 8
	%112 = call ccc i64 @llvm.bswap.i64(i64 %111)
	store i64 %112, i64* %13
	br label %if.done-20

if.done-20:
	; AssignStmt
	%113 = load i64, i64* %13, align 8
	store i64 %113, i64* %7
	br label %switch.done-21

switch.done-21:
	; et
	; SelectorExpr
	; SelectorExpr
	%114 = getelementptr inbounds %runtime.Type_Info_Bit_Set, %runtime.Type_Info_Bit_Set* %6, i64 0, i32 0
	%115 = load %runtime.Type_Info*, %runtime.Type_Info** %114, align 8
	%116 = call %runtime.Type_Info* @runtime.type_info_base(%runtime.Type_Info* %115)
	store %runtime.Type_Info* %116, %runtime.Type_Info** %15
	; IfStmt
	%117 = load %..string, %..string* %2, align 8
	%118 = call i8 @runtime.string_ne(%..string %117, %..string zeroinitializer)
	%119 = trunc i8 %118 to i1
	br i1 %119, label %if.then-22, label %if.else-23

if.then-22:
	; SelectorExpr
	%120 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%121 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %120, i64 0
	%122 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %121, i64 0, i32 12
	%123 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %122, align 8
	%124 = load %..string, %..string* %2, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %123, %..string %124, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %if.done-24

if.else-23:
	; SelectorExpr
	%125 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%126 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %125, i64 0
	%127 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %126, i64 0, i32 12
	%128 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %127, align 8
	%129 = load %runtime.Type_Info*, %runtime.Type_Info** %3, align 8
	call void @fmt.write_type({i8*, i64, i64, %mem.Allocator}* %128, %runtime.Type_Info* %129, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %if.done-24

if.done-24:
	; SelectorExpr
	%130 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%131 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %130, i64 0
	%132 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %131, i64 0, i32 12
	%133 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %132, align 8
	call void @fmt.write_byte({i8*, i64, i64, %mem.Allocator}* %133, i8 123, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	; DeferStmt
	; e
	; is_enum
	; SelectorExpr
	%134 = load %runtime.Type_Info*, %runtime.Type_Info** %15, align 8
	%135 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %134, i64 0
	%136 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %135, i64 0, i32 3
	%137 = load {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %136, align 8
	; cast - union_cast
	%138 = bitcast {%runtime.Type_Info_Enum, i8}* %18 to %..rawptr
	%139 = call %..rawptr @mem.zero(%..rawptr %138, i64 48) noinline
	store {%runtime.Type_Info_Enum, i8} zeroinitializer, {%runtime.Type_Info_Enum, i8}* %18
	%140 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %136, i64 0, i32 2 ; UnionTagPtr
	%141 = load i64, i64* %140, align 8
	%142 = icmp eq i64 %141, 18
	br i1 %142, label %union_cast.ok-25, label %union_cast.end-26

union_cast.ok-25:
	%143 = getelementptr inbounds {%runtime.Type_Info_Enum, i8}, {%runtime.Type_Info_Enum, i8}* %18, i64 0, i32 0
	%144 = getelementptr inbounds {%runtime.Type_Info_Enum, i8}, {%runtime.Type_Info_Enum, i8}* %18, i64 0, i32 1
	%145 = bitcast {[0 x i64], [72 x i8], i64}* %136 to %runtime.Type_Info_Enum*
	%146 = load %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %145, align 8
	store %runtime.Type_Info_Enum %146, %runtime.Type_Info_Enum* %143
	store i8 1, i8* %144
	br label %union_cast.end-26

union_cast.end-26:
	%147 = load {%runtime.Type_Info_Enum, i8}, {%runtime.Type_Info_Enum, i8}* %18, align 8
	%148 = extractvalue {%runtime.Type_Info_Enum, i8} %147, 0
	%149 = extractvalue {%runtime.Type_Info_Enum, i8} %147, 1
	store %runtime.Type_Info_Enum %148, %runtime.Type_Info_Enum* %16
	store i8 %149, i8* %17
	; commas
	store i64 0, i64* %19
	; RangeStmt
	; i
	%150 = bitcast i64* %20 to %..rawptr
	%151 = call %..rawptr @mem.zero(%..rawptr %150, i64 8) noinline
	store i64 zeroinitializer, i64* %20
	%152 = bitcast i64* %21 to %..rawptr
	%153 = call %..rawptr @mem.zero(%..rawptr %152, i64 8) noinline
	store i64 zeroinitializer, i64* %21
	store i64 0, i64* %21
	%154 = bitcast i64* %22 to %..rawptr
	%155 = call %..rawptr @mem.zero(%..rawptr %154, i64 8) noinline
	store i64 zeroinitializer, i64* %22
	store i64 0, i64* %22
	br label %for.interval.loop-27

for.interval.loop-27:
	%156 = load i64, i64* %8, align 8
	%157 = sub i64 %156, 1
	%158 = load i64, i64* %21, align 8
	%159 = icmp ule i64 %158, %157
	br i1 %159, label %for.interval.body-28, label %for.interval.done-40

for.interval.body-28:
	%160 = load i64, i64* %21, align 8
	%161 = load i64, i64* %22, align 8
	%162 = load i64, i64* %21, align 8
	%163 = add i64 %162, 1
	store i64 %163, i64* %21
	%164 = load i64, i64* %22, align 8
	%165 = add i64 %164, 1
	store i64 %165, i64* %22
	store i64 %160, i64* %20
	; IfStmt
	%166 = load i64, i64* %7, align 8
	%167 = load i64, i64* %20, align 8
	%168 = shl i64 1, %167
	%169 = and i64 %166, %168
	%170 = icmp eq i64 %169, 0
	%171 = zext i1 %170 to i8
	%172 = trunc i8 %171 to i1
	br i1 %172, label %if.then-29, label %if.done-30

if.then-29:
	; continue
	br label %for.interval.loop-27

if.done-30:
	; IfStmt
	%173 = load i64, i64* %19, align 8
	%174 = icmp sgt i64 %173, 0
	%175 = zext i1 %174 to i8
	%176 = trunc i8 %175 to i1
	br i1 %176, label %if.then-31, label %if.done-32

if.then-31:
	; SelectorExpr
	%177 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%178 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %177, i64 0
	%179 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %178, i64 0, i32 12
	%180 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %179, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %180, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @str$12a, i64 0, i32 0), i64 2}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %if.done-32

if.done-32:
	; DeferStmt
	; IfStmt
	%181 = load i8, i8* %17, align 1
	%182 = trunc i8 %181 to i1
	br i1 %182, label %if.then-33, label %if.done-39

if.then-33:
	; RangeStmt
	; ev
	%183 = bitcast %runtime.Type_Info_Enum_Value* %23 to %..rawptr
	%184 = call %..rawptr @mem.zero(%..rawptr %183, i64 16) noinline
	store %runtime.Type_Info_Enum_Value zeroinitializer, %runtime.Type_Info_Enum_Value* %23
	; evi
	%185 = bitcast i64* %24 to %..rawptr
	%186 = call %..rawptr @mem.zero(%..rawptr %185, i64 8) noinline
	store i64 zeroinitializer, i64* %24
	; SelectorExpr
	%187 = getelementptr inbounds %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %16, i64 0, i32 2
	%188 = load {%runtime.Type_Info_Enum_Value*, i64}, {%runtime.Type_Info_Enum_Value*, i64}* %187, align 8
	%189 = bitcast i64* %25 to %..rawptr
	%190 = call %..rawptr @mem.zero(%..rawptr %189, i64 8) noinline
	store i64 zeroinitializer, i64* %25
	%191 = extractvalue {%runtime.Type_Info_Enum_Value*, i64} %188, 1
	store i64 %191, i64* %25
	%192 = bitcast i64* %26 to %..rawptr
	%193 = call %..rawptr @mem.zero(%..rawptr %192, i64 8) noinline
	store i64 zeroinitializer, i64* %26
	store i64 -1, i64* %26
	br label %for.index.loop-34

for.index.loop-34:
	%194 = load i64, i64* %26, align 8
	%195 = add i64 %194, 1
	store i64 %195, i64* %26
	%196 = load i64, i64* %25, align 8
	%197 = icmp slt i64 %195, %196
	br i1 %197, label %for.index.body-35, label %for.index.done-38

for.index.body-35:
	%198 = load i64, i64* %26, align 8
	%199 = extractvalue {%runtime.Type_Info_Enum_Value*, i64} %188, 0
	%200 = getelementptr inbounds %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %199, i64 %198
	%201 = load %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %200, align 8
	store %runtime.Type_Info_Enum_Value %201, %runtime.Type_Info_Enum_Value* %23
	store i64 %198, i64* %24
	; v
	%202 = load %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %23, align 8
	%203 = bitcast %runtime.Type_Info_Enum_Value* %28 to %..rawptr
	%204 = call %..rawptr @mem.zero(%..rawptr %203, i64 16) noinline
	store %runtime.Type_Info_Enum_Value zeroinitializer, %runtime.Type_Info_Enum_Value* %28
	store %runtime.Type_Info_Enum_Value %202, %runtime.Type_Info_Enum_Value* %28
	%205 = call i64 @fmt.enum_value_to_u64(%runtime.Type_Info_Enum_Value* %28, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	store i64 %205, i64* %27
	; IfStmt
	%206 = load i64, i64* %27, align 8
	%207 = load i64, i64* %20, align 8
	%208 = icmp eq i64 %206, %207
	%209 = zext i1 %208 to i8
	%210 = trunc i8 %209 to i1
	br i1 %210, label %if.then-36, label %if.done-37

if.then-36:
	; SelectorExpr
	%211 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%212 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %211, i64 0
	%213 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %212, i64 0, i32 12
	%214 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %213, align 8
	; IndexExpr
	; SelectorExpr
	%215 = getelementptr inbounds %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %16, i64 0, i32 1
	%216 = load {%..string*, i64}, {%..string*, i64}* %215, align 8
	%217 = extractvalue {%..string*, i64} %216, 0
	%218 = load i64, i64* %24, align 8
	%219 = extractvalue {%..string*, i64} %216, 1
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @str$12b, i64 0, i32 0), i64 25}, i64 913, i64 35, i64 %218, i64 %219)
	%220 = getelementptr inbounds %..string, %..string* %217, i64 %218
	%221 = load %..string, %..string* %220, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %214, %..string %221, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	; defer
	; AssignStmt
	%222 = load i64, i64* %19, align 8
	%223 = add i64 %222, 1
	store i64 %223, i64* %19
	; continue
	br label %for.interval.loop-27

if.done-37:
	br label %for.index.loop-34

for.index.done-38:
	br label %if.done-39

if.done-39:
	; SelectorExpr
	%224 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%225 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %224, i64 0
	%226 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %225, i64 0, i32 12
	%227 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %226, align 8
	%228 = load i64, i64* %20, align 8
	%229 = bitcast i64 %228 to i64
	call void @fmt.write_i64({i8*, i64, i64, %mem.Allocator}* %227, i64 %229, i64 10, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	; defer
	; AssignStmt
	%230 = load i64, i64* %19, align 8
	%231 = add i64 %230, 1
	store i64 %231, i64* %19
	br label %for.interval.loop-27

for.interval.done-40:
	; defer
	; SelectorExpr
	%232 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%233 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %232, i64 0
	%234 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %233, i64 0, i32 12
	%235 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %234, align 8
	call void @fmt.write_byte({i8*, i64, i64, %mem.Allocator}* %235, i8 125, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %typeswitch.done-41

typeswitch.done-41:
	ret void
}

define i8 @fmt.fmt_bit_set.is_bit_set_different_endian_to_platform-0(%runtime.Type_Info* %ti, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca %runtime.Type_Info*, align 16
	%1 = alloca %runtime.Type_Info_Integer, align 16
	store %runtime.Type_Info* %ti, %runtime.Type_Info** %0
	; IfStmt
	%2 = load %runtime.Type_Info*, %runtime.Type_Info** %0, align 8
	%3 = icmp eq %runtime.Type_Info* %2, zeroinitializer
	%4 = zext i1 %3 to i8
	%5 = trunc i8 %4 to i1
	br i1 %5, label %if.then-1, label %if.done-2

if.then-1:
	; ReturnStmt
	ret i8 0

if.done-2:
	; AssignStmt
	; SelectorExpr
	%6 = load %runtime.Type_Info*, %runtime.Type_Info** %0, align 8
	%7 = call %runtime.Type_Info* @runtime.type_info_base(%runtime.Type_Info* %6)
	store %runtime.Type_Info* %7, %runtime.Type_Info** %0
	; TypeSwitchStmt
	; SelectorExpr
	%8 = load %runtime.Type_Info*, %runtime.Type_Info** %0, align 8
	%9 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %8, i64 0
	%10 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %9, i64 0, i32 3
	%11 = load {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %10, align 8
	; get union's tag
	%12 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %10, i64 0, i32 2 ; UnionTagPtr
	%13 = load i64, i64* %12, align 8
	%14 = bitcast {[0 x i64], [72 x i8], i64}* %10 to %..rawptr
	%15 = icmp eq i64 %13, 2
	br i1 %15, label %typeswitch.body-4, label %typeswitch.next-3

typeswitch.next-3:
	br label %typeswitch.done-11

typeswitch.body-4:
	%16 = bitcast %..rawptr %14 to %runtime.Type_Info_Integer*
	%17 = load %runtime.Type_Info_Integer, %runtime.Type_Info_Integer* %16, align 1
	store %runtime.Type_Info_Integer %17, %runtime.Type_Info_Integer* %1
	; SwitchStmt
	; SelectorExpr
	%18 = getelementptr inbounds %runtime.Type_Info_Integer, %runtime.Type_Info_Integer* %1, i64 0, i32 1
	%19 = load i8, i8* %18, align 1
	%20 = icmp eq i8 %19, 0
	br i1 %20, label %switch.case.body-6, label %switch.case.next-5

switch.case.next-5:
	%21 = icmp eq i8 %19, 1
	br i1 %21, label %switch.fall.body-8, label %switch.case.next-7

switch.case.body-6:
	; ReturnStmt
	ret i8 0

switch.case.next-7:
	%22 = icmp eq i8 %19, 2
	br i1 %22, label %switch.fall.body-10, label %switch.case.next-9

switch.fall.body-8:
	; ReturnStmt
	ret i8 0

switch.case.next-9:
	br label %typeswitch.done-11

switch.fall.body-10:
	; ReturnStmt
	ret i8 1

typeswitch.done-11:
	; ReturnStmt
	ret i8 0
}

define void @fmt.fmt_bit_field(%fmt.Fmt_Info* %fi, %..any %v, %..string %bit_field_name, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca %fmt.Fmt_Info*, align 16
	%1 = alloca %..any, align 16
	%2 = alloca %..string, align 16
	%3 = alloca %runtime.Type_Info*, align 16
	%4 = alloca %runtime.Type_Info_Named, align 16
	%5 = alloca %..any, align 16
	%6 = alloca %runtime.Type_Info_Bit_Field, align 16
	%7 = alloca i64, align 16
	%8 = alloca %..string, align 16
	%9 = alloca i64, align 16
	%10 = alloca i64, align 16
	%11 = alloca i64, align 16
	%12 = alloca i64, align 16
	%13 = alloca i64, align 16
	%14 = alloca i64, align 16
	%15 = alloca i64, align 16
	%16 = alloca i64, align 16
	%17 = alloca {[0 x i64], [72 x i8], i64}, align 16
	store %fmt.Fmt_Info* %fi, %fmt.Fmt_Info** %0
	store %..any %v, %..any* %1
	store %..string %bit_field_name, %..string* %2
	; type_info
	; SelectorExpr
	%18 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 1
	%19 = load %..typeid, %..typeid* %18, align 8
	%20 = call %runtime.Type_Info* @runtime.__type_info_of(%..typeid %19)
	store %runtime.Type_Info* %20, %runtime.Type_Info** %3
	; TypeSwitchStmt
	; SelectorExpr
	%21 = load %runtime.Type_Info*, %runtime.Type_Info** %3, align 8
	%22 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %21, i64 0
	%23 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %22, i64 0, i32 3
	%24 = load {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %23, align 8
	; get union's tag
	%25 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %23, i64 0, i32 2 ; UnionTagPtr
	%26 = load i64, i64* %25, align 8
	%27 = bitcast {[0 x i64], [72 x i8], i64}* %23 to %..rawptr
	%28 = icmp eq i64 %26, 1
	br i1 %28, label %typeswitch.body-2, label %typeswitch.next-1

typeswitch.next-1:
	%29 = icmp eq i64 %26, 20
	br i1 %29, label %typeswitch.body-4, label %typeswitch.next-3

typeswitch.body-2:
	%30 = bitcast %..rawptr %27 to %runtime.Type_Info_Named*
	%31 = load %runtime.Type_Info_Named, %runtime.Type_Info_Named* %30, align 8
	store %runtime.Type_Info_Named %31, %runtime.Type_Info_Named* %4
	; val
	%32 = load %..any, %..any* %1, align 8
	store %..any %32, %..any* %5
	; AssignStmt
	; SelectorExpr
	%33 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	; SelectorExpr
	; SelectorExpr
	%34 = getelementptr inbounds %runtime.Type_Info_Named, %runtime.Type_Info_Named* %4, i64 0, i32 1
	%35 = load %runtime.Type_Info*, %runtime.Type_Info** %34, align 8
	%36 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %35, i64 0
	%37 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %36, i64 0, i32 2
	%38 = load %..typeid, %..typeid* %37, align 8
	store %..typeid %38, %..typeid* %33
	%39 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%40 = load %..any, %..any* %5, align 8
	; SelectorExpr
	%41 = getelementptr inbounds %runtime.Type_Info_Named, %runtime.Type_Info_Named* %4, i64 0, i32 0
	%42 = load %..string, %..string* %41, align 8
	call void @fmt.fmt_bit_field(%fmt.Fmt_Info* %39, %..any %40, %..string %42, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %typeswitch.done-22

typeswitch.next-3:
	store {[0 x i64], [72 x i8], i64} %24, {[0 x i64], [72 x i8], i64}* %17
	; SelectorExpr
	%43 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%44 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %43, i64 0
	%45 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %44, i64 0, i32 12
	%46 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %45, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %46, %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str$12c, i64 0, i32 0), i64 4}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %typeswitch.done-22

typeswitch.body-4:
	%47 = bitcast %..rawptr %27 to %runtime.Type_Info_Bit_Field*
	%48 = load %runtime.Type_Info_Bit_Field, %runtime.Type_Info_Bit_Field* %47, align 8
	store %runtime.Type_Info_Bit_Field %48, %runtime.Type_Info_Bit_Field* %6
	; data
	store i64 0, i64* %7
	; SwitchStmt
	; SelectorExpr
	%49 = load %runtime.Type_Info*, %runtime.Type_Info** %3, align 8
	%50 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %49, i64 0
	%51 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %50, i64 0, i32 0
	%52 = load i64, i64* %51, align 8
	%53 = icmp eq i64 %52, 1
	br i1 %53, label %switch.case.body-6, label %switch.case.next-5

switch.case.next-5:
	%54 = icmp eq i64 %52, 2
	br i1 %54, label %switch.fall.body-8, label %switch.case.next-7

switch.case.body-6:
	; AssignStmt
	; SelectorExpr
	%55 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 0
	%56 = load %..rawptr, %..rawptr* %55, align 8
	%57 = bitcast %..rawptr %56 to i8*
	%58 = getelementptr inbounds i8, i8* %57, i64 0
	%59 = load i8, i8* %58, align 1
	%60 = zext i8 %59 to i64
	store i64 %60, i64* %7
	br label %switch.done-13

switch.case.next-7:
	%61 = icmp eq i64 %52, 4
	br i1 %61, label %switch.fall.body-10, label %switch.case.next-9

switch.fall.body-8:
	; AssignStmt
	; SelectorExpr
	%62 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 0
	%63 = load %..rawptr, %..rawptr* %62, align 8
	%64 = bitcast %..rawptr %63 to i16*
	%65 = getelementptr inbounds i16, i16* %64, i64 0
	%66 = load i16, i16* %65, align 2
	%67 = zext i16 %66 to i64
	store i64 %67, i64* %7
	br label %switch.done-13

switch.case.next-9:
	%68 = icmp eq i64 %52, 8
	br i1 %68, label %switch.fall.body-12, label %switch.case.next-11

switch.fall.body-10:
	; AssignStmt
	; SelectorExpr
	%69 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 0
	%70 = load %..rawptr, %..rawptr* %69, align 8
	%71 = bitcast %..rawptr %70 to i32*
	%72 = getelementptr inbounds i32, i32* %71, i64 0
	%73 = load i32, i32* %72, align 4
	%74 = zext i32 %73 to i64
	store i64 %74, i64* %7
	br label %switch.done-13

switch.case.next-11:
	br label %switch.done-13

switch.fall.body-12:
	; AssignStmt
	; SelectorExpr
	%75 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 0
	%76 = load %..rawptr, %..rawptr* %75, align 8
	%77 = bitcast %..rawptr %76 to i64*
	%78 = getelementptr inbounds i64, i64* %77, i64 0
	%79 = load i64, i64* %78, align 8
	store i64 %79, i64* %7
	br label %switch.done-13

switch.done-13:
	; IfStmt
	%80 = load %..string, %..string* %2, align 8
	%81 = call i8 @runtime.string_ne(%..string %80, %..string zeroinitializer)
	%82 = trunc i8 %81 to i1
	br i1 %82, label %if.then-14, label %if.else-15

if.then-14:
	; SelectorExpr
	%83 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%84 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %83, i64 0
	%85 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %84, i64 0, i32 12
	%86 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %85, align 8
	%87 = load %..string, %..string* %2, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %86, %..string %87, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	; SelectorExpr
	%88 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%89 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %88, i64 0
	%90 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %89, i64 0, i32 12
	%91 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %90, align 8
	call void @fmt.write_byte({i8*, i64, i64, %mem.Allocator}* %91, i8 123, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %if.done-16

if.else-15:
	; SelectorExpr
	%92 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%93 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %92, i64 0
	%94 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %93, i64 0, i32 12
	%95 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %94, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %95, %..string {i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str$12d, i64 0, i32 0), i64 10}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %if.done-16

if.done-16:
	; RangeStmt
	; name
	%96 = bitcast %..string* %8 to %..rawptr
	%97 = call %..rawptr @mem.zero(%..rawptr %96, i64 16) noinline
	store %..string zeroinitializer, %..string* %8
	; i
	%98 = bitcast i64* %9 to %..rawptr
	%99 = call %..rawptr @mem.zero(%..rawptr %98, i64 8) noinline
	store i64 zeroinitializer, i64* %9
	; SelectorExpr
	%100 = getelementptr inbounds %runtime.Type_Info_Bit_Field, %runtime.Type_Info_Bit_Field* %6, i64 0, i32 0
	%101 = load {%..string*, i64}, {%..string*, i64}* %100, align 8
	%102 = bitcast i64* %10 to %..rawptr
	%103 = call %..rawptr @mem.zero(%..rawptr %102, i64 8) noinline
	store i64 zeroinitializer, i64* %10
	%104 = extractvalue {%..string*, i64} %101, 1
	store i64 %104, i64* %10
	%105 = bitcast i64* %11 to %..rawptr
	%106 = call %..rawptr @mem.zero(%..rawptr %105, i64 8) noinline
	store i64 zeroinitializer, i64* %11
	store i64 -1, i64* %11
	br label %for.index.loop-17

for.index.loop-17:
	%107 = load i64, i64* %11, align 8
	%108 = add i64 %107, 1
	store i64 %108, i64* %11
	%109 = load i64, i64* %10, align 8
	%110 = icmp slt i64 %108, %109
	br i1 %110, label %for.index.body-18, label %for.index.done-21

for.index.body-18:
	%111 = load i64, i64* %11, align 8
	%112 = extractvalue {%..string*, i64} %101, 0
	%113 = getelementptr inbounds %..string, %..string* %112, i64 %111
	%114 = load %..string, %..string* %113, align 8
	store %..string %114, %..string* %8
	store i64 %111, i64* %9
	; IfStmt
	%115 = load i64, i64* %9, align 8
	%116 = icmp sgt i64 %115, 0
	%117 = zext i1 %116 to i8
	%118 = trunc i8 %117 to i1
	br i1 %118, label %if.then-19, label %if.done-20

if.then-19:
	; SelectorExpr
	%119 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%120 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %119, i64 0
	%121 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %120, i64 0, i32 12
	%122 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %121, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %122, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @str$12e, i64 0, i32 0), i64 2}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %if.done-20

if.done-20:
	; bits
	; IndexExpr
	; SelectorExpr
	%123 = getelementptr inbounds %runtime.Type_Info_Bit_Field, %runtime.Type_Info_Bit_Field* %6, i64 0, i32 1
	%124 = load {i32*, i64}, {i32*, i64}* %123, align 8
	%125 = extractvalue {i32*, i64} %124, 0
	%126 = load i64, i64* %9, align 8
	%127 = extractvalue {i32*, i64} %124, 1
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @str$12f, i64 0, i32 0), i64 25}, i64 947, i64 26, i64 %126, i64 %127)
	%128 = getelementptr inbounds i32, i32* %125, i64 %126
	%129 = load i32, i32* %128, align 4
	%130 = sext i32 %129 to i64
	store i64 %130, i64* %12
	; offset
	; IndexExpr
	; SelectorExpr
	%131 = getelementptr inbounds %runtime.Type_Info_Bit_Field, %runtime.Type_Info_Bit_Field* %6, i64 0, i32 2
	%132 = load {i32*, i64}, {i32*, i64}* %131, align 8
	%133 = extractvalue {i32*, i64} %132, 0
	%134 = load i64, i64* %9, align 8
	%135 = extractvalue {i32*, i64} %132, 1
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @str$130, i64 0, i32 0), i64 25}, i64 948, i64 31, i64 %134, i64 %135)
	%136 = getelementptr inbounds i32, i32* %133, i64 %134
	%137 = load i32, i32* %136, align 4
	%138 = sext i32 %137 to i64
	store i64 %138, i64* %13
	; SelectorExpr
	%139 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%140 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %139, i64 0
	%141 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %140, i64 0, i32 12
	%142 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %141, align 8
	%143 = load %..string, %..string* %8, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %142, %..string %143, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	; SelectorExpr
	%144 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%145 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %144, i64 0
	%146 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %145, i64 0, i32 12
	%147 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %146, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %147, %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str$131, i64 0, i32 0), i64 3}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	; n
	store i64 64, i64* %14
	; sa
	%148 = load i64, i64* %14, align 8
	%149 = load i64, i64* %12, align 8
	%150 = sub i64 %148, %149
	store i64 %150, i64* %15
	; u
	%151 = load i64, i64* %7, align 8
	%152 = load i64, i64* %13, align 8
	%153 = lshr i64 %151, %152
	store i64 %153, i64* %16
	; AssignStmt
	%154 = load i64, i64* %15, align 8
	%155 = load i64, i64* %16, align 8
	%156 = shl i64 %155, %154
	store i64 %156, i64* %16
	; AssignStmt
	%157 = load i64, i64* %15, align 8
	%158 = load i64, i64* %16, align 8
	%159 = lshr i64 %158, %157
	store i64 %159, i64* %16
	; SelectorExpr
	%160 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%161 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %160, i64 0
	%162 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %161, i64 0, i32 12
	%163 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %162, align 8
	%164 = load i64, i64* %16, align 8
	call void @fmt.write_u64({i8*, i64, i64, %mem.Allocator}* %163, i64 %164, i64 10, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %for.index.loop-17

for.index.done-21:
	; SelectorExpr
	%165 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%166 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %165, i64 0
	%167 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %166, i64 0, i32 12
	%168 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %167, align 8
	call void @fmt.write_byte({i8*, i64, i64, %mem.Allocator}* %168, i8 125, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %typeswitch.done-22

typeswitch.done-22:
	ret void
}

define void @fmt.fmt_opaque(%fmt.Fmt_Info* %fi, %..any %v, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca %fmt.Fmt_Info*, align 16
	%1 = alloca %..any, align 16
	%2 = alloca %runtime.Type_Info*, align 16
	%3 = alloca %runtime.Type_Info_Opaque, align 16
	%4 = alloca i8, align 16
	%5 = alloca %runtime.Type_Info*, align 16
	%6 = alloca {%runtime.Type_Info_Opaque, i8}, align 16
	%7 = alloca %runtime.Type_Info*, align 16
	%8 = alloca {[0 x i64], [72 x i8], i64}, align 16
	%9 = alloca %..any, align 16
	%10 = alloca {[0 x i64], [72 x i8], i64}, align 16
	store %fmt.Fmt_Info* %fi, %fmt.Fmt_Info** %0
	store %..any %v, %..any* %1
	; type_info
	; SelectorExpr
	%11 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 1
	%12 = load %..typeid, %..typeid* %11, align 8
	%13 = call %runtime.Type_Info* @runtime.__type_info_of(%..typeid %12)
	store %runtime.Type_Info* %13, %runtime.Type_Info** %2
	; IfStmt
	; SelectorExpr
	%14 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 0
	%15 = load %..rawptr, %..rawptr* %14, align 8
	; SelectorExpr
	%16 = load %runtime.Type_Info*, %runtime.Type_Info** %2, align 8
	%17 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %16, i64 0
	%18 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %17, i64 0, i32 0
	%19 = load i64, i64* %18, align 8
	%20 = call i8 @fmt.fmt_opaque.is_nil-0(%..rawptr %15, i64 %19, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%21 = trunc i8 %20 to i1
	br i1 %21, label %if.then-1, label %if.done-2

if.then-1:
	; SelectorExpr
	%22 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%23 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %22, i64 0
	%24 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %23, i64 0, i32 12
	%25 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %24, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %25, %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str$132, i64 0, i32 0), i64 3}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	; ReturnStmt
	ret void

if.done-2:
	; IfStmt
	; ot
	; ok
	; SelectorExpr
	; SelectorExpr
	%26 = load %runtime.Type_Info*, %runtime.Type_Info** %2, align 8
	%27 = call %runtime.Type_Info* @runtime.type_info_base(%runtime.Type_Info* %26)
	%28 = bitcast %runtime.Type_Info** %5 to %..rawptr
	%29 = call %..rawptr @mem.zero(%..rawptr %28, i64 8) noinline
	store %runtime.Type_Info* zeroinitializer, %runtime.Type_Info** %5
	store %runtime.Type_Info* %27, %runtime.Type_Info** %5
	%30 = load %runtime.Type_Info*, %runtime.Type_Info** %5, align 8
	%31 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %30, i64 0
	%32 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %31, i64 0, i32 3
	%33 = load {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %32, align 8
	; cast - union_cast
	%34 = bitcast {%runtime.Type_Info_Opaque, i8}* %6 to %..rawptr
	%35 = call %..rawptr @mem.zero(%..rawptr %34, i64 16) noinline
	store {%runtime.Type_Info_Opaque, i8} zeroinitializer, {%runtime.Type_Info_Opaque, i8}* %6
	%36 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %32, i64 0, i32 2 ; UnionTagPtr
	%37 = load i64, i64* %36, align 8
	%38 = icmp eq i64 %37, 22
	br i1 %38, label %union_cast.ok-3, label %union_cast.end-4

union_cast.ok-3:
	%39 = getelementptr inbounds {%runtime.Type_Info_Opaque, i8}, {%runtime.Type_Info_Opaque, i8}* %6, i64 0, i32 0
	%40 = getelementptr inbounds {%runtime.Type_Info_Opaque, i8}, {%runtime.Type_Info_Opaque, i8}* %6, i64 0, i32 1
	%41 = bitcast {[0 x i64], [72 x i8], i64}* %32 to %runtime.Type_Info_Opaque*
	%42 = load %runtime.Type_Info_Opaque, %runtime.Type_Info_Opaque* %41, align 8
	store %runtime.Type_Info_Opaque %42, %runtime.Type_Info_Opaque* %39
	store i8 1, i8* %40
	br label %union_cast.end-4

union_cast.end-4:
	%43 = load {%runtime.Type_Info_Opaque, i8}, {%runtime.Type_Info_Opaque, i8}* %6, align 8
	%44 = extractvalue {%runtime.Type_Info_Opaque, i8} %43, 0
	%45 = extractvalue {%runtime.Type_Info_Opaque, i8} %43, 1
	store %runtime.Type_Info_Opaque %44, %runtime.Type_Info_Opaque* %3
	store i8 %45, i8* %4
	%46 = load i8, i8* %4, align 1
	%47 = trunc i8 %46 to i1
	br i1 %47, label %if.then-5, label %if.else-13

if.then-5:
	; elem
	; SelectorExpr
	; SelectorExpr
	%48 = getelementptr inbounds %runtime.Type_Info_Opaque, %runtime.Type_Info_Opaque* %3, i64 0, i32 0
	%49 = load %runtime.Type_Info*, %runtime.Type_Info** %48, align 8
	%50 = call %runtime.Type_Info* @runtime.type_info_base(%runtime.Type_Info* %49)
	store %runtime.Type_Info* %50, %runtime.Type_Info** %7
	; IfStmt
	%51 = load %runtime.Type_Info*, %runtime.Type_Info** %7, align 8
	%52 = icmp eq %runtime.Type_Info* %51, zeroinitializer
	%53 = zext i1 %52 to i8
	%54 = trunc i8 %53 to i1
	br i1 %54, label %if.then-6, label %if.done-7

if.then-6:
	; ReturnStmt
	ret void

if.done-7:
	; SelectorExpr
	%55 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%56 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %55, i64 0
	%57 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %56, i64 0, i32 12
	%58 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %57, align 8
	%59 = load %runtime.Type_Info*, %runtime.Type_Info** %2, align 8
	call void @fmt.write_type({i8*, i64, i64, %mem.Allocator}* %58, %runtime.Type_Info* %59, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	; SelectorExpr
	%60 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%61 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %60, i64 0
	%62 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %61, i64 0, i32 12
	%63 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %62, align 8
	call void @fmt.write_byte({i8*, i64, i64, %mem.Allocator}* %63, i8 123, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	; DeferStmt
	; TypeSwitchStmt
	; SelectorExpr
	%64 = load %runtime.Type_Info*, %runtime.Type_Info** %7, align 8
	%65 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %64, i64 0
	%66 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %65, i64 0, i32 3
	%67 = load {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %66, align 8
	; get union's tag
	%68 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %66, i64 0, i32 2 ; UnionTagPtr
	%69 = load i64, i64* %68, align 8
	%70 = bitcast {[0 x i64], [72 x i8], i64}* %66 to %..rawptr
	%71 = icmp eq i64 %69, 2
	br i1 %71, label %typeswitch.body-11, label %typeswitch.next-8

typeswitch.next-8:
	%72 = icmp eq i64 %69, 10
	br i1 %72, label %typeswitch.body-11, label %typeswitch.next-9

typeswitch.next-9:
	%73 = icmp eq i64 %69, 4
	br i1 %73, label %typeswitch.body-11, label %typeswitch.next-10

typeswitch.next-10:
	store {[0 x i64], [72 x i8], i64} %67, {[0 x i64], [72 x i8], i64}* %10
	br label %typeswitch.done-12

typeswitch.body-11:
	store {[0 x i64], [72 x i8], i64} %67, {[0 x i64], [72 x i8], i64}* %8
	%74 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	; CompoundLit
	%75 = bitcast %..any* %9 to %..rawptr
	%76 = call %..rawptr @mem.zero(%..rawptr %75, i64 16) noinline
	store %..any zeroinitializer, %..any* %9
	store %..any zeroinitializer, %..any* %9
	; SelectorExpr
	%77 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 0
	%78 = load %..rawptr, %..rawptr* %77, align 8
	%79 = getelementptr inbounds %..any, %..any* %9, i64 0, i32 0
	store %..rawptr %78, %..rawptr* %79
	; SelectorExpr
	%80 = load %runtime.Type_Info*, %runtime.Type_Info** %7, align 8
	%81 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %80, i64 0
	%82 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %81, i64 0, i32 2
	%83 = load %..typeid, %..typeid* %82, align 8
	%84 = getelementptr inbounds %..any, %..any* %9, i64 0, i32 1
	store %..typeid %83, %..typeid* %84
	%85 = load %..any, %..any* %9, align 8
	call void @fmt.fmt_value(%fmt.Fmt_Info* %74, %..any %85, i32 118, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %typeswitch.done-12

typeswitch.done-12:
	; defer
	; SelectorExpr
	%86 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%87 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %86, i64 0
	%88 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %87, i64 0, i32 12
	%89 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %88, align 8
	call void @fmt.write_byte({i8*, i64, i64, %mem.Allocator}* %89, i8 125, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %if.done-14

if.else-13:
	; SelectorExpr
	%90 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%91 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %90, i64 0
	%92 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %91, i64 0, i32 12
	%93 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %92, align 8
	%94 = load %runtime.Type_Info*, %runtime.Type_Info** %2, align 8
	call void @fmt.write_type({i8*, i64, i64, %mem.Allocator}* %93, %runtime.Type_Info* %94, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	; SelectorExpr
	%95 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%96 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %95, i64 0
	%97 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %96, i64 0, i32 12
	%98 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %97, align 8
	call void @fmt.write_byte({i8*, i64, i64, %mem.Allocator}* %98, i8 123, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	; DeferStmt
	; defer
	; SelectorExpr
	%99 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%100 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %99, i64 0
	%101 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %100, i64 0, i32 12
	%102 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %101, align 8
	call void @fmt.write_byte({i8*, i64, i64, %mem.Allocator}* %102, i8 125, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %if.done-14

if.done-14:
	ret void
}

define i8 @fmt.fmt_opaque.is_nil-0(%..rawptr %data, i64 %n, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca %..rawptr, align 16
	%1 = alloca i64, align 16
	%2 = alloca i8*, align 16
	%3 = alloca i64, align 16
	%4 = alloca i64, align 16
	%5 = alloca i64, align 16
	store %..rawptr %data, %..rawptr* %0
	store i64 %n, i64* %1
	; IfStmt
	%6 = load %..rawptr, %..rawptr* %0, align 8
	%7 = icmp eq %..rawptr %6, zeroinitializer
	%8 = zext i1 %7 to i8
	%9 = trunc i8 %8 to i1
	br i1 %9, label %if.then-1, label %if.done-2

if.then-1:
	; ReturnStmt
	ret i8 1

if.done-2:
	; IfStmt
	%10 = load i64, i64* %1, align 8
	%11 = icmp eq i64 %10, 0
	%12 = zext i1 %11 to i8
	%13 = trunc i8 %12 to i1
	br i1 %13, label %if.then-3, label %if.done-4

if.then-3:
	; ReturnStmt
	ret i8 1

if.done-4:
	; a
	%14 = load %..rawptr, %..rawptr* %0, align 8
	%15 = bitcast %..rawptr %14 to i8*
	store i8* %15, i8** %2
	; RangeStmt
	; i
	%16 = bitcast i64* %3 to %..rawptr
	%17 = call %..rawptr @mem.zero(%..rawptr %16, i64 8) noinline
	store i64 zeroinitializer, i64* %3
	%18 = bitcast i64* %4 to %..rawptr
	%19 = call %..rawptr @mem.zero(%..rawptr %18, i64 8) noinline
	store i64 zeroinitializer, i64* %4
	store i64 0, i64* %4
	%20 = bitcast i64* %5 to %..rawptr
	%21 = call %..rawptr @mem.zero(%..rawptr %20, i64 8) noinline
	store i64 zeroinitializer, i64* %5
	store i64 0, i64* %5
	br label %for.interval.loop-5

for.interval.loop-5:
	%22 = load i64, i64* %1, align 8
	%23 = sub i64 %22, 1
	%24 = load i64, i64* %4, align 8
	%25 = icmp sle i64 %24, %23
	br i1 %25, label %for.interval.body-6, label %for.interval.done-9

for.interval.body-6:
	%26 = load i64, i64* %4, align 8
	%27 = load i64, i64* %5, align 8
	%28 = load i64, i64* %4, align 8
	%29 = add i64 %28, 1
	store i64 %29, i64* %4
	%30 = load i64, i64* %5, align 8
	%31 = add i64 %30, 1
	store i64 %31, i64* %5
	store i64 %26, i64* %3
	; IfStmt
	; SelectorExpr
	%32 = load i8*, i8** %2, align 8
	%33 = load i64, i64* %3, align 8
	%34 = call i8* @mem.ptr_offset-4617(i8* %32, i64 %33)
	%35 = getelementptr inbounds i8, i8* %34, i64 0
	%36 = load i8, i8* %35, align 1
	%37 = icmp ne i8 %36, 0
	%38 = zext i1 %37 to i8
	%39 = trunc i8 %38 to i1
	br i1 %39, label %if.then-7, label %if.done-8

if.then-7:
	; ReturnStmt
	ret i8 0

if.done-8:
	br label %for.interval.loop-5

for.interval.done-9:
	; ReturnStmt
	ret i8 1
}

define void @fmt.fmt_value(%fmt.Fmt_Info* %fi, %..any %v, i32 %verb, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca %fmt.Fmt_Info*, align 16
	%1 = alloca %..any, align 16
	%2 = alloca i32, align 16
	%3 = alloca %runtime.Type_Info*, align 16
	%4 = alloca %runtime.Type_Info_Named, align 16
	%5 = alloca %runtime.Type_Info_Struct, align 16
	%6 = alloca i8, align 16
	%7 = alloca i64, align 16
	%8 = alloca i64, align 16
	%9 = alloca %..string, align 16
	%10 = alloca i64, align 16
	%11 = alloca i64, align 16
	%12 = alloca i64, align 16
	%13 = alloca i64, align 16
	%14 = alloca i64, align 16
	%15 = alloca %runtime.Type_Info*, align 16
	%16 = alloca %..rawptr, align 16
	%17 = alloca %..any, align 16
	%18 = alloca i64, align 16
	%19 = alloca i64, align 16
	%20 = alloca %runtime.Type_Info_Bit_Set, align 16
	%21 = alloca %runtime.Type_Info_Bit_Field, align 16
	%22 = alloca %runtime.Type_Info_Opaque, align 16
	%23 = alloca {[0 x i64], [72 x i8], i64}, align 16
	%24 = alloca %..any, align 16
	%25 = alloca %runtime.Type_Info_Boolean, align 16
	%26 = alloca %runtime.Type_Info_Integer, align 16
	%27 = alloca %runtime.Type_Info_Rune, align 16
	%28 = alloca %runtime.Type_Info_Float, align 16
	%29 = alloca %runtime.Type_Info_Complex, align 16
	%30 = alloca %runtime.Type_Info_String, align 16
	%31 = alloca %runtime.Type_Info_Pointer, align 16
	%32 = alloca %runtime.Type_Info_Array, align 16
	%33 = alloca i64, align 16
	%34 = alloca i64, align 16
	%35 = alloca i64, align 16
	%36 = alloca i64, align 16
	%37 = alloca %..any, align 16
	%38 = alloca %runtime.Type_Info_Dynamic_Array, align 16
	%39 = alloca %mem.Raw_Dynamic_Array*, align 16
	%40 = alloca i64, align 16
	%41 = alloca i64, align 16
	%42 = alloca i64, align 16
	%43 = alloca i64, align 16
	%44 = alloca %..any, align 16
	%45 = alloca %runtime.Type_Info_Slice, align 16
	%46 = alloca %mem.Raw_Slice*, align 16
	%47 = alloca i64, align 16
	%48 = alloca i64, align 16
	%49 = alloca i64, align 16
	%50 = alloca i64, align 16
	%51 = alloca %..any, align 16
	%52 = alloca %runtime.Type_Info_Map, align 16
	%53 = alloca %mem.Raw_Map*, align 16
	%54 = alloca %mem.Raw_Dynamic_Array*, align 16
	%55 = alloca %runtime.Type_Info_Struct, align 16
	%56 = alloca %runtime.Type_Info*, align 16
	%57 = alloca {%runtime.Type_Info_Struct, i8}, align 16
	%58 = alloca %runtime.Type_Info_Dynamic_Array, align 16
	%59 = alloca %runtime.Type_Info*, align 16
	%60 = alloca {%runtime.Type_Info_Dynamic_Array, i8}, align 16
	%61 = alloca %runtime.Type_Info_Struct, align 16
	%62 = alloca {%runtime.Type_Info_Struct, i8}, align 16
	%63 = alloca i64, align 16
	%64 = alloca i64, align 16
	%65 = alloca i64, align 16
	%66 = alloca i64, align 16
	%67 = alloca i64, align 16
	%68 = alloca %runtime.Map_Entry_Header*, align 16
	%69 = alloca %fmt.Fmt_Info, align 16
	%70 = alloca %fmt.Fmt_Info, align 16
	%71 = alloca %..any, align 16
	%72 = alloca i64, align 16
	%73 = alloca %..any, align 16
	%74 = alloca %runtime.Type_Info_Struct, align 16
	%75 = alloca i8, align 16
	%76 = alloca i64, align 16
	%77 = alloca i64, align 16
	%78 = alloca i64, align 16
	%79 = alloca i64, align 16
	%80 = alloca i64, align 16
	%81 = alloca %runtime.Type_Info*, align 16
	%82 = alloca i64, align 16
	%83 = alloca %..any, align 16
	%84 = alloca %runtime.Type_Info_Union, align 16
	%85 = alloca i64, align 16
	%86 = alloca %..any, align 16
	%87 = alloca %..any, align 16
	%88 = alloca i64, align 16
	%89 = alloca i8, align 16
	%90 = alloca i8, align 16
	%91 = alloca i16, align 16
	%92 = alloca i16, align 16
	%93 = alloca i32, align 16
	%94 = alloca i32, align 16
	%95 = alloca i64, align 16
	%96 = alloca i64, align 16
	%97 = alloca %..any, align 16
	%98 = alloca %runtime.Source_Code_Location, align 16
	%99 = alloca %..typeid, align 16
	%100 = alloca %..any, align 16
	%101 = alloca %runtime.Type_Info_Enum, align 16
	%102 = alloca %runtime.Type_Info_Procedure, align 16
	%103 = alloca %..rawptr, align 16
	%104 = alloca %runtime.Type_Info_Type_Id, align 16
	%105 = alloca %..typeid, align 16
	%106 = alloca %runtime.Type_Info_Bit_Field, align 16
	%107 = alloca %runtime.Type_Info_Bit_Set, align 16
	%108 = alloca %runtime.Type_Info_Opaque, align 16
	store %fmt.Fmt_Info* %fi, %fmt.Fmt_Info** %0
	store %..any %v, %..any* %1
	store i32 %verb, i32* %2
	; IfStmt
	; SelectorExpr
	%109 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 0
	%110 = load %..rawptr, %..rawptr* %109, align 8
	%111 = icmp eq %..rawptr %110, zeroinitializer
	%112 = zext i1 %111 to i8
	%113 = trunc i8 %112 to i1
	br i1 %113, label %if.then-2, label %cmp.or-1

cmp.or-1:
	; SelectorExpr
	%114 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 1
	%115 = load %..typeid, %..typeid* %114, align 8
	%116 = icmp eq %..typeid %115, 0
	%117 = zext i1 %116 to i8
	%118 = trunc i8 %117 to i1
	br i1 %118, label %if.then-2, label %if.done-3

if.then-2:
	; SelectorExpr
	%119 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%120 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %119, i64 0
	%121 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %120, i64 0, i32 12
	%122 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %121, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %122, %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str$133, i64 0, i32 0), i64 5}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	; ReturnStmt
	ret void

if.done-3:
	; type_info
	; SelectorExpr
	%123 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 1
	%124 = load %..typeid, %..typeid* %123, align 8
	%125 = call %runtime.Type_Info* @runtime.__type_info_of(%..typeid %124)
	store %runtime.Type_Info* %125, %runtime.Type_Info** %3
	; TypeSwitchStmt
	; SelectorExpr
	%126 = load %runtime.Type_Info*, %runtime.Type_Info** %3, align 8
	%127 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %126, i64 0
	%128 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %127, i64 0, i32 3
	%129 = load {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %128, align 8
	; get union's tag
	%130 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %128, i64 0, i32 2 ; UnionTagPtr
	%131 = load i64, i64* %130, align 8
	%132 = bitcast {[0 x i64], [72 x i8], i64}* %128 to %..rawptr
	%133 = icmp eq i64 %131, 1
	br i1 %133, label %typeswitch.body-5, label %typeswitch.next-4

typeswitch.next-4:
	%134 = icmp eq i64 %131, 7
	br i1 %134, label %typeswitch.body-43, label %typeswitch.next-42

typeswitch.body-5:
	%135 = bitcast %..rawptr %132 to %runtime.Type_Info_Named*
	%136 = load %runtime.Type_Info_Named, %runtime.Type_Info_Named* %135, align 8
	store %runtime.Type_Info_Named %136, %runtime.Type_Info_Named* %4
	; TypeSwitchStmt
	; SelectorExpr
	; SelectorExpr
	%137 = getelementptr inbounds %runtime.Type_Info_Named, %runtime.Type_Info_Named* %4, i64 0, i32 1
	%138 = load %runtime.Type_Info*, %runtime.Type_Info** %137, align 8
	%139 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %138, i64 0
	%140 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %139, i64 0, i32 3
	%141 = load {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %140, align 8
	; get union's tag
	%142 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %140, i64 0, i32 2 ; UnionTagPtr
	%143 = load i64, i64* %142, align 8
	%144 = bitcast {[0 x i64], [72 x i8], i64}* %140 to %..rawptr
	%145 = icmp eq i64 %143, 16
	br i1 %145, label %typeswitch.body-7, label %typeswitch.next-6

typeswitch.next-6:
	%146 = icmp eq i64 %143, 21
	br i1 %146, label %typeswitch.body-36, label %typeswitch.next-35

typeswitch.body-7:
	%147 = bitcast %..rawptr %144 to %runtime.Type_Info_Struct*
	%148 = load %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %147, align 8
	store %runtime.Type_Info_Struct %148, %runtime.Type_Info_Struct* %5
	; IfStmt
	%149 = load i32, i32* %2, align 4
	%150 = icmp ne i32 %149, 118
	%151 = zext i1 %150 to i8
	%152 = trunc i8 %151 to i1
	br i1 %152, label %if.then-8, label %if.done-9

if.then-8:
	%153 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%154 = load i32, i32* %2, align 4
	call void @fmt.fmt_bad_verb(%fmt.Fmt_Info* %153, i32 %154, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	; ReturnStmt
	ret void

if.done-9:
	; IfStmt
	; SelectorExpr
	%155 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %5, i64 0, i32 5
	%156 = load i8, i8* %155, align 1
	%157 = trunc i8 %156 to i1
	br i1 %157, label %if.then-10, label %if.done-11

if.then-10:
	; SelectorExpr
	%158 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%159 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %158, i64 0
	%160 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %159, i64 0, i32 12
	%161 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %160, align 8
	; SelectorExpr
	%162 = getelementptr inbounds %runtime.Type_Info_Named, %runtime.Type_Info_Named* %4, i64 0, i32 0
	%163 = load %..string, %..string* %162, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %161, %..string %163, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	; SelectorExpr
	%164 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%165 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %164, i64 0
	%166 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %165, i64 0, i32 12
	%167 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %166, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %167, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @str$134, i64 0, i32 0), i64 2}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	; ReturnStmt
	ret void

if.done-11:
	; SelectorExpr
	%168 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%169 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %168, i64 0
	%170 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %169, i64 0, i32 12
	%171 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %170, align 8
	; SelectorExpr
	%172 = getelementptr inbounds %runtime.Type_Info_Named, %runtime.Type_Info_Named* %4, i64 0, i32 0
	%173 = load %..string, %..string* %172, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %171, %..string %173, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	; SelectorExpr
	%174 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%175 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %174, i64 0
	%176 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %175, i64 0, i32 12
	%177 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %176, align 8
	call void @fmt.write_byte({i8*, i64, i64, %mem.Allocator}* %177, i8 123, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	; hash
	; SelectorExpr
	%178 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%179 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %178, i64 0
	%180 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %179, i64 0, i32 4
	%181 = load i8, i8* %180, align 1
	store i8 %181, i8* %6
	; DeferStmt
	; indent
	; SelectorExpr
	%182 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%183 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %182, i64 0
	%184 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %183, i64 0, i32 9
	%185 = load i64, i64* %184, align 8
	store i64 %185, i64* %7
	; DeferStmt
	; AssignStmt
	; SelectorExpr
	%186 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%187 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %186, i64 0
	%188 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %187, i64 0, i32 4
	store i8 0, i8* %188
	; AssignStmt
	; SelectorExpr
	%189 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%190 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %189, i64 0
	%191 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %190, i64 0, i32 9
	%192 = load i64, i64* %191, align 8
	%193 = add i64 %192, 1
	store i64 %193, i64* %191
	; IfStmt
	%194 = load i8, i8* %6, align 1
	%195 = trunc i8 %194 to i1
	br i1 %195, label %if.then-12, label %if.done-13

if.then-12:
	; SelectorExpr
	%196 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%197 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %196, i64 0
	%198 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %197, i64 0, i32 12
	%199 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %198, align 8
	call void @fmt.write_byte({i8*, i64, i64, %mem.Allocator}* %199, i8 10, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %if.done-13

if.done-13:
	; field_count
	store i64 -1, i64* %8
	; RangeStmt
	; name
	%200 = bitcast %..string* %9 to %..rawptr
	%201 = call %..rawptr @mem.zero(%..rawptr %200, i64 16) noinline
	store %..string zeroinitializer, %..string* %9
	; i
	%202 = bitcast i64* %10 to %..rawptr
	%203 = call %..rawptr @mem.zero(%..rawptr %202, i64 8) noinline
	store i64 zeroinitializer, i64* %10
	; SelectorExpr
	%204 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %5, i64 0, i32 1
	%205 = load {%..string*, i64}, {%..string*, i64}* %204, align 8
	%206 = bitcast i64* %11 to %..rawptr
	%207 = call %..rawptr @mem.zero(%..rawptr %206, i64 8) noinline
	store i64 zeroinitializer, i64* %11
	%208 = extractvalue {%..string*, i64} %205, 1
	store i64 %208, i64* %11
	%209 = bitcast i64* %12 to %..rawptr
	%210 = call %..rawptr @mem.zero(%..rawptr %209, i64 8) noinline
	store i64 zeroinitializer, i64* %12
	store i64 -1, i64* %12
	br label %for.index.loop-14

for.index.loop-14:
	%211 = load i64, i64* %12, align 8
	%212 = add i64 %211, 1
	store i64 %212, i64* %12
	%213 = load i64, i64* %11, align 8
	%214 = icmp slt i64 %212, %213
	br i1 %214, label %for.index.body-15, label %for.index.done-29

for.index.body-15:
	%215 = load i64, i64* %12, align 8
	%216 = extractvalue {%..string*, i64} %205, 0
	%217 = getelementptr inbounds %..string, %..string* %216, i64 %215
	%218 = load %..string, %..string* %217, align 8
	store %..string %218, %..string* %9
	store i64 %215, i64* %10
	; AssignStmt
	%219 = load i64, i64* %8, align 8
	%220 = add i64 %219, 1
	store i64 %220, i64* %8
	; IfStmt
	%221 = load i8, i8* %6, align 1
	%222 = trunc i8 %221 to i1
	br i1 %222, label %if.done-18, label %cmp.and-16

cmp.and-16:
	%223 = load i64, i64* %8, align 8
	%224 = icmp sgt i64 %223, 0
	%225 = zext i1 %224 to i8
	%226 = trunc i8 %225 to i1
	br i1 %226, label %if.then-17, label %if.done-18

if.then-17:
	; SelectorExpr
	%227 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%228 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %227, i64 0
	%229 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %228, i64 0, i32 12
	%230 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %229, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %230, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @str$135, i64 0, i32 0), i64 2}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %if.done-18

if.done-18:
	; IfStmt
	%231 = load i8, i8* %6, align 1
	%232 = trunc i8 %231 to i1
	br i1 %232, label %if.then-19, label %if.done-23

if.then-19:
	; RangeStmt
	%233 = bitcast i64* %13 to %..rawptr
	%234 = call %..rawptr @mem.zero(%..rawptr %233, i64 8) noinline
	store i64 zeroinitializer, i64* %13
	store i64 0, i64* %13
	%235 = bitcast i64* %14 to %..rawptr
	%236 = call %..rawptr @mem.zero(%..rawptr %235, i64 8) noinline
	store i64 zeroinitializer, i64* %14
	store i64 0, i64* %14
	br label %for.interval.loop-20

for.interval.loop-20:
	; SelectorExpr
	%237 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%238 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %237, i64 0
	%239 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %238, i64 0, i32 9
	%240 = load i64, i64* %239, align 8
	%241 = sub i64 %240, 1
	%242 = load i64, i64* %13, align 8
	%243 = icmp sle i64 %242, %241
	br i1 %243, label %for.interval.body-21, label %for.interval.done-22

for.interval.body-21:
	%244 = load i64, i64* %13, align 8
	%245 = load i64, i64* %14, align 8
	%246 = load i64, i64* %13, align 8
	%247 = add i64 %246, 1
	store i64 %247, i64* %13
	%248 = load i64, i64* %14, align 8
	%249 = add i64 %248, 1
	store i64 %249, i64* %14
	; SelectorExpr
	%250 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%251 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %250, i64 0
	%252 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %251, i64 0, i32 12
	%253 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %252, align 8
	call void @fmt.write_byte({i8*, i64, i64, %mem.Allocator}* %253, i8 9, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %for.interval.loop-20

for.interval.done-22:
	br label %if.done-23

if.done-23:
	; SelectorExpr
	%254 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%255 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %254, i64 0
	%256 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %255, i64 0, i32 12
	%257 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %256, align 8
	%258 = load %..string, %..string* %9, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %257, %..string %258, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	; SelectorExpr
	%259 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%260 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %259, i64 0
	%261 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %260, i64 0, i32 12
	%262 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %261, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %262, %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str$136, i64 0, i32 0), i64 3}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	; IfStmt
	; t
	; IndexExpr
	; SelectorExpr
	%263 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %5, i64 0, i32 0
	%264 = load {%runtime.Type_Info**, i64}, {%runtime.Type_Info**, i64}* %263, align 8
	%265 = extractvalue {%runtime.Type_Info**, i64} %264, 0
	%266 = load i64, i64* %10, align 8
	%267 = extractvalue {%runtime.Type_Info**, i64} %264, 1
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @str$137, i64 0, i32 0), i64 25}, i64 1050, i64 21, i64 %266, i64 %267)
	%268 = getelementptr inbounds %runtime.Type_Info*, %runtime.Type_Info** %265, i64 %266
	%269 = load %runtime.Type_Info*, %runtime.Type_Info** %268, align 8
	store %runtime.Type_Info* %269, %runtime.Type_Info** %15
	; SelectorExpr
	%270 = load %runtime.Type_Info*, %runtime.Type_Info** %15, align 8
	%271 = call i8 @types.is_any(%runtime.Type_Info* %270, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%272 = trunc i8 %271 to i1
	br i1 %272, label %if.then-24, label %if.else-25

if.then-24:
	; SelectorExpr
	%273 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%274 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %273, i64 0
	%275 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %274, i64 0, i32 12
	%276 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %275, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %276, %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str$138, i64 0, i32 0), i64 5}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %if.done-26

if.else-25:
	; data
	; SelectorExpr
	%277 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 0
	%278 = load %..rawptr, %..rawptr* %277, align 8
	%279 = ptrtoint %..rawptr %278 to i64
	; IndexExpr
	; SelectorExpr
	%280 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %5, i64 0, i32 2
	%281 = load {i64*, i64}, {i64*, i64}* %280, align 8
	%282 = extractvalue {i64*, i64} %281, 0
	%283 = load i64, i64* %10, align 8
	%284 = extractvalue {i64*, i64} %281, 1
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @str$139, i64 0, i32 0), i64 25}, i64 1053, i64 49, i64 %283, i64 %284)
	%285 = getelementptr inbounds i64, i64* %282, i64 %283
	%286 = load i64, i64* %285, align 8
	%287 = add i64 %279, %286
	%288 = inttoptr i64 %287 to %..rawptr
	store %..rawptr %288, %..rawptr* %16
	%289 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	; CompoundLit
	%290 = bitcast %..any* %17 to %..rawptr
	%291 = call %..rawptr @mem.zero(%..rawptr %290, i64 16) noinline
	store %..any zeroinitializer, %..any* %17
	store %..any zeroinitializer, %..any* %17
	%292 = load %..rawptr, %..rawptr* %16, align 8
	%293 = getelementptr inbounds %..any, %..any* %17, i64 0, i32 0
	store %..rawptr %292, %..rawptr* %293
	; SelectorExpr
	%294 = load %runtime.Type_Info*, %runtime.Type_Info** %15, align 8
	%295 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %294, i64 0
	%296 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %295, i64 0, i32 2
	%297 = load %..typeid, %..typeid* %296, align 8
	%298 = getelementptr inbounds %..any, %..any* %17, i64 0, i32 1
	store %..typeid %297, %..typeid* %298
	%299 = load %..any, %..any* %17, align 8
	call void @fmt.fmt_arg(%fmt.Fmt_Info* %289, %..any %299, i32 118, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %if.done-26

if.done-26:
	; IfStmt
	%300 = load i8, i8* %6, align 1
	%301 = trunc i8 %300 to i1
	br i1 %301, label %if.then-27, label %if.done-28

if.then-27:
	; SelectorExpr
	%302 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%303 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %302, i64 0
	%304 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %303, i64 0, i32 12
	%305 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %304, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %305, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @str$13a, i64 0, i32 0), i64 2}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %if.done-28

if.done-28:
	br label %for.index.loop-14

for.index.done-29:
	; IfStmt
	%306 = load i8, i8* %6, align 1
	%307 = trunc i8 %306 to i1
	br i1 %307, label %if.then-30, label %if.done-34

if.then-30:
	; RangeStmt
	%308 = bitcast i64* %18 to %..rawptr
	%309 = call %..rawptr @mem.zero(%..rawptr %308, i64 8) noinline
	store i64 zeroinitializer, i64* %18
	store i64 0, i64* %18
	%310 = bitcast i64* %19 to %..rawptr
	%311 = call %..rawptr @mem.zero(%..rawptr %310, i64 8) noinline
	store i64 zeroinitializer, i64* %19
	store i64 0, i64* %19
	br label %for.interval.loop-31

for.interval.loop-31:
	%312 = load i64, i64* %7, align 8
	%313 = sub i64 %312, 1
	%314 = load i64, i64* %18, align 8
	%315 = icmp sle i64 %314, %313
	br i1 %315, label %for.interval.body-32, label %for.interval.done-33

for.interval.body-32:
	%316 = load i64, i64* %18, align 8
	%317 = load i64, i64* %19, align 8
	%318 = load i64, i64* %18, align 8
	%319 = add i64 %318, 1
	store i64 %319, i64* %18
	%320 = load i64, i64* %19, align 8
	%321 = add i64 %320, 1
	store i64 %321, i64* %19
	; SelectorExpr
	%322 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%323 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %322, i64 0
	%324 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %323, i64 0, i32 12
	%325 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %324, align 8
	call void @fmt.write_byte({i8*, i64, i64, %mem.Allocator}* %325, i8 9, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %for.interval.loop-31

for.interval.done-33:
	br label %if.done-34

if.done-34:
	; SelectorExpr
	%326 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%327 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %326, i64 0
	%328 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %327, i64 0, i32 12
	%329 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %328, align 8
	call void @fmt.write_byte({i8*, i64, i64, %mem.Allocator}* %329, i8 125, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	; defer
	; AssignStmt
	; SelectorExpr
	%330 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%331 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %330, i64 0
	%332 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %331, i64 0, i32 9
	%333 = load i64, i64* %332, align 8
	%334 = sub i64 %333, 1
	store i64 %334, i64* %332
	; defer
	; AssignStmt
	; SelectorExpr
	%335 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%336 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %335, i64 0
	%337 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %336, i64 0, i32 4
	%338 = load i8, i8* %6, align 1
	store i8 %338, i8* %337
	br label %typeswitch.done-41

typeswitch.next-35:
	%339 = icmp eq i64 %143, 20
	br i1 %339, label %typeswitch.body-38, label %typeswitch.next-37

typeswitch.body-36:
	%340 = bitcast %..rawptr %144 to %runtime.Type_Info_Bit_Set*
	%341 = load %runtime.Type_Info_Bit_Set, %runtime.Type_Info_Bit_Set* %340, align 8
	store %runtime.Type_Info_Bit_Set %341, %runtime.Type_Info_Bit_Set* %20
	%342 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%343 = load %..any, %..any* %1, align 8
	call void @fmt.fmt_bit_set(%fmt.Fmt_Info* %342, %..any %343, %..string zeroinitializer, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %typeswitch.done-41

typeswitch.next-37:
	%344 = icmp eq i64 %143, 22
	br i1 %344, label %typeswitch.body-40, label %typeswitch.next-39

typeswitch.body-38:
	%345 = bitcast %..rawptr %144 to %runtime.Type_Info_Bit_Field*
	%346 = load %runtime.Type_Info_Bit_Field, %runtime.Type_Info_Bit_Field* %345, align 8
	store %runtime.Type_Info_Bit_Field %346, %runtime.Type_Info_Bit_Field* %21
	%347 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%348 = load %..any, %..any* %1, align 8
	call void @fmt.fmt_bit_field(%fmt.Fmt_Info* %347, %..any %348, %..string zeroinitializer, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %typeswitch.done-41

typeswitch.next-39:
	store {[0 x i64], [72 x i8], i64} %141, {[0 x i64], [72 x i8], i64}* %23
	%349 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	; CompoundLit
	%350 = bitcast %..any* %24 to %..rawptr
	%351 = call %..rawptr @mem.zero(%..rawptr %350, i64 16) noinline
	store %..any zeroinitializer, %..any* %24
	store %..any zeroinitializer, %..any* %24
	; SelectorExpr
	%352 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 0
	%353 = load %..rawptr, %..rawptr* %352, align 8
	%354 = getelementptr inbounds %..any, %..any* %24, i64 0, i32 0
	store %..rawptr %353, %..rawptr* %354
	; SelectorExpr
	; SelectorExpr
	%355 = getelementptr inbounds %runtime.Type_Info_Named, %runtime.Type_Info_Named* %4, i64 0, i32 1
	%356 = load %runtime.Type_Info*, %runtime.Type_Info** %355, align 8
	%357 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %356, i64 0
	%358 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %357, i64 0, i32 2
	%359 = load %..typeid, %..typeid* %358, align 8
	%360 = getelementptr inbounds %..any, %..any* %24, i64 0, i32 1
	store %..typeid %359, %..typeid* %360
	%361 = load %..any, %..any* %24, align 8
	%362 = load i32, i32* %2, align 4
	call void @fmt.fmt_value(%fmt.Fmt_Info* %349, %..any %361, i32 %362, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %typeswitch.done-41

typeswitch.body-40:
	%363 = bitcast %..rawptr %144 to %runtime.Type_Info_Opaque*
	%364 = load %runtime.Type_Info_Opaque, %runtime.Type_Info_Opaque* %363, align 8
	store %runtime.Type_Info_Opaque %364, %runtime.Type_Info_Opaque* %22
	%365 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%366 = load %..any, %..any* %1, align 8
	call void @fmt.fmt_opaque(%fmt.Fmt_Info* %365, %..any %366, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %typeswitch.done-41

typeswitch.done-41:
	br label %typeswitch.done-162

typeswitch.next-42:
	%367 = icmp eq i64 %131, 2
	br i1 %367, label %typeswitch.body-45, label %typeswitch.next-44

typeswitch.body-43:
	%368 = bitcast %..rawptr %132 to %runtime.Type_Info_Boolean*
	%369 = load %runtime.Type_Info_Boolean, %runtime.Type_Info_Boolean* %368, align 1
	store %runtime.Type_Info_Boolean %369, %runtime.Type_Info_Boolean* %25
	%370 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%371 = load %..any, %..any* %1, align 8
	%372 = load i32, i32* %2, align 4
	call void @fmt.fmt_arg(%fmt.Fmt_Info* %370, %..any %371, i32 %372, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %typeswitch.done-162

typeswitch.next-44:
	%373 = icmp eq i64 %131, 3
	br i1 %373, label %typeswitch.body-47, label %typeswitch.next-46

typeswitch.body-45:
	%374 = bitcast %..rawptr %132 to %runtime.Type_Info_Integer*
	%375 = load %runtime.Type_Info_Integer, %runtime.Type_Info_Integer* %374, align 1
	store %runtime.Type_Info_Integer %375, %runtime.Type_Info_Integer* %26
	%376 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%377 = load %..any, %..any* %1, align 8
	%378 = load i32, i32* %2, align 4
	call void @fmt.fmt_arg(%fmt.Fmt_Info* %376, %..any %377, i32 %378, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %typeswitch.done-162

typeswitch.next-46:
	%379 = icmp eq i64 %131, 4
	br i1 %379, label %typeswitch.body-49, label %typeswitch.next-48

typeswitch.body-47:
	%380 = bitcast %..rawptr %132 to %runtime.Type_Info_Rune*
	%381 = load %runtime.Type_Info_Rune, %runtime.Type_Info_Rune* %380, align 1
	store %runtime.Type_Info_Rune %381, %runtime.Type_Info_Rune* %27
	%382 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%383 = load %..any, %..any* %1, align 8
	%384 = load i32, i32* %2, align 4
	call void @fmt.fmt_arg(%fmt.Fmt_Info* %382, %..any %383, i32 %384, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %typeswitch.done-162

typeswitch.next-48:
	%385 = icmp eq i64 %131, 5
	br i1 %385, label %typeswitch.body-51, label %typeswitch.next-50

typeswitch.body-49:
	%386 = bitcast %..rawptr %132 to %runtime.Type_Info_Float*
	%387 = load %runtime.Type_Info_Float, %runtime.Type_Info_Float* %386, align 1
	store %runtime.Type_Info_Float %387, %runtime.Type_Info_Float* %28
	%388 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%389 = load %..any, %..any* %1, align 8
	%390 = load i32, i32* %2, align 4
	call void @fmt.fmt_arg(%fmt.Fmt_Info* %388, %..any %389, i32 %390, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %typeswitch.done-162

typeswitch.next-50:
	%391 = icmp eq i64 %131, 6
	br i1 %391, label %typeswitch.body-53, label %typeswitch.next-52

typeswitch.body-51:
	%392 = bitcast %..rawptr %132 to %runtime.Type_Info_Complex*
	%393 = load %runtime.Type_Info_Complex, %runtime.Type_Info_Complex* %392, align 1
	store %runtime.Type_Info_Complex %393, %runtime.Type_Info_Complex* %29
	%394 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%395 = load %..any, %..any* %1, align 8
	%396 = load i32, i32* %2, align 4
	call void @fmt.fmt_arg(%fmt.Fmt_Info* %394, %..any %395, i32 %396, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %typeswitch.done-162

typeswitch.next-52:
	%397 = icmp eq i64 %131, 10
	br i1 %397, label %typeswitch.body-55, label %typeswitch.next-54

typeswitch.body-53:
	%398 = bitcast %..rawptr %132 to %runtime.Type_Info_String*
	%399 = load %runtime.Type_Info_String, %runtime.Type_Info_String* %398, align 1
	store %runtime.Type_Info_String %399, %runtime.Type_Info_String* %30
	%400 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%401 = load %..any, %..any* %1, align 8
	%402 = load i32, i32* %2, align 4
	call void @fmt.fmt_arg(%fmt.Fmt_Info* %400, %..any %401, i32 %402, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %typeswitch.done-162

typeswitch.next-54:
	%403 = icmp eq i64 %131, 12
	br i1 %403, label %typeswitch.body-60, label %typeswitch.next-59

typeswitch.body-55:
	%404 = bitcast %..rawptr %132 to %runtime.Type_Info_Pointer*
	%405 = load %runtime.Type_Info_Pointer, %runtime.Type_Info_Pointer* %404, align 8
	store %runtime.Type_Info_Pointer %405, %runtime.Type_Info_Pointer* %31
	; IfStmt
	; SelectorExpr
	%406 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 1
	%407 = load %..typeid, %..typeid* %406, align 8
	%408 = icmp eq %..typeid %407, 648518346341351434
	%409 = zext i1 %408 to i8
	%410 = trunc i8 %409 to i1
	br i1 %410, label %if.then-56, label %if.else-57

if.then-56:
	; SelectorExpr
	%411 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%412 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %411, i64 0
	%413 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %412, i64 0, i32 12
	%414 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %413, align 8
	; SelectorExpr
	%415 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 0
	%416 = load %..rawptr, %..rawptr* %415, align 8
	%417 = bitcast %..rawptr %416 to %runtime.Type_Info**
	%418 = getelementptr inbounds %runtime.Type_Info*, %runtime.Type_Info** %417, i64 0
	%419 = load %runtime.Type_Info*, %runtime.Type_Info** %418, align 8
	call void @fmt.write_type({i8*, i64, i64, %mem.Allocator}* %414, %runtime.Type_Info* %419, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %if.done-58

if.else-57:
	%420 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	; SelectorExpr
	%421 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 0
	%422 = load %..rawptr, %..rawptr* %421, align 8
	%423 = bitcast %..rawptr %422 to %..rawptr*
	%424 = getelementptr inbounds %..rawptr, %..rawptr* %423, i64 0
	%425 = load %..rawptr, %..rawptr* %424, align 8
	%426 = load i32, i32* %2, align 4
	call void @fmt.fmt_pointer(%fmt.Fmt_Info* %420, %..rawptr %425, i32 %426, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %if.done-58

if.done-58:
	br label %typeswitch.done-162

typeswitch.next-59:
	%427 = icmp eq i64 %131, 13
	br i1 %427, label %typeswitch.body-67, label %typeswitch.next-66

typeswitch.body-60:
	%428 = bitcast %..rawptr %132 to %runtime.Type_Info_Array*
	%429 = load %runtime.Type_Info_Array, %runtime.Type_Info_Array* %428, align 8
	store %runtime.Type_Info_Array %429, %runtime.Type_Info_Array* %32
	; SelectorExpr
	%430 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%431 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %430, i64 0
	%432 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %431, i64 0, i32 12
	%433 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %432, align 8
	call void @fmt.write_byte({i8*, i64, i64, %mem.Allocator}* %433, i8 91, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	; DeferStmt
	; RangeStmt
	; i
	%434 = bitcast i64* %33 to %..rawptr
	%435 = call %..rawptr @mem.zero(%..rawptr %434, i64 8) noinline
	store i64 zeroinitializer, i64* %33
	%436 = bitcast i64* %34 to %..rawptr
	%437 = call %..rawptr @mem.zero(%..rawptr %436, i64 8) noinline
	store i64 zeroinitializer, i64* %34
	store i64 0, i64* %34
	%438 = bitcast i64* %35 to %..rawptr
	%439 = call %..rawptr @mem.zero(%..rawptr %438, i64 8) noinline
	store i64 zeroinitializer, i64* %35
	store i64 0, i64* %35
	br label %for.interval.loop-61

for.interval.loop-61:
	; SelectorExpr
	%440 = getelementptr inbounds %runtime.Type_Info_Array, %runtime.Type_Info_Array* %32, i64 0, i32 2
	%441 = load i64, i64* %440, align 8
	%442 = sub i64 %441, 1
	%443 = load i64, i64* %34, align 8
	%444 = icmp sle i64 %443, %442
	br i1 %444, label %for.interval.body-62, label %for.interval.done-65

for.interval.body-62:
	%445 = load i64, i64* %34, align 8
	%446 = load i64, i64* %35, align 8
	%447 = load i64, i64* %34, align 8
	%448 = add i64 %447, 1
	store i64 %448, i64* %34
	%449 = load i64, i64* %35, align 8
	%450 = add i64 %449, 1
	store i64 %450, i64* %35
	store i64 %445, i64* %33
	; IfStmt
	%451 = load i64, i64* %33, align 8
	%452 = icmp sgt i64 %451, 0
	%453 = zext i1 %452 to i8
	%454 = trunc i8 %453 to i1
	br i1 %454, label %if.then-63, label %if.done-64

if.then-63:
	; SelectorExpr
	%455 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%456 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %455, i64 0
	%457 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %456, i64 0, i32 12
	%458 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %457, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %458, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @str$13b, i64 0, i32 0), i64 2}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %if.done-64

if.done-64:
	; data
	; SelectorExpr
	%459 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 0
	%460 = load %..rawptr, %..rawptr* %459, align 8
	%461 = ptrtoint %..rawptr %460 to i64
	%462 = load i64, i64* %33, align 8
	; SelectorExpr
	%463 = getelementptr inbounds %runtime.Type_Info_Array, %runtime.Type_Info_Array* %32, i64 0, i32 1
	%464 = load i64, i64* %463, align 8
	%465 = mul i64 %462, %464
	%466 = bitcast i64 %465 to i64
	%467 = add i64 %461, %466
	store i64 %467, i64* %36
	%468 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	; CompoundLit
	%469 = bitcast %..any* %37 to %..rawptr
	%470 = call %..rawptr @mem.zero(%..rawptr %469, i64 16) noinline
	store %..any zeroinitializer, %..any* %37
	store %..any zeroinitializer, %..any* %37
	%471 = load i64, i64* %36, align 8
	%472 = inttoptr i64 %471 to %..rawptr
	%473 = getelementptr inbounds %..any, %..any* %37, i64 0, i32 0
	store %..rawptr %472, %..rawptr* %473
	; SelectorExpr
	; SelectorExpr
	%474 = getelementptr inbounds %runtime.Type_Info_Array, %runtime.Type_Info_Array* %32, i64 0, i32 0
	%475 = load %runtime.Type_Info*, %runtime.Type_Info** %474, align 8
	%476 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %475, i64 0
	%477 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %476, i64 0, i32 2
	%478 = load %..typeid, %..typeid* %477, align 8
	%479 = getelementptr inbounds %..any, %..any* %37, i64 0, i32 1
	store %..typeid %478, %..typeid* %479
	%480 = load %..any, %..any* %37, align 8
	%481 = load i32, i32* %2, align 4
	call void @fmt.fmt_arg(%fmt.Fmt_Info* %468, %..any %480, i32 %481, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %for.interval.loop-61

for.interval.done-65:
	; defer
	; SelectorExpr
	%482 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%483 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %482, i64 0
	%484 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %483, i64 0, i32 12
	%485 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %484, align 8
	call void @fmt.write_byte({i8*, i64, i64, %mem.Allocator}* %485, i8 93, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %typeswitch.done-162

typeswitch.next-66:
	%486 = icmp eq i64 %131, 14
	br i1 %486, label %typeswitch.body-74, label %typeswitch.next-73

typeswitch.body-67:
	%487 = bitcast %..rawptr %132 to %runtime.Type_Info_Dynamic_Array*
	%488 = load %runtime.Type_Info_Dynamic_Array, %runtime.Type_Info_Dynamic_Array* %487, align 8
	store %runtime.Type_Info_Dynamic_Array %488, %runtime.Type_Info_Dynamic_Array* %38
	; SelectorExpr
	%489 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%490 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %489, i64 0
	%491 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %490, i64 0, i32 12
	%492 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %491, align 8
	call void @fmt.write_byte({i8*, i64, i64, %mem.Allocator}* %492, i8 91, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	; DeferStmt
	; array
	; SelectorExpr
	%493 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 0
	%494 = load %..rawptr, %..rawptr* %493, align 8
	%495 = bitcast %..rawptr %494 to %mem.Raw_Dynamic_Array*
	store %mem.Raw_Dynamic_Array* %495, %mem.Raw_Dynamic_Array** %39
	; RangeStmt
	; i
	%496 = bitcast i64* %40 to %..rawptr
	%497 = call %..rawptr @mem.zero(%..rawptr %496, i64 8) noinline
	store i64 zeroinitializer, i64* %40
	%498 = bitcast i64* %41 to %..rawptr
	%499 = call %..rawptr @mem.zero(%..rawptr %498, i64 8) noinline
	store i64 zeroinitializer, i64* %41
	store i64 0, i64* %41
	%500 = bitcast i64* %42 to %..rawptr
	%501 = call %..rawptr @mem.zero(%..rawptr %500, i64 8) noinline
	store i64 zeroinitializer, i64* %42
	store i64 0, i64* %42
	br label %for.interval.loop-68

for.interval.loop-68:
	; SelectorExpr
	%502 = load %mem.Raw_Dynamic_Array*, %mem.Raw_Dynamic_Array** %39, align 8
	%503 = getelementptr inbounds %mem.Raw_Dynamic_Array, %mem.Raw_Dynamic_Array* %502, i64 0
	%504 = getelementptr inbounds %mem.Raw_Dynamic_Array, %mem.Raw_Dynamic_Array* %503, i64 0, i32 1
	%505 = load i64, i64* %504, align 8
	%506 = sub i64 %505, 1
	%507 = load i64, i64* %41, align 8
	%508 = icmp sle i64 %507, %506
	br i1 %508, label %for.interval.body-69, label %for.interval.done-72

for.interval.body-69:
	%509 = load i64, i64* %41, align 8
	%510 = load i64, i64* %42, align 8
	%511 = load i64, i64* %41, align 8
	%512 = add i64 %511, 1
	store i64 %512, i64* %41
	%513 = load i64, i64* %42, align 8
	%514 = add i64 %513, 1
	store i64 %514, i64* %42
	store i64 %509, i64* %40
	; IfStmt
	%515 = load i64, i64* %40, align 8
	%516 = icmp sgt i64 %515, 0
	%517 = zext i1 %516 to i8
	%518 = trunc i8 %517 to i1
	br i1 %518, label %if.then-70, label %if.done-71

if.then-70:
	; SelectorExpr
	%519 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%520 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %519, i64 0
	%521 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %520, i64 0, i32 12
	%522 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %521, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %522, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @str$13c, i64 0, i32 0), i64 2}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %if.done-71

if.done-71:
	; data
	; SelectorExpr
	%523 = load %mem.Raw_Dynamic_Array*, %mem.Raw_Dynamic_Array** %39, align 8
	%524 = getelementptr inbounds %mem.Raw_Dynamic_Array, %mem.Raw_Dynamic_Array* %523, i64 0
	%525 = getelementptr inbounds %mem.Raw_Dynamic_Array, %mem.Raw_Dynamic_Array* %524, i64 0, i32 0
	%526 = load %..rawptr, %..rawptr* %525, align 8
	%527 = ptrtoint %..rawptr %526 to i64
	%528 = load i64, i64* %40, align 8
	; SelectorExpr
	%529 = getelementptr inbounds %runtime.Type_Info_Dynamic_Array, %runtime.Type_Info_Dynamic_Array* %38, i64 0, i32 1
	%530 = load i64, i64* %529, align 8
	%531 = mul i64 %528, %530
	%532 = bitcast i64 %531 to i64
	%533 = add i64 %527, %532
	store i64 %533, i64* %43
	%534 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	; CompoundLit
	%535 = bitcast %..any* %44 to %..rawptr
	%536 = call %..rawptr @mem.zero(%..rawptr %535, i64 16) noinline
	store %..any zeroinitializer, %..any* %44
	store %..any zeroinitializer, %..any* %44
	%537 = load i64, i64* %43, align 8
	%538 = inttoptr i64 %537 to %..rawptr
	%539 = getelementptr inbounds %..any, %..any* %44, i64 0, i32 0
	store %..rawptr %538, %..rawptr* %539
	; SelectorExpr
	; SelectorExpr
	%540 = getelementptr inbounds %runtime.Type_Info_Dynamic_Array, %runtime.Type_Info_Dynamic_Array* %38, i64 0, i32 0
	%541 = load %runtime.Type_Info*, %runtime.Type_Info** %540, align 8
	%542 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %541, i64 0
	%543 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %542, i64 0, i32 2
	%544 = load %..typeid, %..typeid* %543, align 8
	%545 = getelementptr inbounds %..any, %..any* %44, i64 0, i32 1
	store %..typeid %544, %..typeid* %545
	%546 = load %..any, %..any* %44, align 8
	%547 = load i32, i32* %2, align 4
	call void @fmt.fmt_arg(%fmt.Fmt_Info* %534, %..any %546, i32 %547, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %for.interval.loop-68

for.interval.done-72:
	; defer
	; SelectorExpr
	%548 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%549 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %548, i64 0
	%550 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %549, i64 0, i32 12
	%551 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %550, align 8
	call void @fmt.write_byte({i8*, i64, i64, %mem.Allocator}* %551, i8 93, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %typeswitch.done-162

typeswitch.next-73:
	%552 = icmp eq i64 %131, 19
	br i1 %552, label %typeswitch.body-81, label %typeswitch.next-80

typeswitch.body-74:
	%553 = bitcast %..rawptr %132 to %runtime.Type_Info_Slice*
	%554 = load %runtime.Type_Info_Slice, %runtime.Type_Info_Slice* %553, align 8
	store %runtime.Type_Info_Slice %554, %runtime.Type_Info_Slice* %45
	; SelectorExpr
	%555 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%556 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %555, i64 0
	%557 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %556, i64 0, i32 12
	%558 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %557, align 8
	call void @fmt.write_byte({i8*, i64, i64, %mem.Allocator}* %558, i8 91, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	; DeferStmt
	; slice
	; SelectorExpr
	%559 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 0
	%560 = load %..rawptr, %..rawptr* %559, align 8
	%561 = bitcast %..rawptr %560 to %mem.Raw_Slice*
	store %mem.Raw_Slice* %561, %mem.Raw_Slice** %46
	; RangeStmt
	; i
	%562 = bitcast i64* %47 to %..rawptr
	%563 = call %..rawptr @mem.zero(%..rawptr %562, i64 8) noinline
	store i64 zeroinitializer, i64* %47
	%564 = bitcast i64* %48 to %..rawptr
	%565 = call %..rawptr @mem.zero(%..rawptr %564, i64 8) noinline
	store i64 zeroinitializer, i64* %48
	store i64 0, i64* %48
	%566 = bitcast i64* %49 to %..rawptr
	%567 = call %..rawptr @mem.zero(%..rawptr %566, i64 8) noinline
	store i64 zeroinitializer, i64* %49
	store i64 0, i64* %49
	br label %for.interval.loop-75

for.interval.loop-75:
	; SelectorExpr
	%568 = load %mem.Raw_Slice*, %mem.Raw_Slice** %46, align 8
	%569 = getelementptr inbounds %mem.Raw_Slice, %mem.Raw_Slice* %568, i64 0
	%570 = getelementptr inbounds %mem.Raw_Slice, %mem.Raw_Slice* %569, i64 0, i32 1
	%571 = load i64, i64* %570, align 8
	%572 = sub i64 %571, 1
	%573 = load i64, i64* %48, align 8
	%574 = icmp sle i64 %573, %572
	br i1 %574, label %for.interval.body-76, label %for.interval.done-79

for.interval.body-76:
	%575 = load i64, i64* %48, align 8
	%576 = load i64, i64* %49, align 8
	%577 = load i64, i64* %48, align 8
	%578 = add i64 %577, 1
	store i64 %578, i64* %48
	%579 = load i64, i64* %49, align 8
	%580 = add i64 %579, 1
	store i64 %580, i64* %49
	store i64 %575, i64* %47
	; IfStmt
	%581 = load i64, i64* %47, align 8
	%582 = icmp sgt i64 %581, 0
	%583 = zext i1 %582 to i8
	%584 = trunc i8 %583 to i1
	br i1 %584, label %if.then-77, label %if.done-78

if.then-77:
	; SelectorExpr
	%585 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%586 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %585, i64 0
	%587 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %586, i64 0, i32 12
	%588 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %587, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %588, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @str$13d, i64 0, i32 0), i64 2}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %if.done-78

if.done-78:
	; data
	; SelectorExpr
	%589 = load %mem.Raw_Slice*, %mem.Raw_Slice** %46, align 8
	%590 = getelementptr inbounds %mem.Raw_Slice, %mem.Raw_Slice* %589, i64 0
	%591 = getelementptr inbounds %mem.Raw_Slice, %mem.Raw_Slice* %590, i64 0, i32 0
	%592 = load %..rawptr, %..rawptr* %591, align 8
	%593 = ptrtoint %..rawptr %592 to i64
	%594 = load i64, i64* %47, align 8
	; SelectorExpr
	%595 = getelementptr inbounds %runtime.Type_Info_Slice, %runtime.Type_Info_Slice* %45, i64 0, i32 1
	%596 = load i64, i64* %595, align 8
	%597 = mul i64 %594, %596
	%598 = bitcast i64 %597 to i64
	%599 = add i64 %593, %598
	store i64 %599, i64* %50
	%600 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	; CompoundLit
	%601 = bitcast %..any* %51 to %..rawptr
	%602 = call %..rawptr @mem.zero(%..rawptr %601, i64 16) noinline
	store %..any zeroinitializer, %..any* %51
	store %..any zeroinitializer, %..any* %51
	%603 = load i64, i64* %50, align 8
	%604 = inttoptr i64 %603 to %..rawptr
	%605 = getelementptr inbounds %..any, %..any* %51, i64 0, i32 0
	store %..rawptr %604, %..rawptr* %605
	; SelectorExpr
	; SelectorExpr
	%606 = getelementptr inbounds %runtime.Type_Info_Slice, %runtime.Type_Info_Slice* %45, i64 0, i32 0
	%607 = load %runtime.Type_Info*, %runtime.Type_Info** %606, align 8
	%608 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %607, i64 0
	%609 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %608, i64 0, i32 2
	%610 = load %..typeid, %..typeid* %609, align 8
	%611 = getelementptr inbounds %..any, %..any* %51, i64 0, i32 1
	store %..typeid %610, %..typeid* %611
	%612 = load %..any, %..any* %51, align 8
	%613 = load i32, i32* %2, align 4
	call void @fmt.fmt_arg(%fmt.Fmt_Info* %600, %..any %612, i32 %613, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %for.interval.loop-75

for.interval.done-79:
	; defer
	; SelectorExpr
	%614 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%615 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %614, i64 0
	%616 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %615, i64 0, i32 12
	%617 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %616, align 8
	call void @fmt.write_byte({i8*, i64, i64, %mem.Allocator}* %617, i8 93, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %typeswitch.done-162

typeswitch.next-80:
	%618 = icmp eq i64 %131, 16
	br i1 %618, label %typeswitch.body-103, label %typeswitch.next-102

typeswitch.body-81:
	%619 = bitcast %..rawptr %132 to %runtime.Type_Info_Map*
	%620 = load %runtime.Type_Info_Map, %runtime.Type_Info_Map* %619, align 8
	store %runtime.Type_Info_Map %620, %runtime.Type_Info_Map* %52
	; IfStmt
	%621 = load i32, i32* %2, align 4
	%622 = icmp ne i32 %621, 118
	%623 = zext i1 %622 to i8
	%624 = trunc i8 %623 to i1
	br i1 %624, label %if.then-82, label %if.done-83

if.then-82:
	%625 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%626 = load i32, i32* %2, align 4
	call void @fmt.fmt_bad_verb(%fmt.Fmt_Info* %625, i32 %626, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	; ReturnStmt
	ret void

if.done-83:
	; SelectorExpr
	%627 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%628 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %627, i64 0
	%629 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %628, i64 0, i32 12
	%630 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %629, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %630, %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str$13e, i64 0, i32 0), i64 4}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	; DeferStmt
	; m
	; SelectorExpr
	%631 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 0
	%632 = load %..rawptr, %..rawptr* %631, align 8
	%633 = bitcast %..rawptr %632 to %mem.Raw_Map*
	store %mem.Raw_Map* %633, %mem.Raw_Map** %53
	; IfStmt
	%634 = load %mem.Raw_Map*, %mem.Raw_Map** %53, align 8
	%635 = icmp ne %mem.Raw_Map* %634, zeroinitializer
	%636 = zext i1 %635 to i8
	%637 = trunc i8 %636 to i1
	br i1 %637, label %if.then-84, label %if.done-101

if.then-84:
	; IfStmt
	; SelectorExpr
	%638 = getelementptr inbounds %runtime.Type_Info_Map, %runtime.Type_Info_Map* %52, i64 0, i32 2
	%639 = load %runtime.Type_Info*, %runtime.Type_Info** %638, align 8
	%640 = icmp eq %runtime.Type_Info* %639, zeroinitializer
	%641 = zext i1 %640 to i8
	%642 = trunc i8 %641 to i1
	br i1 %642, label %if.then-85, label %if.done-86

if.then-85:
	; ReturnStmt
	; defer
	; SelectorExpr
	%643 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%644 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %643, i64 0
	%645 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %644, i64 0, i32 12
	%646 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %645, align 8
	call void @fmt.write_byte({i8*, i64, i64, %mem.Allocator}* %646, i8 93, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	ret void

if.done-86:
	; entries
	; SelectorExpr
	%647 = load %mem.Raw_Map*, %mem.Raw_Map** %53, align 8
	%648 = getelementptr inbounds %mem.Raw_Map, %mem.Raw_Map* %647, i64 0
	%649 = getelementptr inbounds %mem.Raw_Map, %mem.Raw_Map* %648, i64 0, i32 1
	store %mem.Raw_Dynamic_Array* %649, %mem.Raw_Dynamic_Array** %54
	; gs
	; SelectorExpr
	; SelectorExpr
	; SelectorExpr
	%650 = getelementptr inbounds %runtime.Type_Info_Map, %runtime.Type_Info_Map* %52, i64 0, i32 2
	%651 = load %runtime.Type_Info*, %runtime.Type_Info** %650, align 8
	%652 = call %runtime.Type_Info* @runtime.type_info_base(%runtime.Type_Info* %651)
	%653 = bitcast %runtime.Type_Info** %56 to %..rawptr
	%654 = call %..rawptr @mem.zero(%..rawptr %653, i64 8) noinline
	store %runtime.Type_Info* zeroinitializer, %runtime.Type_Info** %56
	store %runtime.Type_Info* %652, %runtime.Type_Info** %56
	%655 = load %runtime.Type_Info*, %runtime.Type_Info** %56, align 8
	%656 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %655, i64 0
	%657 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %656, i64 0, i32 3
	%658 = load {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %657, align 8
	; cast - union_cast
	%659 = bitcast {%runtime.Type_Info_Struct, i8}* %57 to %..rawptr
	%660 = call %..rawptr @mem.zero(%..rawptr %659, i64 80) noinline
	store {%runtime.Type_Info_Struct, i8} zeroinitializer, {%runtime.Type_Info_Struct, i8}* %57
	%661 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %657, i64 0, i32 2 ; UnionTagPtr
	%662 = load i64, i64* %661, align 8
	%663 = icmp eq i64 %662, 16
	br i1 %663, label %union_cast.ok-87, label %union_cast.end-88

union_cast.ok-87:
	%664 = getelementptr inbounds {%runtime.Type_Info_Struct, i8}, {%runtime.Type_Info_Struct, i8}* %57, i64 0, i32 0
	%665 = getelementptr inbounds {%runtime.Type_Info_Struct, i8}, {%runtime.Type_Info_Struct, i8}* %57, i64 0, i32 1
	%666 = bitcast {[0 x i64], [72 x i8], i64}* %657 to %runtime.Type_Info_Struct*
	%667 = load %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %666, align 8
	store %runtime.Type_Info_Struct %667, %runtime.Type_Info_Struct* %664
	store i8 1, i8* %665
	br label %union_cast.end-88

union_cast.end-88:
	%668 = getelementptr inbounds {%runtime.Type_Info_Struct, i8}, {%runtime.Type_Info_Struct, i8}* %57, i64 0, i32 1
	%669 = load i8, i8* %668, align 1
	%670 = trunc i8 %669 to i1
	call void @runtime.type_assertion_check(i1 %670, %..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @str$13f, i64 0, i32 0), i64 25}, i64 1134, i64 64, %..typeid 1152921504606846990, %..typeid 3386706919782613040)
	%671 = getelementptr inbounds {%runtime.Type_Info_Struct, i8}, {%runtime.Type_Info_Struct, i8}* %57, i64 0, i32 0
	%672 = load %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %671, align 8
	store %runtime.Type_Info_Struct %672, %runtime.Type_Info_Struct* %55
	; ed
	; SelectorExpr
	; SelectorExpr
	; IndexExpr
	; SelectorExpr
	%673 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %55, i64 0, i32 0
	%674 = load {%runtime.Type_Info**, i64}, {%runtime.Type_Info**, i64}* %673, align 8
	%675 = extractvalue {%runtime.Type_Info**, i64} %674, 0
	%676 = extractvalue {%runtime.Type_Info**, i64} %674, 1
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @str$140, i64 0, i32 0), i64 25}, i64 1135, i64 50, i64 1, i64 %676)
	%677 = getelementptr inbounds %runtime.Type_Info*, %runtime.Type_Info** %675, i64 1
	%678 = load %runtime.Type_Info*, %runtime.Type_Info** %677, align 8
	%679 = call %runtime.Type_Info* @runtime.type_info_base(%runtime.Type_Info* %678)
	%680 = bitcast %runtime.Type_Info** %59 to %..rawptr
	%681 = call %..rawptr @mem.zero(%..rawptr %680, i64 8) noinline
	store %runtime.Type_Info* zeroinitializer, %runtime.Type_Info** %59
	store %runtime.Type_Info* %679, %runtime.Type_Info** %59
	%682 = load %runtime.Type_Info*, %runtime.Type_Info** %59, align 8
	%683 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %682, i64 0
	%684 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %683, i64 0, i32 3
	%685 = load {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %684, align 8
	; cast - union_cast
	%686 = bitcast {%runtime.Type_Info_Dynamic_Array, i8}* %60 to %..rawptr
	%687 = call %..rawptr @mem.zero(%..rawptr %686, i64 24) noinline
	store {%runtime.Type_Info_Dynamic_Array, i8} zeroinitializer, {%runtime.Type_Info_Dynamic_Array, i8}* %60
	%688 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %684, i64 0, i32 2 ; UnionTagPtr
	%689 = load i64, i64* %688, align 8
	%690 = icmp eq i64 %689, 13
	br i1 %690, label %union_cast.ok-89, label %union_cast.end-90

union_cast.ok-89:
	%691 = getelementptr inbounds {%runtime.Type_Info_Dynamic_Array, i8}, {%runtime.Type_Info_Dynamic_Array, i8}* %60, i64 0, i32 0
	%692 = getelementptr inbounds {%runtime.Type_Info_Dynamic_Array, i8}, {%runtime.Type_Info_Dynamic_Array, i8}* %60, i64 0, i32 1
	%693 = bitcast {[0 x i64], [72 x i8], i64}* %684 to %runtime.Type_Info_Dynamic_Array*
	%694 = load %runtime.Type_Info_Dynamic_Array, %runtime.Type_Info_Dynamic_Array* %693, align 8
	store %runtime.Type_Info_Dynamic_Array %694, %runtime.Type_Info_Dynamic_Array* %691
	store i8 1, i8* %692
	br label %union_cast.end-90

union_cast.end-90:
	%695 = getelementptr inbounds {%runtime.Type_Info_Dynamic_Array, i8}, {%runtime.Type_Info_Dynamic_Array, i8}* %60, i64 0, i32 1
	%696 = load i8, i8* %695, align 1
	%697 = trunc i8 %696 to i1
	call void @runtime.type_assertion_check(i1 %697, %..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @str$141, i64 0, i32 0), i64 25}, i64 1135, i64 54, %..typeid 1152921504606846990, %..typeid 3386706919782613031)
	%698 = getelementptr inbounds {%runtime.Type_Info_Dynamic_Array, i8}, {%runtime.Type_Info_Dynamic_Array, i8}* %60, i64 0, i32 0
	%699 = load %runtime.Type_Info_Dynamic_Array, %runtime.Type_Info_Dynamic_Array* %698, align 8
	store %runtime.Type_Info_Dynamic_Array %699, %runtime.Type_Info_Dynamic_Array* %58
	; entry_type
	; SelectorExpr
	; SelectorExpr
	%700 = getelementptr inbounds %runtime.Type_Info_Dynamic_Array, %runtime.Type_Info_Dynamic_Array* %58, i64 0, i32 0
	%701 = load %runtime.Type_Info*, %runtime.Type_Info** %700, align 8
	%702 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %701, i64 0
	%703 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %702, i64 0, i32 3
	%704 = load {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %703, align 8
	; cast - union_cast
	%705 = bitcast {%runtime.Type_Info_Struct, i8}* %62 to %..rawptr
	%706 = call %..rawptr @mem.zero(%..rawptr %705, i64 80) noinline
	store {%runtime.Type_Info_Struct, i8} zeroinitializer, {%runtime.Type_Info_Struct, i8}* %62
	%707 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %703, i64 0, i32 2 ; UnionTagPtr
	%708 = load i64, i64* %707, align 8
	%709 = icmp eq i64 %708, 16
	br i1 %709, label %union_cast.ok-91, label %union_cast.end-92

union_cast.ok-91:
	%710 = getelementptr inbounds {%runtime.Type_Info_Struct, i8}, {%runtime.Type_Info_Struct, i8}* %62, i64 0, i32 0
	%711 = getelementptr inbounds {%runtime.Type_Info_Struct, i8}, {%runtime.Type_Info_Struct, i8}* %62, i64 0, i32 1
	%712 = bitcast {[0 x i64], [72 x i8], i64}* %703 to %runtime.Type_Info_Struct*
	%713 = load %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %712, align 8
	store %runtime.Type_Info_Struct %713, %runtime.Type_Info_Struct* %710
	store i8 1, i8* %711
	br label %union_cast.end-92

union_cast.end-92:
	%714 = getelementptr inbounds {%runtime.Type_Info_Struct, i8}, {%runtime.Type_Info_Struct, i8}* %62, i64 0, i32 1
	%715 = load i8, i8* %714, align 1
	%716 = trunc i8 %715 to i1
	call void @runtime.type_assertion_check(i1 %716, %..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @str$142, i64 0, i32 0), i64 25}, i64 1136, i64 26, %..typeid 1152921504606846990, %..typeid 3386706919782613040)
	%717 = getelementptr inbounds {%runtime.Type_Info_Struct, i8}, {%runtime.Type_Info_Struct, i8}* %62, i64 0, i32 0
	%718 = load %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %717, align 8
	store %runtime.Type_Info_Struct %718, %runtime.Type_Info_Struct* %61
	; entry_size
	; SelectorExpr
	%719 = getelementptr inbounds %runtime.Type_Info_Dynamic_Array, %runtime.Type_Info_Dynamic_Array* %58, i64 0, i32 1
	%720 = load i64, i64* %719, align 8
	store i64 %720, i64* %63
	; RangeStmt
	; i
	%721 = bitcast i64* %64 to %..rawptr
	%722 = call %..rawptr @mem.zero(%..rawptr %721, i64 8) noinline
	store i64 zeroinitializer, i64* %64
	%723 = bitcast i64* %65 to %..rawptr
	%724 = call %..rawptr @mem.zero(%..rawptr %723, i64 8) noinline
	store i64 zeroinitializer, i64* %65
	store i64 0, i64* %65
	%725 = bitcast i64* %66 to %..rawptr
	%726 = call %..rawptr @mem.zero(%..rawptr %725, i64 8) noinline
	store i64 zeroinitializer, i64* %66
	store i64 0, i64* %66
	br label %for.interval.loop-93

for.interval.loop-93:
	; SelectorExpr
	%727 = load %mem.Raw_Dynamic_Array*, %mem.Raw_Dynamic_Array** %54, align 8
	%728 = getelementptr inbounds %mem.Raw_Dynamic_Array, %mem.Raw_Dynamic_Array* %727, i64 0
	%729 = getelementptr inbounds %mem.Raw_Dynamic_Array, %mem.Raw_Dynamic_Array* %728, i64 0, i32 1
	%730 = load i64, i64* %729, align 8
	%731 = sub i64 %730, 1
	%732 = load i64, i64* %65, align 8
	%733 = icmp sle i64 %732, %731
	br i1 %733, label %for.interval.body-94, label %for.interval.done-100

for.interval.body-94:
	%734 = load i64, i64* %65, align 8
	%735 = load i64, i64* %66, align 8
	%736 = load i64, i64* %65, align 8
	%737 = add i64 %736, 1
	store i64 %737, i64* %65
	%738 = load i64, i64* %66, align 8
	%739 = add i64 %738, 1
	store i64 %739, i64* %66
	store i64 %734, i64* %64
	; IfStmt
	%740 = load i64, i64* %64, align 8
	%741 = icmp sgt i64 %740, 0
	%742 = zext i1 %741 to i8
	%743 = trunc i8 %742 to i1
	br i1 %743, label %if.then-95, label %if.done-96

if.then-95:
	; SelectorExpr
	%744 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%745 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %744, i64 0
	%746 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %745, i64 0, i32 12
	%747 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %746, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %747, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @str$143, i64 0, i32 0), i64 2}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %if.done-96

if.done-96:
	; data
	; SelectorExpr
	%748 = load %mem.Raw_Dynamic_Array*, %mem.Raw_Dynamic_Array** %54, align 8
	%749 = getelementptr inbounds %mem.Raw_Dynamic_Array, %mem.Raw_Dynamic_Array* %748, i64 0
	%750 = getelementptr inbounds %mem.Raw_Dynamic_Array, %mem.Raw_Dynamic_Array* %749, i64 0, i32 0
	%751 = load %..rawptr, %..rawptr* %750, align 8
	%752 = ptrtoint %..rawptr %751 to i64
	%753 = load i64, i64* %64, align 8
	%754 = load i64, i64* %63, align 8
	%755 = mul i64 %753, %754
	%756 = bitcast i64 %755 to i64
	%757 = add i64 %752, %756
	store i64 %757, i64* %67
	; header
	%758 = load i64, i64* %67, align 8
	%759 = inttoptr i64 %758 to %runtime.Map_Entry_Header*
	store %runtime.Map_Entry_Header* %759, %runtime.Map_Entry_Header** %68
	; IfStmt
	; SelectorExpr
	; SelectorExpr
	%760 = getelementptr inbounds %runtime.Type_Info_Map, %runtime.Type_Info_Map* %52, i64 0, i32 0
	%761 = load %runtime.Type_Info*, %runtime.Type_Info** %760, align 8
	%762 = call i8 @types.is_string(%runtime.Type_Info* %761, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%763 = trunc i8 %762 to i1
	br i1 %763, label %if.then-97, label %if.else-98

if.then-97:
	; SelectorExpr
	%764 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%765 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %764, i64 0
	%766 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %765, i64 0, i32 12
	%767 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %766, align 8
	; SelectorExpr
	; SelectorExpr
	%768 = load %runtime.Map_Entry_Header*, %runtime.Map_Entry_Header** %68, align 8
	%769 = getelementptr inbounds %runtime.Map_Entry_Header, %runtime.Map_Entry_Header* %768, i64 0
	%770 = getelementptr inbounds %runtime.Map_Entry_Header, %runtime.Map_Entry_Header* %769, i64 0, i32 0
	%771 = getelementptr inbounds %runtime.Map_Key, %runtime.Map_Key* %770, i64 0, i32 1
	%772 = load %..string, %..string* %771, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %767, %..string %772, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %if.done-99

if.else-98:
	; fi
	; CompoundLit
	%773 = bitcast %fmt.Fmt_Info* %70 to %..rawptr
	%774 = call %..rawptr @mem.zero(%..rawptr %773, i64 64) noinline
	store %fmt.Fmt_Info zeroinitializer, %fmt.Fmt_Info* %70
	store %fmt.Fmt_Info {i8 zeroinitializer, i8 zeroinitializer, i8 zeroinitializer, i8 zeroinitializer, i8 zeroinitializer, i8 zeroinitializer, i8 zeroinitializer, i64 zeroinitializer, i64 zeroinitializer, i64 zeroinitializer, i8 zeroinitializer, i8 zeroinitializer, {i8*, i64, i64, %mem.Allocator}* zeroinitializer, %..any zeroinitializer}, %fmt.Fmt_Info* %70
	; SelectorExpr
	%775 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%776 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %775, i64 0
	%777 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %776, i64 0, i32 12
	%778 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %777, align 8
	%779 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %70, i64 0, i32 12
	store {i8*, i64, i64, %mem.Allocator}* %778, {i8*, i64, i64, %mem.Allocator}** %779
	%780 = load %fmt.Fmt_Info, %fmt.Fmt_Info* %70, align 8
	store %fmt.Fmt_Info %780, %fmt.Fmt_Info* %69
	; CompoundLit
	%781 = bitcast %..any* %71 to %..rawptr
	%782 = call %..rawptr @mem.zero(%..rawptr %781, i64 16) noinline
	store %..any zeroinitializer, %..any* %71
	store %..any zeroinitializer, %..any* %71
	; SelectorExpr
	; SelectorExpr
	%783 = load %runtime.Map_Entry_Header*, %runtime.Map_Entry_Header** %68, align 8
	%784 = getelementptr inbounds %runtime.Map_Entry_Header, %runtime.Map_Entry_Header* %783, i64 0
	%785 = getelementptr inbounds %runtime.Map_Entry_Header, %runtime.Map_Entry_Header* %784, i64 0, i32 0
	%786 = getelementptr inbounds %runtime.Map_Key, %runtime.Map_Key* %785, i64 0, i32 0
	%787 = bitcast i64* %786 to %..rawptr
	%788 = getelementptr inbounds %..any, %..any* %71, i64 0, i32 0
	store %..rawptr %787, %..rawptr* %788
	; SelectorExpr
	; SelectorExpr
	%789 = getelementptr inbounds %runtime.Type_Info_Map, %runtime.Type_Info_Map* %52, i64 0, i32 0
	%790 = load %runtime.Type_Info*, %runtime.Type_Info** %789, align 8
	%791 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %790, i64 0
	%792 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %791, i64 0, i32 2
	%793 = load %..typeid, %..typeid* %792, align 8
	%794 = getelementptr inbounds %..any, %..any* %71, i64 0, i32 1
	store %..typeid %793, %..typeid* %794
	%795 = load %..any, %..any* %71, align 8
	call void @fmt.fmt_arg(%fmt.Fmt_Info* %69, %..any %795, i32 118, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %if.done-99

if.done-99:
	; SelectorExpr
	%796 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%797 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %796, i64 0
	%798 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %797, i64 0, i32 12
	%799 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %798, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %799, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str$144, i64 0, i32 0), i64 1}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	; value
	%800 = load i64, i64* %67, align 8
	; IndexExpr
	; SelectorExpr
	%801 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %61, i64 0, i32 2
	%802 = load {i64*, i64}, {i64*, i64}* %801, align 8
	%803 = extractvalue {i64*, i64} %802, 0
	%804 = extractvalue {i64*, i64} %802, 1
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @str$145, i64 0, i32 0), i64 25}, i64 1154, i64 40, i64 2, i64 %804)
	%805 = getelementptr inbounds i64, i64* %803, i64 2
	%806 = load i64, i64* %805, align 8
	%807 = add i64 %800, %806
	store i64 %807, i64* %72
	%808 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	; CompoundLit
	%809 = bitcast %..any* %73 to %..rawptr
	%810 = call %..rawptr @mem.zero(%..rawptr %809, i64 16) noinline
	store %..any zeroinitializer, %..any* %73
	store %..any zeroinitializer, %..any* %73
	%811 = load i64, i64* %72, align 8
	%812 = inttoptr i64 %811 to %..rawptr
	%813 = getelementptr inbounds %..any, %..any* %73, i64 0, i32 0
	store %..rawptr %812, %..rawptr* %813
	; SelectorExpr
	; SelectorExpr
	%814 = getelementptr inbounds %runtime.Type_Info_Map, %runtime.Type_Info_Map* %52, i64 0, i32 1
	%815 = load %runtime.Type_Info*, %runtime.Type_Info** %814, align 8
	%816 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %815, i64 0
	%817 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %816, i64 0, i32 2
	%818 = load %..typeid, %..typeid* %817, align 8
	%819 = getelementptr inbounds %..any, %..any* %73, i64 0, i32 1
	store %..typeid %818, %..typeid* %819
	%820 = load %..any, %..any* %73, align 8
	call void @fmt.fmt_arg(%fmt.Fmt_Info* %808, %..any %820, i32 118, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %for.interval.loop-93

for.interval.done-100:
	br label %if.done-101

if.done-101:
	; defer
	; SelectorExpr
	%821 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%822 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %821, i64 0
	%823 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %822, i64 0, i32 12
	%824 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %823, align 8
	call void @fmt.write_byte({i8*, i64, i64, %mem.Allocator}* %824, i8 93, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %typeswitch.done-162

typeswitch.next-102:
	%825 = icmp eq i64 %131, 17
	br i1 %825, label %typeswitch.body-125, label %typeswitch.next-124

typeswitch.body-103:
	%826 = bitcast %..rawptr %132 to %runtime.Type_Info_Struct*
	%827 = load %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %826, align 8
	store %runtime.Type_Info_Struct %827, %runtime.Type_Info_Struct* %74
	; IfStmt
	; SelectorExpr
	%828 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %74, i64 0, i32 5
	%829 = load i8, i8* %828, align 1
	%830 = trunc i8 %829 to i1
	br i1 %830, label %if.then-104, label %if.done-105

if.then-104:
	; SelectorExpr
	%831 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%832 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %831, i64 0
	%833 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %832, i64 0, i32 12
	%834 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %833, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %834, %..string {i8* getelementptr inbounds ([12 x i8], [12 x i8]* @str$146, i64 0, i32 0), i64 11}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	; ReturnStmt
	ret void

if.done-105:
	; SelectorExpr
	%835 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%836 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %835, i64 0
	%837 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %836, i64 0, i32 12
	%838 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %837, align 8
	call void @fmt.write_byte({i8*, i64, i64, %mem.Allocator}* %838, i8 123, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	; DeferStmt
	; AssignStmt
	; SelectorExpr
	%839 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%840 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %839, i64 0
	%841 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %840, i64 0, i32 9
	%842 = load i64, i64* %841, align 8
	%843 = add i64 %842, 1
	store i64 %843, i64* %841
	; DeferStmt
	; hash
	; SelectorExpr
	%844 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%845 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %844, i64 0
	%846 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %845, i64 0, i32 4
	%847 = load i8, i8* %846, align 1
	store i8 %847, i8* %75
	; DeferStmt
	; AssignStmt
	; SelectorExpr
	%848 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%849 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %848, i64 0
	%850 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %849, i64 0, i32 4
	store i8 0, i8* %850
	; IfStmt
	%851 = load i8, i8* %75, align 1
	%852 = trunc i8 %851 to i1
	br i1 %852, label %if.then-106, label %if.done-107

if.then-106:
	; SelectorExpr
	%853 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%854 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %853, i64 0
	%855 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %854, i64 0, i32 12
	%856 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %855, align 8
	call void @fmt.write_byte({i8*, i64, i64, %mem.Allocator}* %856, i8 10, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %if.done-107

if.done-107:
	; RangeStmt
	; i
	%857 = bitcast i64* %76 to %..rawptr
	%858 = call %..rawptr @mem.zero(%..rawptr %857, i64 8) noinline
	store i64 zeroinitializer, i64* %76
	; SelectorExpr
	%859 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %74, i64 0, i32 1
	%860 = load {%..string*, i64}, {%..string*, i64}* %859, align 8
	%861 = bitcast i64* %77 to %..rawptr
	%862 = call %..rawptr @mem.zero(%..rawptr %861, i64 8) noinline
	store i64 zeroinitializer, i64* %77
	%863 = extractvalue {%..string*, i64} %860, 1
	store i64 %863, i64* %77
	%864 = bitcast i64* %78 to %..rawptr
	%865 = call %..rawptr @mem.zero(%..rawptr %864, i64 8) noinline
	store i64 zeroinitializer, i64* %78
	store i64 -1, i64* %78
	br label %for.index.loop-108

for.index.loop-108:
	%866 = load i64, i64* %78, align 8
	%867 = add i64 %866, 1
	store i64 %867, i64* %78
	%868 = load i64, i64* %77, align 8
	%869 = icmp slt i64 %867, %868
	br i1 %869, label %for.index.body-109, label %for.index.done-123

for.index.body-109:
	%870 = load i64, i64* %78, align 8
	store i64 %870, i64* %76
	; IfStmt
	%871 = load i8, i8* %75, align 1
	%872 = trunc i8 %871 to i1
	br i1 %872, label %if.done-112, label %cmp.and-110

cmp.and-110:
	%873 = load i64, i64* %76, align 8
	%874 = icmp sgt i64 %873, 0
	%875 = zext i1 %874 to i8
	%876 = trunc i8 %875 to i1
	br i1 %876, label %if.then-111, label %if.done-112

if.then-111:
	; SelectorExpr
	%877 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%878 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %877, i64 0
	%879 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %878, i64 0, i32 12
	%880 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %879, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %880, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @str$147, i64 0, i32 0), i64 2}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %if.done-112

if.done-112:
	; IfStmt
	%881 = load i8, i8* %75, align 1
	%882 = trunc i8 %881 to i1
	br i1 %882, label %if.then-113, label %if.done-117

if.then-113:
	; RangeStmt
	%883 = bitcast i64* %79 to %..rawptr
	%884 = call %..rawptr @mem.zero(%..rawptr %883, i64 8) noinline
	store i64 zeroinitializer, i64* %79
	store i64 0, i64* %79
	%885 = bitcast i64* %80 to %..rawptr
	%886 = call %..rawptr @mem.zero(%..rawptr %885, i64 8) noinline
	store i64 zeroinitializer, i64* %80
	store i64 0, i64* %80
	br label %for.interval.loop-114

for.interval.loop-114:
	; SelectorExpr
	%887 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%888 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %887, i64 0
	%889 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %888, i64 0, i32 9
	%890 = load i64, i64* %889, align 8
	%891 = sub i64 %890, 1
	%892 = load i64, i64* %79, align 8
	%893 = icmp sle i64 %892, %891
	br i1 %893, label %for.interval.body-115, label %for.interval.done-116

for.interval.body-115:
	%894 = load i64, i64* %79, align 8
	%895 = load i64, i64* %80, align 8
	%896 = load i64, i64* %79, align 8
	%897 = add i64 %896, 1
	store i64 %897, i64* %79
	%898 = load i64, i64* %80, align 8
	%899 = add i64 %898, 1
	store i64 %899, i64* %80
	; SelectorExpr
	%900 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%901 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %900, i64 0
	%902 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %901, i64 0, i32 12
	%903 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %902, align 8
	call void @fmt.write_byte({i8*, i64, i64, %mem.Allocator}* %903, i8 9, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %for.interval.loop-114

for.interval.done-116:
	br label %if.done-117

if.done-117:
	; SelectorExpr
	%904 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%905 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %904, i64 0
	%906 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %905, i64 0, i32 12
	%907 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %906, align 8
	; IndexExpr
	; SelectorExpr
	%908 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %74, i64 0, i32 1
	%909 = load {%..string*, i64}, {%..string*, i64}* %908, align 8
	%910 = extractvalue {%..string*, i64} %909, 0
	%911 = load i64, i64* %76, align 8
	%912 = extractvalue {%..string*, i64} %909, 1
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @str$148, i64 0, i32 0), i64 25}, i64 1183, i64 36, i64 %911, i64 %912)
	%913 = getelementptr inbounds %..string, %..string* %910, i64 %911
	%914 = load %..string, %..string* %913, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %907, %..string %914, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	; SelectorExpr
	%915 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%916 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %915, i64 0
	%917 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %916, i64 0, i32 12
	%918 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %917, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %918, %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str$149, i64 0, i32 0), i64 3}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	; IfStmt
	; t
	; IndexExpr
	; SelectorExpr
	%919 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %74, i64 0, i32 0
	%920 = load {%runtime.Type_Info**, i64}, {%runtime.Type_Info**, i64}* %919, align 8
	%921 = extractvalue {%runtime.Type_Info**, i64} %920, 0
	%922 = load i64, i64* %76, align 8
	%923 = extractvalue {%runtime.Type_Info**, i64} %920, 1
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @str$14a, i64 0, i32 0), i64 25}, i64 1186, i64 23, i64 %922, i64 %923)
	%924 = getelementptr inbounds %runtime.Type_Info*, %runtime.Type_Info** %921, i64 %922
	%925 = load %runtime.Type_Info*, %runtime.Type_Info** %924, align 8
	store %runtime.Type_Info* %925, %runtime.Type_Info** %81
	; SelectorExpr
	%926 = load %runtime.Type_Info*, %runtime.Type_Info** %81, align 8
	%927 = call i8 @types.is_any(%runtime.Type_Info* %926, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%928 = trunc i8 %927 to i1
	br i1 %928, label %if.then-118, label %if.else-119

if.then-118:
	; SelectorExpr
	%929 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%930 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %929, i64 0
	%931 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %930, i64 0, i32 12
	%932 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %931, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %932, %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str$14b, i64 0, i32 0), i64 5}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %if.done-120

if.else-119:
	; data
	; SelectorExpr
	%933 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 0
	%934 = load %..rawptr, %..rawptr* %933, align 8
	%935 = ptrtoint %..rawptr %934 to i64
	; IndexExpr
	; SelectorExpr
	%936 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %74, i64 0, i32 2
	%937 = load {i64*, i64}, {i64*, i64}* %936, align 8
	%938 = extractvalue {i64*, i64} %937, 0
	%939 = load i64, i64* %76, align 8
	%940 = extractvalue {i64*, i64} %937, 1
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @str$14c, i64 0, i32 0), i64 25}, i64 1189, i64 44, i64 %939, i64 %940)
	%941 = getelementptr inbounds i64, i64* %938, i64 %939
	%942 = load i64, i64* %941, align 8
	%943 = add i64 %935, %942
	store i64 %943, i64* %82
	%944 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	; CompoundLit
	%945 = bitcast %..any* %83 to %..rawptr
	%946 = call %..rawptr @mem.zero(%..rawptr %945, i64 16) noinline
	store %..any zeroinitializer, %..any* %83
	store %..any zeroinitializer, %..any* %83
	%947 = load i64, i64* %82, align 8
	%948 = inttoptr i64 %947 to %..rawptr
	%949 = getelementptr inbounds %..any, %..any* %83, i64 0, i32 0
	store %..rawptr %948, %..rawptr* %949
	; SelectorExpr
	%950 = load %runtime.Type_Info*, %runtime.Type_Info** %81, align 8
	%951 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %950, i64 0
	%952 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %951, i64 0, i32 2
	%953 = load %..typeid, %..typeid* %952, align 8
	%954 = getelementptr inbounds %..any, %..any* %83, i64 0, i32 1
	store %..typeid %953, %..typeid* %954
	%955 = load %..any, %..any* %83, align 8
	call void @fmt.fmt_arg(%fmt.Fmt_Info* %944, %..any %955, i32 118, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %if.done-120

if.done-120:
	; IfStmt
	%956 = load i8, i8* %75, align 1
	%957 = trunc i8 %956 to i1
	br i1 %957, label %if.then-121, label %if.done-122

if.then-121:
	; SelectorExpr
	%958 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%959 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %958, i64 0
	%960 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %959, i64 0, i32 12
	%961 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %960, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %961, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @str$14d, i64 0, i32 0), i64 2}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %if.done-122

if.done-122:
	br label %for.index.loop-108

for.index.done-123:
	; defer
	; AssignStmt
	; SelectorExpr
	%962 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%963 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %962, i64 0
	%964 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %963, i64 0, i32 4
	%965 = load i8, i8* %75, align 1
	store i8 %965, i8* %964
	; defer
	; AssignStmt
	; SelectorExpr
	%966 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%967 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %966, i64 0
	%968 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %967, i64 0, i32 9
	%969 = load i64, i64* %968, align 8
	%970 = sub i64 %969, 1
	store i64 %970, i64* %968
	; defer
	; SelectorExpr
	%971 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%972 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %971, i64 0
	%973 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %972, i64 0, i32 12
	%974 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %973, align 8
	call void @fmt.write_byte({i8*, i64, i64, %mem.Allocator}* %974, i8 125, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %typeswitch.done-162

typeswitch.next-124:
	%975 = icmp eq i64 %131, 18
	br i1 %975, label %typeswitch.body-148, label %typeswitch.next-147

typeswitch.body-125:
	%976 = bitcast %..rawptr %132 to %runtime.Type_Info_Union*
	%977 = load %runtime.Type_Info_Union, %runtime.Type_Info_Union* %976, align 8
	store %runtime.Type_Info_Union %977, %runtime.Type_Info_Union* %84
	; tag_ptr
	; SelectorExpr
	%978 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 0
	%979 = load %..rawptr, %..rawptr* %978, align 8
	%980 = ptrtoint %..rawptr %979 to i64
	; SelectorExpr
	%981 = getelementptr inbounds %runtime.Type_Info_Union, %runtime.Type_Info_Union* %84, i64 0, i32 1
	%982 = load i64, i64* %981, align 8
	%983 = add i64 %980, %982
	store i64 %983, i64* %85
	; tag_any
	; CompoundLit
	%984 = bitcast %..any* %87 to %..rawptr
	%985 = call %..rawptr @mem.zero(%..rawptr %984, i64 16) noinline
	store %..any zeroinitializer, %..any* %87
	store %..any zeroinitializer, %..any* %87
	%986 = load i64, i64* %85, align 8
	%987 = inttoptr i64 %986 to %..rawptr
	%988 = getelementptr inbounds %..any, %..any* %87, i64 0, i32 0
	store %..rawptr %987, %..rawptr* %988
	; SelectorExpr
	; SelectorExpr
	%989 = getelementptr inbounds %runtime.Type_Info_Union, %runtime.Type_Info_Union* %84, i64 0, i32 2
	%990 = load %runtime.Type_Info*, %runtime.Type_Info** %989, align 8
	%991 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %990, i64 0
	%992 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %991, i64 0, i32 2
	%993 = load %..typeid, %..typeid* %992, align 8
	%994 = getelementptr inbounds %..any, %..any* %87, i64 0, i32 1
	store %..typeid %993, %..typeid* %994
	%995 = load %..any, %..any* %87, align 8
	store %..any %995, %..any* %86
	; tag
	store i64 -1, i64* %88
	; TypeSwitchStmt
	%996 = load %..any, %..any* %86, align 8
	%997 = getelementptr inbounds %..any, %..any* %86, i64 0, i32 1
	%998 = load %..typeid, %..typeid* %997, align 8
	%999 = icmp eq %..typeid %998, 72057594037927939
	br i1 %999, label %typeswitch.body-127, label %typeswitch.next-126

typeswitch.next-126:
	%1000 = getelementptr inbounds %..any, %..any* %86, i64 0, i32 1
	%1001 = load %..typeid, %..typeid* %1000, align 8
	%1002 = icmp eq %..typeid %1001, 4683743612465315903
	br i1 %1002, label %typeswitch.body-129, label %typeswitch.next-128

typeswitch.body-127:
	%1003 = getelementptr inbounds %..any, %..any* %86, i64 0, i32 0
	%1004 = load %..rawptr, %..rawptr* %1003, align 8
	%1005 = bitcast %..rawptr %1004 to i8*
	%1006 = load i8, i8* %1005, align 1
	store i8 %1006, i8* %89
	; AssignStmt
	%1007 = load i8, i8* %89, align 1
	%1008 = zext i8 %1007 to i64
	store i64 %1008, i64* %88
	br label %typeswitch.done-142

typeswitch.next-128:
	%1009 = getelementptr inbounds %..any, %..any* %86, i64 0, i32 1
	%1010 = load %..typeid, %..typeid* %1009, align 8
	%1011 = icmp eq %..typeid %1010, 72057594037928003
	br i1 %1011, label %typeswitch.body-131, label %typeswitch.next-130

typeswitch.body-129:
	%1012 = getelementptr inbounds %..any, %..any* %86, i64 0, i32 0
	%1013 = load %..rawptr, %..rawptr* %1012, align 8
	%1014 = bitcast %..rawptr %1013 to i8*
	%1015 = load i8, i8* %1014, align 1
	store i8 %1015, i8* %90
	; AssignStmt
	%1016 = load i8, i8* %90, align 1
	%1017 = sext i8 %1016 to i64
	store i64 %1017, i64* %88
	br label %typeswitch.done-142

typeswitch.next-130:
	%1018 = getelementptr inbounds %..any, %..any* %86, i64 0, i32 1
	%1019 = load %..typeid, %..typeid* %1018, align 8
	%1020 = icmp eq %..typeid %1019, 4683743612465315904
	br i1 %1020, label %typeswitch.body-133, label %typeswitch.next-132

typeswitch.body-131:
	%1021 = getelementptr inbounds %..any, %..any* %86, i64 0, i32 0
	%1022 = load %..rawptr, %..rawptr* %1021, align 8
	%1023 = bitcast %..rawptr %1022 to i16*
	%1024 = load i16, i16* %1023, align 2
	store i16 %1024, i16* %91
	; AssignStmt
	%1025 = load i16, i16* %91, align 2
	%1026 = zext i16 %1025 to i64
	store i64 %1026, i64* %88
	br label %typeswitch.done-142

typeswitch.next-132:
	%1027 = getelementptr inbounds %..any, %..any* %86, i64 0, i32 1
	%1028 = load %..typeid, %..typeid* %1027, align 8
	%1029 = icmp eq %..typeid %1028, 72057594037928004
	br i1 %1029, label %typeswitch.body-135, label %typeswitch.next-134

typeswitch.body-133:
	%1030 = getelementptr inbounds %..any, %..any* %86, i64 0, i32 0
	%1031 = load %..rawptr, %..rawptr* %1030, align 8
	%1032 = bitcast %..rawptr %1031 to i16*
	%1033 = load i16, i16* %1032, align 2
	store i16 %1033, i16* %92
	; AssignStmt
	%1034 = load i16, i16* %92, align 2
	%1035 = sext i16 %1034 to i64
	store i64 %1035, i64* %88
	br label %typeswitch.done-142

typeswitch.next-134:
	%1036 = getelementptr inbounds %..any, %..any* %86, i64 0, i32 1
	%1037 = load %..typeid, %..typeid* %1036, align 8
	%1038 = icmp eq %..typeid %1037, 4683743612465315905
	br i1 %1038, label %typeswitch.body-137, label %typeswitch.next-136

typeswitch.body-135:
	%1039 = getelementptr inbounds %..any, %..any* %86, i64 0, i32 0
	%1040 = load %..rawptr, %..rawptr* %1039, align 8
	%1041 = bitcast %..rawptr %1040 to i32*
	%1042 = load i32, i32* %1041, align 4
	store i32 %1042, i32* %93
	; AssignStmt
	%1043 = load i32, i32* %93, align 4
	%1044 = zext i32 %1043 to i64
	store i64 %1044, i64* %88
	br label %typeswitch.done-142

typeswitch.next-136:
	%1045 = getelementptr inbounds %..any, %..any* %86, i64 0, i32 1
	%1046 = load %..typeid, %..typeid* %1045, align 8
	%1047 = icmp eq %..typeid %1046, 72057594037928005
	br i1 %1047, label %typeswitch.body-139, label %typeswitch.next-138

typeswitch.body-137:
	%1048 = getelementptr inbounds %..any, %..any* %86, i64 0, i32 0
	%1049 = load %..rawptr, %..rawptr* %1048, align 8
	%1050 = bitcast %..rawptr %1049 to i32*
	%1051 = load i32, i32* %1050, align 4
	store i32 %1051, i32* %94
	; AssignStmt
	%1052 = load i32, i32* %94, align 4
	%1053 = sext i32 %1052 to i64
	store i64 %1053, i64* %88
	br label %typeswitch.done-142

typeswitch.next-138:
	%1054 = getelementptr inbounds %..any, %..any* %86, i64 0, i32 1
	%1055 = load %..typeid, %..typeid* %1054, align 8
	%1056 = icmp eq %..typeid %1055, 4683743612465315906
	br i1 %1056, label %typeswitch.body-141, label %typeswitch.next-140

typeswitch.body-139:
	%1057 = getelementptr inbounds %..any, %..any* %86, i64 0, i32 0
	%1058 = load %..rawptr, %..rawptr* %1057, align 8
	%1059 = bitcast %..rawptr %1058 to i64*
	%1060 = load i64, i64* %1059, align 8
	store i64 %1060, i64* %95
	; AssignStmt
	%1061 = load i64, i64* %95, align 8
	%1062 = bitcast i64 %1061 to i64
	store i64 %1062, i64* %88
	br label %typeswitch.done-142

typeswitch.next-140:
	store %..any %996, %..any* %97
	%1063 = bitcast %runtime.Source_Code_Location* %98 to %..rawptr
	%1064 = call %..rawptr @mem.zero(%..rawptr %1063, i64 48) noinline
	store %runtime.Source_Code_Location zeroinitializer, %runtime.Source_Code_Location* %98
	store %runtime.Source_Code_Location {%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @str$14e, i64 0, i32 0), i64 25}, i64 1209, i64 9, %..string {i8* getelementptr inbounds ([10 x i8], [10 x i8]* @str$14f, i64 0, i32 0), i64 9}}, %runtime.Source_Code_Location* %98
	call void @runtime.panic(%..string {i8* getelementptr inbounds ([23 x i8], [23 x i8]* @str$150, i64 0, i32 0), i64 22}, %runtime.Source_Code_Location* %98) noreturn
	br label %typeswitch.done-142

typeswitch.body-141:
	%1065 = getelementptr inbounds %..any, %..any* %86, i64 0, i32 0
	%1066 = load %..rawptr, %..rawptr* %1065, align 8
	%1067 = bitcast %..rawptr %1066 to i64*
	%1068 = load i64, i64* %1067, align 8
	store i64 %1068, i64* %96
	; AssignStmt
	%1069 = load i64, i64* %96, align 8
	store i64 %1069, i64* %88
	br label %typeswitch.done-142

typeswitch.done-142:
	; IfStmt
	; SelectorExpr
	%1070 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 0
	%1071 = load %..rawptr, %..rawptr* %1070, align 8
	%1072 = icmp eq %..rawptr %1071, zeroinitializer
	%1073 = zext i1 %1072 to i8
	%1074 = trunc i8 %1073 to i1
	br i1 %1074, label %if.then-144, label %cmp.or-143

cmp.or-143:
	%1075 = load i64, i64* %88, align 8
	%1076 = icmp eq i64 %1075, 0
	%1077 = zext i1 %1076 to i8
	%1078 = trunc i8 %1077 to i1
	br i1 %1078, label %if.then-144, label %if.else-145

if.then-144:
	; SelectorExpr
	%1079 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%1080 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %1079, i64 0
	%1081 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %1080, i64 0, i32 12
	%1082 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %1081, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %1082, %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str$151, i64 0, i32 0), i64 3}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %if.done-146

if.else-145:
	; id
	; SelectorExpr
	; IndexExpr
	; SelectorExpr
	%1083 = getelementptr inbounds %runtime.Type_Info_Union, %runtime.Type_Info_Union* %84, i64 0, i32 0
	%1084 = load {%runtime.Type_Info**, i64}, {%runtime.Type_Info**, i64}* %1083, align 8
	%1085 = extractvalue {%runtime.Type_Info**, i64} %1084, 0
	%1086 = load i64, i64* %88, align 8
	%1087 = sub i64 %1086, 1
	%1088 = bitcast i64 %1087 to i64
	%1089 = extractvalue {%runtime.Type_Info**, i64} %1084, 1
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @str$152, i64 0, i32 0), i64 25}, i64 1215, i64 24, i64 %1088, i64 %1089)
	%1090 = getelementptr inbounds %runtime.Type_Info*, %runtime.Type_Info** %1085, i64 %1088
	%1091 = load %runtime.Type_Info*, %runtime.Type_Info** %1090, align 8
	%1092 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1091, i64 0
	%1093 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1092, i64 0, i32 2
	%1094 = load %..typeid, %..typeid* %1093, align 8
	store %..typeid %1094, %..typeid* %99
	%1095 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	; CompoundLit
	%1096 = bitcast %..any* %100 to %..rawptr
	%1097 = call %..rawptr @mem.zero(%..rawptr %1096, i64 16) noinline
	store %..any zeroinitializer, %..any* %100
	store %..any zeroinitializer, %..any* %100
	; SelectorExpr
	%1098 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 0
	%1099 = load %..rawptr, %..rawptr* %1098, align 8
	%1100 = getelementptr inbounds %..any, %..any* %100, i64 0, i32 0
	store %..rawptr %1099, %..rawptr* %1100
	%1101 = load %..typeid, %..typeid* %99, align 8
	%1102 = getelementptr inbounds %..any, %..any* %100, i64 0, i32 1
	store %..typeid %1101, %..typeid* %1102
	%1103 = load %..any, %..any* %100, align 8
	%1104 = load i32, i32* %2, align 4
	call void @fmt.fmt_arg(%fmt.Fmt_Info* %1095, %..any %1103, i32 %1104, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %if.done-146

if.done-146:
	br label %typeswitch.done-162

typeswitch.next-147:
	%1105 = icmp eq i64 %131, 11
	br i1 %1105, label %typeswitch.body-150, label %typeswitch.next-149

typeswitch.body-148:
	%1106 = bitcast %..rawptr %132 to %runtime.Type_Info_Enum*
	%1107 = load %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %1106, align 8
	store %runtime.Type_Info_Enum %1107, %runtime.Type_Info_Enum* %101
	%1108 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%1109 = load %..any, %..any* %1, align 8
	%1110 = load i32, i32* %2, align 4
	call void @fmt.fmt_enum(%fmt.Fmt_Info* %1108, %..any %1109, i32 %1110, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %typeswitch.done-162

typeswitch.next-149:
	%1111 = icmp eq i64 %131, 9
	br i1 %1111, label %typeswitch.body-155, label %typeswitch.next-154

typeswitch.body-150:
	%1112 = bitcast %..rawptr %132 to %runtime.Type_Info_Procedure*
	%1113 = load %runtime.Type_Info_Procedure, %runtime.Type_Info_Procedure* %1112, align 8
	store %runtime.Type_Info_Procedure %1113, %runtime.Type_Info_Procedure* %102
	; ptr
	; SelectorExpr
	%1114 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 0
	%1115 = load %..rawptr, %..rawptr* %1114, align 8
	%1116 = bitcast %..rawptr %1115 to %..rawptr*
	%1117 = getelementptr inbounds %..rawptr, %..rawptr* %1116, i64 0
	%1118 = load %..rawptr, %..rawptr* %1117, align 8
	store %..rawptr %1118, %..rawptr* %103
	; IfStmt
	%1119 = load %..rawptr, %..rawptr* %103, align 8
	%1120 = icmp eq %..rawptr %1119, zeroinitializer
	%1121 = zext i1 %1120 to i8
	%1122 = trunc i8 %1121 to i1
	br i1 %1122, label %if.then-151, label %if.else-152

if.then-151:
	; SelectorExpr
	%1123 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%1124 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %1123, i64 0
	%1125 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %1124, i64 0, i32 12
	%1126 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %1125, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %1126, %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str$153, i64 0, i32 0), i64 3}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %if.done-153

if.else-152:
	; SelectorExpr
	%1127 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%1128 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %1127, i64 0
	%1129 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %1128, i64 0, i32 12
	%1130 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %1129, align 8
	; SelectorExpr
	%1131 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 1
	%1132 = load %..typeid, %..typeid* %1131, align 8
	call void @fmt.write_typeid({i8*, i64, i64, %mem.Allocator}* %1130, %..typeid %1132, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	; SelectorExpr
	%1133 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%1134 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %1133, i64 0
	%1135 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %1134, i64 0, i32 12
	%1136 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %1135, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %1136, %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str$154, i64 0, i32 0), i64 3}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%1137 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%1138 = load %..rawptr, %..rawptr* %103, align 8
	call void @fmt.fmt_pointer(%fmt.Fmt_Info* %1137, %..rawptr %1138, i32 112, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %if.done-153

if.done-153:
	br label %typeswitch.done-162

typeswitch.next-154:
	%1139 = icmp eq i64 %131, 20
	br i1 %1139, label %typeswitch.body-157, label %typeswitch.next-156

typeswitch.body-155:
	%1140 = bitcast %..rawptr %132 to %runtime.Type_Info_Type_Id*
	%1141 = load %runtime.Type_Info_Type_Id, %runtime.Type_Info_Type_Id* %1140, align 1
	store %runtime.Type_Info_Type_Id %1141, %runtime.Type_Info_Type_Id* %104
	; id
	; SelectorExpr
	%1142 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 0
	%1143 = load %..rawptr, %..rawptr* %1142, align 8
	%1144 = bitcast %..rawptr %1143 to %..typeid*
	%1145 = getelementptr inbounds %..typeid, %..typeid* %1144, i64 0
	%1146 = load %..typeid, %..typeid* %1145, align 8
	store %..typeid %1146, %..typeid* %105
	; SelectorExpr
	%1147 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%1148 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %1147, i64 0
	%1149 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %1148, i64 0, i32 12
	%1150 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %1149, align 8
	%1151 = load %..typeid, %..typeid* %105, align 8
	call void @fmt.write_typeid({i8*, i64, i64, %mem.Allocator}* %1150, %..typeid %1151, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %typeswitch.done-162

typeswitch.next-156:
	%1152 = icmp eq i64 %131, 21
	br i1 %1152, label %typeswitch.body-159, label %typeswitch.next-158

typeswitch.body-157:
	%1153 = bitcast %..rawptr %132 to %runtime.Type_Info_Bit_Field*
	%1154 = load %runtime.Type_Info_Bit_Field, %runtime.Type_Info_Bit_Field* %1153, align 8
	store %runtime.Type_Info_Bit_Field %1154, %runtime.Type_Info_Bit_Field* %106
	%1155 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%1156 = load %..any, %..any* %1, align 8
	call void @fmt.fmt_bit_field(%fmt.Fmt_Info* %1155, %..any %1156, %..string zeroinitializer, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %typeswitch.done-162

typeswitch.next-158:
	%1157 = icmp eq i64 %131, 22
	br i1 %1157, label %typeswitch.body-161, label %typeswitch.next-160

typeswitch.body-159:
	%1158 = bitcast %..rawptr %132 to %runtime.Type_Info_Bit_Set*
	%1159 = load %runtime.Type_Info_Bit_Set, %runtime.Type_Info_Bit_Set* %1158, align 8
	store %runtime.Type_Info_Bit_Set %1159, %runtime.Type_Info_Bit_Set* %107
	%1160 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%1161 = load %..any, %..any* %1, align 8
	call void @fmt.fmt_bit_set(%fmt.Fmt_Info* %1160, %..any %1161, %..string zeroinitializer, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %typeswitch.done-162

typeswitch.next-160:
	br label %typeswitch.done-162

typeswitch.body-161:
	%1162 = bitcast %..rawptr %132 to %runtime.Type_Info_Opaque*
	%1163 = load %runtime.Type_Info_Opaque, %runtime.Type_Info_Opaque* %1162, align 8
	store %runtime.Type_Info_Opaque %1163, %runtime.Type_Info_Opaque* %108
	%1164 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%1165 = load %..any, %..any* %1, align 8
	call void @fmt.fmt_opaque(%fmt.Fmt_Info* %1164, %..any %1165, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %typeswitch.done-162

typeswitch.done-162:
	ret void
}

define void @fmt.fmt_complex(%fmt.Fmt_Info* %fi, %..complex128* %c, i64 %bits, i32 %verb, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca %fmt.Fmt_Info*, align 16
	%1 = alloca i64, align 16
	%2 = alloca i32, align 16
	%3 = alloca double, align 16
	%4 = alloca double, align 16
	store %fmt.Fmt_Info* %fi, %fmt.Fmt_Info** %0
	%5 = load %..complex128, %..complex128* %c, align 8
	store i64 %bits, i64* %1
	store i32 %verb, i32* %2
	; SwitchStmt
	%6 = load i32, i32* %2, align 4
	%7 = icmp eq i32 %6, 102
	br i1 %7, label %switch.case.body-4, label %switch.case.next-1

switch.case.next-1:
	%8 = icmp eq i32 %6, 70
	br i1 %8, label %switch.case.body-4, label %switch.case.next-2

switch.case.next-2:
	%9 = icmp eq i32 %6, 118
	br i1 %9, label %switch.case.body-4, label %switch.case.next-3

switch.case.next-3:
	%10 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%11 = load i32, i32* %2, align 4
	call void @fmt.fmt_bad_verb(%fmt.Fmt_Info* %10, i32 %11, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	; ReturnStmt
	ret void

switch.case.body-4:
	; r
	; i
	; real
	%12 = load %..complex128, %..complex128* %c, align 8
	%13 = extractvalue %..complex128 %12, 0
	; imag
	%14 = load %..complex128, %..complex128* %c, align 8
	%15 = extractvalue %..complex128 %14, 1
	store double %13, double* %3
	store double %15, double* %4
	%16 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%17 = load double, double* %3, align 8
	%18 = load i64, i64* %1, align 8
	%19 = sdiv i64 %18, 2
	%20 = load i32, i32* %2, align 4
	call void @fmt.fmt_float(%fmt.Fmt_Info* %16, double %17, i64 %19, i32 %20, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	; IfStmt
	; SelectorExpr
	%21 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%22 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %21, i64 0
	%23 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %22, i64 0, i32 1
	%24 = load i8, i8* %23, align 1
	%25 = trunc i8 %24 to i1
	br i1 %25, label %if.done-7, label %cmp.and-5

cmp.and-5:
	%26 = load double, double* %4, align 8
	%27 = fcmp oge double %26, 0x0000000000000000
	%28 = zext i1 %27 to i8
	%29 = trunc i8 %28 to i1
	br i1 %29, label %if.then-6, label %if.done-7

if.then-6:
	; SelectorExpr
	%30 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%31 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %30, i64 0
	%32 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %31, i64 0, i32 12
	%33 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %32, align 8
	call void @fmt.write_rune({i8*, i64, i64, %mem.Allocator}* %33, i32 43, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %if.done-7

if.done-7:
	%34 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%35 = load double, double* %4, align 8
	%36 = load i64, i64* %1, align 8
	%37 = sdiv i64 %36, 2
	%38 = load i32, i32* %2, align 4
	call void @fmt.fmt_float(%fmt.Fmt_Info* %34, double %35, i64 %37, i32 %38, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	; SelectorExpr
	%39 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%40 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %39, i64 0
	%41 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %40, i64 0, i32 12
	%42 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %41, align 8
	call void @fmt.write_rune({i8*, i64, i64, %mem.Allocator}* %42, i32 105, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	ret void
}

define void @fmt.fmt_arg(%fmt.Fmt_Info* %fi, %..any %arg, i32 %verb, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca %fmt.Fmt_Info*, align 16
	%1 = alloca %..any, align 16
	%2 = alloca i32, align 16
	%3 = alloca %runtime.Type_Info*, align 16
	%4 = alloca %runtime.Type_Info*, align 16
	%5 = alloca %..any, align 16
	%6 = alloca i8, align 16
	%7 = alloca i8, align 16
	%8 = alloca i16, align 16
	%9 = alloca i32, align 16
	%10 = alloca i64, align 16
	%11 = alloca %..any, align 16
	%12 = alloca i32, align 16
	%13 = alloca float, align 16
	%14 = alloca double, align 16
	%15 = alloca %..complex64, align 16
	%16 = alloca %..complex128, align 16
	%17 = alloca %..complex128, align 16
	%18 = alloca %..complex128, align 16
	%19 = alloca %..complex128, align 16
	%20 = alloca i8, align 16
	%21 = alloca i8, align 16
	%22 = alloca i16, align 16
	%23 = alloca i16, align 16
	%24 = alloca i32, align 16
	%25 = alloca i32, align 16
	%26 = alloca i64, align 16
	%27 = alloca i64, align 16
	%28 = alloca i64, align 16
	%29 = alloca i64, align 16
	%30 = alloca i64, align 16
	%31 = alloca %..string, align 16
	%32 = alloca i8*, align 16
	%33 = alloca %..typeid, align 16
	%34 = alloca i16, align 16
	%35 = alloca i16, align 16
	%36 = alloca i32, align 16
	%37 = alloca i32, align 16
	%38 = alloca i64, align 16
	%39 = alloca i64, align 16
	%40 = alloca i16, align 16
	%41 = alloca i16, align 16
	%42 = alloca i32, align 16
	%43 = alloca i32, align 16
	%44 = alloca i64, align 16
	%45 = alloca i64, align 16
	%46 = alloca %..any, align 16
	store %fmt.Fmt_Info* %fi, %fmt.Fmt_Info** %0
	store %..any %arg, %..any* %1
	store i32 %verb, i32* %2
	; IfStmt
	%47 = load %..any, %..any* %1, align 8
	%48 = extractvalue %..any %47, 0
	%49 = extractvalue %..any %47, 1
	%50 = icmp eq %..rawptr %48, null
	%51 = icmp eq %..typeid %49, 0
	%52 = zext i1 %50 to i8
	%53 = zext i1 %51 to i8
	%54 = or i8 %52, %53
	%55 = trunc i8 %54 to i1
	br i1 %55, label %if.then-1, label %if.done-2

if.then-1:
	; SelectorExpr
	%56 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%57 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %56, i64 0
	%58 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %57, i64 0, i32 12
	%59 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %58, align 8
	call void @fmt.write_string({i8*, i64, i64, %mem.Allocator}* %59, %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str$155, i64 0, i32 0), i64 5}, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	; ReturnStmt
	ret void

if.done-2:
	; AssignStmt
	; SelectorExpr
	%60 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%61 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %60, i64 0
	%62 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %61, i64 0, i32 13
	%63 = load %..any, %..any* %1, align 8
	store %..any %63, %..any* %62
	; IfStmt
	%64 = load i32, i32* %2, align 4
	%65 = icmp eq i32 %64, 84
	%66 = zext i1 %65 to i8
	%67 = trunc i8 %66 to i1
	br i1 %67, label %if.then-3, label %if.done-7

if.then-3:
	; ti
	; SelectorExpr
	%68 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 1
	%69 = load %..typeid, %..typeid* %68, align 8
	%70 = call %runtime.Type_Info* @runtime.__type_info_of(%..typeid %69)
	store %runtime.Type_Info* %70, %runtime.Type_Info** %3
	; TypeSwitchStmt
	%71 = load %..any, %..any* %1, align 8
	%72 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 1
	%73 = load %..typeid, %..typeid* %72, align 8
	%74 = icmp eq %..typeid %73, 648518346341351434
	br i1 %74, label %typeswitch.body-5, label %typeswitch.next-4

typeswitch.next-4:
	br label %typeswitch.done-6

typeswitch.body-5:
	%75 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 0
	%76 = load %..rawptr, %..rawptr* %75, align 8
	%77 = bitcast %..rawptr %76 to %runtime.Type_Info**
	%78 = load %runtime.Type_Info*, %runtime.Type_Info** %77, align 8
	store %runtime.Type_Info* %78, %runtime.Type_Info** %4
	; AssignStmt
	%79 = load %runtime.Type_Info*, %runtime.Type_Info** %4, align 8
	store %runtime.Type_Info* %79, %runtime.Type_Info** %3
	br label %typeswitch.done-6

typeswitch.done-6:
	; SelectorExpr
	%80 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%81 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %80, i64 0
	%82 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %81, i64 0, i32 12
	%83 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %82, align 8
	%84 = load %runtime.Type_Info*, %runtime.Type_Info** %3, align 8
	call void @fmt.write_type({i8*, i64, i64, %mem.Allocator}* %83, %runtime.Type_Info* %84, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	; ReturnStmt
	ret void

if.done-7:
	; base_arg
	%85 = load %..any, %..any* %1, align 8
	store %..any %85, %..any* %5
	; AssignStmt
	; SelectorExpr
	%86 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	; SelectorExpr
	; SelectorExpr
	%87 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%88 = load %..typeid, %..typeid* %87, align 8
	%89 = call %..typeid @runtime.typeid_base(%..typeid %88)
	store %..typeid %89, %..typeid* %86
	; TypeSwitchStmt
	%90 = load %..any, %..any* %5, align 8
	%91 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%92 = load %..typeid, %..typeid* %91, align 8
	%93 = icmp eq %..typeid %92, 432345564227567635
	br i1 %93, label %typeswitch.body-9, label %typeswitch.next-8

typeswitch.next-8:
	%94 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%95 = load %..typeid, %..typeid* %94, align 8
	%96 = icmp eq %..typeid %95, 432345564227567711
	br i1 %96, label %typeswitch.body-11, label %typeswitch.next-10

typeswitch.body-9:
	%97 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%98 = load %..rawptr, %..rawptr* %97, align 8
	%99 = bitcast %..rawptr %98 to i8*
	%100 = load i8, i8* %99, align 1
	store i8 %100, i8* %6
	%101 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%102 = load i8, i8* %6, align 1
	%103 = load i32, i32* %2, align 4
	%104 = trunc i8 %102 to i1
	call void @fmt.fmt_bool(%fmt.Fmt_Info* %101, i1 %104, i32 %103, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %typeswitch.done-82

typeswitch.next-10:
	%105 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%106 = load %..typeid, %..typeid* %105, align 8
	%107 = icmp eq %..typeid %106, 432345564227567712
	br i1 %107, label %typeswitch.body-13, label %typeswitch.next-12

typeswitch.body-11:
	%108 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%109 = load %..rawptr, %..rawptr* %108, align 8
	%110 = bitcast %..rawptr %109 to i8*
	%111 = load i8, i8* %110, align 1
	store i8 %111, i8* %7
	%112 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%113 = load i8, i8* %7, align 1
	%114 = icmp ne i8 %113, 0
	%115 = zext i1 %114 to i8
	%116 = load i32, i32* %2, align 4
	%117 = trunc i8 %115 to i1
	call void @fmt.fmt_bool(%fmt.Fmt_Info* %112, i1 %117, i32 %116, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %typeswitch.done-82

typeswitch.next-12:
	%118 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%119 = load %..typeid, %..typeid* %118, align 8
	%120 = icmp eq %..typeid %119, 432345564227567713
	br i1 %120, label %typeswitch.body-15, label %typeswitch.next-14

typeswitch.body-13:
	%121 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%122 = load %..rawptr, %..rawptr* %121, align 8
	%123 = bitcast %..rawptr %122 to i16*
	%124 = load i16, i16* %123, align 2
	store i16 %124, i16* %8
	%125 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%126 = load i16, i16* %8, align 2
	%127 = icmp ne i16 %126, 0
	%128 = zext i1 %127 to i8
	%129 = load i32, i32* %2, align 4
	%130 = trunc i8 %128 to i1
	call void @fmt.fmt_bool(%fmt.Fmt_Info* %125, i1 %130, i32 %129, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %typeswitch.done-82

typeswitch.next-14:
	%131 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%132 = load %..typeid, %..typeid* %131, align 8
	%133 = icmp eq %..typeid %132, 432345564227567714
	br i1 %133, label %typeswitch.body-17, label %typeswitch.next-16

typeswitch.body-15:
	%134 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%135 = load %..rawptr, %..rawptr* %134, align 8
	%136 = bitcast %..rawptr %135 to i32*
	%137 = load i32, i32* %136, align 4
	store i32 %137, i32* %9
	%138 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%139 = load i32, i32* %9, align 4
	%140 = icmp ne i32 %139, 0
	%141 = zext i1 %140 to i8
	%142 = load i32, i32* %2, align 4
	%143 = trunc i8 %141 to i1
	call void @fmt.fmt_bool(%fmt.Fmt_Info* %138, i1 %143, i32 %142, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %typeswitch.done-82

typeswitch.next-16:
	%144 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%145 = load %..typeid, %..typeid* %144, align 8
	%146 = icmp eq %..typeid %145, 89
	br i1 %146, label %typeswitch.body-19, label %typeswitch.next-18

typeswitch.body-17:
	%147 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%148 = load %..rawptr, %..rawptr* %147, align 8
	%149 = bitcast %..rawptr %148 to i64*
	%150 = load i64, i64* %149, align 8
	store i64 %150, i64* %10
	%151 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%152 = load i64, i64* %10, align 8
	%153 = icmp ne i64 %152, 0
	%154 = zext i1 %153 to i8
	%155 = load i32, i32* %2, align 4
	%156 = trunc i8 %154 to i1
	call void @fmt.fmt_bool(%fmt.Fmt_Info* %151, i1 %156, i32 %155, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %typeswitch.done-82

typeswitch.next-18:
	%157 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%158 = load %..typeid, %..typeid* %157, align 8
	%159 = icmp eq %..typeid %158, 4755801206503243838
	br i1 %159, label %typeswitch.body-21, label %typeswitch.next-20

typeswitch.body-19:
	%160 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%161 = load %..rawptr, %..rawptr* %160, align 8
	%162 = bitcast %..rawptr %161 to %..any*
	%163 = load %..any, %..any* %162, align 8
	store %..any %163, %..any* %11
	%164 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%165 = load %..any, %..any* %11, align 8
	%166 = load i32, i32* %2, align 4
	call void @fmt.fmt_arg(%fmt.Fmt_Info* %164, %..any %165, i32 %166, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %typeswitch.done-82

typeswitch.next-20:
	%167 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%168 = load %..typeid, %..typeid* %167, align 8
	%169 = icmp eq %..typeid %168, 216172782113783907
	br i1 %169, label %typeswitch.body-23, label %typeswitch.next-22

typeswitch.body-21:
	%170 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%171 = load %..rawptr, %..rawptr* %170, align 8
	%172 = bitcast %..rawptr %171 to i32*
	%173 = load i32, i32* %172, align 4
	store i32 %173, i32* %12
	%174 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%175 = load i32, i32* %12, align 4
	%176 = load i32, i32* %2, align 4
	call void @fmt.fmt_rune(%fmt.Fmt_Info* %174, i32 %175, i32 %176, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %typeswitch.done-82

typeswitch.next-22:
	%177 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%178 = load %..typeid, %..typeid* %177, align 8
	%179 = icmp eq %..typeid %178, 216172782113783893
	br i1 %179, label %typeswitch.body-25, label %typeswitch.next-24

typeswitch.body-23:
	%180 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%181 = load %..rawptr, %..rawptr* %180, align 8
	%182 = bitcast %..rawptr %181 to float*
	%183 = load float, float* %182, align 4
	store float %183, float* %13
	%184 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%185 = load float, float* %13, align 4
	%186 = fpext float %185 to double
	%187 = load i32, i32* %2, align 4
	call void @fmt.fmt_float(%fmt.Fmt_Info* %184, double %186, i64 32, i32 %187, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %typeswitch.done-82

typeswitch.next-24:
	%188 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%189 = load %..typeid, %..typeid* %188, align 8
	%190 = icmp eq %..typeid %189, 288230376151711844
	br i1 %190, label %typeswitch.body-27, label %typeswitch.next-26

typeswitch.body-25:
	%191 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%192 = load %..rawptr, %..rawptr* %191, align 8
	%193 = bitcast %..rawptr %192 to double*
	%194 = load double, double* %193, align 8
	store double %194, double* %14
	%195 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%196 = load double, double* %14, align 8
	%197 = load i32, i32* %2, align 4
	call void @fmt.fmt_float(%fmt.Fmt_Info* %195, double %196, i64 64, i32 %197, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %typeswitch.done-82

typeswitch.next-26:
	%198 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%199 = load %..typeid, %..typeid* %198, align 8
	%200 = icmp eq %..typeid %199, 288230376151711845
	br i1 %200, label %typeswitch.body-29, label %typeswitch.next-28

typeswitch.body-27:
	%201 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%202 = load %..rawptr, %..rawptr* %201, align 8
	%203 = bitcast %..rawptr %202 to %..complex64*
	%204 = load %..complex64, %..complex64* %203, align 4
	store %..complex64 %204, %..complex64* %15
	%205 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%206 = load %..complex64, %..complex64* %15, align 4
	%207 = bitcast %..complex128* %16 to %..rawptr
	%208 = call %..rawptr @mem.zero(%..rawptr %207, i64 16) noinline
	store %..complex128 zeroinitializer, %..complex128* %16
	%209 = extractvalue %..complex64 %206, 0
	%210 = fpext float %209 to double
	%211 = extractvalue %..complex64 %206, 1
	%212 = fpext float %211 to double
	%213 = getelementptr inbounds %..complex128, %..complex128* %16, i64 0, i32 0
	store double %210, double* %213
	%214 = getelementptr inbounds %..complex128, %..complex128* %16, i64 0, i32 1
	store double %212, double* %214
	%215 = load %..complex128, %..complex128* %16, align 8
	%216 = load i32, i32* %2, align 4
	%217 = bitcast %..complex128* %17 to %..rawptr
	%218 = call %..rawptr @mem.zero(%..rawptr %217, i64 16) noinline
	store %..complex128 zeroinitializer, %..complex128* %17
	store %..complex128 %215, %..complex128* %17
	call void @fmt.fmt_complex(%fmt.Fmt_Info* %205, %..complex128* %17, i64 64, i32 %216, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %typeswitch.done-82

typeswitch.next-28:
	%219 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%220 = load %..typeid, %..typeid* %219, align 8
	%221 = icmp eq %..typeid %220, 4683743612465315903
	br i1 %221, label %typeswitch.body-31, label %typeswitch.next-30

typeswitch.body-29:
	%222 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%223 = load %..rawptr, %..rawptr* %222, align 8
	%224 = bitcast %..rawptr %223 to %..complex128*
	%225 = load %..complex128, %..complex128* %224, align 8
	store %..complex128 %225, %..complex128* %18
	%226 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%227 = load %..complex128, %..complex128* %18, align 8
	%228 = load i32, i32* %2, align 4
	%229 = bitcast %..complex128* %19 to %..rawptr
	%230 = call %..rawptr @mem.zero(%..rawptr %229, i64 16) noinline
	store %..complex128 zeroinitializer, %..complex128* %19
	store %..complex128 %227, %..complex128* %19
	call void @fmt.fmt_complex(%fmt.Fmt_Info* %226, %..complex128* %19, i64 128, i32 %228, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %typeswitch.done-82

typeswitch.next-30:
	%231 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%232 = load %..typeid, %..typeid* %231, align 8
	%233 = icmp eq %..typeid %232, 72057594037927939
	br i1 %233, label %typeswitch.body-33, label %typeswitch.next-32

typeswitch.body-31:
	%234 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%235 = load %..rawptr, %..rawptr* %234, align 8
	%236 = bitcast %..rawptr %235 to i8*
	%237 = load i8, i8* %236, align 1
	store i8 %237, i8* %20
	%238 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%239 = load i8, i8* %20, align 1
	%240 = sext i8 %239 to i64
	%241 = load i32, i32* %2, align 4
	call void @fmt.fmt_int(%fmt.Fmt_Info* %238, i64 %240, i1 true, i64 8, i32 %241, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %typeswitch.done-82

typeswitch.next-32:
	%242 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%243 = load %..typeid, %..typeid* %242, align 8
	%244 = icmp eq %..typeid %243, 4683743612465315904
	br i1 %244, label %typeswitch.body-35, label %typeswitch.next-34

typeswitch.body-33:
	%245 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%246 = load %..rawptr, %..rawptr* %245, align 8
	%247 = bitcast %..rawptr %246 to i8*
	%248 = load i8, i8* %247, align 1
	store i8 %248, i8* %21
	%249 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%250 = load i8, i8* %21, align 1
	%251 = zext i8 %250 to i64
	%252 = load i32, i32* %2, align 4
	call void @fmt.fmt_int(%fmt.Fmt_Info* %249, i64 %251, i1 false, i64 8, i32 %252, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %typeswitch.done-82

typeswitch.next-34:
	%253 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%254 = load %..typeid, %..typeid* %253, align 8
	%255 = icmp eq %..typeid %254, 72057594037928003
	br i1 %255, label %typeswitch.body-37, label %typeswitch.next-36

typeswitch.body-35:
	%256 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%257 = load %..rawptr, %..rawptr* %256, align 8
	%258 = bitcast %..rawptr %257 to i16*
	%259 = load i16, i16* %258, align 2
	store i16 %259, i16* %22
	%260 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%261 = load i16, i16* %22, align 2
	%262 = sext i16 %261 to i64
	%263 = load i32, i32* %2, align 4
	call void @fmt.fmt_int(%fmt.Fmt_Info* %260, i64 %262, i1 true, i64 16, i32 %263, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %typeswitch.done-82

typeswitch.next-36:
	%264 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%265 = load %..typeid, %..typeid* %264, align 8
	%266 = icmp eq %..typeid %265, 4683743612465315905
	br i1 %266, label %typeswitch.body-39, label %typeswitch.next-38

typeswitch.body-37:
	%267 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%268 = load %..rawptr, %..rawptr* %267, align 8
	%269 = bitcast %..rawptr %268 to i16*
	%270 = load i16, i16* %269, align 2
	store i16 %270, i16* %23
	%271 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%272 = load i16, i16* %23, align 2
	%273 = zext i16 %272 to i64
	%274 = load i32, i32* %2, align 4
	call void @fmt.fmt_int(%fmt.Fmt_Info* %271, i64 %273, i1 false, i64 16, i32 %274, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %typeswitch.done-82

typeswitch.next-38:
	%275 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%276 = load %..typeid, %..typeid* %275, align 8
	%277 = icmp eq %..typeid %276, 72057594037928004
	br i1 %277, label %typeswitch.body-41, label %typeswitch.next-40

typeswitch.body-39:
	%278 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%279 = load %..rawptr, %..rawptr* %278, align 8
	%280 = bitcast %..rawptr %279 to i32*
	%281 = load i32, i32* %280, align 4
	store i32 %281, i32* %24
	%282 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%283 = load i32, i32* %24, align 4
	%284 = sext i32 %283 to i64
	%285 = load i32, i32* %2, align 4
	call void @fmt.fmt_int(%fmt.Fmt_Info* %282, i64 %284, i1 true, i64 32, i32 %285, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %typeswitch.done-82

typeswitch.next-40:
	%286 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%287 = load %..typeid, %..typeid* %286, align 8
	%288 = icmp eq %..typeid %287, 4683743612465315906
	br i1 %288, label %typeswitch.body-43, label %typeswitch.next-42

typeswitch.body-41:
	%289 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%290 = load %..rawptr, %..rawptr* %289, align 8
	%291 = bitcast %..rawptr %290 to i32*
	%292 = load i32, i32* %291, align 4
	store i32 %292, i32* %25
	%293 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%294 = load i32, i32* %25, align 4
	%295 = zext i32 %294 to i64
	%296 = load i32, i32* %2, align 4
	call void @fmt.fmt_int(%fmt.Fmt_Info* %293, i64 %295, i1 false, i64 32, i32 %296, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %typeswitch.done-82

typeswitch.next-42:
	%297 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%298 = load %..typeid, %..typeid* %297, align 8
	%299 = icmp eq %..typeid %298, 72057594037928005
	br i1 %299, label %typeswitch.body-45, label %typeswitch.next-44

typeswitch.body-43:
	%300 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%301 = load %..rawptr, %..rawptr* %300, align 8
	%302 = bitcast %..rawptr %301 to i64*
	%303 = load i64, i64* %302, align 8
	store i64 %303, i64* %26
	%304 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%305 = load i64, i64* %26, align 8
	%306 = bitcast i64 %305 to i64
	%307 = load i32, i32* %2, align 4
	call void @fmt.fmt_int(%fmt.Fmt_Info* %304, i64 %306, i1 true, i64 64, i32 %307, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %typeswitch.done-82

typeswitch.next-44:
	%308 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%309 = load %..typeid, %..typeid* %308, align 8
	%310 = icmp eq %..typeid %309, 4683743612465315848
	br i1 %310, label %typeswitch.body-47, label %typeswitch.next-46

typeswitch.body-45:
	%311 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%312 = load %..rawptr, %..rawptr* %311, align 8
	%313 = bitcast %..rawptr %312 to i64*
	%314 = load i64, i64* %313, align 8
	store i64 %314, i64* %27
	%315 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%316 = load i64, i64* %27, align 8
	%317 = load i32, i32* %2, align 4
	call void @fmt.fmt_int(%fmt.Fmt_Info* %315, i64 %316, i1 false, i64 64, i32 %317, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %typeswitch.done-82

typeswitch.next-46:
	%318 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%319 = load %..typeid, %..typeid* %318, align 8
	%320 = icmp eq %..typeid %319, 72057594037928006
	br i1 %320, label %typeswitch.body-49, label %typeswitch.next-48

typeswitch.body-47:
	%321 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%322 = load %..rawptr, %..rawptr* %321, align 8
	%323 = bitcast %..rawptr %322 to i64*
	%324 = load i64, i64* %323, align 8
	store i64 %324, i64* %28
	%325 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%326 = load i64, i64* %28, align 8
	%327 = bitcast i64 %326 to i64
	%328 = load i32, i32* %2, align 4
	call void @fmt.fmt_int(%fmt.Fmt_Info* %325, i64 %327, i1 true, i64 64, i32 %328, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %typeswitch.done-82

typeswitch.next-48:
	%329 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%330 = load %..typeid, %..typeid* %329, align 8
	%331 = icmp eq %..typeid %330, 72057594037927987
	br i1 %331, label %typeswitch.body-51, label %typeswitch.next-50

typeswitch.body-49:
	%332 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%333 = load %..rawptr, %..rawptr* %332, align 8
	%334 = bitcast %..rawptr %333 to i64*
	%335 = load i64, i64* %334, align 8
	store i64 %335, i64* %29
	%336 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%337 = load i64, i64* %29, align 8
	%338 = bitcast i64 %337 to i64
	%339 = load i32, i32* %2, align 4
	call void @fmt.fmt_int(%fmt.Fmt_Info* %336, i64 %338, i1 false, i64 64, i32 %339, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %typeswitch.done-82

typeswitch.next-50:
	%340 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%341 = load %..typeid, %..typeid* %340, align 8
	%342 = icmp eq %..typeid %341, 360287970189639686
	br i1 %342, label %typeswitch.body-53, label %typeswitch.next-52

typeswitch.body-51:
	%343 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%344 = load %..rawptr, %..rawptr* %343, align 8
	%345 = bitcast %..rawptr %344 to i64*
	%346 = load i64, i64* %345, align 8
	store i64 %346, i64* %30
	%347 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%348 = load i64, i64* %30, align 8
	%349 = bitcast i64 %348 to i64
	%350 = load i32, i32* %2, align 4
	call void @fmt.fmt_int(%fmt.Fmt_Info* %347, i64 %349, i1 false, i64 64, i32 %350, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %typeswitch.done-82

typeswitch.next-52:
	%351 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%352 = load %..typeid, %..typeid* %351, align 8
	%353 = icmp eq %..typeid %352, 4971973988617027686
	br i1 %353, label %typeswitch.body-55, label %typeswitch.next-54

typeswitch.body-53:
	%354 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%355 = load %..rawptr, %..rawptr* %354, align 8
	%356 = bitcast %..rawptr %355 to %..string*
	%357 = load %..string, %..string* %356, align 8
	store %..string %357, %..string* %31
	%358 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%359 = load %..string, %..string* %31, align 8
	%360 = load i32, i32* %2, align 4
	call void @fmt.fmt_string(%fmt.Fmt_Info* %358, %..string %359, i32 %360, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %typeswitch.done-82

typeswitch.next-54:
	%361 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%362 = load %..typeid, %..typeid* %361, align 8
	%363 = icmp eq %..typeid %362, 13
	br i1 %363, label %typeswitch.body-57, label %typeswitch.next-56

typeswitch.body-55:
	%364 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%365 = load %..rawptr, %..rawptr* %364, align 8
	%366 = bitcast %..rawptr %365 to i8**
	%367 = load i8*, i8** %366, align 8
	store i8* %367, i8** %32
	%368 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%369 = load i8*, i8** %32, align 8
	%370 = load i32, i32* %2, align 4
	call void @fmt.fmt_cstring(%fmt.Fmt_Info* %368, i8* %369, i32 %370, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %typeswitch.done-82

typeswitch.next-56:
	%371 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%372 = load %..typeid, %..typeid* %371, align 8
	%373 = icmp eq %..typeid %372, 4683743612465315943
	br i1 %373, label %typeswitch.body-59, label %typeswitch.next-58

typeswitch.body-57:
	%374 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%375 = load %..rawptr, %..rawptr* %374, align 8
	%376 = bitcast %..rawptr %375 to %..typeid*
	%377 = load %..typeid, %..typeid* %376, align 8
	store %..typeid %377, %..typeid* %33
	; SelectorExpr
	%378 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%379 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %378, i64 0
	%380 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %379, i64 0, i32 12
	%381 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %380, align 8
	%382 = load %..typeid, %..typeid* %33, align 8
	call void @fmt.write_typeid({i8*, i64, i64, %mem.Allocator}* %381, %..typeid %382, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %typeswitch.done-82

typeswitch.next-58:
	%383 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%384 = load %..typeid, %..typeid* %383, align 8
	%385 = icmp eq %..typeid %384, 72057594037928040
	br i1 %385, label %typeswitch.body-61, label %typeswitch.next-60

typeswitch.body-59:
	%386 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%387 = load %..rawptr, %..rawptr* %386, align 8
	%388 = bitcast %..rawptr %387 to i16*
	%389 = load i16, i16* %388, align 2
	store i16 %389, i16* %34
	%390 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%391 = load i16, i16* %34, align 2
	%392 = sext i16 %391 to i64
	%393 = load i32, i32* %2, align 4
	call void @fmt.fmt_int(%fmt.Fmt_Info* %390, i64 %392, i1 true, i64 16, i32 %393, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %typeswitch.done-82

typeswitch.next-60:
	%394 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%395 = load %..typeid, %..typeid* %394, align 8
	%396 = icmp eq %..typeid %395, 4683743612465315945
	br i1 %396, label %typeswitch.body-63, label %typeswitch.next-62

typeswitch.body-61:
	%397 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%398 = load %..rawptr, %..rawptr* %397, align 8
	%399 = bitcast %..rawptr %398 to i16*
	%400 = load i16, i16* %399, align 2
	store i16 %400, i16* %35
	%401 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%402 = load i16, i16* %35, align 2
	%403 = zext i16 %402 to i64
	%404 = load i32, i32* %2, align 4
	call void @fmt.fmt_int(%fmt.Fmt_Info* %401, i64 %403, i1 false, i64 16, i32 %404, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %typeswitch.done-82

typeswitch.next-62:
	%405 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%406 = load %..typeid, %..typeid* %405, align 8
	%407 = icmp eq %..typeid %406, 72057594037928042
	br i1 %407, label %typeswitch.body-65, label %typeswitch.next-64

typeswitch.body-63:
	%408 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%409 = load %..rawptr, %..rawptr* %408, align 8
	%410 = bitcast %..rawptr %409 to i32*
	%411 = load i32, i32* %410, align 4
	store i32 %411, i32* %36
	%412 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%413 = load i32, i32* %36, align 4
	%414 = sext i32 %413 to i64
	%415 = load i32, i32* %2, align 4
	call void @fmt.fmt_int(%fmt.Fmt_Info* %412, i64 %414, i1 true, i64 32, i32 %415, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %typeswitch.done-82

typeswitch.next-64:
	%416 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%417 = load %..typeid, %..typeid* %416, align 8
	%418 = icmp eq %..typeid %417, 4683743612465315947
	br i1 %418, label %typeswitch.body-67, label %typeswitch.next-66

typeswitch.body-65:
	%419 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%420 = load %..rawptr, %..rawptr* %419, align 8
	%421 = bitcast %..rawptr %420 to i32*
	%422 = load i32, i32* %421, align 4
	store i32 %422, i32* %37
	%423 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%424 = load i32, i32* %37, align 4
	%425 = zext i32 %424 to i64
	%426 = load i32, i32* %2, align 4
	call void @fmt.fmt_int(%fmt.Fmt_Info* %423, i64 %425, i1 false, i64 32, i32 %426, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %typeswitch.done-82

typeswitch.next-66:
	%427 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%428 = load %..typeid, %..typeid* %427, align 8
	%429 = icmp eq %..typeid %428, 72057594037928044
	br i1 %429, label %typeswitch.body-69, label %typeswitch.next-68

typeswitch.body-67:
	%430 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%431 = load %..rawptr, %..rawptr* %430, align 8
	%432 = bitcast %..rawptr %431 to i64*
	%433 = load i64, i64* %432, align 8
	store i64 %433, i64* %38
	%434 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%435 = load i64, i64* %38, align 8
	%436 = bitcast i64 %435 to i64
	%437 = load i32, i32* %2, align 4
	call void @fmt.fmt_int(%fmt.Fmt_Info* %434, i64 %436, i1 true, i64 64, i32 %437, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %typeswitch.done-82

typeswitch.next-68:
	%438 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%439 = load %..typeid, %..typeid* %438, align 8
	%440 = icmp eq %..typeid %439, 4683743612465315949
	br i1 %440, label %typeswitch.body-71, label %typeswitch.next-70

typeswitch.body-69:
	%441 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%442 = load %..rawptr, %..rawptr* %441, align 8
	%443 = bitcast %..rawptr %442 to i64*
	%444 = load i64, i64* %443, align 8
	store i64 %444, i64* %39
	%445 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%446 = load i64, i64* %39, align 8
	%447 = bitcast i64 %446 to i64
	%448 = load i32, i32* %2, align 4
	call void @fmt.fmt_int(%fmt.Fmt_Info* %445, i64 %447, i1 false, i64 64, i32 %448, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %typeswitch.done-82

typeswitch.next-70:
	%449 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%450 = load %..typeid, %..typeid* %449, align 8
	%451 = icmp eq %..typeid %450, 72057594037928046
	br i1 %451, label %typeswitch.body-73, label %typeswitch.next-72

typeswitch.body-71:
	%452 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%453 = load %..rawptr, %..rawptr* %452, align 8
	%454 = bitcast %..rawptr %453 to i16*
	%455 = load i16, i16* %454, align 2
	store i16 %455, i16* %40
	%456 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%457 = load i16, i16* %40, align 2
	%458 = call i16 @llvm.bswap.i16(i16 %457)
	%459 = sext i16 %458 to i64
	%460 = load i32, i32* %2, align 4
	call void @fmt.fmt_int(%fmt.Fmt_Info* %456, i64 %459, i1 true, i64 16, i32 %460, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %typeswitch.done-82

typeswitch.next-72:
	%461 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%462 = load %..typeid, %..typeid* %461, align 8
	%463 = icmp eq %..typeid %462, 4683743612465315951
	br i1 %463, label %typeswitch.body-75, label %typeswitch.next-74

typeswitch.body-73:
	%464 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%465 = load %..rawptr, %..rawptr* %464, align 8
	%466 = bitcast %..rawptr %465 to i16*
	%467 = load i16, i16* %466, align 2
	store i16 %467, i16* %41
	%468 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%469 = load i16, i16* %41, align 2
	%470 = call i16 @llvm.bswap.i16(i16 %469)
	%471 = zext i16 %470 to i64
	%472 = load i32, i32* %2, align 4
	call void @fmt.fmt_int(%fmt.Fmt_Info* %468, i64 %471, i1 false, i64 16, i32 %472, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %typeswitch.done-82

typeswitch.next-74:
	%473 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%474 = load %..typeid, %..typeid* %473, align 8
	%475 = icmp eq %..typeid %474, 72057594037928048
	br i1 %475, label %typeswitch.body-77, label %typeswitch.next-76

typeswitch.body-75:
	%476 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%477 = load %..rawptr, %..rawptr* %476, align 8
	%478 = bitcast %..rawptr %477 to i32*
	%479 = load i32, i32* %478, align 4
	store i32 %479, i32* %42
	%480 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%481 = load i32, i32* %42, align 4
	%482 = call i32 @llvm.bswap.i32(i32 %481)
	%483 = sext i32 %482 to i64
	%484 = load i32, i32* %2, align 4
	call void @fmt.fmt_int(%fmt.Fmt_Info* %480, i64 %483, i1 true, i64 32, i32 %484, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %typeswitch.done-82

typeswitch.next-76:
	%485 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%486 = load %..typeid, %..typeid* %485, align 8
	%487 = icmp eq %..typeid %486, 4683743612465315953
	br i1 %487, label %typeswitch.body-79, label %typeswitch.next-78

typeswitch.body-77:
	%488 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%489 = load %..rawptr, %..rawptr* %488, align 8
	%490 = bitcast %..rawptr %489 to i32*
	%491 = load i32, i32* %490, align 4
	store i32 %491, i32* %43
	%492 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%493 = load i32, i32* %43, align 4
	%494 = call i32 @llvm.bswap.i32(i32 %493)
	%495 = zext i32 %494 to i64
	%496 = load i32, i32* %2, align 4
	call void @fmt.fmt_int(%fmt.Fmt_Info* %492, i64 %495, i1 false, i64 32, i32 %496, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %typeswitch.done-82

typeswitch.next-78:
	%497 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%498 = load %..typeid, %..typeid* %497, align 8
	%499 = icmp eq %..typeid %498, 72057594037928050
	br i1 %499, label %typeswitch.body-81, label %typeswitch.next-80

typeswitch.body-79:
	%500 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%501 = load %..rawptr, %..rawptr* %500, align 8
	%502 = bitcast %..rawptr %501 to i64*
	%503 = load i64, i64* %502, align 8
	store i64 %503, i64* %44
	%504 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%505 = load i64, i64* %44, align 8
	%506 = call i64 @llvm.bswap.i64(i64 %505)
	%507 = bitcast i64 %506 to i64
	%508 = load i32, i32* %2, align 4
	call void @fmt.fmt_int(%fmt.Fmt_Info* %504, i64 %507, i1 true, i64 64, i32 %508, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %typeswitch.done-82

typeswitch.next-80:
	store %..any %90, %..any* %46
	%509 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%510 = load %..any, %..any* %1, align 8
	%511 = load i32, i32* %2, align 4
	call void @fmt.fmt_value(%fmt.Fmt_Info* %509, %..any %510, i32 %511, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %typeswitch.done-82

typeswitch.body-81:
	%512 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%513 = load %..rawptr, %..rawptr* %512, align 8
	%514 = bitcast %..rawptr %513 to i64*
	%515 = load i64, i64* %514, align 8
	store i64 %515, i64* %45
	%516 = load %fmt.Fmt_Info*, %fmt.Fmt_Info** %0, align 8
	%517 = load i64, i64* %45, align 8
	%518 = call i64 @llvm.bswap.i64(i64 %517)
	%519 = bitcast i64 %518 to i64
	%520 = load i32, i32* %2, align 4
	call void @fmt.fmt_int(%fmt.Fmt_Info* %516, i64 %519, i1 false, i64 64, i32 %520, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %typeswitch.done-82

typeswitch.done-82:
	ret void
}

define %..string @fmt.sbprint({i8*, i64, i64, %mem.Allocator}* %buf, {%..any*, i64}* %args, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca {i8*, i64, i64, %mem.Allocator}*, align 16
	%1 = alloca %fmt.Fmt_Info, align 16
	%2 = alloca i8, align 16
	%3 = alloca %..any, align 16
	%4 = alloca i64, align 16
	%5 = alloca i64, align 16
	%6 = alloca i64, align 16
	%7 = alloca i8, align 16
	%8 = alloca {i8*, i64, i64, %mem.Allocator}, align 16
	store {i8*, i64, i64, %mem.Allocator}* %buf, {i8*, i64, i64, %mem.Allocator}** %0
	%9 = load {%..any*, i64}, {%..any*, i64}* %args, align 8
	; fi
	%10 = bitcast %fmt.Fmt_Info* %1 to %..rawptr
	%11 = call %..rawptr @mem.zero(%..rawptr %10, i64 64) noinline
	store %fmt.Fmt_Info zeroinitializer, %fmt.Fmt_Info* %1
	; prev_string
	store i8 0, i8* %2
	; AssignStmt
	; SelectorExpr
	%12 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %1, i64 0, i32 12
	%13 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	store {i8*, i64, i64, %mem.Allocator}* %13, {i8*, i64, i64, %mem.Allocator}** %12
	; RangeStmt
	; arg
	%14 = bitcast %..any* %3 to %..rawptr
	%15 = call %..rawptr @mem.zero(%..rawptr %14, i64 16) noinline
	store %..any zeroinitializer, %..any* %3
	; i
	%16 = bitcast i64* %4 to %..rawptr
	%17 = call %..rawptr @mem.zero(%..rawptr %16, i64 8) noinline
	store i64 zeroinitializer, i64* %4
	%18 = load {%..any*, i64}, {%..any*, i64}* %args, align 8
	%19 = bitcast i64* %5 to %..rawptr
	%20 = call %..rawptr @mem.zero(%..rawptr %19, i64 8) noinline
	store i64 zeroinitializer, i64* %5
	%21 = extractvalue {%..any*, i64} %18, 1
	store i64 %21, i64* %5
	%22 = bitcast i64* %6 to %..rawptr
	%23 = call %..rawptr @mem.zero(%..rawptr %22, i64 8) noinline
	store i64 zeroinitializer, i64* %6
	store i64 -1, i64* %6
	br label %for.index.loop-1

for.index.loop-1:
	%24 = load i64, i64* %6, align 8
	%25 = add i64 %24, 1
	store i64 %25, i64* %6
	%26 = load i64, i64* %5, align 8
	%27 = icmp slt i64 %25, %26
	br i1 %27, label %for.index.body-2, label %for.index.done-9

for.index.body-2:
	%28 = load i64, i64* %6, align 8
	%29 = extractvalue {%..any*, i64} %18, 0
	%30 = getelementptr inbounds %..any, %..any* %29, i64 %28
	%31 = load %..any, %..any* %30, align 8
	store %..any %31, %..any* %3
	store i64 %28, i64* %4
	; is_string
	%32 = load %..any, %..any* %3, align 8
	%33 = extractvalue %..any %32, 0
	%34 = extractvalue %..any %32, 1
	%35 = icmp ne %..rawptr %33, null
	%36 = icmp ne %..typeid %34, 0
	%37 = zext i1 %35 to i8
	%38 = zext i1 %36 to i8
	%39 = and i8 %37, %38
	%40 = load %..any, %..any* %3, align 8
	%41 = extractvalue %..any %40, 0
	%42 = extractvalue %..any %40, 1
	%43 = icmp ne %..rawptr %41, null
	%44 = icmp ne %..typeid %42, 0
	%45 = zext i1 %43 to i8
	%46 = zext i1 %44 to i8
	%47 = and i8 %45, %46
	%48 = trunc i8 %47 to i1
	br i1 %48, label %logical.cmp.rhs-3, label %logical.cmp.done-4

logical.cmp.rhs-3:
	; SelectorExpr
	; SelectorExpr
	%49 = getelementptr inbounds %..any, %..any* %3, i64 0, i32 1
	%50 = load %..typeid, %..typeid* %49, align 8
	%51 = call %runtime.Type_Info* @runtime.__type_info_of(%..typeid %50)
	%52 = call i8 @types.is_string(%runtime.Type_Info* %51, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %logical.cmp.done-4

logical.cmp.done-4:
	%53 = phi i8 [ 0, %for.index.body-2 ], [ %52, %logical.cmp.rhs-3 ]
	store i8 %53, i8* %7
	; IfStmt
	%54 = load i64, i64* %4, align 8
	%55 = icmp sgt i64 %54, 0
	%56 = zext i1 %55 to i8
	%57 = trunc i8 %56 to i1
	br i1 %57, label %cmp.and-5, label %if.done-8

cmp.and-5:
	%58 = load i8, i8* %7, align 1
	%59 = trunc i8 %58 to i1
	br i1 %59, label %if.done-8, label %cmp.and-6

cmp.and-6:
	%60 = load i8, i8* %2, align 1
	%61 = trunc i8 %60 to i1
	br i1 %61, label %if.done-8, label %if.then-7

if.then-7:
	%62 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	call void @fmt.write_byte({i8*, i64, i64, %mem.Allocator}* %62, i8 32, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %if.done-8

if.done-8:
	; IndexExpr
	%63 = load {%..any*, i64}, {%..any*, i64}* %args, align 8
	%64 = extractvalue {%..any*, i64} %63, 0
	%65 = load i64, i64* %4, align 8
	%66 = extractvalue {%..any*, i64} %63, 1
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @str$156, i64 0, i32 0), i64 25}, i64 1347, i64 23, i64 %65, i64 %66)
	%67 = getelementptr inbounds %..any, %..any* %64, i64 %65
	%68 = load %..any, %..any* %67, align 8
	call void @fmt.fmt_value(%fmt.Fmt_Info* %1, %..any %68, i32 118, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	; AssignStmt
	%69 = load i8, i8* %7, align 1
	store i8 %69, i8* %2
	br label %for.index.loop-1

for.index.done-9:
	; ReturnStmt
	%70 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	%71 = getelementptr inbounds {i8*, i64, i64, %mem.Allocator}, {i8*, i64, i64, %mem.Allocator}* %70, i64 0
	%72 = load {i8*, i64, i64, %mem.Allocator}, {i8*, i64, i64, %mem.Allocator}* %71, align 8
	%73 = bitcast {i8*, i64, i64, %mem.Allocator}* %8 to %..rawptr
	%74 = call %..rawptr @mem.zero(%..rawptr %73, i64 40) noinline
	store {i8*, i64, i64, %mem.Allocator} zeroinitializer, {i8*, i64, i64, %mem.Allocator}* %8
	store {i8*, i64, i64, %mem.Allocator} %72, {i8*, i64, i64, %mem.Allocator}* %8
	%75 = call %..string @fmt.to_string({i8*, i64, i64, %mem.Allocator}* %8, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	ret %..string %75
}

define %..string @fmt.sbprintln({i8*, i64, i64, %mem.Allocator}* %buf, {%..any*, i64}* %args, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca {i8*, i64, i64, %mem.Allocator}*, align 16
	%1 = alloca %fmt.Fmt_Info, align 16
	%2 = alloca i64, align 16
	%3 = alloca i64, align 16
	%4 = alloca i64, align 16
	%5 = alloca {i8*, i64, i64, %mem.Allocator}, align 16
	store {i8*, i64, i64, %mem.Allocator}* %buf, {i8*, i64, i64, %mem.Allocator}** %0
	%6 = load {%..any*, i64}, {%..any*, i64}* %args, align 8
	; fi
	%7 = bitcast %fmt.Fmt_Info* %1 to %..rawptr
	%8 = call %..rawptr @mem.zero(%..rawptr %7, i64 64) noinline
	store %fmt.Fmt_Info zeroinitializer, %fmt.Fmt_Info* %1
	; AssignStmt
	; SelectorExpr
	%9 = getelementptr inbounds %fmt.Fmt_Info, %fmt.Fmt_Info* %1, i64 0, i32 12
	%10 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	store {i8*, i64, i64, %mem.Allocator}* %10, {i8*, i64, i64, %mem.Allocator}** %9
	; RangeStmt
	; i
	%11 = bitcast i64* %2 to %..rawptr
	%12 = call %..rawptr @mem.zero(%..rawptr %11, i64 8) noinline
	store i64 zeroinitializer, i64* %2
	%13 = load {%..any*, i64}, {%..any*, i64}* %args, align 8
	%14 = bitcast i64* %3 to %..rawptr
	%15 = call %..rawptr @mem.zero(%..rawptr %14, i64 8) noinline
	store i64 zeroinitializer, i64* %3
	%16 = extractvalue {%..any*, i64} %13, 1
	store i64 %16, i64* %3
	%17 = bitcast i64* %4 to %..rawptr
	%18 = call %..rawptr @mem.zero(%..rawptr %17, i64 8) noinline
	store i64 zeroinitializer, i64* %4
	store i64 -1, i64* %4
	br label %for.index.loop-1

for.index.loop-1:
	%19 = load i64, i64* %4, align 8
	%20 = add i64 %19, 1
	store i64 %20, i64* %4
	%21 = load i64, i64* %3, align 8
	%22 = icmp slt i64 %20, %21
	br i1 %22, label %for.index.body-2, label %for.index.done-5

for.index.body-2:
	%23 = load i64, i64* %4, align 8
	store i64 %23, i64* %2
	; IfStmt
	%24 = load i64, i64* %2, align 8
	%25 = icmp sgt i64 %24, 0
	%26 = zext i1 %25 to i8
	%27 = trunc i8 %26 to i1
	br i1 %27, label %if.then-3, label %if.done-4

if.then-3:
	%28 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	call void @fmt.write_byte({i8*, i64, i64, %mem.Allocator}* %28, i8 32, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %if.done-4

if.done-4:
	; IndexExpr
	%29 = load {%..any*, i64}, {%..any*, i64}* %args, align 8
	%30 = extractvalue {%..any*, i64} %29, 0
	%31 = load i64, i64* %2, align 8
	%32 = extractvalue {%..any*, i64} %29, 1
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @str$157, i64 0, i32 0), i64 25}, i64 1360, i64 23, i64 %31, i64 %32)
	%33 = getelementptr inbounds %..any, %..any* %30, i64 %31
	%34 = load %..any, %..any* %33, align 8
	call void @fmt.fmt_value(%fmt.Fmt_Info* %1, %..any %34, i32 118, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %for.index.loop-1

for.index.done-5:
	%35 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	call void @fmt.write_byte({i8*, i64, i64, %mem.Allocator}* %35, i8 10, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	; ReturnStmt
	%36 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	%37 = getelementptr inbounds {i8*, i64, i64, %mem.Allocator}, {i8*, i64, i64, %mem.Allocator}* %36, i64 0
	%38 = load {i8*, i64, i64, %mem.Allocator}, {i8*, i64, i64, %mem.Allocator}* %37, align 8
	%39 = bitcast {i8*, i64, i64, %mem.Allocator}* %5 to %..rawptr
	%40 = call %..rawptr @mem.zero(%..rawptr %39, i64 40) noinline
	store {i8*, i64, i64, %mem.Allocator} zeroinitializer, {i8*, i64, i64, %mem.Allocator}* %5
	store {i8*, i64, i64, %mem.Allocator} %38, {i8*, i64, i64, %mem.Allocator}* %5
	%41 = call %..string @fmt.to_string({i8*, i64, i64, %mem.Allocator}* %5, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	ret %..string %41
}

define i64 @strconv._digit_value(i32 %r, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca i32, align 16
	%1 = alloca i64, align 16
	%2 = alloca i64, align 16
	store i32 %r, i32* %0
	; ri
	%3 = load i32, i32* %0, align 4
	%4 = sext i32 %3 to i64
	store i64 %4, i64* %1
	; v
	store i64 16, i64* %2
	; SwitchStmt
	%5 = load i32, i32* %0, align 4
	%6 = icmp sle i32 48, %5
	%7 = icmp sle i32 %5, 57
	%8 = zext i1 %6 to i8
	%9 = zext i1 %7 to i8
	%10 = and i8 %8, %9
	%11 = trunc i8 %10 to i1
	br i1 %11, label %switch.case.body-2, label %switch.case.next-1

switch.case.next-1:
	%12 = icmp sle i32 97, %5
	%13 = icmp sle i32 %5, 122
	%14 = zext i1 %12 to i8
	%15 = zext i1 %13 to i8
	%16 = and i8 %14, %15
	%17 = trunc i8 %16 to i1
	br i1 %17, label %switch.fall.body-4, label %switch.case.next-3

switch.case.body-2:
	; AssignStmt
	%18 = load i64, i64* %1, align 8
	%19 = sub i64 %18, 48
	store i64 %19, i64* %2
	br label %switch.done-7

switch.case.next-3:
	%20 = icmp sle i32 65, %5
	%21 = icmp sle i32 %5, 90
	%22 = zext i1 %20 to i8
	%23 = zext i1 %21 to i8
	%24 = and i8 %22, %23
	%25 = trunc i8 %24 to i1
	br i1 %25, label %switch.fall.body-6, label %switch.case.next-5

switch.fall.body-4:
	; AssignStmt
	%26 = load i64, i64* %1, align 8
	%27 = sub i64 %26, 97
	%28 = add i64 %27, 10
	store i64 %28, i64* %2
	br label %switch.done-7

switch.case.next-5:
	br label %switch.done-7

switch.fall.body-6:
	; AssignStmt
	%29 = load i64, i64* %1, align 8
	%30 = sub i64 %29, 65
	%31 = add i64 %30, 10
	store i64 %31, i64* %2
	br label %switch.done-7

switch.done-7:
	; ReturnStmt
	%32 = load i64, i64* %2, align 8
	ret i64 %32
}

define i64 @strconv.parse_i64(%..string %s, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca %..string, align 16
	%1 = alloca i8, align 16
	%2 = alloca %..string, align 16
	%3 = alloca %..string, align 16
	%4 = alloca i64, align 16
	%5 = alloca %..string, align 16
	%6 = alloca %..string, align 16
	%7 = alloca %..string, align 16
	%8 = alloca %..string, align 16
	%9 = alloca %..string, align 16
	%10 = alloca i64, align 16
	%11 = alloca i32, align 16
	%12 = alloca i64, align 16
	%13 = alloca %..string, align 16
	%14 = alloca i64, align 16
	store %..string %s, %..string* %0
	; neg
	store i8 0, i8* %1
	; IfStmt
	%15 = load %..string, %..string* %0, align 8
	%16 = extractvalue %..string %15, 1
	%17 = icmp sgt i64 %16, 1
	%18 = zext i1 %17 to i8
	%19 = trunc i8 %18 to i1
	br i1 %19, label %if.then-1, label %if.done-7

if.then-1:
	; SwitchStmt
	; IndexExpr
	%20 = load %..string, %..string* %0, align 8
	%21 = extractvalue %..string %20, 0
	%22 = extractvalue %..string %20, 1
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([34 x i8], [34 x i8]* @str$158, i64 0, i32 0), i64 33}, i64 37, i64 12, i64 0, i64 %22)
	%23 = getelementptr inbounds i8, i8* %21, i64 0
	%24 = load i8, i8* %23, align 1
	%25 = icmp eq i8 %24, 45
	br i1 %25, label %switch.case.body-3, label %switch.case.next-2

switch.case.next-2:
	%26 = icmp eq i8 %24, 43
	br i1 %26, label %switch.fall.body-5, label %switch.case.next-4

switch.case.body-3:
	; AssignStmt
	store i8 1, i8* %1
	; AssignStmt
	; SliceExpr
	%27 = load %..string, %..string* %0, align 8
	%28 = extractvalue %..string %27, 1
	call void @runtime.slice_expr_error(%..string {i8* getelementptr inbounds ([34 x i8], [34 x i8]* @str$159, i64 0, i32 0), i64 33}, i64 40, i64 9, i64 1, i64 %28, i64 %28)
	%29 = extractvalue %..string %27, 0
	%30 = getelementptr inbounds i8, i8* %29, i64 1
	%31 = sub i64 %28, 1
	%32 = bitcast %..string* %2 to %..rawptr
	%33 = call %..rawptr @mem.zero(%..rawptr %32, i64 16) noinline
	store %..string zeroinitializer, %..string* %2
	%34 = getelementptr inbounds %..string, %..string* %2, i64 0, i32 0
	store i8* %30, i8** %34
	%35 = getelementptr inbounds %..string, %..string* %2, i64 0, i32 1
	store i64 %31, i64* %35
	%36 = load %..string, %..string* %2, align 8
	store %..string %36, %..string* %0
	br label %switch.done-6

switch.case.next-4:
	br label %switch.done-6

switch.fall.body-5:
	; AssignStmt
	; SliceExpr
	%37 = load %..string, %..string* %0, align 8
	%38 = extractvalue %..string %37, 1
	call void @runtime.slice_expr_error(%..string {i8* getelementptr inbounds ([34 x i8], [34 x i8]* @str$15a, i64 0, i32 0), i64 33}, i64 42, i64 9, i64 1, i64 %38, i64 %38)
	%39 = extractvalue %..string %37, 0
	%40 = getelementptr inbounds i8, i8* %39, i64 1
	%41 = sub i64 %38, 1
	%42 = bitcast %..string* %3 to %..rawptr
	%43 = call %..rawptr @mem.zero(%..rawptr %42, i64 16) noinline
	store %..string zeroinitializer, %..string* %3
	%44 = getelementptr inbounds %..string, %..string* %3, i64 0, i32 0
	store i8* %40, i8** %44
	%45 = getelementptr inbounds %..string, %..string* %3, i64 0, i32 1
	store i64 %41, i64* %45
	%46 = load %..string, %..string* %3, align 8
	store %..string %46, %..string* %0
	br label %switch.done-6

switch.done-6:
	br label %if.done-7

if.done-7:
	; base
	store i64 10, i64* %4
	; IfStmt
	%47 = load %..string, %..string* %0, align 8
	%48 = extractvalue %..string %47, 1
	%49 = icmp sgt i64 %48, 2
	%50 = zext i1 %49 to i8
	%51 = trunc i8 %50 to i1
	br i1 %51, label %cmp.and-8, label %if.done-21

cmp.and-8:
	; IndexExpr
	%52 = load %..string, %..string* %0, align 8
	%53 = extractvalue %..string %52, 0
	%54 = extractvalue %..string %52, 1
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([34 x i8], [34 x i8]* @str$15b, i64 0, i32 0), i64 33}, i64 48, i64 21, i64 0, i64 %54)
	%55 = getelementptr inbounds i8, i8* %53, i64 0
	%56 = load i8, i8* %55, align 1
	%57 = icmp eq i8 %56, 48
	%58 = zext i1 %57 to i8
	%59 = trunc i8 %58 to i1
	br i1 %59, label %if.then-9, label %if.done-21

if.then-9:
	; SwitchStmt
	; IndexExpr
	%60 = load %..string, %..string* %0, align 8
	%61 = extractvalue %..string %60, 0
	%62 = extractvalue %..string %60, 1
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([34 x i8], [34 x i8]* @str$15c, i64 0, i32 0), i64 33}, i64 49, i64 12, i64 1, i64 %62)
	%63 = getelementptr inbounds i8, i8* %61, i64 1
	%64 = load i8, i8* %63, align 1
	%65 = icmp eq i8 %64, 98
	br i1 %65, label %switch.case.body-11, label %switch.case.next-10

switch.case.next-10:
	%66 = icmp eq i8 %64, 111
	br i1 %66, label %switch.fall.body-13, label %switch.case.next-12

switch.case.body-11:
	; AssignStmt
	store i64 2, i64* %4
	; AssignStmt
	; SliceExpr
	%67 = load %..string, %..string* %0, align 8
	%68 = extractvalue %..string %67, 1
	call void @runtime.slice_expr_error(%..string {i8* getelementptr inbounds ([34 x i8], [34 x i8]* @str$15d, i64 0, i32 0), i64 33}, i64 50, i64 30, i64 2, i64 %68, i64 %68)
	%69 = extractvalue %..string %67, 0
	%70 = getelementptr inbounds i8, i8* %69, i64 2
	%71 = sub i64 %68, 2
	%72 = bitcast %..string* %5 to %..rawptr
	%73 = call %..rawptr @mem.zero(%..rawptr %72, i64 16) noinline
	store %..string zeroinitializer, %..string* %5
	%74 = getelementptr inbounds %..string, %..string* %5, i64 0, i32 0
	store i8* %70, i8** %74
	%75 = getelementptr inbounds %..string, %..string* %5, i64 0, i32 1
	store i64 %71, i64* %75
	%76 = load %..string, %..string* %5, align 8
	store %..string %76, %..string* %0
	br label %switch.done-20

switch.case.next-12:
	%77 = icmp eq i8 %64, 100
	br i1 %77, label %switch.fall.body-15, label %switch.case.next-14

switch.fall.body-13:
	; AssignStmt
	store i64 8, i64* %4
	; AssignStmt
	; SliceExpr
	%78 = load %..string, %..string* %0, align 8
	%79 = extractvalue %..string %78, 1
	call void @runtime.slice_expr_error(%..string {i8* getelementptr inbounds ([34 x i8], [34 x i8]* @str$15e, i64 0, i32 0), i64 33}, i64 51, i64 30, i64 2, i64 %79, i64 %79)
	%80 = extractvalue %..string %78, 0
	%81 = getelementptr inbounds i8, i8* %80, i64 2
	%82 = sub i64 %79, 2
	%83 = bitcast %..string* %6 to %..rawptr
	%84 = call %..rawptr @mem.zero(%..rawptr %83, i64 16) noinline
	store %..string zeroinitializer, %..string* %6
	%85 = getelementptr inbounds %..string, %..string* %6, i64 0, i32 0
	store i8* %81, i8** %85
	%86 = getelementptr inbounds %..string, %..string* %6, i64 0, i32 1
	store i64 %82, i64* %86
	%87 = load %..string, %..string* %6, align 8
	store %..string %87, %..string* %0
	br label %switch.done-20

switch.case.next-14:
	%88 = icmp eq i8 %64, 122
	br i1 %88, label %switch.fall.body-17, label %switch.case.next-16

switch.fall.body-15:
	; AssignStmt
	store i64 10, i64* %4
	; AssignStmt
	; SliceExpr
	%89 = load %..string, %..string* %0, align 8
	%90 = extractvalue %..string %89, 1
	call void @runtime.slice_expr_error(%..string {i8* getelementptr inbounds ([34 x i8], [34 x i8]* @str$15f, i64 0, i32 0), i64 33}, i64 52, i64 30, i64 2, i64 %90, i64 %90)
	%91 = extractvalue %..string %89, 0
	%92 = getelementptr inbounds i8, i8* %91, i64 2
	%93 = sub i64 %90, 2
	%94 = bitcast %..string* %7 to %..rawptr
	%95 = call %..rawptr @mem.zero(%..rawptr %94, i64 16) noinline
	store %..string zeroinitializer, %..string* %7
	%96 = getelementptr inbounds %..string, %..string* %7, i64 0, i32 0
	store i8* %92, i8** %96
	%97 = getelementptr inbounds %..string, %..string* %7, i64 0, i32 1
	store i64 %93, i64* %97
	%98 = load %..string, %..string* %7, align 8
	store %..string %98, %..string* %0
	br label %switch.done-20

switch.case.next-16:
	%99 = icmp eq i8 %64, 120
	br i1 %99, label %switch.fall.body-19, label %switch.case.next-18

switch.fall.body-17:
	; AssignStmt
	store i64 12, i64* %4
	; AssignStmt
	; SliceExpr
	%100 = load %..string, %..string* %0, align 8
	%101 = extractvalue %..string %100, 1
	call void @runtime.slice_expr_error(%..string {i8* getelementptr inbounds ([34 x i8], [34 x i8]* @str$160, i64 0, i32 0), i64 33}, i64 53, i64 30, i64 2, i64 %101, i64 %101)
	%102 = extractvalue %..string %100, 0
	%103 = getelementptr inbounds i8, i8* %102, i64 2
	%104 = sub i64 %101, 2
	%105 = bitcast %..string* %8 to %..rawptr
	%106 = call %..rawptr @mem.zero(%..rawptr %105, i64 16) noinline
	store %..string zeroinitializer, %..string* %8
	%107 = getelementptr inbounds %..string, %..string* %8, i64 0, i32 0
	store i8* %103, i8** %107
	%108 = getelementptr inbounds %..string, %..string* %8, i64 0, i32 1
	store i64 %104, i64* %108
	%109 = load %..string, %..string* %8, align 8
	store %..string %109, %..string* %0
	br label %switch.done-20

switch.case.next-18:
	br label %switch.done-20

switch.fall.body-19:
	; AssignStmt
	store i64 16, i64* %4
	; AssignStmt
	; SliceExpr
	%110 = load %..string, %..string* %0, align 8
	%111 = extractvalue %..string %110, 1
	call void @runtime.slice_expr_error(%..string {i8* getelementptr inbounds ([34 x i8], [34 x i8]* @str$161, i64 0, i32 0), i64 33}, i64 54, i64 30, i64 2, i64 %111, i64 %111)
	%112 = extractvalue %..string %110, 0
	%113 = getelementptr inbounds i8, i8* %112, i64 2
	%114 = sub i64 %111, 2
	%115 = bitcast %..string* %9 to %..rawptr
	%116 = call %..rawptr @mem.zero(%..rawptr %115, i64 16) noinline
	store %..string zeroinitializer, %..string* %9
	%117 = getelementptr inbounds %..string, %..string* %9, i64 0, i32 0
	store i8* %113, i8** %117
	%118 = getelementptr inbounds %..string, %..string* %9, i64 0, i32 1
	store i64 %114, i64* %118
	%119 = load %..string, %..string* %9, align 8
	store %..string %119, %..string* %0
	br label %switch.done-20

switch.done-20:
	br label %if.done-21

if.done-21:
	; value
	%120 = bitcast i64* %10 to %..rawptr
	%121 = call %..rawptr @mem.zero(%..rawptr %120, i64 8) noinline
	store i64 zeroinitializer, i64* %10
	; RangeStmt
	; r
	%122 = bitcast i32* %11 to %..rawptr
	%123 = call %..rawptr @mem.zero(%..rawptr %122, i64 4) noinline
	store i32 zeroinitializer, i32* %11
	%124 = load %..string, %..string* %0, align 8
	%125 = extractvalue %..string %124, 1
	%126 = bitcast i64* %12 to %..rawptr
	%127 = call %..rawptr @mem.zero(%..rawptr %126, i64 8) noinline
	store i64 zeroinitializer, i64* %12
	store i64 0, i64* %12
	br label %for.string.loop-22

for.string.loop-22:
	%128 = load i64, i64* %12, align 8
	%129 = icmp slt i64 %128, %125
	br i1 %129, label %for.string.body-23, label %for.string.done-28

for.string.body-23:
	%130 = extractvalue %..string %124, 0
	%131 = getelementptr inbounds i8, i8* %130, i64 %128
	%132 = sub i64 %125, %128
	%133 = bitcast %..string* %13 to %..rawptr
	%134 = call %..rawptr @mem.zero(%..rawptr %133, i64 16) noinline
	store %..string zeroinitializer, %..string* %13
	%135 = getelementptr inbounds %..string, %..string* %13, i64 0, i32 0
	store i8* %131, i8** %135
	%136 = getelementptr inbounds %..string, %..string* %13, i64 0, i32 1
	store i64 %132, i64* %136
	%137 = load %..string, %..string* %13, align 8
	%138 = call {i32, i64} @runtime.string_decode_rune(%..string %137)
	%139 = extractvalue {i32, i64} %138, 1
	%140 = add i64 %128, %139
	store i64 %140, i64* %12
	%141 = extractvalue {i32, i64} %138, 0
	store i32 %141, i32* %11
	; IfStmt
	%142 = load i32, i32* %11, align 4
	%143 = icmp eq i32 %142, 95
	%144 = zext i1 %143 to i8
	%145 = trunc i8 %144 to i1
	br i1 %145, label %if.then-24, label %if.done-25

if.then-24:
	; continue
	br label %for.string.loop-22

if.done-25:
	; v
	%146 = load i32, i32* %11, align 4
	%147 = call i64 @strconv._digit_value(i32 %146, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%148 = bitcast i64 %147 to i64
	store i64 %148, i64* %14
	; IfStmt
	%149 = load i64, i64* %14, align 8
	%150 = load i64, i64* %4, align 8
	%151 = icmp sge i64 %149, %150
	%152 = zext i1 %151 to i8
	%153 = trunc i8 %152 to i1
	br i1 %153, label %if.then-26, label %if.done-27

if.then-26:
	; break
	br label %for.string.done-28

if.done-27:
	; AssignStmt
	%154 = load i64, i64* %4, align 8
	%155 = load i64, i64* %10, align 8
	%156 = mul i64 %155, %154
	store i64 %156, i64* %10
	; AssignStmt
	%157 = load i64, i64* %14, align 8
	%158 = load i64, i64* %10, align 8
	%159 = add i64 %158, %157
	store i64 %159, i64* %10
	br label %for.string.loop-22

for.string.done-28:
	; IfStmt
	%160 = load i8, i8* %1, align 1
	%161 = trunc i8 %160 to i1
	br i1 %161, label %if.then-29, label %if.done-30

if.then-29:
	; ReturnStmt
	%162 = load i64, i64* %10, align 8
	%163 = sub i64 0, %162
	ret i64 %163

if.done-30:
	; ReturnStmt
	%164 = load i64, i64* %10, align 8
	ret i64 %164
}

define i64 @strconv.parse_u64(%..string %s, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca %..string, align 16
	%1 = alloca i8, align 16
	%2 = alloca %..string, align 16
	%3 = alloca i64, align 16
	%4 = alloca %..string, align 16
	%5 = alloca %..string, align 16
	%6 = alloca %..string, align 16
	%7 = alloca %..string, align 16
	%8 = alloca %..string, align 16
	%9 = alloca i64, align 16
	%10 = alloca i32, align 16
	%11 = alloca i64, align 16
	%12 = alloca %..string, align 16
	%13 = alloca i64, align 16
	store %..string %s, %..string* %0
	; neg
	store i8 0, i8* %1
	; IfStmt
	%14 = load %..string, %..string* %0, align 8
	%15 = extractvalue %..string %14, 1
	%16 = icmp sgt i64 %15, 1
	%17 = zext i1 %16 to i8
	%18 = trunc i8 %17 to i1
	br i1 %18, label %cmp.and-1, label %if.done-3

cmp.and-1:
	; IndexExpr
	%19 = load %..string, %..string* %0, align 8
	%20 = extractvalue %..string %19, 0
	%21 = extractvalue %..string %19, 1
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([34 x i8], [34 x i8]* @str$162, i64 0, i32 0), i64 33}, i64 79, i64 21, i64 0, i64 %21)
	%22 = getelementptr inbounds i8, i8* %20, i64 0
	%23 = load i8, i8* %22, align 1
	%24 = icmp eq i8 %23, 43
	%25 = zext i1 %24 to i8
	%26 = trunc i8 %25 to i1
	br i1 %26, label %if.then-2, label %if.done-3

if.then-2:
	; AssignStmt
	; SliceExpr
	%27 = load %..string, %..string* %0, align 8
	%28 = extractvalue %..string %27, 1
	call void @runtime.slice_expr_error(%..string {i8* getelementptr inbounds ([34 x i8], [34 x i8]* @str$163, i64 0, i32 0), i64 33}, i64 80, i64 8, i64 1, i64 %28, i64 %28)
	%29 = extractvalue %..string %27, 0
	%30 = getelementptr inbounds i8, i8* %29, i64 1
	%31 = sub i64 %28, 1
	%32 = bitcast %..string* %2 to %..rawptr
	%33 = call %..rawptr @mem.zero(%..rawptr %32, i64 16) noinline
	store %..string zeroinitializer, %..string* %2
	%34 = getelementptr inbounds %..string, %..string* %2, i64 0, i32 0
	store i8* %30, i8** %34
	%35 = getelementptr inbounds %..string, %..string* %2, i64 0, i32 1
	store i64 %31, i64* %35
	%36 = load %..string, %..string* %2, align 8
	store %..string %36, %..string* %0
	br label %if.done-3

if.done-3:
	; base
	store i64 10, i64* %3
	; IfStmt
	%37 = load %..string, %..string* %0, align 8
	%38 = extractvalue %..string %37, 1
	%39 = icmp sgt i64 %38, 2
	%40 = zext i1 %39 to i8
	%41 = trunc i8 %40 to i1
	br i1 %41, label %cmp.and-4, label %if.done-17

cmp.and-4:
	; IndexExpr
	%42 = load %..string, %..string* %0, align 8
	%43 = extractvalue %..string %42, 0
	%44 = extractvalue %..string %42, 1
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([34 x i8], [34 x i8]* @str$164, i64 0, i32 0), i64 33}, i64 85, i64 21, i64 0, i64 %44)
	%45 = getelementptr inbounds i8, i8* %43, i64 0
	%46 = load i8, i8* %45, align 1
	%47 = icmp eq i8 %46, 48
	%48 = zext i1 %47 to i8
	%49 = trunc i8 %48 to i1
	br i1 %49, label %if.then-5, label %if.done-17

if.then-5:
	; SwitchStmt
	; IndexExpr
	%50 = load %..string, %..string* %0, align 8
	%51 = extractvalue %..string %50, 0
	%52 = extractvalue %..string %50, 1
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([34 x i8], [34 x i8]* @str$165, i64 0, i32 0), i64 33}, i64 86, i64 12, i64 1, i64 %52)
	%53 = getelementptr inbounds i8, i8* %51, i64 1
	%54 = load i8, i8* %53, align 1
	%55 = icmp eq i8 %54, 98
	br i1 %55, label %switch.case.body-7, label %switch.case.next-6

switch.case.next-6:
	%56 = icmp eq i8 %54, 111
	br i1 %56, label %switch.fall.body-9, label %switch.case.next-8

switch.case.body-7:
	; AssignStmt
	store i64 2, i64* %3
	; AssignStmt
	; SliceExpr
	%57 = load %..string, %..string* %0, align 8
	%58 = extractvalue %..string %57, 1
	call void @runtime.slice_expr_error(%..string {i8* getelementptr inbounds ([34 x i8], [34 x i8]* @str$166, i64 0, i32 0), i64 33}, i64 87, i64 30, i64 2, i64 %58, i64 %58)
	%59 = extractvalue %..string %57, 0
	%60 = getelementptr inbounds i8, i8* %59, i64 2
	%61 = sub i64 %58, 2
	%62 = bitcast %..string* %4 to %..rawptr
	%63 = call %..rawptr @mem.zero(%..rawptr %62, i64 16) noinline
	store %..string zeroinitializer, %..string* %4
	%64 = getelementptr inbounds %..string, %..string* %4, i64 0, i32 0
	store i8* %60, i8** %64
	%65 = getelementptr inbounds %..string, %..string* %4, i64 0, i32 1
	store i64 %61, i64* %65
	%66 = load %..string, %..string* %4, align 8
	store %..string %66, %..string* %0
	br label %switch.done-16

switch.case.next-8:
	%67 = icmp eq i8 %54, 100
	br i1 %67, label %switch.fall.body-11, label %switch.case.next-10

switch.fall.body-9:
	; AssignStmt
	store i64 8, i64* %3
	; AssignStmt
	; SliceExpr
	%68 = load %..string, %..string* %0, align 8
	%69 = extractvalue %..string %68, 1
	call void @runtime.slice_expr_error(%..string {i8* getelementptr inbounds ([34 x i8], [34 x i8]* @str$167, i64 0, i32 0), i64 33}, i64 88, i64 30, i64 2, i64 %69, i64 %69)
	%70 = extractvalue %..string %68, 0
	%71 = getelementptr inbounds i8, i8* %70, i64 2
	%72 = sub i64 %69, 2
	%73 = bitcast %..string* %5 to %..rawptr
	%74 = call %..rawptr @mem.zero(%..rawptr %73, i64 16) noinline
	store %..string zeroinitializer, %..string* %5
	%75 = getelementptr inbounds %..string, %..string* %5, i64 0, i32 0
	store i8* %71, i8** %75
	%76 = getelementptr inbounds %..string, %..string* %5, i64 0, i32 1
	store i64 %72, i64* %76
	%77 = load %..string, %..string* %5, align 8
	store %..string %77, %..string* %0
	br label %switch.done-16

switch.case.next-10:
	%78 = icmp eq i8 %54, 122
	br i1 %78, label %switch.fall.body-13, label %switch.case.next-12

switch.fall.body-11:
	; AssignStmt
	store i64 10, i64* %3
	; AssignStmt
	; SliceExpr
	%79 = load %..string, %..string* %0, align 8
	%80 = extractvalue %..string %79, 1
	call void @runtime.slice_expr_error(%..string {i8* getelementptr inbounds ([34 x i8], [34 x i8]* @str$168, i64 0, i32 0), i64 33}, i64 89, i64 30, i64 2, i64 %80, i64 %80)
	%81 = extractvalue %..string %79, 0
	%82 = getelementptr inbounds i8, i8* %81, i64 2
	%83 = sub i64 %80, 2
	%84 = bitcast %..string* %6 to %..rawptr
	%85 = call %..rawptr @mem.zero(%..rawptr %84, i64 16) noinline
	store %..string zeroinitializer, %..string* %6
	%86 = getelementptr inbounds %..string, %..string* %6, i64 0, i32 0
	store i8* %82, i8** %86
	%87 = getelementptr inbounds %..string, %..string* %6, i64 0, i32 1
	store i64 %83, i64* %87
	%88 = load %..string, %..string* %6, align 8
	store %..string %88, %..string* %0
	br label %switch.done-16

switch.case.next-12:
	%89 = icmp eq i8 %54, 120
	br i1 %89, label %switch.fall.body-15, label %switch.case.next-14

switch.fall.body-13:
	; AssignStmt
	store i64 12, i64* %3
	; AssignStmt
	; SliceExpr
	%90 = load %..string, %..string* %0, align 8
	%91 = extractvalue %..string %90, 1
	call void @runtime.slice_expr_error(%..string {i8* getelementptr inbounds ([34 x i8], [34 x i8]* @str$169, i64 0, i32 0), i64 33}, i64 90, i64 30, i64 2, i64 %91, i64 %91)
	%92 = extractvalue %..string %90, 0
	%93 = getelementptr inbounds i8, i8* %92, i64 2
	%94 = sub i64 %91, 2
	%95 = bitcast %..string* %7 to %..rawptr
	%96 = call %..rawptr @mem.zero(%..rawptr %95, i64 16) noinline
	store %..string zeroinitializer, %..string* %7
	%97 = getelementptr inbounds %..string, %..string* %7, i64 0, i32 0
	store i8* %93, i8** %97
	%98 = getelementptr inbounds %..string, %..string* %7, i64 0, i32 1
	store i64 %94, i64* %98
	%99 = load %..string, %..string* %7, align 8
	store %..string %99, %..string* %0
	br label %switch.done-16

switch.case.next-14:
	br label %switch.done-16

switch.fall.body-15:
	; AssignStmt
	store i64 16, i64* %3
	; AssignStmt
	; SliceExpr
	%100 = load %..string, %..string* %0, align 8
	%101 = extractvalue %..string %100, 1
	call void @runtime.slice_expr_error(%..string {i8* getelementptr inbounds ([34 x i8], [34 x i8]* @str$16a, i64 0, i32 0), i64 33}, i64 91, i64 30, i64 2, i64 %101, i64 %101)
	%102 = extractvalue %..string %100, 0
	%103 = getelementptr inbounds i8, i8* %102, i64 2
	%104 = sub i64 %101, 2
	%105 = bitcast %..string* %8 to %..rawptr
	%106 = call %..rawptr @mem.zero(%..rawptr %105, i64 16) noinline
	store %..string zeroinitializer, %..string* %8
	%107 = getelementptr inbounds %..string, %..string* %8, i64 0, i32 0
	store i8* %103, i8** %107
	%108 = getelementptr inbounds %..string, %..string* %8, i64 0, i32 1
	store i64 %104, i64* %108
	%109 = load %..string, %..string* %8, align 8
	store %..string %109, %..string* %0
	br label %switch.done-16

switch.done-16:
	br label %if.done-17

if.done-17:
	; value
	%110 = bitcast i64* %9 to %..rawptr
	%111 = call %..rawptr @mem.zero(%..rawptr %110, i64 8) noinline
	store i64 zeroinitializer, i64* %9
	; RangeStmt
	; r
	%112 = bitcast i32* %10 to %..rawptr
	%113 = call %..rawptr @mem.zero(%..rawptr %112, i64 4) noinline
	store i32 zeroinitializer, i32* %10
	%114 = load %..string, %..string* %0, align 8
	%115 = extractvalue %..string %114, 1
	%116 = bitcast i64* %11 to %..rawptr
	%117 = call %..rawptr @mem.zero(%..rawptr %116, i64 8) noinline
	store i64 zeroinitializer, i64* %11
	store i64 0, i64* %11
	br label %for.string.loop-18

for.string.loop-18:
	%118 = load i64, i64* %11, align 8
	%119 = icmp slt i64 %118, %115
	br i1 %119, label %for.string.body-19, label %for.string.done-24

for.string.body-19:
	%120 = extractvalue %..string %114, 0
	%121 = getelementptr inbounds i8, i8* %120, i64 %118
	%122 = sub i64 %115, %118
	%123 = bitcast %..string* %12 to %..rawptr
	%124 = call %..rawptr @mem.zero(%..rawptr %123, i64 16) noinline
	store %..string zeroinitializer, %..string* %12
	%125 = getelementptr inbounds %..string, %..string* %12, i64 0, i32 0
	store i8* %121, i8** %125
	%126 = getelementptr inbounds %..string, %..string* %12, i64 0, i32 1
	store i64 %122, i64* %126
	%127 = load %..string, %..string* %12, align 8
	%128 = call {i32, i64} @runtime.string_decode_rune(%..string %127)
	%129 = extractvalue {i32, i64} %128, 1
	%130 = add i64 %118, %129
	store i64 %130, i64* %11
	%131 = extractvalue {i32, i64} %128, 0
	store i32 %131, i32* %10
	; IfStmt
	%132 = load i32, i32* %10, align 4
	%133 = icmp eq i32 %132, 95
	%134 = zext i1 %133 to i8
	%135 = trunc i8 %134 to i1
	br i1 %135, label %if.then-20, label %if.done-21

if.then-20:
	; continue
	br label %for.string.loop-18

if.done-21:
	; v
	%136 = load i32, i32* %10, align 4
	%137 = call i64 @strconv._digit_value(i32 %136, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%138 = bitcast i64 %137 to i64
	store i64 %138, i64* %13
	; IfStmt
	%139 = load i64, i64* %13, align 8
	%140 = load i64, i64* %3, align 8
	%141 = icmp uge i64 %139, %140
	%142 = zext i1 %141 to i8
	%143 = trunc i8 %142 to i1
	br i1 %143, label %if.then-22, label %if.done-23

if.then-22:
	; break
	br label %for.string.done-24

if.done-23:
	; AssignStmt
	%144 = load i64, i64* %3, align 8
	%145 = load i64, i64* %9, align 8
	%146 = mul i64 %145, %144
	store i64 %146, i64* %9
	; AssignStmt
	%147 = load i64, i64* %13, align 8
	%148 = load i64, i64* %9, align 8
	%149 = add i64 %148, %147
	store i64 %149, i64* %9
	br label %for.string.loop-18

for.string.done-24:
	; IfStmt
	%150 = load i8, i8* %1, align 1
	%151 = trunc i8 %150 to i1
	br i1 %151, label %if.then-25, label %if.done-26

if.then-25:
	; ReturnStmt
	%152 = load i64, i64* %9, align 8
	%153 = sub i64 0, %152
	ret i64 %153

if.done-26:
	; ReturnStmt
	%154 = load i64, i64* %9, align 8
	ret i64 %154
}

define double @strconv.parse_f64(%..string %s, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca %..string, align 16
	%1 = alloca i64, align 16
	%2 = alloca double, align 16
	%3 = alloca double, align 16
	%4 = alloca i32, align 16
	%5 = alloca i64, align 16
	%6 = alloca double, align 16
	%7 = alloca i32, align 16
	%8 = alloca i64, align 16
	%9 = alloca i8, align 16
	%10 = alloca double, align 16
	%11 = alloca i32, align 16
	%12 = alloca i32, align 16
	%13 = alloca i32, align 16
	store %..string %s, %..string* %0
	; IfStmt
	%14 = load %..string, %..string* %0, align 8
	%15 = call i8 @runtime.string_eq(%..string %14, %..string zeroinitializer)
	%16 = trunc i8 %15 to i1
	br i1 %16, label %if.then-1, label %if.done-2

if.then-1:
	; ReturnStmt
	ret double 0x0000000000000000

if.done-2:
	; i
	store i64 0, i64* %1
	; sign
	store double 0x3ff0000000000000, double* %2
	; SwitchStmt
	; IndexExpr
	%17 = load %..string, %..string* %0, align 8
	%18 = extractvalue %..string %17, 0
	%19 = extractvalue %..string %17, 1
	%20 = load i64, i64* %1, align 8
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([34 x i8], [34 x i8]* @str$16b, i64 0, i32 0), i64 33}, i64 129, i64 11, i64 %20, i64 %19)
	%21 = getelementptr inbounds i8, i8* %18, i64 %20
	%22 = load i8, i8* %21, align 1
	%23 = icmp eq i8 %22, 45
	br i1 %23, label %switch.case.body-4, label %switch.case.next-3

switch.case.next-3:
	%24 = icmp eq i8 %22, 43
	br i1 %24, label %switch.fall.body-6, label %switch.case.next-5

switch.case.body-4:
	; AssignStmt
	%25 = load i64, i64* %1, align 8
	%26 = add i64 %25, 1
	store i64 %26, i64* %1
	; AssignStmt
	store double 0xbff0000000000000, double* %2
	br label %switch.done-7

switch.case.next-5:
	br label %switch.done-7

switch.fall.body-6:
	; AssignStmt
	%27 = load i64, i64* %1, align 8
	%28 = add i64 %27, 1
	store i64 %28, i64* %1
	br label %switch.done-7

switch.done-7:
	; value
	store double 0x0000000000000000, double* %3
	; ForStmt
	br label %for.loop-8

for.loop-8:
	%29 = load i64, i64* %1, align 8
	%30 = load %..string, %..string* %0, align 8
	%31 = extractvalue %..string %30, 1
	%32 = icmp slt i64 %29, %31
	%33 = zext i1 %32 to i8
	%34 = trunc i8 %33 to i1
	br i1 %34, label %for.body-9, label %for.done-15

for.body-9:
	; r
	; IndexExpr
	%35 = load %..string, %..string* %0, align 8
	%36 = extractvalue %..string %35, 0
	%37 = extractvalue %..string %35, 1
	%38 = load i64, i64* %1, align 8
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([34 x i8], [34 x i8]* @str$16c, i64 0, i32 0), i64 33}, i64 136, i64 15, i64 %38, i64 %37)
	%39 = getelementptr inbounds i8, i8* %36, i64 %38
	%40 = load i8, i8* %39, align 1
	%41 = zext i8 %40 to i32
	store i32 %41, i32* %4
	; IfStmt
	%42 = load i32, i32* %4, align 4
	%43 = icmp eq i32 %42, 95
	%44 = zext i1 %43 to i8
	%45 = trunc i8 %44 to i1
	br i1 %45, label %if.then-10, label %if.done-11

if.then-10:
	; continue
	br label %for.post-14

if.done-11:
	; v
	%46 = load i32, i32* %4, align 4
	%47 = call i64 @strconv._digit_value(i32 %46, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	store i64 %47, i64* %5
	; IfStmt
	%48 = load i64, i64* %5, align 8
	%49 = icmp sge i64 %48, 10
	%50 = zext i1 %49 to i8
	%51 = trunc i8 %50 to i1
	br i1 %51, label %if.then-12, label %if.done-13

if.then-12:
	; break
	br label %for.done-15

if.done-13:
	; AssignStmt
	%52 = load double, double* %3, align 8
	%53 = fmul double %52, 0x4024000000000000
	store double %53, double* %3
	; AssignStmt
	%54 = load i64, i64* %5, align 8
	%55 = sitofp i64 %54 to double
	%56 = load double, double* %3, align 8
	%57 = fadd double %56, %55
	store double %57, double* %3
	br label %for.post-14

for.post-14:
	; AssignStmt
	%58 = load i64, i64* %1, align 8
	%59 = add i64 %58, 1
	store i64 %59, i64* %1
	br label %for.loop-8

for.done-15:
	; IfStmt
	%60 = load i64, i64* %1, align 8
	%61 = load %..string, %..string* %0, align 8
	%62 = extractvalue %..string %61, 1
	%63 = icmp slt i64 %60, %62
	%64 = zext i1 %63 to i8
	%65 = trunc i8 %64 to i1
	br i1 %65, label %cmp.and-16, label %if.done-26

cmp.and-16:
	; IndexExpr
	%66 = load %..string, %..string* %0, align 8
	%67 = extractvalue %..string %66, 0
	%68 = extractvalue %..string %66, 1
	%69 = load i64, i64* %1, align 8
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([34 x i8], [34 x i8]* @str$16d, i64 0, i32 0), i64 33}, i64 145, i64 21, i64 %69, i64 %68)
	%70 = getelementptr inbounds i8, i8* %67, i64 %69
	%71 = load i8, i8* %70, align 1
	%72 = icmp eq i8 %71, 46
	%73 = zext i1 %72 to i8
	%74 = trunc i8 %73 to i1
	br i1 %74, label %if.then-17, label %if.done-26

if.then-17:
	; pow10
	store double 0x4024000000000000, double* %6
	; AssignStmt
	%75 = load i64, i64* %1, align 8
	%76 = add i64 %75, 1
	store i64 %76, i64* %1
	; ForStmt
	br label %for.loop-18

for.loop-18:
	%77 = load i64, i64* %1, align 8
	%78 = load %..string, %..string* %0, align 8
	%79 = extractvalue %..string %78, 1
	%80 = icmp slt i64 %77, %79
	%81 = zext i1 %80 to i8
	%82 = trunc i8 %81 to i1
	br i1 %82, label %for.body-19, label %for.done-25

for.body-19:
	; r
	; IndexExpr
	%83 = load %..string, %..string* %0, align 8
	%84 = extractvalue %..string %83, 0
	%85 = extractvalue %..string %83, 1
	%86 = load i64, i64* %1, align 8
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([34 x i8], [34 x i8]* @str$16e, i64 0, i32 0), i64 33}, i64 150, i64 16, i64 %86, i64 %85)
	%87 = getelementptr inbounds i8, i8* %84, i64 %86
	%88 = load i8, i8* %87, align 1
	%89 = zext i8 %88 to i32
	store i32 %89, i32* %7
	; IfStmt
	%90 = load i32, i32* %7, align 4
	%91 = icmp eq i32 %90, 95
	%92 = zext i1 %91 to i8
	%93 = trunc i8 %92 to i1
	br i1 %93, label %if.then-20, label %if.done-21

if.then-20:
	; continue
	br label %for.post-24

if.done-21:
	; v
	%94 = load i32, i32* %7, align 4
	%95 = call i64 @strconv._digit_value(i32 %94, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	store i64 %95, i64* %8
	; IfStmt
	%96 = load i64, i64* %8, align 8
	%97 = icmp sge i64 %96, 10
	%98 = zext i1 %97 to i8
	%99 = trunc i8 %98 to i1
	br i1 %99, label %if.then-22, label %if.done-23

if.then-22:
	; break
	br label %for.done-25

if.done-23:
	; AssignStmt
	%100 = load i64, i64* %8, align 8
	%101 = sitofp i64 %100 to double
	%102 = load double, double* %6, align 8
	%103 = fdiv double %101, %102
	%104 = load double, double* %3, align 8
	%105 = fadd double %104, %103
	store double %105, double* %3
	; AssignStmt
	%106 = load double, double* %6, align 8
	%107 = fmul double %106, 0x4024000000000000
	store double %107, double* %6
	br label %for.post-24

for.post-24:
	; AssignStmt
	%108 = load i64, i64* %1, align 8
	%109 = add i64 %108, 1
	store i64 %109, i64* %1
	br label %for.loop-18

for.done-25:
	br label %if.done-26

if.done-26:
	; frac
	store i8 0, i8* %9
	; scale
	store double 0x3ff0000000000000, double* %10
	; IfStmt
	%110 = load i64, i64* %1, align 8
	%111 = load %..string, %..string* %0, align 8
	%112 = extractvalue %..string %111, 1
	%113 = icmp slt i64 %110, %112
	%114 = zext i1 %113 to i8
	%115 = trunc i8 %114 to i1
	br i1 %115, label %cmp.and-27, label %if.done-56

cmp.and-27:
	; IndexExpr
	%116 = load %..string, %..string* %0, align 8
	%117 = extractvalue %..string %116, 0
	%118 = extractvalue %..string %116, 1
	%119 = load i64, i64* %1, align 8
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([34 x i8], [34 x i8]* @str$16f, i64 0, i32 0), i64 33}, i64 163, i64 22, i64 %119, i64 %118)
	%120 = getelementptr inbounds i8, i8* %117, i64 %119
	%121 = load i8, i8* %120, align 1
	%122 = icmp eq i8 %121, 101
	%123 = zext i1 %122 to i8
	%124 = trunc i8 %123 to i1
	br i1 %124, label %if.then-29, label %cmp.or-28

cmp.or-28:
	; IndexExpr
	%125 = load %..string, %..string* %0, align 8
	%126 = extractvalue %..string %125, 0
	%127 = extractvalue %..string %125, 1
	%128 = load i64, i64* %1, align 8
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([34 x i8], [34 x i8]* @str$170, i64 0, i32 0), i64 33}, i64 163, i64 37, i64 %128, i64 %127)
	%129 = getelementptr inbounds i8, i8* %126, i64 %128
	%130 = load i8, i8* %129, align 1
	%131 = icmp eq i8 %130, 69
	%132 = zext i1 %131 to i8
	%133 = trunc i8 %132 to i1
	br i1 %133, label %if.then-29, label %if.done-56

if.then-29:
	; AssignStmt
	%134 = load i64, i64* %1, align 8
	%135 = add i64 %134, 1
	store i64 %135, i64* %1
	; IfStmt
	%136 = load i64, i64* %1, align 8
	%137 = load %..string, %..string* %0, align 8
	%138 = extractvalue %..string %137, 1
	%139 = icmp slt i64 %136, %138
	%140 = zext i1 %139 to i8
	%141 = trunc i8 %140 to i1
	br i1 %141, label %if.then-30, label %if.done-55

if.then-30:
	; SwitchStmt
	; IndexExpr
	%142 = load %..string, %..string* %0, align 8
	%143 = extractvalue %..string %142, 0
	%144 = extractvalue %..string %142, 1
	%145 = load i64, i64* %1, align 8
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([34 x i8], [34 x i8]* @str$171, i64 0, i32 0), i64 33}, i64 167, i64 13, i64 %145, i64 %144)
	%146 = getelementptr inbounds i8, i8* %143, i64 %145
	%147 = load i8, i8* %146, align 1
	%148 = icmp eq i8 %147, 45
	br i1 %148, label %switch.case.body-32, label %switch.case.next-31

switch.case.next-31:
	%149 = icmp eq i8 %147, 43
	br i1 %149, label %switch.fall.body-34, label %switch.case.next-33

switch.case.body-32:
	; AssignStmt
	%150 = load i64, i64* %1, align 8
	%151 = add i64 %150, 1
	store i64 %151, i64* %1
	; AssignStmt
	store i8 1, i8* %9
	br label %switch.done-35

switch.case.next-33:
	br label %switch.done-35

switch.fall.body-34:
	; AssignStmt
	%152 = load i64, i64* %1, align 8
	%153 = add i64 %152, 1
	store i64 %153, i64* %1
	br label %switch.done-35

switch.done-35:
	; exp
	store i32 0, i32* %11
	; ForStmt
	br label %for.loop-36

for.loop-36:
	%154 = load i64, i64* %1, align 8
	%155 = load %..string, %..string* %0, align 8
	%156 = extractvalue %..string %155, 1
	%157 = icmp slt i64 %154, %156
	%158 = zext i1 %157 to i8
	%159 = trunc i8 %158 to i1
	br i1 %159, label %for.body-37, label %for.done-43

for.body-37:
	; r
	; IndexExpr
	%160 = load %..string, %..string* %0, align 8
	%161 = extractvalue %..string %160, 0
	%162 = extractvalue %..string %160, 1
	%163 = load i64, i64* %1, align 8
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([34 x i8], [34 x i8]* @str$172, i64 0, i32 0), i64 33}, i64 174, i64 17, i64 %163, i64 %162)
	%164 = getelementptr inbounds i8, i8* %161, i64 %163
	%165 = load i8, i8* %164, align 1
	%166 = zext i8 %165 to i32
	store i32 %166, i32* %12
	; IfStmt
	%167 = load i32, i32* %12, align 4
	%168 = icmp eq i32 %167, 95
	%169 = zext i1 %168 to i8
	%170 = trunc i8 %169 to i1
	br i1 %170, label %if.then-38, label %if.done-39

if.then-38:
	; continue
	br label %for.post-42

if.done-39:
	; d
	%171 = load i32, i32* %12, align 4
	%172 = call i64 @strconv._digit_value(i32 %171, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%173 = trunc i64 %172 to i32
	store i32 %173, i32* %13
	; IfStmt
	%174 = load i32, i32* %13, align 4
	%175 = icmp uge i32 %174, 10
	%176 = zext i1 %175 to i8
	%177 = trunc i8 %176 to i1
	br i1 %177, label %if.then-40, label %if.done-41

if.then-40:
	; break
	br label %for.done-43

if.done-41:
	; AssignStmt
	%178 = load i32, i32* %11, align 4
	%179 = mul i32 %178, 10
	%180 = load i32, i32* %13, align 4
	%181 = add i32 %179, %180
	store i32 %181, i32* %11
	br label %for.post-42

for.post-42:
	; AssignStmt
	%182 = load i64, i64* %1, align 8
	%183 = add i64 %182, 1
	store i64 %183, i64* %1
	br label %for.loop-36

for.done-43:
	; IfStmt
	%184 = load i32, i32* %11, align 4
	%185 = icmp ugt i32 %184, 308
	%186 = zext i1 %185 to i8
	%187 = trunc i8 %186 to i1
	br i1 %187, label %if.then-44, label %if.done-45

if.then-44:
	; AssignStmt
	store i32 308, i32* %11
	br label %if.done-45

if.done-45:
	; ForStmt
	br label %for.loop-46

for.loop-46:
	%188 = load i32, i32* %11, align 4
	%189 = icmp uge i32 %188, 50
	%190 = zext i1 %189 to i8
	%191 = trunc i8 %190 to i1
	br i1 %191, label %for.body-47, label %for.done-48

for.body-47:
	; AssignStmt
	%192 = load double, double* %10, align 8
	%193 = fmul double %192, 0x4a511b0ec57e649a
	store double %193, double* %10
	; AssignStmt
	%194 = load i32, i32* %11, align 4
	%195 = sub i32 %194, 50
	store i32 %195, i32* %11
	br label %for.loop-46

for.done-48:
	; ForStmt
	br label %for.loop-49

for.loop-49:
	%196 = load i32, i32* %11, align 4
	%197 = icmp uge i32 %196, 8
	%198 = zext i1 %197 to i8
	%199 = trunc i8 %198 to i1
	br i1 %199, label %for.body-50, label %for.done-51

for.body-50:
	; AssignStmt
	%200 = load double, double* %10, align 8
	%201 = fmul double %200, 0x4197d78400000000
	store double %201, double* %10
	; AssignStmt
	%202 = load i32, i32* %11, align 4
	%203 = sub i32 %202, 8
	store i32 %203, i32* %11
	br label %for.loop-49

for.done-51:
	; ForStmt
	br label %for.loop-52

for.loop-52:
	%204 = load i32, i32* %11, align 4
	%205 = icmp ugt i32 %204, 0
	%206 = zext i1 %205 to i8
	%207 = trunc i8 %206 to i1
	br i1 %207, label %for.body-53, label %for.done-54

for.body-53:
	; AssignStmt
	%208 = load double, double* %10, align 8
	%209 = fmul double %208, 0x4024000000000000
	store double %209, double* %10
	; AssignStmt
	%210 = load i32, i32* %11, align 4
	%211 = sub i32 %210, 1
	store i32 %211, i32* %11
	br label %for.loop-52

for.done-54:
	br label %if.done-55

if.done-55:
	br label %if.done-56

if.done-56:
	; IfStmt
	%212 = load i8, i8* %9, align 1
	%213 = trunc i8 %212 to i1
	br i1 %213, label %if.then-57, label %if.done-58

if.then-57:
	; ReturnStmt
	%214 = load double, double* %2, align 8
	%215 = load double, double* %3, align 8
	%216 = load double, double* %10, align 8
	%217 = fdiv double %215, %216
	%218 = fmul double %214, %217
	ret double %218

if.done-58:
	; ReturnStmt
	%219 = load double, double* %2, align 8
	%220 = load double, double* %3, align 8
	%221 = load double, double* %10, align 8
	%222 = fmul double %220, %221
	%223 = fmul double %219, %222
	ret double %223
}

define %..string @strconv.append_float({i8*, i64}* %buf, double %f, i8 %fmt, i64 %prec, i64 %bit_size, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca double, align 16
	%1 = alloca i8, align 16
	%2 = alloca i64, align 16
	%3 = alloca i64, align 16
	%4 = alloca {i8*, i64}, align 16
	%5 = alloca %..string, align 16
	%6 = load {i8*, i64}, {i8*, i64}* %buf, align 8
	store double %f, double* %0
	store i8 %fmt, i8* %1
	store i64 %prec, i64* %2
	store i64 %bit_size, i64* %3
	; ReturnStmt
	%7 = load {i8*, i64}, {i8*, i64}* %buf, align 8
	%8 = load double, double* %0, align 8
	%9 = load i8, i8* %1, align 1
	%10 = load i64, i64* %2, align 8
	%11 = load i64, i64* %3, align 8
	%12 = bitcast {i8*, i64}* %4 to %..rawptr
	%13 = call %..rawptr @mem.zero(%..rawptr %12, i64 16) noinline
	store {i8*, i64} zeroinitializer, {i8*, i64}* %4
	store {i8*, i64} %7, {i8*, i64}* %4
	%14 = call {i8*, i64} @strconv.generic_ftoa({i8*, i64}* %4, double %8, i8 %9, i64 %10, i64 %11, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%15 = extractvalue {i8*, i64} %14, 0
	%16 = extractvalue {i8*, i64} %14, 1
	%17 = bitcast %..string* %5 to %..rawptr
	%18 = call %..rawptr @mem.zero(%..rawptr %17, i64 16) noinline
	store %..string zeroinitializer, %..string* %5
	%19 = getelementptr inbounds %..string, %..string* %5, i64 0, i32 0
	store i8* %15, i8** %19
	%20 = getelementptr inbounds %..string, %..string* %5, i64 0, i32 1
	store i64 %16, i64* %20
	%21 = load %..string, %..string* %5, align 8
	ret %..string %21
}

define {i8*, i64} @strconv.generic_ftoa({i8*, i64}* %buf, double %val, i8 %fmt, i64 %prec, i64 %bit_size, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca double, align 16
	%1 = alloca i8, align 16
	%2 = alloca i64, align 16
	%3 = alloca i64, align 16
	%4 = alloca i64, align 16
	%5 = alloca %strconv.FloatInfo*, align 16
	%6 = alloca %runtime.Source_Code_Location, align 16
	%7 = alloca i8, align 16
	%8 = alloca i64, align 16
	%9 = alloca i64, align 16
	%10 = alloca %..string, align 16
	%11 = alloca i64, align 16
	%12 = alloca i8*, align 16
	%13 = alloca {i8*, i64}, align 16
	%14 = alloca {i8*, i64}, align 16
	%15 = alloca {i8*, i64}, align 16
	%16 = alloca {i8*, i64}, align 16
	%17 = alloca %decimal.Decimal, align 16
	%18 = alloca %decimal.Decimal*, align 16
	%19 = alloca %strconv.DecimalSlice, align 16
	%20 = alloca i8, align 16
	%21 = alloca %strconv.DecimalSlice, align 16
	%22 = alloca {i8*, i64}, align 16
	%23 = alloca %strconv.DecimalSlice, align 16
	%24 = alloca {i8*, i64}, align 16
	%25 = alloca {i8*, i64}, align 16
	%26 = alloca %strconv.DecimalSlice, align 16
	%27 = load {i8*, i64}, {i8*, i64}* %buf, align 8
	store double %val, double* %0
	store i8 %fmt, i8* %1
	store i64 %prec, i64* %2
	store i64 %bit_size, i64* %3
	; bits
	%28 = bitcast i64* %4 to %..rawptr
	%29 = call %..rawptr @mem.zero(%..rawptr %28, i64 8) noinline
	store i64 zeroinitializer, i64* %4
	; flt
	%30 = bitcast %strconv.FloatInfo** %5 to %..rawptr
	%31 = call %..rawptr @mem.zero(%..rawptr %30, i64 8) noinline
	store %strconv.FloatInfo* zeroinitializer, %strconv.FloatInfo** %5
	; SwitchStmt
	%32 = load i64, i64* %3, align 8
	%33 = icmp eq i64 %32, 32
	br i1 %33, label %switch.case.body-2, label %switch.case.next-1

switch.case.next-1:
	%34 = icmp eq i64 %32, 64
	br i1 %34, label %switch.fall.body-4, label %switch.case.next-3

switch.case.body-2:
	; AssignStmt
	%35 = load double, double* %0, align 8
	%36 = fptrunc double %35 to float
	%37 = bitcast float %36 to i32
	%38 = zext i32 %37 to i64
	store i64 %38, i64* %4
	; AssignStmt
	store %strconv.FloatInfo* @strconv._f32_info, %strconv.FloatInfo** %5
	br label %switch.done-5

switch.case.next-3:
	%39 = bitcast %runtime.Source_Code_Location* %6 to %..rawptr
	%40 = call %..rawptr @mem.zero(%..rawptr %39, i64 48) noinline
	store %runtime.Source_Code_Location zeroinitializer, %runtime.Source_Code_Location* %6
	store %runtime.Source_Code_Location {%..string {i8* getelementptr inbounds ([34 x i8], [34 x i8]* @str$173, i64 0, i32 0), i64 33}, i64 246, i64 3, %..string {i8* getelementptr inbounds ([13 x i8], [13 x i8]* @str$174, i64 0, i32 0), i64 12}}, %runtime.Source_Code_Location* %6
	call void @runtime.panic(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @str$175, i64 0, i32 0), i64 25}, %runtime.Source_Code_Location* %6) noreturn
	br label %switch.done-5

switch.fall.body-4:
	; AssignStmt
	%41 = load double, double* %0, align 8
	%42 = bitcast double %41 to i64
	store i64 %42, i64* %4
	; AssignStmt
	store %strconv.FloatInfo* @strconv._f64_info, %strconv.FloatInfo** %5
	br label %switch.done-5

switch.done-5:
	; neg
	%43 = load i64, i64* %4, align 8
	; SelectorExpr
	%44 = load %strconv.FloatInfo*, %strconv.FloatInfo** %5, align 8
	%45 = getelementptr inbounds %strconv.FloatInfo, %strconv.FloatInfo* %44, i64 0
	%46 = getelementptr inbounds %strconv.FloatInfo, %strconv.FloatInfo* %45, i64 0, i32 1
	%47 = load i64, i64* %46, align 8
	; SelectorExpr
	%48 = load %strconv.FloatInfo*, %strconv.FloatInfo** %5, align 8
	%49 = getelementptr inbounds %strconv.FloatInfo, %strconv.FloatInfo* %48, i64 0
	%50 = getelementptr inbounds %strconv.FloatInfo, %strconv.FloatInfo* %49, i64 0, i32 0
	%51 = load i64, i64* %50, align 8
	%52 = add i64 %47, %51
	%53 = bitcast i64 %52 to i64
	%54 = lshr i64 %43, %53
	%55 = icmp ne i64 %54, 0
	%56 = zext i1 %55 to i8
	store i8 %56, i8* %7
	; exp
	%57 = load i64, i64* %4, align 8
	; SelectorExpr
	%58 = load %strconv.FloatInfo*, %strconv.FloatInfo** %5, align 8
	%59 = getelementptr inbounds %strconv.FloatInfo, %strconv.FloatInfo* %58, i64 0
	%60 = getelementptr inbounds %strconv.FloatInfo, %strconv.FloatInfo* %59, i64 0, i32 0
	%61 = load i64, i64* %60, align 8
	%62 = bitcast i64 %61 to i64
	%63 = lshr i64 %57, %62
	%64 = bitcast i64 %63 to i64
	; SelectorExpr
	%65 = load %strconv.FloatInfo*, %strconv.FloatInfo** %5, align 8
	%66 = getelementptr inbounds %strconv.FloatInfo, %strconv.FloatInfo* %65, i64 0
	%67 = getelementptr inbounds %strconv.FloatInfo, %strconv.FloatInfo* %66, i64 0, i32 1
	%68 = load i64, i64* %67, align 8
	%69 = bitcast i64 %68 to i64
	%70 = shl i64 1, %69
	%71 = sub i64 %70, 1
	%72 = and i64 %64, %71
	store i64 %72, i64* %8
	; mant
	%73 = load i64, i64* %4, align 8
	; SelectorExpr
	%74 = load %strconv.FloatInfo*, %strconv.FloatInfo** %5, align 8
	%75 = getelementptr inbounds %strconv.FloatInfo, %strconv.FloatInfo* %74, i64 0
	%76 = getelementptr inbounds %strconv.FloatInfo, %strconv.FloatInfo* %75, i64 0, i32 0
	%77 = load i64, i64* %76, align 8
	%78 = bitcast i64 %77 to i64
	%79 = shl i64 1, %78
	%80 = sub i64 %79, 1
	%81 = and i64 %73, %80
	store i64 %81, i64* %9
	; SwitchStmt
	%82 = load i64, i64* %8, align 8
	; SelectorExpr
	%83 = load %strconv.FloatInfo*, %strconv.FloatInfo** %5, align 8
	%84 = getelementptr inbounds %strconv.FloatInfo, %strconv.FloatInfo* %83, i64 0
	%85 = getelementptr inbounds %strconv.FloatInfo, %strconv.FloatInfo* %84, i64 0, i32 1
	%86 = load i64, i64* %85, align 8
	%87 = bitcast i64 %86 to i64
	%88 = shl i64 1, %87
	%89 = sub i64 %88, 1
	%90 = icmp eq i64 %82, %89
	br i1 %90, label %switch.case.body-7, label %switch.case.next-6

switch.case.next-6:
	%91 = icmp eq i64 %82, 0
	br i1 %91, label %switch.fall.body-15, label %switch.case.next-14

switch.case.body-7:
	; s
	%92 = bitcast %..string* %10 to %..rawptr
	%93 = call %..rawptr @mem.zero(%..rawptr %92, i64 16) noinline
	store %..string zeroinitializer, %..string* %10
	; IfStmt
	%94 = load i64, i64* %9, align 8
	%95 = icmp ne i64 %94, 0
	%96 = zext i1 %95 to i8
	%97 = trunc i8 %96 to i1
	br i1 %97, label %if.then-8, label %if.else-9

if.then-8:
	; AssignStmt
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str$176, i64 0, i32 0), i64 3}, %..string* %10
	br label %if.done-13

if.else-9:
	; IfStmt
	%98 = load i8, i8* %7, align 1
	%99 = trunc i8 %98 to i1
	br i1 %99, label %if.then-10, label %if.else-11

if.then-10:
	; AssignStmt
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str$177, i64 0, i32 0), i64 4}, %..string* %10
	br label %if.done-12

if.else-11:
	; AssignStmt
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str$178, i64 0, i32 0), i64 4}, %..string* %10
	br label %if.done-12

if.done-12:
	br label %if.done-13

if.done-13:
	; n
	%100 = load {i8*, i64}, {i8*, i64}* %buf, align 8
	%101 = load %..string, %..string* %10, align 8
	%102 = extractvalue %..string %101, 0
	%103 = bitcast i8** %12 to %..rawptr
	%104 = call %..rawptr @mem.zero(%..rawptr %103, i64 8) noinline
	store i8* zeroinitializer, i8** %12
	store i8* %102, i8** %12
	%105 = extractvalue %..string %101, 1
	%106 = sub i64 %105, 0
	%107 = load i8*, i8** %12, align 8
	%108 = getelementptr inbounds i8, i8* %107, i64 0
	%109 = bitcast {i8*, i64}* %13 to %..rawptr
	%110 = call %..rawptr @mem.zero(%..rawptr %109, i64 16) noinline
	store {i8*, i64} zeroinitializer, {i8*, i64}* %13
	%111 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %13, i64 0, i32 0
	store i8* %108, i8** %111
	%112 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %13, i64 0, i32 1
	store i64 %106, i64* %112
	%113 = load {i8*, i64}, {i8*, i64}* %13, align 8
	%114 = bitcast {i8*, i64}* %14 to %..rawptr
	%115 = call %..rawptr @mem.zero(%..rawptr %114, i64 16) noinline
	store {i8*, i64} zeroinitializer, {i8*, i64}* %14
	store {i8*, i64} %100, {i8*, i64}* %14
	%116 = bitcast {i8*, i64}* %15 to %..rawptr
	%117 = call %..rawptr @mem.zero(%..rawptr %116, i64 16) noinline
	store {i8*, i64} zeroinitializer, {i8*, i64}* %15
	store {i8*, i64} %113, {i8*, i64}* %15
	%118 = call i64 @runtime.copy-6386({i8*, i64}* %14, {i8*, i64}* %15)
	store i64 %118, i64* %11
	; ReturnStmt
	; SliceExpr
	%119 = load i64, i64* %11, align 8
	%120 = load {i8*, i64}, {i8*, i64}* %buf, align 8
	%121 = extractvalue {i8*, i64} %120, 1
	call void @runtime.slice_expr_error(%..string {i8* getelementptr inbounds ([34 x i8], [34 x i8]* @str$179, i64 0, i32 0), i64 33}, i64 264, i64 13, i64 0, i64 %119, i64 %121)
	%122 = extractvalue {i8*, i64} %120, 0
	%123 = getelementptr inbounds i8, i8* %122, i64 0
	%124 = sub i64 %119, 0
	%125 = bitcast {i8*, i64}* %16 to %..rawptr
	%126 = call %..rawptr @mem.zero(%..rawptr %125, i64 16) noinline
	store {i8*, i64} zeroinitializer, {i8*, i64}* %16
	%127 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %16, i64 0, i32 0
	store i8* %123, i8** %127
	%128 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %16, i64 0, i32 1
	store i64 %124, i64* %128
	%129 = load {i8*, i64}, {i8*, i64}* %16, align 8
	ret {i8*, i64} %129

switch.case.next-14:
	; AssignStmt
	; SelectorExpr
	%130 = load %strconv.FloatInfo*, %strconv.FloatInfo** %5, align 8
	%131 = getelementptr inbounds %strconv.FloatInfo, %strconv.FloatInfo* %130, i64 0
	%132 = getelementptr inbounds %strconv.FloatInfo, %strconv.FloatInfo* %131, i64 0, i32 0
	%133 = load i64, i64* %132, align 8
	%134 = bitcast i64 %133 to i64
	%135 = shl i64 1, %134
	%136 = load i64, i64* %9, align 8
	%137 = or i64 %136, %135
	store i64 %137, i64* %9
	br label %switch.done-16

switch.fall.body-15:
	; AssignStmt
	%138 = load i64, i64* %8, align 8
	%139 = add i64 %138, 1
	store i64 %139, i64* %8
	br label %switch.done-16

switch.done-16:
	; AssignStmt
	; SelectorExpr
	%140 = load %strconv.FloatInfo*, %strconv.FloatInfo** %5, align 8
	%141 = getelementptr inbounds %strconv.FloatInfo, %strconv.FloatInfo* %140, i64 0
	%142 = getelementptr inbounds %strconv.FloatInfo, %strconv.FloatInfo* %141, i64 0, i32 2
	%143 = load i64, i64* %142, align 8
	%144 = load i64, i64* %8, align 8
	%145 = add i64 %144, %143
	store i64 %145, i64* %8
	; d_
	%146 = bitcast %decimal.Decimal* %17 to %..rawptr
	%147 = call %..rawptr @mem.zero(%..rawptr %146, i64 408) noinline
	store %decimal.Decimal zeroinitializer, %decimal.Decimal* %17
	; d
	store %decimal.Decimal* %17, %decimal.Decimal** %18
	%148 = load %decimal.Decimal*, %decimal.Decimal** %18, align 8
	%149 = load i64, i64* %9, align 8
	call void @decimal.assign(%decimal.Decimal* %148, i64 %149, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%150 = load %decimal.Decimal*, %decimal.Decimal** %18, align 8
	%151 = load i64, i64* %8, align 8
	; SelectorExpr
	%152 = load %strconv.FloatInfo*, %strconv.FloatInfo** %5, align 8
	%153 = getelementptr inbounds %strconv.FloatInfo, %strconv.FloatInfo* %152, i64 0
	%154 = getelementptr inbounds %strconv.FloatInfo, %strconv.FloatInfo* %153, i64 0, i32 0
	%155 = load i64, i64* %154, align 8
	%156 = bitcast i64 %155 to i64
	%157 = sub i64 %151, %156
	call void @decimal.shift(%decimal.Decimal* %150, i64 %157, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	; digs
	%158 = bitcast %strconv.DecimalSlice* %19 to %..rawptr
	%159 = call %..rawptr @mem.zero(%..rawptr %158, i64 40) noinline
	store %strconv.DecimalSlice zeroinitializer, %strconv.DecimalSlice* %19
	; shortest
	%160 = load i64, i64* %2, align 8
	%161 = icmp slt i64 %160, 0
	%162 = zext i1 %161 to i8
	store i8 %162, i8* %20
	; IfStmt
	%163 = load i8, i8* %20, align 1
	%164 = trunc i8 %163 to i1
	br i1 %164, label %if.then-17, label %if.else-28

if.then-17:
	%165 = load %decimal.Decimal*, %decimal.Decimal** %18, align 8
	%166 = load i64, i64* %9, align 8
	%167 = load i64, i64* %8, align 8
	%168 = load %strconv.FloatInfo*, %strconv.FloatInfo** %5, align 8
	call void @strconv.round_shortest(%decimal.Decimal* %165, i64 %166, i64 %167, %strconv.FloatInfo* %168, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	; AssignStmt
	; CompoundLit
	%169 = bitcast %strconv.DecimalSlice* %21 to %..rawptr
	%170 = call %..rawptr @mem.zero(%..rawptr %169, i64 40) noinline
	store %strconv.DecimalSlice zeroinitializer, %strconv.DecimalSlice* %21
	store %strconv.DecimalSlice {{i8*, i64} zeroinitializer, i64 zeroinitializer, i64 zeroinitializer, i8 zeroinitializer}, %strconv.DecimalSlice* %21
	; SliceExpr
	; SelectorExpr
	%171 = load %decimal.Decimal*, %decimal.Decimal** %18, align 8
	%172 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %171, i64 0
	%173 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %172, i64 0, i32 0
	%174 = load [384 x i8], [384 x i8]* %173, align 1
	call void @runtime.slice_expr_error(%..string {i8* getelementptr inbounds ([34 x i8], [34 x i8]* @str$17a, i64 0, i32 0), i64 33}, i64 283, i64 40, i64 0, i64 384, i64 384)
	%175 = getelementptr inbounds [384 x i8], [384 x i8]* %173, i64 0, i32 0
	%176 = getelementptr inbounds i8, i8* %175, i64 0
	%177 = sub i64 384, 0
	%178 = bitcast {i8*, i64}* %22 to %..rawptr
	%179 = call %..rawptr @mem.zero(%..rawptr %178, i64 16) noinline
	store {i8*, i64} zeroinitializer, {i8*, i64}* %22
	%180 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %22, i64 0, i32 0
	store i8* %176, i8** %180
	%181 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %22, i64 0, i32 1
	store i64 %177, i64* %181
	%182 = load {i8*, i64}, {i8*, i64}* %22, align 8
	%183 = getelementptr inbounds %strconv.DecimalSlice, %strconv.DecimalSlice* %21, i64 0, i32 0
	store {i8*, i64} %182, {i8*, i64}* %183
	; SelectorExpr
	%184 = load %decimal.Decimal*, %decimal.Decimal** %18, align 8
	%185 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %184, i64 0
	%186 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %185, i64 0, i32 1
	%187 = load i64, i64* %186, align 8
	%188 = getelementptr inbounds %strconv.DecimalSlice, %strconv.DecimalSlice* %21, i64 0, i32 1
	store i64 %187, i64* %188
	; SelectorExpr
	%189 = load %decimal.Decimal*, %decimal.Decimal** %18, align 8
	%190 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %189, i64 0
	%191 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %190, i64 0, i32 2
	%192 = load i64, i64* %191, align 8
	%193 = getelementptr inbounds %strconv.DecimalSlice, %strconv.DecimalSlice* %21, i64 0, i32 2
	store i64 %192, i64* %193
	%194 = load %strconv.DecimalSlice, %strconv.DecimalSlice* %21, align 8
	store %strconv.DecimalSlice %194, %strconv.DecimalSlice* %19
	; SwitchStmt
	%195 = load i8, i8* %1, align 1
	%196 = icmp eq i8 %195, 101
	br i1 %196, label %switch.case.body-20, label %switch.case.next-18

switch.case.next-18:
	%197 = icmp eq i8 %195, 69
	br i1 %197, label %switch.case.body-20, label %switch.case.next-19

switch.case.next-19:
	%198 = icmp eq i8 %195, 102
	br i1 %198, label %switch.fall.body-23, label %switch.case.next-21

switch.case.body-20:
	; AssignStmt
	; SelectorExpr
	%199 = getelementptr inbounds %strconv.DecimalSlice, %strconv.DecimalSlice* %19, i64 0, i32 1
	%200 = load i64, i64* %199, align 8
	%201 = sub i64 %200, 1
	store i64 %201, i64* %2
	br label %switch.done-27

switch.case.next-21:
	%202 = icmp eq i8 %195, 70
	br i1 %202, label %switch.fall.body-23, label %switch.case.next-22

switch.case.next-22:
	%203 = icmp eq i8 %195, 103
	br i1 %203, label %switch.fall.body-26, label %switch.case.next-24

switch.fall.body-23:
	; AssignStmt
	; max
	; SelectorExpr
	%204 = getelementptr inbounds %strconv.DecimalSlice, %strconv.DecimalSlice* %19, i64 0, i32 1
	%205 = load i64, i64* %204, align 8
	; SelectorExpr
	%206 = getelementptr inbounds %strconv.DecimalSlice, %strconv.DecimalSlice* %19, i64 0, i32 2
	%207 = load i64, i64* %206, align 8
	%208 = sub i64 %205, %207
	%209 = icmp sgt i64 %208, 0
	%210 = select i1 %209, i64 %208, i64 0
	store i64 %210, i64* %2
	br label %switch.done-27

switch.case.next-24:
	%211 = icmp eq i8 %195, 71
	br i1 %211, label %switch.fall.body-26, label %switch.case.next-25

switch.case.next-25:
	br label %switch.done-27

switch.fall.body-26:
	; AssignStmt
	; SelectorExpr
	%212 = getelementptr inbounds %strconv.DecimalSlice, %strconv.DecimalSlice* %19, i64 0, i32 1
	%213 = load i64, i64* %212, align 8
	store i64 %213, i64* %2
	br label %switch.done-27

switch.done-27:
	br label %if.done-41

if.else-28:
	; SwitchStmt
	%214 = load i8, i8* %1, align 1
	%215 = icmp eq i8 %214, 101
	br i1 %215, label %switch.case.body-31, label %switch.case.next-29

switch.case.next-29:
	%216 = icmp eq i8 %214, 69
	br i1 %216, label %switch.case.body-31, label %switch.case.next-30

switch.case.next-30:
	%217 = icmp eq i8 %214, 102
	br i1 %217, label %switch.fall.body-34, label %switch.case.next-32

switch.case.body-31:
	%218 = load %decimal.Decimal*, %decimal.Decimal** %18, align 8
	%219 = load i64, i64* %2, align 8
	%220 = add i64 %219, 1
	call void @decimal.round(%decimal.Decimal* %218, i64 %220, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %switch.done-40

switch.case.next-32:
	%221 = icmp eq i8 %214, 70
	br i1 %221, label %switch.fall.body-34, label %switch.case.next-33

switch.case.next-33:
	%222 = icmp eq i8 %214, 103
	br i1 %222, label %switch.fall.body-37, label %switch.case.next-35

switch.fall.body-34:
	%223 = load %decimal.Decimal*, %decimal.Decimal** %18, align 8
	; SelectorExpr
	%224 = load %decimal.Decimal*, %decimal.Decimal** %18, align 8
	%225 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %224, i64 0
	%226 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %225, i64 0, i32 2
	%227 = load i64, i64* %226, align 8
	%228 = load i64, i64* %2, align 8
	%229 = add i64 %227, %228
	call void @decimal.round(%decimal.Decimal* %223, i64 %229, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %switch.done-40

switch.case.next-35:
	%230 = icmp eq i8 %214, 71
	br i1 %230, label %switch.fall.body-37, label %switch.case.next-36

switch.case.next-36:
	br label %switch.done-40

switch.fall.body-37:
	; IfStmt
	%231 = load i64, i64* %2, align 8
	%232 = icmp eq i64 %231, 0
	%233 = zext i1 %232 to i8
	%234 = trunc i8 %233 to i1
	br i1 %234, label %if.then-38, label %if.done-39

if.then-38:
	; AssignStmt
	store i64 1, i64* %2
	br label %if.done-39

if.done-39:
	%235 = load %decimal.Decimal*, %decimal.Decimal** %18, align 8
	%236 = load i64, i64* %2, align 8
	call void @decimal.round(%decimal.Decimal* %235, i64 %236, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %switch.done-40

switch.done-40:
	; AssignStmt
	; CompoundLit
	%237 = bitcast %strconv.DecimalSlice* %23 to %..rawptr
	%238 = call %..rawptr @mem.zero(%..rawptr %237, i64 40) noinline
	store %strconv.DecimalSlice zeroinitializer, %strconv.DecimalSlice* %23
	store %strconv.DecimalSlice {{i8*, i64} zeroinitializer, i64 zeroinitializer, i64 zeroinitializer, i8 zeroinitializer}, %strconv.DecimalSlice* %23
	; SliceExpr
	; SelectorExpr
	%239 = load %decimal.Decimal*, %decimal.Decimal** %18, align 8
	%240 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %239, i64 0
	%241 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %240, i64 0, i32 0
	%242 = load [384 x i8], [384 x i8]* %241, align 1
	call void @runtime.slice_expr_error(%..string {i8* getelementptr inbounds ([34 x i8], [34 x i8]* @str$17b, i64 0, i32 0), i64 33}, i64 300, i64 40, i64 0, i64 384, i64 384)
	%243 = getelementptr inbounds [384 x i8], [384 x i8]* %241, i64 0, i32 0
	%244 = getelementptr inbounds i8, i8* %243, i64 0
	%245 = sub i64 384, 0
	%246 = bitcast {i8*, i64}* %24 to %..rawptr
	%247 = call %..rawptr @mem.zero(%..rawptr %246, i64 16) noinline
	store {i8*, i64} zeroinitializer, {i8*, i64}* %24
	%248 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %24, i64 0, i32 0
	store i8* %244, i8** %248
	%249 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %24, i64 0, i32 1
	store i64 %245, i64* %249
	%250 = load {i8*, i64}, {i8*, i64}* %24, align 8
	%251 = getelementptr inbounds %strconv.DecimalSlice, %strconv.DecimalSlice* %23, i64 0, i32 0
	store {i8*, i64} %250, {i8*, i64}* %251
	; SelectorExpr
	%252 = load %decimal.Decimal*, %decimal.Decimal** %18, align 8
	%253 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %252, i64 0
	%254 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %253, i64 0, i32 1
	%255 = load i64, i64* %254, align 8
	%256 = getelementptr inbounds %strconv.DecimalSlice, %strconv.DecimalSlice* %23, i64 0, i32 1
	store i64 %255, i64* %256
	; SelectorExpr
	%257 = load %decimal.Decimal*, %decimal.Decimal** %18, align 8
	%258 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %257, i64 0
	%259 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %258, i64 0, i32 2
	%260 = load i64, i64* %259, align 8
	%261 = getelementptr inbounds %strconv.DecimalSlice, %strconv.DecimalSlice* %23, i64 0, i32 2
	store i64 %260, i64* %261
	%262 = load %strconv.DecimalSlice, %strconv.DecimalSlice* %23, align 8
	store %strconv.DecimalSlice %262, %strconv.DecimalSlice* %19
	br label %if.done-41

if.done-41:
	; ReturnStmt
	%263 = load {i8*, i64}, {i8*, i64}* %buf, align 8
	%264 = load i8, i8* %20, align 1
	%265 = load i8, i8* %7, align 1
	%266 = load %strconv.DecimalSlice, %strconv.DecimalSlice* %19, align 8
	%267 = load i64, i64* %2, align 8
	%268 = load i8, i8* %1, align 1
	%269 = bitcast {i8*, i64}* %25 to %..rawptr
	%270 = call %..rawptr @mem.zero(%..rawptr %269, i64 16) noinline
	store {i8*, i64} zeroinitializer, {i8*, i64}* %25
	store {i8*, i64} %263, {i8*, i64}* %25
	%271 = trunc i8 %264 to i1
	%272 = trunc i8 %265 to i1
	%273 = bitcast %strconv.DecimalSlice* %26 to %..rawptr
	%274 = call %..rawptr @mem.zero(%..rawptr %273, i64 40) noinline
	store %strconv.DecimalSlice zeroinitializer, %strconv.DecimalSlice* %26
	store %strconv.DecimalSlice %266, %strconv.DecimalSlice* %26
	%275 = call {i8*, i64} @strconv.format_digits({i8*, i64}* %25, i1 %271, i1 %272, %strconv.DecimalSlice* %26, i64 %267, i8 %268, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	ret {i8*, i64} %275
}

define {i8*, i64} @strconv.format_digits({i8*, i64}* %buf, i1 %shortest, i1 %neg, %strconv.DecimalSlice* %digs, i64 %prec, i8 %fmt, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca i8, align 16
	%1 = alloca i8, align 16
	%2 = alloca i64, align 16
	%3 = alloca i8, align 16
	%4 = alloca %strconv.format_digits.Buffer-235, align 16
	%5 = alloca %strconv.format_digits.Buffer-235, align 16
	%6 = alloca {i8*, i64}, align 16
	%7 = alloca [1 x i8], align 16
	%8 = alloca {i8*, i64}, align 16
	%9 = alloca i64, align 16
	%10 = alloca {i8*, i64}, align 16
	%11 = alloca {i8*, i64}, align 16
	%12 = alloca {i8*, i64}, align 16
	%13 = alloca [1 x i8], align 16
	%14 = alloca {i8*, i64}, align 16
	%15 = alloca {i8*, i64}, align 16
	%16 = alloca [1 x i8], align 16
	%17 = alloca {i8*, i64}, align 16
	%18 = alloca {i8*, i64}, align 16
	%19 = alloca [1 x i8], align 16
	%20 = alloca {i8*, i64}, align 16
	%21 = alloca i64, align 16
	%22 = alloca i64, align 16
	%23 = alloca i64, align 16
	%24 = alloca i8, align 16
	%25 = alloca i64, align 16
	%26 = alloca {i8*, i64}, align 16
	%27 = alloca [1 x i8], align 16
	%28 = alloca {i8*, i64}, align 16
	%29 = alloca %strconv.format_digits.Buffer-235, align 16
	%30 = alloca %runtime.Source_Code_Location, align 16
	%31 = alloca %strconv.format_digits.Buffer-235, align 16
	%32 = alloca %runtime.Source_Code_Location, align 16
	%33 = alloca %strconv.format_digits.Buffer-235, align 16
	%34 = alloca {i8*, i64}, align 16
	%35 = alloca [2 x i8], align 16
	%36 = alloca {i8*, i64}, align 16
	%37 = alloca %strconv.format_digits.Buffer-235, align 16
	%38 = load {i8*, i64}, {i8*, i64}* %buf, align 8
	%39 = zext i1 %shortest to i8
	store i8 %39, i8* %0
	%40 = zext i1 %neg to i8
	store i8 %40, i8* %1
	%41 = load %strconv.DecimalSlice, %strconv.DecimalSlice* %digs, align 8
	store i64 %prec, i64* %2
	store i8 %fmt, i8* %3
	; b
	; CompoundLit
	%42 = bitcast %strconv.format_digits.Buffer-235* %5 to %..rawptr
	%43 = call %..rawptr @mem.zero(%..rawptr %42, i64 24) noinline
	store %strconv.format_digits.Buffer-235 zeroinitializer, %strconv.format_digits.Buffer-235* %5
	store %strconv.format_digits.Buffer-235 {{i8*, i64} zeroinitializer, i64 zeroinitializer}, %strconv.format_digits.Buffer-235* %5
	%44 = load {i8*, i64}, {i8*, i64}* %buf, align 8
	%45 = getelementptr inbounds %strconv.format_digits.Buffer-235, %strconv.format_digits.Buffer-235* %5, i64 0, i32 0
	store {i8*, i64} %44, {i8*, i64}* %45
	%46 = load %strconv.format_digits.Buffer-235, %strconv.format_digits.Buffer-235* %5, align 8
	store %strconv.format_digits.Buffer-235 %46, %strconv.format_digits.Buffer-235* %4
	; SwitchStmt
	%47 = load i8, i8* %3, align 1
	%48 = icmp eq i8 %47, 102
	br i1 %48, label %switch.case.body-3, label %switch.case.next-1

switch.case.next-1:
	%49 = icmp eq i8 %47, 70
	br i1 %49, label %switch.case.body-3, label %switch.case.next-2

switch.case.next-2:
	%50 = icmp eq i8 %47, 101
	br i1 %50, label %switch.fall.body-23, label %switch.case.next-21

switch.case.body-3:
	; TernaryExpr
	%51 = load i8, i8* %1, align 1
	%52 = trunc i8 %51 to i1
	br i1 %52, label %if.then-4, label %if.else-5

if.then-4:
	br label %if.done-6

if.else-5:
	br label %if.done-6

if.done-6:
	%53 = phi i32 [ 45, %if.then-4 ], [ 43, %if.else-5 ]
	%54 = trunc i32 %53 to i8
	; variadic call argument generation
	%55 = bitcast {i8*, i64}* %6 to %..rawptr
	%56 = call %..rawptr @mem.zero(%..rawptr %55, i64 16) noinline
	store {i8*, i64} zeroinitializer, {i8*, i64}* %6
	%57 = bitcast [1 x i8]* %7 to %..rawptr
	%58 = call %..rawptr @mem.zero(%..rawptr %57, i64 1) noinline
	store [1 x i8] zeroinitializer, [1 x i8]* %7
	%59 = getelementptr inbounds [1 x i8], [1 x i8]* %7, i64 0, i32 0
	store i8 %54, i8* %59
	%60 = getelementptr inbounds [1 x i8], [1 x i8]* %7, i64 0, i32 0
	%61 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %6, i64 0, i32 0
	store i8* %60, i8** %61
	%62 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %6, i64 0, i32 1
	store i64 1, i64* %62
	%63 = load {i8*, i64}, {i8*, i64}* %6, align 8
	%64 = bitcast {i8*, i64}* %8 to %..rawptr
	%65 = call %..rawptr @mem.zero(%..rawptr %64, i64 16) noinline
	store {i8*, i64} zeroinitializer, {i8*, i64}* %8
	store {i8*, i64} %63, {i8*, i64}* %8
	call void @strconv.format_digits.add_bytes-1(%strconv.format_digits.Buffer-235* %4, {i8*, i64}* %8, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	; IfStmt
	; SelectorExpr
	%66 = getelementptr inbounds %strconv.DecimalSlice, %strconv.DecimalSlice* %digs, i64 0, i32 2
	%67 = load i64, i64* %66, align 8
	%68 = icmp sgt i64 %67, 0
	%69 = zext i1 %68 to i8
	%70 = trunc i8 %69 to i1
	br i1 %70, label %if.then-7, label %if.else-11

if.then-7:
	; m
	; min
	; SelectorExpr
	%71 = getelementptr inbounds %strconv.DecimalSlice, %strconv.DecimalSlice* %digs, i64 0, i32 2
	%72 = load i64, i64* %71, align 8
	; SelectorExpr
	%73 = getelementptr inbounds %strconv.DecimalSlice, %strconv.DecimalSlice* %digs, i64 0, i32 1
	%74 = load i64, i64* %73, align 8
	%75 = icmp slt i64 %74, %72
	%76 = select i1 %75, i64 %74, i64 %72
	store i64 %76, i64* %9
	; SliceExpr
	%77 = load i64, i64* %9, align 8
	; SelectorExpr
	%78 = getelementptr inbounds %strconv.DecimalSlice, %strconv.DecimalSlice* %digs, i64 0, i32 0
	%79 = load {i8*, i64}, {i8*, i64}* %78, align 8
	%80 = extractvalue {i8*, i64} %79, 1
	call void @runtime.slice_expr_error(%..string {i8* getelementptr inbounds ([34 x i8], [34 x i8]* @str$17c, i64 0, i32 0), i64 33}, i64 327, i64 31, i64 0, i64 %77, i64 %80)
	%81 = extractvalue {i8*, i64} %79, 0
	%82 = getelementptr inbounds i8, i8* %81, i64 0
	%83 = sub i64 %77, 0
	%84 = bitcast {i8*, i64}* %10 to %..rawptr
	%85 = call %..rawptr @mem.zero(%..rawptr %84, i64 16) noinline
	store {i8*, i64} zeroinitializer, {i8*, i64}* %10
	%86 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %10, i64 0, i32 0
	store i8* %82, i8** %86
	%87 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %10, i64 0, i32 1
	store i64 %83, i64* %87
	%88 = load {i8*, i64}, {i8*, i64}* %10, align 8
	%89 = bitcast {i8*, i64}* %11 to %..rawptr
	%90 = call %..rawptr @mem.zero(%..rawptr %89, i64 16) noinline
	store {i8*, i64} zeroinitializer, {i8*, i64}* %11
	store {i8*, i64} %88, {i8*, i64}* %11
	call void @strconv.format_digits.add_bytes-1(%strconv.format_digits.Buffer-235* %4, {i8*, i64}* %11, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	; ForStmt
	br label %for.loop-8

for.loop-8:
	%91 = load i64, i64* %9, align 8
	; SelectorExpr
	%92 = getelementptr inbounds %strconv.DecimalSlice, %strconv.DecimalSlice* %digs, i64 0, i32 2
	%93 = load i64, i64* %92, align 8
	%94 = icmp slt i64 %91, %93
	%95 = zext i1 %94 to i8
	%96 = trunc i8 %95 to i1
	br i1 %96, label %for.body-9, label %for.done-10

for.body-9:
	; variadic call argument generation
	%97 = bitcast {i8*, i64}* %12 to %..rawptr
	%98 = call %..rawptr @mem.zero(%..rawptr %97, i64 16) noinline
	store {i8*, i64} zeroinitializer, {i8*, i64}* %12
	%99 = bitcast [1 x i8]* %13 to %..rawptr
	%100 = call %..rawptr @mem.zero(%..rawptr %99, i64 1) noinline
	store [1 x i8] zeroinitializer, [1 x i8]* %13
	%101 = getelementptr inbounds [1 x i8], [1 x i8]* %13, i64 0, i32 0
	store i8 48, i8* %101
	%102 = getelementptr inbounds [1 x i8], [1 x i8]* %13, i64 0, i32 0
	%103 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %12, i64 0, i32 0
	store i8* %102, i8** %103
	%104 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %12, i64 0, i32 1
	store i64 1, i64* %104
	%105 = load {i8*, i64}, {i8*, i64}* %12, align 8
	%106 = bitcast {i8*, i64}* %14 to %..rawptr
	%107 = call %..rawptr @mem.zero(%..rawptr %106, i64 16) noinline
	store {i8*, i64} zeroinitializer, {i8*, i64}* %14
	store {i8*, i64} %105, {i8*, i64}* %14
	call void @strconv.format_digits.add_bytes-1(%strconv.format_digits.Buffer-235* %4, {i8*, i64}* %14, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	; AssignStmt
	%108 = load i64, i64* %9, align 8
	%109 = add i64 %108, 1
	store i64 %109, i64* %9
	br label %for.loop-8

for.done-10:
	br label %if.done-12

if.else-11:
	; variadic call argument generation
	%110 = bitcast {i8*, i64}* %15 to %..rawptr
	%111 = call %..rawptr @mem.zero(%..rawptr %110, i64 16) noinline
	store {i8*, i64} zeroinitializer, {i8*, i64}* %15
	%112 = bitcast [1 x i8]* %16 to %..rawptr
	%113 = call %..rawptr @mem.zero(%..rawptr %112, i64 1) noinline
	store [1 x i8] zeroinitializer, [1 x i8]* %16
	%114 = getelementptr inbounds [1 x i8], [1 x i8]* %16, i64 0, i32 0
	store i8 48, i8* %114
	%115 = getelementptr inbounds [1 x i8], [1 x i8]* %16, i64 0, i32 0
	%116 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %15, i64 0, i32 0
	store i8* %115, i8** %116
	%117 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %15, i64 0, i32 1
	store i64 1, i64* %117
	%118 = load {i8*, i64}, {i8*, i64}* %15, align 8
	%119 = bitcast {i8*, i64}* %17 to %..rawptr
	%120 = call %..rawptr @mem.zero(%..rawptr %119, i64 16) noinline
	store {i8*, i64} zeroinitializer, {i8*, i64}* %17
	store {i8*, i64} %118, {i8*, i64}* %17
	call void @strconv.format_digits.add_bytes-1(%strconv.format_digits.Buffer-235* %4, {i8*, i64}* %17, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %if.done-12

if.done-12:
	; IfStmt
	%121 = load i64, i64* %2, align 8
	%122 = icmp sgt i64 %121, 0
	%123 = zext i1 %122 to i8
	%124 = trunc i8 %123 to i1
	br i1 %124, label %if.then-13, label %if.done-20

if.then-13:
	; variadic call argument generation
	%125 = bitcast {i8*, i64}* %18 to %..rawptr
	%126 = call %..rawptr @mem.zero(%..rawptr %125, i64 16) noinline
	store {i8*, i64} zeroinitializer, {i8*, i64}* %18
	%127 = bitcast [1 x i8]* %19 to %..rawptr
	%128 = call %..rawptr @mem.zero(%..rawptr %127, i64 1) noinline
	store [1 x i8] zeroinitializer, [1 x i8]* %19
	%129 = getelementptr inbounds [1 x i8], [1 x i8]* %19, i64 0, i32 0
	store i8 46, i8* %129
	%130 = getelementptr inbounds [1 x i8], [1 x i8]* %19, i64 0, i32 0
	%131 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %18, i64 0, i32 0
	store i8* %130, i8** %131
	%132 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %18, i64 0, i32 1
	store i64 1, i64* %132
	%133 = load {i8*, i64}, {i8*, i64}* %18, align 8
	%134 = bitcast {i8*, i64}* %20 to %..rawptr
	%135 = call %..rawptr @mem.zero(%..rawptr %134, i64 16) noinline
	store {i8*, i64} zeroinitializer, {i8*, i64}* %20
	store {i8*, i64} %133, {i8*, i64}* %20
	call void @strconv.format_digits.add_bytes-1(%strconv.format_digits.Buffer-235* %4, {i8*, i64}* %20, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	; RangeStmt
	; i
	%136 = bitcast i64* %21 to %..rawptr
	%137 = call %..rawptr @mem.zero(%..rawptr %136, i64 8) noinline
	store i64 zeroinitializer, i64* %21
	%138 = bitcast i64* %22 to %..rawptr
	%139 = call %..rawptr @mem.zero(%..rawptr %138, i64 8) noinline
	store i64 zeroinitializer, i64* %22
	store i64 0, i64* %22
	%140 = bitcast i64* %23 to %..rawptr
	%141 = call %..rawptr @mem.zero(%..rawptr %140, i64 8) noinline
	store i64 zeroinitializer, i64* %23
	store i64 0, i64* %23
	br label %for.interval.loop-14

for.interval.loop-14:
	%142 = load i64, i64* %2, align 8
	%143 = sub i64 %142, 1
	%144 = load i64, i64* %22, align 8
	%145 = icmp sle i64 %144, %143
	br i1 %145, label %for.interval.body-15, label %for.interval.done-19

for.interval.body-15:
	%146 = load i64, i64* %22, align 8
	%147 = load i64, i64* %23, align 8
	%148 = load i64, i64* %22, align 8
	%149 = add i64 %148, 1
	store i64 %149, i64* %22
	%150 = load i64, i64* %23, align 8
	%151 = add i64 %150, 1
	store i64 %151, i64* %23
	store i64 %146, i64* %21
	; c
	store i8 48, i8* %24
	; IfStmt
	; j
	; SelectorExpr
	%152 = getelementptr inbounds %strconv.DecimalSlice, %strconv.DecimalSlice* %digs, i64 0, i32 2
	%153 = load i64, i64* %152, align 8
	%154 = load i64, i64* %21, align 8
	%155 = add i64 %153, %154
	store i64 %155, i64* %25
	%156 = load i64, i64* %25, align 8
	%157 = icmp sle i64 0, %156
	%158 = zext i1 %157 to i8
	%159 = trunc i8 %158 to i1
	br i1 %159, label %cmp.and-16, label %if.done-18

cmp.and-16:
	%160 = load i64, i64* %25, align 8
	; SelectorExpr
	%161 = getelementptr inbounds %strconv.DecimalSlice, %strconv.DecimalSlice* %digs, i64 0, i32 1
	%162 = load i64, i64* %161, align 8
	%163 = icmp slt i64 %160, %162
	%164 = zext i1 %163 to i8
	%165 = trunc i8 %164 to i1
	br i1 %165, label %if.then-17, label %if.done-18

if.then-17:
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%166 = getelementptr inbounds %strconv.DecimalSlice, %strconv.DecimalSlice* %digs, i64 0, i32 0
	%167 = load {i8*, i64}, {i8*, i64}* %166, align 8
	%168 = extractvalue {i8*, i64} %167, 0
	%169 = load i64, i64* %25, align 8
	%170 = extractvalue {i8*, i64} %167, 1
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([34 x i8], [34 x i8]* @str$17d, i64 0, i32 0), i64 33}, i64 342, i64 22, i64 %169, i64 %170)
	%171 = getelementptr inbounds i8, i8* %168, i64 %169
	%172 = load i8, i8* %171, align 1
	store i8 %172, i8* %24
	br label %if.done-18

if.done-18:
	%173 = load i8, i8* %24, align 1
	; variadic call argument generation
	%174 = bitcast {i8*, i64}* %26 to %..rawptr
	%175 = call %..rawptr @mem.zero(%..rawptr %174, i64 16) noinline
	store {i8*, i64} zeroinitializer, {i8*, i64}* %26
	%176 = bitcast [1 x i8]* %27 to %..rawptr
	%177 = call %..rawptr @mem.zero(%..rawptr %176, i64 1) noinline
	store [1 x i8] zeroinitializer, [1 x i8]* %27
	%178 = getelementptr inbounds [1 x i8], [1 x i8]* %27, i64 0, i32 0
	store i8 %173, i8* %178
	%179 = getelementptr inbounds [1 x i8], [1 x i8]* %27, i64 0, i32 0
	%180 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %26, i64 0, i32 0
	store i8* %179, i8** %180
	%181 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %26, i64 0, i32 1
	store i64 1, i64* %181
	%182 = load {i8*, i64}, {i8*, i64}* %26, align 8
	%183 = bitcast {i8*, i64}* %28 to %..rawptr
	%184 = call %..rawptr @mem.zero(%..rawptr %183, i64 16) noinline
	store {i8*, i64} zeroinitializer, {i8*, i64}* %28
	store {i8*, i64} %182, {i8*, i64}* %28
	call void @strconv.format_digits.add_bytes-1(%strconv.format_digits.Buffer-235* %4, {i8*, i64}* %28, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %for.interval.loop-14

for.interval.done-19:
	br label %if.done-20

if.done-20:
	; ReturnStmt
	%185 = load %strconv.format_digits.Buffer-235, %strconv.format_digits.Buffer-235* %4, align 8
	%186 = bitcast %strconv.format_digits.Buffer-235* %29 to %..rawptr
	%187 = call %..rawptr @mem.zero(%..rawptr %186, i64 24) noinline
	store %strconv.format_digits.Buffer-235 zeroinitializer, %strconv.format_digits.Buffer-235* %29
	store %strconv.format_digits.Buffer-235 %185, %strconv.format_digits.Buffer-235* %29
	%188 = call {i8*, i64} @strconv.format_digits.to_bytes-0(%strconv.format_digits.Buffer-235* %29, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	ret {i8*, i64} %188

switch.case.next-21:
	%189 = icmp eq i8 %47, 69
	br i1 %189, label %switch.fall.body-23, label %switch.case.next-22

switch.case.next-22:
	%190 = icmp eq i8 %47, 103
	br i1 %190, label %switch.fall.body-26, label %switch.case.next-24

switch.fall.body-23:
	%191 = bitcast %runtime.Source_Code_Location* %30 to %..rawptr
	%192 = call %..rawptr @mem.zero(%..rawptr %191, i64 48) noinline
	store %runtime.Source_Code_Location zeroinitializer, %runtime.Source_Code_Location* %30
	store %runtime.Source_Code_Location {%..string {i8* getelementptr inbounds ([34 x i8], [34 x i8]* @str$17e, i64 0, i32 0), i64 33}, i64 350, i64 3, %..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @str$17f, i64 0, i32 0), i64 13}}, %runtime.Source_Code_Location* %30
	call void @runtime.panic(%..string {i8* getelementptr inbounds ([49 x i8], [49 x i8]* @str$180, i64 0, i32 0), i64 48}, %runtime.Source_Code_Location* %30) noreturn
	; ReturnStmt
	%193 = load %strconv.format_digits.Buffer-235, %strconv.format_digits.Buffer-235* %4, align 8
	%194 = bitcast %strconv.format_digits.Buffer-235* %31 to %..rawptr
	%195 = call %..rawptr @mem.zero(%..rawptr %194, i64 24) noinline
	store %strconv.format_digits.Buffer-235 zeroinitializer, %strconv.format_digits.Buffer-235* %31
	store %strconv.format_digits.Buffer-235 %193, %strconv.format_digits.Buffer-235* %31
	%196 = call {i8*, i64} @strconv.format_digits.to_bytes-0(%strconv.format_digits.Buffer-235* %31, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	ret {i8*, i64} %196

switch.case.next-24:
	%197 = icmp eq i8 %47, 71
	br i1 %197, label %switch.fall.body-26, label %switch.case.next-25

switch.case.next-25:
	%198 = load i8, i8* %3, align 1
	; variadic call argument generation
	%199 = bitcast {i8*, i64}* %34 to %..rawptr
	%200 = call %..rawptr @mem.zero(%..rawptr %199, i64 16) noinline
	store {i8*, i64} zeroinitializer, {i8*, i64}* %34
	%201 = bitcast [2 x i8]* %35 to %..rawptr
	%202 = call %..rawptr @mem.zero(%..rawptr %201, i64 2) noinline
	store [2 x i8] zeroinitializer, [2 x i8]* %35
	%203 = getelementptr inbounds [2 x i8], [2 x i8]* %35, i64 0, i32 0
	store i8 37, i8* %203
	%204 = getelementptr inbounds [2 x i8], [2 x i8]* %35, i64 0, i32 1
	store i8 %198, i8* %204
	%205 = getelementptr inbounds [2 x i8], [2 x i8]* %35, i64 0, i32 0
	%206 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %34, i64 0, i32 0
	store i8* %205, i8** %206
	%207 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %34, i64 0, i32 1
	store i64 2, i64* %207
	%208 = load {i8*, i64}, {i8*, i64}* %34, align 8
	%209 = bitcast {i8*, i64}* %36 to %..rawptr
	%210 = call %..rawptr @mem.zero(%..rawptr %209, i64 16) noinline
	store {i8*, i64} zeroinitializer, {i8*, i64}* %36
	store {i8*, i64} %208, {i8*, i64}* %36
	call void @strconv.format_digits.add_bytes-1(%strconv.format_digits.Buffer-235* %4, {i8*, i64}* %36, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	; ReturnStmt
	%211 = load %strconv.format_digits.Buffer-235, %strconv.format_digits.Buffer-235* %4, align 8
	%212 = bitcast %strconv.format_digits.Buffer-235* %37 to %..rawptr
	%213 = call %..rawptr @mem.zero(%..rawptr %212, i64 24) noinline
	store %strconv.format_digits.Buffer-235 zeroinitializer, %strconv.format_digits.Buffer-235* %37
	store %strconv.format_digits.Buffer-235 %211, %strconv.format_digits.Buffer-235* %37
	%214 = call {i8*, i64} @strconv.format_digits.to_bytes-0(%strconv.format_digits.Buffer-235* %37, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	ret {i8*, i64} %214

switch.fall.body-26:
	%215 = bitcast %runtime.Source_Code_Location* %32 to %..rawptr
	%216 = call %..rawptr @mem.zero(%..rawptr %215, i64 48) noinline
	store %runtime.Source_Code_Location zeroinitializer, %runtime.Source_Code_Location* %32
	store %runtime.Source_Code_Location {%..string {i8* getelementptr inbounds ([34 x i8], [34 x i8]* @str$181, i64 0, i32 0), i64 33}, i64 354, i64 3, %..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @str$182, i64 0, i32 0), i64 13}}, %runtime.Source_Code_Location* %32
	call void @runtime.panic(%..string {i8* getelementptr inbounds ([49 x i8], [49 x i8]* @str$183, i64 0, i32 0), i64 48}, %runtime.Source_Code_Location* %32) noreturn
	; ReturnStmt
	%217 = load %strconv.format_digits.Buffer-235, %strconv.format_digits.Buffer-235* %4, align 8
	%218 = bitcast %strconv.format_digits.Buffer-235* %33 to %..rawptr
	%219 = call %..rawptr @mem.zero(%..rawptr %218, i64 24) noinline
	store %strconv.format_digits.Buffer-235 zeroinitializer, %strconv.format_digits.Buffer-235* %33
	store %strconv.format_digits.Buffer-235 %217, %strconv.format_digits.Buffer-235* %33
	%220 = call {i8*, i64} @strconv.format_digits.to_bytes-0(%strconv.format_digits.Buffer-235* %33, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	ret {i8*, i64} %220
}

define {i8*, i64} @strconv.format_digits.to_bytes-0(%strconv.format_digits.Buffer-235* %b, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca {i8*, i64}, align 16
	%1 = load %strconv.format_digits.Buffer-235, %strconv.format_digits.Buffer-235* %b, align 8
	; ReturnStmt
	; SliceExpr
	; SelectorExpr
	%2 = getelementptr inbounds %strconv.format_digits.Buffer-235, %strconv.format_digits.Buffer-235* %b, i64 0, i32 1
	%3 = load i64, i64* %2, align 8
	; SelectorExpr
	%4 = getelementptr inbounds %strconv.format_digits.Buffer-235, %strconv.format_digits.Buffer-235* %b, i64 0, i32 0
	%5 = load {i8*, i64}, {i8*, i64}* %4, align 8
	%6 = extractvalue {i8*, i64} %5, 1
	call void @runtime.slice_expr_error(%..string {i8* getelementptr inbounds ([34 x i8], [34 x i8]* @str$184, i64 0, i32 0), i64 33}, i64 313, i64 53, i64 0, i64 %3, i64 %6)
	%7 = extractvalue {i8*, i64} %5, 0
	%8 = getelementptr inbounds i8, i8* %7, i64 0
	%9 = sub i64 %3, 0
	%10 = bitcast {i8*, i64}* %0 to %..rawptr
	%11 = call %..rawptr @mem.zero(%..rawptr %10, i64 16) noinline
	store {i8*, i64} zeroinitializer, {i8*, i64}* %0
	%12 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %0, i64 0, i32 0
	store i8* %8, i8** %12
	%13 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %0, i64 0, i32 1
	store i64 %9, i64* %13
	%14 = load {i8*, i64}, {i8*, i64}* %0, align 8
	ret {i8*, i64} %14
}

define void @strconv.format_digits.add_bytes-1(%strconv.format_digits.Buffer-235* %buf, {i8*, i64}* %bytes, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca %strconv.format_digits.Buffer-235*, align 16
	%1 = alloca {i8*, i64}, align 16
	%2 = alloca {i8*, i64}, align 16
	%3 = alloca {i8*, i64}, align 16
	store %strconv.format_digits.Buffer-235* %buf, %strconv.format_digits.Buffer-235** %0
	%4 = load {i8*, i64}, {i8*, i64}* %bytes, align 8
	; AssignStmt
	; SelectorExpr
	%5 = load %strconv.format_digits.Buffer-235*, %strconv.format_digits.Buffer-235** %0, align 8
	%6 = getelementptr inbounds %strconv.format_digits.Buffer-235, %strconv.format_digits.Buffer-235* %5, i64 0
	%7 = getelementptr inbounds %strconv.format_digits.Buffer-235, %strconv.format_digits.Buffer-235* %6, i64 0, i32 1
	; SliceExpr
	; SelectorExpr
	%8 = load %strconv.format_digits.Buffer-235*, %strconv.format_digits.Buffer-235** %0, align 8
	%9 = getelementptr inbounds %strconv.format_digits.Buffer-235, %strconv.format_digits.Buffer-235* %8, i64 0
	%10 = getelementptr inbounds %strconv.format_digits.Buffer-235, %strconv.format_digits.Buffer-235* %9, i64 0, i32 1
	%11 = load i64, i64* %10, align 8
	; SelectorExpr
	%12 = load %strconv.format_digits.Buffer-235*, %strconv.format_digits.Buffer-235** %0, align 8
	%13 = getelementptr inbounds %strconv.format_digits.Buffer-235, %strconv.format_digits.Buffer-235* %12, i64 0
	%14 = getelementptr inbounds %strconv.format_digits.Buffer-235, %strconv.format_digits.Buffer-235* %13, i64 0, i32 0
	%15 = load {i8*, i64}, {i8*, i64}* %14, align 8
	%16 = extractvalue {i8*, i64} %15, 1
	call void @runtime.slice_expr_error(%..string {i8* getelementptr inbounds ([34 x i8], [34 x i8]* @str$185, i64 0, i32 0), i64 33}, i64 315, i64 22, i64 %11, i64 %16, i64 %16)
	%17 = extractvalue {i8*, i64} %15, 0
	%18 = getelementptr inbounds i8, i8* %17, i64 %11
	%19 = sub i64 %16, %11
	%20 = bitcast {i8*, i64}* %1 to %..rawptr
	%21 = call %..rawptr @mem.zero(%..rawptr %20, i64 16) noinline
	store {i8*, i64} zeroinitializer, {i8*, i64}* %1
	%22 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %1, i64 0, i32 0
	store i8* %18, i8** %22
	%23 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %1, i64 0, i32 1
	store i64 %19, i64* %23
	%24 = load {i8*, i64}, {i8*, i64}* %1, align 8
	%25 = load {i8*, i64}, {i8*, i64}* %bytes, align 8
	%26 = bitcast {i8*, i64}* %2 to %..rawptr
	%27 = call %..rawptr @mem.zero(%..rawptr %26, i64 16) noinline
	store {i8*, i64} zeroinitializer, {i8*, i64}* %2
	store {i8*, i64} %24, {i8*, i64}* %2
	%28 = bitcast {i8*, i64}* %3 to %..rawptr
	%29 = call %..rawptr @mem.zero(%..rawptr %28, i64 16) noinline
	store {i8*, i64} zeroinitializer, {i8*, i64}* %3
	store {i8*, i64} %25, {i8*, i64}* %3
	%30 = call i64 @runtime.copy-6386({i8*, i64}* %2, {i8*, i64}* %3)
	%31 = load i64, i64* %7, align 8
	%32 = add i64 %31, %30
	store i64 %32, i64* %7
	ret void
}

define void @strconv.round_shortest(%decimal.Decimal* %d, i64 %mant, i64 %exp, %strconv.FloatInfo* %flt, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca %decimal.Decimal*, align 16
	%1 = alloca i64, align 16
	%2 = alloca i64, align 16
	%3 = alloca %strconv.FloatInfo*, align 16
	%4 = alloca i64, align 16
	%5 = alloca %decimal.Decimal, align 16
	%6 = alloca %decimal.Decimal*, align 16
	%7 = alloca i64, align 16
	%8 = alloca i64, align 16
	%9 = alloca %decimal.Decimal, align 16
	%10 = alloca %decimal.Decimal*, align 16
	%11 = alloca i8, align 16
	%12 = alloca i64, align 16
	%13 = alloca i64, align 16
	%14 = alloca i64, align 16
	%15 = alloca i8, align 16
	%16 = alloca i8, align 16
	%17 = alloca i8, align 16
	%18 = alloca i8, align 16
	%19 = alloca i8, align 16
	store %decimal.Decimal* %d, %decimal.Decimal** %0
	store i64 %mant, i64* %1
	store i64 %exp, i64* %2
	store %strconv.FloatInfo* %flt, %strconv.FloatInfo** %3
	; IfStmt
	%20 = load i64, i64* %1, align 8
	%21 = icmp eq i64 %20, 0
	%22 = zext i1 %21 to i8
	%23 = trunc i8 %22 to i1
	br i1 %23, label %if.then-1, label %if.done-2

if.then-1:
	; AssignStmt
	; SelectorExpr
	%24 = load %decimal.Decimal*, %decimal.Decimal** %0, align 8
	%25 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %24, i64 0
	%26 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %25, i64 0, i32 1
	store i64 0, i64* %26
	; ReturnStmt
	ret void

if.done-2:
	; minexp
	; SelectorExpr
	%27 = load %strconv.FloatInfo*, %strconv.FloatInfo** %3, align 8
	%28 = getelementptr inbounds %strconv.FloatInfo, %strconv.FloatInfo* %27, i64 0
	%29 = getelementptr inbounds %strconv.FloatInfo, %strconv.FloatInfo* %28, i64 0, i32 2
	%30 = load i64, i64* %29, align 8
	%31 = add i64 %30, 1
	store i64 %31, i64* %4
	; IfStmt
	%32 = load i64, i64* %2, align 8
	%33 = load i64, i64* %4, align 8
	%34 = icmp sgt i64 %32, %33
	%35 = zext i1 %34 to i8
	%36 = trunc i8 %35 to i1
	br i1 %36, label %cmp.and-3, label %if.done-5

cmp.and-3:
	; SelectorExpr
	%37 = load %decimal.Decimal*, %decimal.Decimal** %0, align 8
	%38 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %37, i64 0
	%39 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %38, i64 0, i32 2
	%40 = load i64, i64* %39, align 8
	; SelectorExpr
	%41 = load %decimal.Decimal*, %decimal.Decimal** %0, align 8
	%42 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %41, i64 0
	%43 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %42, i64 0, i32 1
	%44 = load i64, i64* %43, align 8
	%45 = sub i64 %40, %44
	%46 = mul i64 332, %45
	%47 = load i64, i64* %2, align 8
	; SelectorExpr
	%48 = load %strconv.FloatInfo*, %strconv.FloatInfo** %3, align 8
	%49 = getelementptr inbounds %strconv.FloatInfo, %strconv.FloatInfo* %48, i64 0
	%50 = getelementptr inbounds %strconv.FloatInfo, %strconv.FloatInfo* %49, i64 0, i32 0
	%51 = load i64, i64* %50, align 8
	%52 = bitcast i64 %51 to i64
	%53 = sub i64 %47, %52
	%54 = mul i64 100, %53
	%55 = icmp sge i64 %46, %54
	%56 = zext i1 %55 to i8
	%57 = trunc i8 %56 to i1
	br i1 %57, label %if.then-4, label %if.done-5

if.then-4:
	; ReturnStmt
	ret void

if.done-5:
	; upper_
	%58 = bitcast %decimal.Decimal* %5 to %..rawptr
	%59 = call %..rawptr @mem.zero(%..rawptr %58, i64 408) noinline
	store %decimal.Decimal zeroinitializer, %decimal.Decimal* %5
	; upper
	store %decimal.Decimal* %5, %decimal.Decimal** %6
	%60 = load %decimal.Decimal*, %decimal.Decimal** %6, align 8
	%61 = load i64, i64* %1, align 8
	%62 = mul i64 2, %61
	%63 = sub i64 %62, 1
	call void @decimal.assign(%decimal.Decimal* %60, i64 %63, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%64 = load %decimal.Decimal*, %decimal.Decimal** %6, align 8
	%65 = load i64, i64* %2, align 8
	; SelectorExpr
	%66 = load %strconv.FloatInfo*, %strconv.FloatInfo** %3, align 8
	%67 = getelementptr inbounds %strconv.FloatInfo, %strconv.FloatInfo* %66, i64 0
	%68 = getelementptr inbounds %strconv.FloatInfo, %strconv.FloatInfo* %67, i64 0, i32 0
	%69 = load i64, i64* %68, align 8
	%70 = bitcast i64 %69 to i64
	%71 = sub i64 %65, %70
	%72 = sub i64 %71, 1
	call void @decimal.shift(%decimal.Decimal* %64, i64 %72, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	; mantlo
	%73 = bitcast i64* %7 to %..rawptr
	%74 = call %..rawptr @mem.zero(%..rawptr %73, i64 8) noinline
	store i64 zeroinitializer, i64* %7
	; explo
	%75 = bitcast i64* %8 to %..rawptr
	%76 = call %..rawptr @mem.zero(%..rawptr %75, i64 8) noinline
	store i64 zeroinitializer, i64* %8
	; IfStmt
	%77 = load i64, i64* %1, align 8
	; SelectorExpr
	%78 = load %strconv.FloatInfo*, %strconv.FloatInfo** %3, align 8
	%79 = getelementptr inbounds %strconv.FloatInfo, %strconv.FloatInfo* %78, i64 0
	%80 = getelementptr inbounds %strconv.FloatInfo, %strconv.FloatInfo* %79, i64 0, i32 0
	%81 = load i64, i64* %80, align 8
	%82 = bitcast i64 %81 to i64
	%83 = shl i64 1, %82
	%84 = bitcast i64 %83 to i64
	%85 = icmp ugt i64 %77, %84
	%86 = zext i1 %85 to i8
	%87 = trunc i8 %86 to i1
	br i1 %87, label %if.then-7, label %cmp.or-6

cmp.or-6:
	%88 = load i64, i64* %2, align 8
	%89 = load i64, i64* %4, align 8
	%90 = icmp eq i64 %88, %89
	%91 = zext i1 %90 to i8
	%92 = trunc i8 %91 to i1
	br i1 %92, label %if.then-7, label %if.else-8

if.then-7:
	; AssignStmt
	%93 = load i64, i64* %1, align 8
	%94 = sub i64 %93, 1
	store i64 %94, i64* %7
	; AssignStmt
	%95 = load i64, i64* %2, align 8
	store i64 %95, i64* %8
	br label %if.done-9

if.else-8:
	; AssignStmt
	%96 = load i64, i64* %1, align 8
	%97 = mul i64 2, %96
	%98 = sub i64 %97, 1
	store i64 %98, i64* %7
	; AssignStmt
	%99 = load i64, i64* %2, align 8
	%100 = sub i64 %99, 1
	store i64 %100, i64* %8
	br label %if.done-9

if.done-9:
	; lower_
	%101 = bitcast %decimal.Decimal* %9 to %..rawptr
	%102 = call %..rawptr @mem.zero(%..rawptr %101, i64 408) noinline
	store %decimal.Decimal zeroinitializer, %decimal.Decimal* %9
	; lower
	store %decimal.Decimal* %9, %decimal.Decimal** %10
	%103 = load %decimal.Decimal*, %decimal.Decimal** %10, align 8
	%104 = load i64, i64* %7, align 8
	%105 = mul i64 2, %104
	%106 = add i64 %105, 1
	call void @decimal.assign(%decimal.Decimal* %103, i64 %106, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%107 = load %decimal.Decimal*, %decimal.Decimal** %10, align 8
	%108 = load i64, i64* %8, align 8
	; SelectorExpr
	%109 = load %strconv.FloatInfo*, %strconv.FloatInfo** %3, align 8
	%110 = getelementptr inbounds %strconv.FloatInfo, %strconv.FloatInfo* %109, i64 0
	%111 = getelementptr inbounds %strconv.FloatInfo, %strconv.FloatInfo* %110, i64 0, i32 0
	%112 = load i64, i64* %111, align 8
	%113 = bitcast i64 %112 to i64
	%114 = sub i64 %108, %113
	%115 = sub i64 %114, 1
	call void @decimal.shift(%decimal.Decimal* %107, i64 %115, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	; inclusive
	%116 = load i64, i64* %1, align 8
	%117 = urem i64 %116, 2
	%118 = icmp eq i64 %117, 0
	%119 = zext i1 %118 to i8
	store i8 %119, i8* %11
	; RangeStmt
	; i
	%120 = bitcast i64* %12 to %..rawptr
	%121 = call %..rawptr @mem.zero(%..rawptr %120, i64 8) noinline
	store i64 zeroinitializer, i64* %12
	%122 = bitcast i64* %13 to %..rawptr
	%123 = call %..rawptr @mem.zero(%..rawptr %122, i64 8) noinline
	store i64 zeroinitializer, i64* %13
	store i64 0, i64* %13
	%124 = bitcast i64* %14 to %..rawptr
	%125 = call %..rawptr @mem.zero(%..rawptr %124, i64 8) noinline
	store i64 zeroinitializer, i64* %14
	store i64 0, i64* %14
	br label %for.interval.loop-10

for.interval.loop-10:
	; SelectorExpr
	%126 = load %decimal.Decimal*, %decimal.Decimal** %0, align 8
	%127 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %126, i64 0
	%128 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %127, i64 0, i32 1
	%129 = load i64, i64* %128, align 8
	%130 = sub i64 %129, 1
	%131 = load i64, i64* %13, align 8
	%132 = icmp sle i64 %131, %130
	br i1 %132, label %for.interval.body-11, label %for.interval.done-34

for.interval.body-11:
	%133 = load i64, i64* %13, align 8
	%134 = load i64, i64* %14, align 8
	%135 = load i64, i64* %13, align 8
	%136 = add i64 %135, 1
	store i64 %136, i64* %13
	%137 = load i64, i64* %14, align 8
	%138 = add i64 %137, 1
	store i64 %138, i64* %14
	store i64 %133, i64* %12
	; l
	store i8 48, i8* %15
	; IfStmt
	%139 = load i64, i64* %12, align 8
	; SelectorExpr
	%140 = load %decimal.Decimal*, %decimal.Decimal** %10, align 8
	%141 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %140, i64 0
	%142 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %141, i64 0, i32 1
	%143 = load i64, i64* %142, align 8
	%144 = icmp slt i64 %139, %143
	%145 = zext i1 %144 to i8
	%146 = trunc i8 %145 to i1
	br i1 %146, label %if.then-12, label %if.done-13

if.then-12:
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%147 = load %decimal.Decimal*, %decimal.Decimal** %10, align 8
	%148 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %147, i64 0
	%149 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %148, i64 0, i32 0
	%150 = load i64, i64* %12, align 8
	%151 = trunc i64 %150 to i32
	%152 = getelementptr inbounds [384 x i8], [384 x i8]* %149, i64 0, i32 %151
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([34 x i8], [34 x i8]* @str$186, i64 0, i32 0), i64 33}, i64 405, i64 21, i64 %150, i64 384)
	%153 = load i8, i8* %152, align 1
	store i8 %153, i8* %15
	br label %if.done-13

if.done-13:
	; m
	; IndexExpr
	; SelectorExpr
	%154 = load %decimal.Decimal*, %decimal.Decimal** %0, align 8
	%155 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %154, i64 0
	%156 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %155, i64 0, i32 0
	%157 = load i64, i64* %12, align 8
	%158 = trunc i64 %157 to i32
	%159 = getelementptr inbounds [384 x i8], [384 x i8]* %156, i64 0, i32 %158
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([34 x i8], [34 x i8]* @str$187, i64 0, i32 0), i64 33}, i64 407, i64 17, i64 %157, i64 384)
	%160 = load i8, i8* %159, align 1
	store i8 %160, i8* %16
	; u
	store i8 48, i8* %17
	; IfStmt
	%161 = load i64, i64* %12, align 8
	; SelectorExpr
	%162 = load %decimal.Decimal*, %decimal.Decimal** %6, align 8
	%163 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %162, i64 0
	%164 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %163, i64 0, i32 1
	%165 = load i64, i64* %164, align 8
	%166 = icmp slt i64 %161, %165
	%167 = zext i1 %166 to i8
	%168 = trunc i8 %167 to i1
	br i1 %168, label %if.then-14, label %if.done-15

if.then-14:
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%169 = load %decimal.Decimal*, %decimal.Decimal** %6, align 8
	%170 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %169, i64 0
	%171 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %170, i64 0, i32 0
	%172 = load i64, i64* %12, align 8
	%173 = trunc i64 %172 to i32
	%174 = getelementptr inbounds [384 x i8], [384 x i8]* %171, i64 0, i32 %173
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([34 x i8], [34 x i8]* @str$188, i64 0, i32 0), i64 33}, i64 410, i64 21, i64 %172, i64 384)
	%175 = load i8, i8* %174, align 1
	store i8 %175, i8* %17
	br label %if.done-15

if.done-15:
	; ok_round_down
	%176 = load i8, i8* %15, align 1
	%177 = load i8, i8* %16, align 1
	%178 = icmp ne i8 %176, %177
	%179 = zext i1 %178 to i8
	%180 = load i8, i8* %15, align 1
	%181 = load i8, i8* %16, align 1
	%182 = icmp ne i8 %180, %181
	%183 = zext i1 %182 to i8
	%184 = trunc i8 %183 to i1
	br i1 %184, label %logical.cmp.done-19, label %logical.cmp.rhs-16

logical.cmp.rhs-16:
	%185 = load i8, i8* %11, align 1
	%186 = load i8, i8* %11, align 1
	%187 = trunc i8 %186 to i1
	br i1 %187, label %logical.cmp.rhs-17, label %logical.cmp.done-18

logical.cmp.rhs-17:
	%188 = load i64, i64* %12, align 8
	%189 = add i64 %188, 1
	; SelectorExpr
	%190 = load %decimal.Decimal*, %decimal.Decimal** %10, align 8
	%191 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %190, i64 0
	%192 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %191, i64 0, i32 1
	%193 = load i64, i64* %192, align 8
	%194 = icmp eq i64 %189, %193
	%195 = zext i1 %194 to i8
	br label %logical.cmp.done-18

logical.cmp.done-18:
	%196 = phi i8 [ 0, %logical.cmp.rhs-16 ], [ %195, %logical.cmp.rhs-17 ]
	br label %logical.cmp.done-19

logical.cmp.done-19:
	%197 = phi i8 [ 1, %if.done-15 ], [ %196, %logical.cmp.done-18 ]
	store i8 %197, i8* %18
	; ok_round_up
	%198 = load i8, i8* %16, align 1
	%199 = load i8, i8* %17, align 1
	%200 = icmp ne i8 %198, %199
	%201 = zext i1 %200 to i8
	%202 = load i8, i8* %16, align 1
	%203 = load i8, i8* %17, align 1
	%204 = icmp ne i8 %202, %203
	%205 = zext i1 %204 to i8
	%206 = trunc i8 %205 to i1
	br i1 %206, label %logical.cmp.rhs-20, label %logical.cmp.done-26

logical.cmp.rhs-20:
	%207 = load i8, i8* %11, align 1
	%208 = load i8, i8* %11, align 1
	%209 = trunc i8 %208 to i1
	br i1 %209, label %logical.cmp.done-22, label %logical.cmp.rhs-21

logical.cmp.rhs-21:
	%210 = load i8, i8* %16, align 1
	%211 = add i8 %210, 1
	%212 = load i8, i8* %17, align 1
	%213 = icmp ult i8 %211, %212
	%214 = zext i1 %213 to i8
	br label %logical.cmp.done-22

logical.cmp.done-22:
	%215 = phi i8 [ 1, %logical.cmp.rhs-20 ], [ %214, %logical.cmp.rhs-21 ]
	%216 = load i8, i8* %11, align 1
	%217 = trunc i8 %216 to i1
	br i1 %217, label %logical.cmp.done-25, label %cmp.or-23

cmp.or-23:
	%218 = load i8, i8* %16, align 1
	%219 = add i8 %218, 1
	%220 = load i8, i8* %17, align 1
	%221 = icmp ult i8 %219, %220
	%222 = zext i1 %221 to i8
	%223 = trunc i8 %222 to i1
	br i1 %223, label %logical.cmp.done-25, label %logical.cmp.rhs-24

logical.cmp.rhs-24:
	%224 = load i64, i64* %12, align 8
	%225 = add i64 %224, 1
	; SelectorExpr
	%226 = load %decimal.Decimal*, %decimal.Decimal** %6, align 8
	%227 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %226, i64 0
	%228 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %227, i64 0, i32 1
	%229 = load i64, i64* %228, align 8
	%230 = icmp slt i64 %225, %229
	%231 = zext i1 %230 to i8
	br label %logical.cmp.done-25

logical.cmp.done-25:
	%232 = phi i8 [ 1, %logical.cmp.done-22 ], [ 1, %cmp.or-23 ], [ %231, %logical.cmp.rhs-24 ]
	br label %logical.cmp.done-26

logical.cmp.done-26:
	%233 = phi i8 [ 0, %logical.cmp.done-19 ], [ %232, %logical.cmp.done-25 ]
	store i8 %233, i8* %19
	; IfStmt
	%234 = load i8, i8* %18, align 1
	%235 = trunc i8 %234 to i1
	br i1 %235, label %cmp.and-27, label %if.done-29

cmp.and-27:
	%236 = load i8, i8* %19, align 1
	%237 = trunc i8 %236 to i1
	br i1 %237, label %if.then-28, label %if.done-29

if.then-28:
	%238 = load %decimal.Decimal*, %decimal.Decimal** %0, align 8
	%239 = load i64, i64* %12, align 8
	%240 = add i64 %239, 1
	call void @decimal.round(%decimal.Decimal* %238, i64 %240, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	; ReturnStmt
	ret void

if.done-29:
	; IfStmt
	%241 = load i8, i8* %18, align 1
	%242 = trunc i8 %241 to i1
	br i1 %242, label %if.then-30, label %if.done-31

if.then-30:
	%243 = load %decimal.Decimal*, %decimal.Decimal** %0, align 8
	%244 = load i64, i64* %12, align 8
	%245 = add i64 %244, 1
	call void @decimal.round_down(%decimal.Decimal* %243, i64 %245, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	; ReturnStmt
	ret void

if.done-31:
	; IfStmt
	%246 = load i8, i8* %19, align 1
	%247 = trunc i8 %246 to i1
	br i1 %247, label %if.then-32, label %if.done-33

if.then-32:
	%248 = load %decimal.Decimal*, %decimal.Decimal** %0, align 8
	%249 = load i64, i64* %12, align 8
	%250 = add i64 %249, 1
	call void @decimal.round_up(%decimal.Decimal* %248, i64 %250, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	; ReturnStmt
	ret void

if.done-33:
	br label %for.interval.loop-10

for.interval.done-34:
	ret void
}

define {i64, i8} @strconv.is_integer_negative(i64 %u, i1 %is_signed, i64 %bit_size, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca i64, align 16
	%1 = alloca i8, align 16
	%2 = alloca i64, align 16
	%3 = alloca i64, align 16
	%4 = alloca i8, align 16
	%5 = alloca i8, align 16
	%6 = alloca i16, align 16
	%7 = alloca i32, align 16
	%8 = alloca i64, align 16
	%9 = alloca %runtime.Source_Code_Location, align 16
	%10 = alloca {i64, i8}, align 16
	store i64 %u, i64* %0
	%11 = zext i1 %is_signed to i8
	store i8 %11, i8* %1
	store i64 %bit_size, i64* %2
	%12 = bitcast i64* %3 to %..rawptr
	%13 = call %..rawptr @mem.zero(%..rawptr %12, i64 8) noinline
	store i64 zeroinitializer, i64* %3
	%14 = bitcast i8* %4 to %..rawptr
	%15 = call %..rawptr @mem.zero(%..rawptr %14, i64 1) noinline
	store i8 zeroinitializer, i8* %4
	; IfStmt
	%16 = load i8, i8* %1, align 1
	%17 = trunc i8 %16 to i1
	br i1 %17, label %if.then-1, label %if.done-11

if.then-1:
	; SwitchStmt
	%18 = load i64, i64* %2, align 8
	%19 = icmp eq i64 %18, 8
	br i1 %19, label %switch.case.body-3, label %switch.case.next-2

switch.case.next-2:
	%20 = icmp eq i64 %18, 16
	br i1 %20, label %switch.fall.body-5, label %switch.case.next-4

switch.case.body-3:
	; i
	%21 = load i64, i64* %0, align 8
	%22 = trunc i64 %21 to i8
	store i8 %22, i8* %5
	; AssignStmt
	%23 = load i8, i8* %5, align 1
	%24 = icmp slt i8 %23, 0
	%25 = zext i1 %24 to i8
	store i8 %25, i8* %4
	; AssignStmt
	%26 = load i8, i8* %5, align 1
	%27 = sext i8 %26 to i64
	; abs
	%28 = icmp slt i64 %27, 0
	%29 = sub i64 0, %27
	%30 = select i1 %28, i64 %29, i64 %27
	%31 = bitcast i64 %30 to i64
	store i64 %31, i64* %0
	br label %switch.done-10

switch.case.next-4:
	%32 = icmp eq i64 %18, 32
	br i1 %32, label %switch.fall.body-7, label %switch.case.next-6

switch.fall.body-5:
	; i
	%33 = load i64, i64* %0, align 8
	%34 = trunc i64 %33 to i16
	store i16 %34, i16* %6
	; AssignStmt
	%35 = load i16, i16* %6, align 2
	%36 = icmp slt i16 %35, 0
	%37 = zext i1 %36 to i8
	store i8 %37, i8* %4
	; AssignStmt
	%38 = load i16, i16* %6, align 2
	%39 = sext i16 %38 to i64
	; abs
	%40 = icmp slt i64 %39, 0
	%41 = sub i64 0, %39
	%42 = select i1 %40, i64 %41, i64 %39
	%43 = bitcast i64 %42 to i64
	store i64 %43, i64* %0
	br label %switch.done-10

switch.case.next-6:
	%44 = icmp eq i64 %18, 64
	br i1 %44, label %switch.fall.body-9, label %switch.case.next-8

switch.fall.body-7:
	; i
	%45 = load i64, i64* %0, align 8
	%46 = trunc i64 %45 to i32
	store i32 %46, i32* %7
	; AssignStmt
	%47 = load i32, i32* %7, align 4
	%48 = icmp slt i32 %47, 0
	%49 = zext i1 %48 to i8
	store i8 %49, i8* %4
	; AssignStmt
	%50 = load i32, i32* %7, align 4
	%51 = sext i32 %50 to i64
	; abs
	%52 = icmp slt i64 %51, 0
	%53 = sub i64 0, %51
	%54 = select i1 %52, i64 %53, i64 %51
	%55 = bitcast i64 %54 to i64
	store i64 %55, i64* %0
	br label %switch.done-10

switch.case.next-8:
	%56 = bitcast %runtime.Source_Code_Location* %9 to %..rawptr
	%57 = call %..rawptr @mem.zero(%..rawptr %56, i64 48) noinline
	store %runtime.Source_Code_Location zeroinitializer, %runtime.Source_Code_Location* %9
	store %runtime.Source_Code_Location {%..string {i8* getelementptr inbounds ([34 x i8], [34 x i8]* @str$189, i64 0, i32 0), i64 33}, i64 456, i64 4, %..string {i8* getelementptr inbounds ([20 x i8], [20 x i8]* @str$18a, i64 0, i32 0), i64 19}}, %runtime.Source_Code_Location* %9
	call void @runtime.panic(%..string {i8* getelementptr inbounds ([42 x i8], [42 x i8]* @str$18b, i64 0, i32 0), i64 41}, %runtime.Source_Code_Location* %9) noreturn
	br label %switch.done-10

switch.fall.body-9:
	; i
	%58 = load i64, i64* %0, align 8
	%59 = bitcast i64 %58 to i64
	store i64 %59, i64* %8
	; AssignStmt
	%60 = load i64, i64* %8, align 8
	%61 = icmp slt i64 %60, 0
	%62 = zext i1 %61 to i8
	store i8 %62, i8* %4
	; AssignStmt
	%63 = load i64, i64* %8, align 8
	; abs
	%64 = icmp slt i64 %63, 0
	%65 = sub i64 0, %63
	%66 = select i1 %64, i64 %65, i64 %63
	%67 = bitcast i64 %66 to i64
	store i64 %67, i64* %0
	br label %switch.done-10

switch.done-10:
	br label %if.done-11

if.done-11:
	; ReturnStmt
	%68 = load i64, i64* %0, align 8
	%69 = load i8, i8* %4, align 1
	%70 = bitcast {i64, i8}* %10 to %..rawptr
	%71 = call %..rawptr @mem.zero(%..rawptr %70, i64 16) noinline
	store {i64, i8} zeroinitializer, {i64, i8}* %10
	%72 = getelementptr inbounds {i64, i8}, {i64, i8}* %10, i64 0, i32 0
	store i64 %68, i64* %72
	%73 = getelementptr inbounds {i64, i8}, {i64, i8}* %10, i64 0, i32 1
	store i8 %69, i8* %73
	%74 = load {i64, i8}, {i64, i8}* %10, align 8
	ret {i64, i8} %74
}

define %..string @strconv.append_bits({i8*, i64}* %buf, i64 %u, i64 %base, i1 %is_signed, i64 %bit_size, %..string %digits, i8 %flags, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca i64, align 16
	%1 = alloca i64, align 16
	%2 = alloca i8, align 16
	%3 = alloca i64, align 16
	%4 = alloca %..string, align 16
	%5 = alloca i8, align 16
	%6 = alloca %runtime.Source_Code_Location, align 16
	%7 = alloca i8, align 16
	%8 = alloca [129 x i8], align 16
	%9 = alloca i64, align 16
	%10 = alloca i64, align 16
	%11 = alloca i8, align 16
	%12 = alloca {i8*, i64}, align 16
	%13 = alloca {i8*, i64}, align 16
	%14 = alloca {i8*, i64}, align 16
	%15 = alloca {i8*, i64}, align 16
	%16 = alloca {i8*, i64}, align 16
	%17 = alloca %..string, align 16
	%18 = load {i8*, i64}, {i8*, i64}* %buf, align 8
	store i64 %u, i64* %0
	store i64 %base, i64* %1
	%19 = zext i1 %is_signed to i8
	store i8 %19, i8* %2
	store i64 %bit_size, i64* %3
	store %..string %digits, %..string* %4
	store i8 %flags, i8* %5
	; IfStmt
	%20 = load i64, i64* %1, align 8
	%21 = icmp slt i64 %20, 2
	%22 = zext i1 %21 to i8
	%23 = trunc i8 %22 to i1
	br i1 %23, label %if.then-2, label %cmp.or-1

cmp.or-1:
	%24 = load i64, i64* %1, align 8
	%25 = icmp sgt i64 %24, 32
	%26 = zext i1 %25 to i8
	%27 = trunc i8 %26 to i1
	br i1 %27, label %if.then-2, label %if.done-3

if.then-2:
	%28 = bitcast %runtime.Source_Code_Location* %6 to %..rawptr
	%29 = call %..rawptr @mem.zero(%..rawptr %28, i64 48) noinline
	store %runtime.Source_Code_Location zeroinitializer, %runtime.Source_Code_Location* %6
	store %runtime.Source_Code_Location {%..string {i8* getelementptr inbounds ([34 x i8], [34 x i8]* @str$18c, i64 0, i32 0), i64 33}, i64 464, i64 3, %..string {i8* getelementptr inbounds ([12 x i8], [12 x i8]* @str$18d, i64 0, i32 0), i64 11}}, %runtime.Source_Code_Location* %6
	call void @runtime.panic(%..string {i8* getelementptr inbounds ([44 x i8], [44 x i8]* @str$18e, i64 0, i32 0), i64 43}, %runtime.Source_Code_Location* %6) noreturn
	br label %if.done-3

if.done-3:
	; neg
	%30 = bitcast i8* %7 to %..rawptr
	%31 = call %..rawptr @mem.zero(%..rawptr %30, i64 1) noinline
	store i8 zeroinitializer, i8* %7
	; a
	%32 = bitcast [129 x i8]* %8 to %..rawptr
	%33 = call %..rawptr @mem.zero(%..rawptr %32, i64 129) noinline
	store [129 x i8] zeroinitializer, [129 x i8]* %8
	; i
	store i64 129, i64* %9
	; AssignStmt
	%34 = load i64, i64* %0, align 8
	%35 = load i8, i8* %2, align 1
	%36 = load i64, i64* %3, align 8
	%37 = trunc i8 %35 to i1
	%38 = call {i64, i8} @strconv.is_integer_negative(i64 %34, i1 %37, i64 %36, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%39 = extractvalue {i64, i8} %38, 0
	%40 = extractvalue {i64, i8} %38, 1
	store i64 %39, i64* %0
	store i8 %40, i8* %7
	; b
	%41 = load i64, i64* %1, align 8
	%42 = bitcast i64 %41 to i64
	store i64 %42, i64* %10
	; ForStmt
	br label %for.loop-4

for.loop-4:
	%43 = load i64, i64* %0, align 8
	%44 = load i64, i64* %10, align 8
	%45 = icmp uge i64 %43, %44
	%46 = zext i1 %45 to i8
	%47 = trunc i8 %46 to i1
	br i1 %47, label %for.body-5, label %for.done-6

for.body-5:
	; AssignStmt
	%48 = load i64, i64* %9, align 8
	%49 = sub i64 %48, 1
	store i64 %49, i64* %9
	; AssignStmt
	; IndexExpr
	%50 = load i64, i64* %9, align 8
	%51 = trunc i64 %50 to i32
	%52 = getelementptr inbounds [129 x i8], [129 x i8]* %8, i64 0, i32 %51
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([34 x i8], [34 x i8]* @str$18f, i64 0, i32 0), i64 33}, i64 473, i64 11, i64 %50, i64 129)
	; IndexExpr
	%53 = load %..string, %..string* %4, align 8
	%54 = extractvalue %..string %53, 0
	%55 = extractvalue %..string %53, 1
	%56 = load i64, i64* %0, align 8
	%57 = load i64, i64* %10, align 8
	%58 = urem i64 %56, %57
	%59 = bitcast i64 %58 to i64
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([34 x i8], [34 x i8]* @str$190, i64 0, i32 0), i64 33}, i64 473, i64 23, i64 %59, i64 %55)
	%60 = getelementptr inbounds i8, i8* %54, i64 %59
	%61 = load i8, i8* %60, align 1
	store i8 %61, i8* %52
	; AssignStmt
	%62 = load i64, i64* %10, align 8
	%63 = load i64, i64* %0, align 8
	%64 = udiv i64 %63, %62
	store i64 %64, i64* %0
	br label %for.loop-4

for.done-6:
	; AssignStmt
	%65 = load i64, i64* %9, align 8
	%66 = sub i64 %65, 1
	store i64 %66, i64* %9
	; AssignStmt
	; IndexExpr
	%67 = load i64, i64* %9, align 8
	%68 = trunc i64 %67 to i32
	%69 = getelementptr inbounds [129 x i8], [129 x i8]* %8, i64 0, i32 %68
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([34 x i8], [34 x i8]* @str$191, i64 0, i32 0), i64 33}, i64 476, i64 10, i64 %67, i64 129)
	; IndexExpr
	%70 = load %..string, %..string* %4, align 8
	%71 = extractvalue %..string %70, 0
	%72 = extractvalue %..string %70, 1
	%73 = load i64, i64* %0, align 8
	%74 = load i64, i64* %10, align 8
	%75 = urem i64 %73, %74
	%76 = bitcast i64 %75 to i64
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([34 x i8], [34 x i8]* @str$192, i64 0, i32 0), i64 33}, i64 476, i64 22, i64 %76, i64 %72)
	%77 = getelementptr inbounds i8, i8* %71, i64 %76
	%78 = load i8, i8* %77, align 1
	store i8 %78, i8* %69
	; IfStmt
	%79 = load i8, i8* %5, align 1
	; bit_set in
	%80 = sub i64 0, 0
	%81 = shl i64 1, %80
	%82 = trunc i64 %81 to i8
	%83 = bitcast i8 %79 to i8
	%84 = and i8 %83, %82
	%85 = icmp ne i8 %84, 0
	%86 = zext i1 %85 to i8
	%87 = trunc i8 %86 to i1
	br i1 %87, label %if.then-7, label %if.done-21

if.then-7:
	; ok
	store i8 1, i8* %11
	; SwitchStmt
	%88 = load i64, i64* %1, align 8
	%89 = icmp eq i64 %88, 2
	br i1 %89, label %switch.case.body-9, label %switch.case.next-8

switch.case.next-8:
	%90 = icmp eq i64 %88, 8
	br i1 %90, label %switch.fall.body-11, label %switch.case.next-10

switch.case.body-9:
	; AssignStmt
	%91 = load i64, i64* %9, align 8
	%92 = sub i64 %91, 1
	store i64 %92, i64* %9
	; AssignStmt
	; IndexExpr
	%93 = load i64, i64* %9, align 8
	%94 = trunc i64 %93 to i32
	%95 = getelementptr inbounds [129 x i8], [129 x i8]* %8, i64 0, i32 %94
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([34 x i8], [34 x i8]* @str$193, i64 0, i32 0), i64 33}, i64 481, i64 20, i64 %93, i64 129)
	store i8 98, i8* %95
	br label %switch.done-18

switch.case.next-10:
	%96 = icmp eq i64 %88, 10
	br i1 %96, label %switch.fall.body-13, label %switch.case.next-12

switch.fall.body-11:
	; AssignStmt
	%97 = load i64, i64* %9, align 8
	%98 = sub i64 %97, 1
	store i64 %98, i64* %9
	; AssignStmt
	; IndexExpr
	%99 = load i64, i64* %9, align 8
	%100 = trunc i64 %99 to i32
	%101 = getelementptr inbounds [129 x i8], [129 x i8]* %8, i64 0, i32 %100
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([34 x i8], [34 x i8]* @str$194, i64 0, i32 0), i64 33}, i64 482, i64 20, i64 %99, i64 129)
	store i8 111, i8* %101
	br label %switch.done-18

switch.case.next-12:
	%102 = icmp eq i64 %88, 12
	br i1 %102, label %switch.fall.body-15, label %switch.case.next-14

switch.fall.body-13:
	; AssignStmt
	%103 = load i64, i64* %9, align 8
	%104 = sub i64 %103, 1
	store i64 %104, i64* %9
	; AssignStmt
	; IndexExpr
	%105 = load i64, i64* %9, align 8
	%106 = trunc i64 %105 to i32
	%107 = getelementptr inbounds [129 x i8], [129 x i8]* %8, i64 0, i32 %106
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([34 x i8], [34 x i8]* @str$195, i64 0, i32 0), i64 33}, i64 483, i64 20, i64 %105, i64 129)
	store i8 100, i8* %107
	br label %switch.done-18

switch.case.next-14:
	%108 = icmp eq i64 %88, 16
	br i1 %108, label %switch.fall.body-17, label %switch.case.next-16

switch.fall.body-15:
	; AssignStmt
	%109 = load i64, i64* %9, align 8
	%110 = sub i64 %109, 1
	store i64 %110, i64* %9
	; AssignStmt
	; IndexExpr
	%111 = load i64, i64* %9, align 8
	%112 = trunc i64 %111 to i32
	%113 = getelementptr inbounds [129 x i8], [129 x i8]* %8, i64 0, i32 %112
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([34 x i8], [34 x i8]* @str$196, i64 0, i32 0), i64 33}, i64 484, i64 20, i64 %111, i64 129)
	store i8 122, i8* %113
	br label %switch.done-18

switch.case.next-16:
	; AssignStmt
	store i8 0, i8* %11
	br label %switch.done-18

switch.fall.body-17:
	; AssignStmt
	%114 = load i64, i64* %9, align 8
	%115 = sub i64 %114, 1
	store i64 %115, i64* %9
	; AssignStmt
	; IndexExpr
	%116 = load i64, i64* %9, align 8
	%117 = trunc i64 %116 to i32
	%118 = getelementptr inbounds [129 x i8], [129 x i8]* %8, i64 0, i32 %117
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([34 x i8], [34 x i8]* @str$197, i64 0, i32 0), i64 33}, i64 485, i64 20, i64 %116, i64 129)
	store i8 120, i8* %118
	br label %switch.done-18

switch.done-18:
	; IfStmt
	%119 = load i8, i8* %11, align 1
	%120 = trunc i8 %119 to i1
	br i1 %120, label %if.then-19, label %if.done-20

if.then-19:
	; AssignStmt
	%121 = load i64, i64* %9, align 8
	%122 = sub i64 %121, 1
	store i64 %122, i64* %9
	; AssignStmt
	; IndexExpr
	%123 = load i64, i64* %9, align 8
	%124 = trunc i64 %123 to i32
	%125 = getelementptr inbounds [129 x i8], [129 x i8]* %8, i64 0, i32 %124
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([34 x i8], [34 x i8]* @str$198, i64 0, i32 0), i64 33}, i64 489, i64 12, i64 %123, i64 129)
	store i8 48, i8* %125
	br label %if.done-20

if.done-20:
	br label %if.done-21

if.done-21:
	; SwitchStmt
	%126 = load i8, i8* %7, align 1
	%127 = icmp eq i8 1, %126
	br i1 %127, label %switch.case.body-23, label %switch.case.next-22

switch.case.next-22:
	%128 = load i8, i8* %5, align 1
	; bit_set in
	%129 = sub i64 1, 0
	%130 = shl i64 1, %129
	%131 = trunc i64 %130 to i8
	%132 = bitcast i8 %128 to i8
	%133 = and i8 %132, %131
	%134 = icmp ne i8 %133, 0
	%135 = zext i1 %134 to i8
	%136 = icmp eq i8 1, %135
	br i1 %136, label %switch.fall.body-25, label %switch.case.next-24

switch.case.body-23:
	; AssignStmt
	%137 = load i64, i64* %9, align 8
	%138 = sub i64 %137, 1
	store i64 %138, i64* %9
	; AssignStmt
	; IndexExpr
	%139 = load i64, i64* %9, align 8
	%140 = trunc i64 %139 to i32
	%141 = getelementptr inbounds [129 x i8], [129 x i8]* %8, i64 0, i32 %140
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([34 x i8], [34 x i8]* @str$199, i64 0, i32 0), i64 33}, i64 495, i64 11, i64 %139, i64 129)
	store i8 45, i8* %141
	br label %switch.done-28

switch.case.next-24:
	%142 = load i8, i8* %5, align 1
	; bit_set in
	%143 = sub i64 2, 0
	%144 = shl i64 1, %143
	%145 = trunc i64 %144 to i8
	%146 = bitcast i8 %142 to i8
	%147 = and i8 %146, %145
	%148 = icmp ne i8 %147, 0
	%149 = zext i1 %148 to i8
	%150 = icmp eq i8 1, %149
	br i1 %150, label %switch.fall.body-27, label %switch.case.next-26

switch.fall.body-25:
	; AssignStmt
	%151 = load i64, i64* %9, align 8
	%152 = sub i64 %151, 1
	store i64 %152, i64* %9
	; AssignStmt
	; IndexExpr
	%153 = load i64, i64* %9, align 8
	%154 = trunc i64 %153 to i32
	%155 = getelementptr inbounds [129 x i8], [129 x i8]* %8, i64 0, i32 %154
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([34 x i8], [34 x i8]* @str$19a, i64 0, i32 0), i64 33}, i64 497, i64 11, i64 %153, i64 129)
	store i8 43, i8* %155
	br label %switch.done-28

switch.case.next-26:
	br label %switch.done-28

switch.fall.body-27:
	; AssignStmt
	%156 = load i64, i64* %9, align 8
	%157 = sub i64 %156, 1
	store i64 %157, i64* %9
	; AssignStmt
	; IndexExpr
	%158 = load i64, i64* %9, align 8
	%159 = trunc i64 %158 to i32
	%160 = getelementptr inbounds [129 x i8], [129 x i8]* %8, i64 0, i32 %159
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([34 x i8], [34 x i8]* @str$19b, i64 0, i32 0), i64 33}, i64 499, i64 11, i64 %158, i64 129)
	store i8 32, i8* %160
	br label %switch.done-28

switch.done-28:
	; out
	; SliceExpr
	%161 = load i64, i64* %9, align 8
	%162 = load [129 x i8], [129 x i8]* %8, align 1
	call void @runtime.slice_expr_error(%..string {i8* getelementptr inbounds ([34 x i8], [34 x i8]* @str$19c, i64 0, i32 0), i64 33}, i64 502, i64 10, i64 %161, i64 129, i64 129)
	%163 = getelementptr inbounds [129 x i8], [129 x i8]* %8, i64 0, i32 0
	%164 = getelementptr inbounds i8, i8* %163, i64 %161
	%165 = sub i64 129, %161
	%166 = bitcast {i8*, i64}* %13 to %..rawptr
	%167 = call %..rawptr @mem.zero(%..rawptr %166, i64 16) noinline
	store {i8*, i64} zeroinitializer, {i8*, i64}* %13
	%168 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %13, i64 0, i32 0
	store i8* %164, i8** %168
	%169 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %13, i64 0, i32 1
	store i64 %165, i64* %169
	%170 = load {i8*, i64}, {i8*, i64}* %13, align 8
	store {i8*, i64} %170, {i8*, i64}* %12
	%171 = load {i8*, i64}, {i8*, i64}* %buf, align 8
	%172 = load {i8*, i64}, {i8*, i64}* %12, align 8
	%173 = bitcast {i8*, i64}* %14 to %..rawptr
	%174 = call %..rawptr @mem.zero(%..rawptr %173, i64 16) noinline
	store {i8*, i64} zeroinitializer, {i8*, i64}* %14
	store {i8*, i64} %171, {i8*, i64}* %14
	%175 = bitcast {i8*, i64}* %15 to %..rawptr
	%176 = call %..rawptr @mem.zero(%..rawptr %175, i64 16) noinline
	store {i8*, i64} zeroinitializer, {i8*, i64}* %15
	store {i8*, i64} %172, {i8*, i64}* %15
	%177 = call i64 @runtime.copy-6386({i8*, i64}* %14, {i8*, i64}* %15)
	; ReturnStmt
	; SliceExpr
	%178 = load {i8*, i64}, {i8*, i64}* %12, align 8
	%179 = extractvalue {i8*, i64} %178, 1
	%180 = load {i8*, i64}, {i8*, i64}* %buf, align 8
	%181 = extractvalue {i8*, i64} %180, 1
	call void @runtime.slice_expr_error(%..string {i8* getelementptr inbounds ([34 x i8], [34 x i8]* @str$19d, i64 0, i32 0), i64 33}, i64 504, i64 19, i64 0, i64 %179, i64 %181)
	%182 = extractvalue {i8*, i64} %180, 0
	%183 = getelementptr inbounds i8, i8* %182, i64 0
	%184 = sub i64 %179, 0
	%185 = bitcast {i8*, i64}* %16 to %..rawptr
	%186 = call %..rawptr @mem.zero(%..rawptr %185, i64 16) noinline
	store {i8*, i64} zeroinitializer, {i8*, i64}* %16
	%187 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %16, i64 0, i32 0
	store i8* %183, i8** %187
	%188 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %16, i64 0, i32 1
	store i64 %184, i64* %188
	%189 = load {i8*, i64}, {i8*, i64}* %16, align 8
	%190 = extractvalue {i8*, i64} %189, 0
	%191 = extractvalue {i8*, i64} %189, 1
	%192 = bitcast %..string* %17 to %..rawptr
	%193 = call %..rawptr @mem.zero(%..rawptr %192, i64 16) noinline
	store %..string zeroinitializer, %..string* %17
	%194 = getelementptr inbounds %..string, %..string* %17, i64 0, i32 0
	store i8* %190, i8** %194
	%195 = getelementptr inbounds %..string, %..string* %17, i64 0, i32 1
	store i64 %191, i64* %195
	%196 = load %..string, %..string* %17, align 8
	ret %..string %196
}

define void @decimal.trim(%decimal.Decimal* %a, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca %decimal.Decimal*, align 16
	store %decimal.Decimal* %a, %decimal.Decimal** %0
	; ForStmt
	br label %for.loop-1

for.loop-1:
	; SelectorExpr
	%1 = load %decimal.Decimal*, %decimal.Decimal** %0, align 8
	%2 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %1, i64 0
	%3 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %2, i64 0, i32 1
	%4 = load i64, i64* %3, align 8
	%5 = icmp sgt i64 %4, 0
	%6 = zext i1 %5 to i8
	%7 = trunc i8 %6 to i1
	br i1 %7, label %cmp.and-2, label %for.done-4

cmp.and-2:
	; IndexExpr
	; SelectorExpr
	%8 = load %decimal.Decimal*, %decimal.Decimal** %0, align 8
	%9 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %8, i64 0
	%10 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %9, i64 0, i32 0
	; SelectorExpr
	%11 = load %decimal.Decimal*, %decimal.Decimal** %0, align 8
	%12 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %11, i64 0
	%13 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %12, i64 0, i32 1
	%14 = load i64, i64* %13, align 8
	%15 = sub i64 %14, 1
	%16 = trunc i64 %15 to i32
	%17 = getelementptr inbounds [384 x i8], [384 x i8]* %10, i64 0, i32 %16
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([34 x i8], [34 x i8]* @str$19e, i64 0, i32 0), i64 33}, i64 50, i64 32, i64 %15, i64 384)
	%18 = load i8, i8* %17, align 1
	%19 = icmp eq i8 %18, 48
	%20 = zext i1 %19 to i8
	%21 = trunc i8 %20 to i1
	br i1 %21, label %for.body-3, label %for.done-4

for.body-3:
	; AssignStmt
	; SelectorExpr
	%22 = load %decimal.Decimal*, %decimal.Decimal** %0, align 8
	%23 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %22, i64 0
	%24 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %23, i64 0, i32 1
	%25 = load i64, i64* %24, align 8
	%26 = sub i64 %25, 1
	store i64 %26, i64* %24
	br label %for.loop-1

for.done-4:
	; IfStmt
	; SelectorExpr
	%27 = load %decimal.Decimal*, %decimal.Decimal** %0, align 8
	%28 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %27, i64 0
	%29 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %28, i64 0, i32 1
	%30 = load i64, i64* %29, align 8
	%31 = icmp eq i64 %30, 0
	%32 = zext i1 %31 to i8
	%33 = trunc i8 %32 to i1
	br i1 %33, label %if.then-5, label %if.done-6

if.then-5:
	; AssignStmt
	; SelectorExpr
	%34 = load %decimal.Decimal*, %decimal.Decimal** %0, align 8
	%35 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %34, i64 0
	%36 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %35, i64 0, i32 2
	store i64 0, i64* %36
	br label %if.done-6

if.done-6:
	ret void
}

define void @decimal.assign(%decimal.Decimal* %a, i64 %i, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca %decimal.Decimal*, align 16
	%1 = alloca i64, align 16
	%2 = alloca [64 x i8], align 16
	%3 = alloca i64, align 16
	%4 = alloca i64, align 16
	store %decimal.Decimal* %a, %decimal.Decimal** %0
	store i64 %i, i64* %1
	; buf
	%5 = bitcast [64 x i8]* %2 to %..rawptr
	%6 = call %..rawptr @mem.zero(%..rawptr %5, i64 64) noinline
	store [64 x i8] zeroinitializer, [64 x i8]* %2
	; n
	store i64 0, i64* %3
	; ForStmt
	br label %for.loop-1

for.loop-1:
	%7 = load i64, i64* %1, align 8
	%8 = icmp ugt i64 %7, 0
	%9 = zext i1 %8 to i8
	%10 = trunc i8 %9 to i1
	br i1 %10, label %for.body-2, label %for.done-3

for.body-2:
	; j
	%11 = load i64, i64* %1, align 8
	%12 = udiv i64 %11, 10
	store i64 %12, i64* %4
	; AssignStmt
	%13 = load i64, i64* %4, align 8
	%14 = mul i64 10, %13
	%15 = load i64, i64* %1, align 8
	%16 = sub i64 %15, %14
	store i64 %16, i64* %1
	; AssignStmt
	; IndexExpr
	%17 = load i64, i64* %3, align 8
	%18 = trunc i64 %17 to i32
	%19 = getelementptr inbounds [64 x i8], [64 x i8]* %2, i64 0, i32 %18
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([34 x i8], [34 x i8]* @str$19f, i64 0, i32 0), i64 33}, i64 65, i64 7, i64 %17, i64 64)
	%20 = load i64, i64* %1, align 8
	%21 = add i64 48, %20
	%22 = trunc i64 %21 to i8
	store i8 %22, i8* %19
	; AssignStmt
	%23 = load i64, i64* %3, align 8
	%24 = add i64 %23, 1
	store i64 %24, i64* %3
	; AssignStmt
	%25 = load i64, i64* %4, align 8
	store i64 %25, i64* %1
	br label %for.loop-1

for.done-3:
	; AssignStmt
	; SelectorExpr
	%26 = load %decimal.Decimal*, %decimal.Decimal** %0, align 8
	%27 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %26, i64 0
	%28 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %27, i64 0, i32 1
	store i64 0, i64* %28
	; ForStmt
	; AssignStmt
	%29 = load i64, i64* %3, align 8
	%30 = sub i64 %29, 1
	store i64 %30, i64* %3
	br label %for.loop-4

for.loop-4:
	%31 = load i64, i64* %3, align 8
	%32 = icmp sge i64 %31, 0
	%33 = zext i1 %32 to i8
	%34 = trunc i8 %33 to i1
	br i1 %34, label %for.body-5, label %for.done-6

for.body-5:
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%35 = load %decimal.Decimal*, %decimal.Decimal** %0, align 8
	%36 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %35, i64 0
	%37 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %36, i64 0, i32 0
	; SelectorExpr
	%38 = load %decimal.Decimal*, %decimal.Decimal** %0, align 8
	%39 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %38, i64 0
	%40 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %39, i64 0, i32 1
	%41 = load i64, i64* %40, align 8
	%42 = trunc i64 %41 to i32
	%43 = getelementptr inbounds [384 x i8], [384 x i8]* %37, i64 0, i32 %42
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([34 x i8], [34 x i8]* @str$1a0, i64 0, i32 0), i64 33}, i64 72, i64 14, i64 %41, i64 384)
	; IndexExpr
	%44 = load i64, i64* %3, align 8
	%45 = trunc i64 %44 to i32
	%46 = getelementptr inbounds [64 x i8], [64 x i8]* %2, i64 0, i32 %45
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([34 x i8], [34 x i8]* @str$1a1, i64 0, i32 0), i64 33}, i64 72, i64 27, i64 %44, i64 64)
	%47 = load i8, i8* %46, align 1
	store i8 %47, i8* %43
	; AssignStmt
	; SelectorExpr
	%48 = load %decimal.Decimal*, %decimal.Decimal** %0, align 8
	%49 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %48, i64 0
	%50 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %49, i64 0, i32 1
	%51 = load i64, i64* %50, align 8
	%52 = add i64 %51, 1
	store i64 %52, i64* %50
	; AssignStmt
	%53 = load i64, i64* %3, align 8
	%54 = sub i64 %53, 1
	store i64 %54, i64* %3
	br label %for.loop-4

for.done-6:
	; AssignStmt
	; SelectorExpr
	%55 = load %decimal.Decimal*, %decimal.Decimal** %0, align 8
	%56 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %55, i64 0
	%57 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %56, i64 0, i32 2
	; SelectorExpr
	%58 = load %decimal.Decimal*, %decimal.Decimal** %0, align 8
	%59 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %58, i64 0
	%60 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %59, i64 0, i32 1
	%61 = load i64, i64* %60, align 8
	store i64 %61, i64* %57
	%62 = load %decimal.Decimal*, %decimal.Decimal** %0, align 8
	call void @decimal.trim(%decimal.Decimal* %62, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	ret void
}

define void @decimal.shift_right(%decimal.Decimal* %a, i64 %k, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca %decimal.Decimal*, align 16
	%1 = alloca i64, align 16
	%2 = alloca i64, align 16
	%3 = alloca i64, align 16
	%4 = alloca i64, align 16
	%5 = alloca i64, align 16
	%6 = alloca i64, align 16
	%7 = alloca i64, align 16
	%8 = alloca i64, align 16
	%9 = alloca i64, align 16
	store %decimal.Decimal* %a, %decimal.Decimal** %0
	store i64 %k, i64* %1
	; r
	store i64 0, i64* %2
	; w
	store i64 0, i64* %3
	; n
	%10 = bitcast i64* %4 to %..rawptr
	%11 = call %..rawptr @mem.zero(%..rawptr %10, i64 8) noinline
	store i64 zeroinitializer, i64* %4
	; ForStmt
	br label %for.loop-1

for.loop-1:
	%12 = load i64, i64* %4, align 8
	%13 = load i64, i64* %1, align 8
	%14 = lshr i64 %12, %13
	%15 = icmp eq i64 %14, 0
	%16 = zext i1 %15 to i8
	%17 = trunc i8 %16 to i1
	br i1 %17, label %for.body-2, label %for.done-10

for.body-2:
	; IfStmt
	%18 = load i64, i64* %2, align 8
	; SelectorExpr
	%19 = load %decimal.Decimal*, %decimal.Decimal** %0, align 8
	%20 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %19, i64 0
	%21 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %20, i64 0, i32 1
	%22 = load i64, i64* %21, align 8
	%23 = icmp sge i64 %18, %22
	%24 = zext i1 %23 to i8
	%25 = trunc i8 %24 to i1
	br i1 %25, label %if.then-3, label %if.done-9

if.then-3:
	; IfStmt
	%26 = load i64, i64* %4, align 8
	%27 = icmp eq i64 %26, 0
	%28 = zext i1 %27 to i8
	%29 = trunc i8 %28 to i1
	br i1 %29, label %if.then-4, label %if.done-5

if.then-4:
	; AssignStmt
	; SelectorExpr
	%30 = load %decimal.Decimal*, %decimal.Decimal** %0, align 8
	%31 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %30, i64 0
	%32 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %31, i64 0, i32 1
	store i64 0, i64* %32
	; ReturnStmt
	ret void

if.done-5:
	; ForStmt
	br label %for.loop-6

for.loop-6:
	%33 = load i64, i64* %4, align 8
	%34 = load i64, i64* %1, align 8
	%35 = lshr i64 %33, %34
	%36 = icmp eq i64 %35, 0
	%37 = zext i1 %36 to i8
	%38 = trunc i8 %37 to i1
	br i1 %38, label %for.body-7, label %for.done-8

for.body-7:
	; AssignStmt
	%39 = load i64, i64* %4, align 8
	%40 = mul i64 %39, 10
	store i64 %40, i64* %4
	; AssignStmt
	%41 = load i64, i64* %2, align 8
	%42 = add i64 %41, 1
	store i64 %42, i64* %2
	br label %for.loop-6

for.done-8:
	; break
	br label %for.done-10

if.done-9:
	; c
	; IndexExpr
	; SelectorExpr
	%43 = load %decimal.Decimal*, %decimal.Decimal** %0, align 8
	%44 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %43, i64 0
	%45 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %44, i64 0, i32 0
	%46 = load i64, i64* %2, align 8
	%47 = trunc i64 %46 to i32
	%48 = getelementptr inbounds [384 x i8], [384 x i8]* %45, i64 0, i32 %47
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([34 x i8], [34 x i8]* @str$1a2, i64 0, i32 0), i64 33}, i64 99, i64 22, i64 %46, i64 384)
	%49 = load i8, i8* %48, align 1
	%50 = zext i8 %49 to i64
	store i64 %50, i64* %5
	; AssignStmt
	%51 = load i64, i64* %4, align 8
	%52 = mul i64 %51, 10
	%53 = load i64, i64* %5, align 8
	%54 = add i64 %52, %53
	%55 = sub i64 %54, 48
	store i64 %55, i64* %4
	; AssignStmt
	%56 = load i64, i64* %2, align 8
	%57 = add i64 %56, 1
	store i64 %57, i64* %2
	br label %for.loop-1

for.done-10:
	; AssignStmt
	; SelectorExpr
	%58 = load %decimal.Decimal*, %decimal.Decimal** %0, align 8
	%59 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %58, i64 0
	%60 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %59, i64 0, i32 2
	%61 = load i64, i64* %2, align 8
	%62 = sub i64 %61, 1
	%63 = load i64, i64* %60, align 8
	%64 = sub i64 %63, %62
	store i64 %64, i64* %60
	; mask
	%65 = load i64, i64* %1, align 8
	%66 = shl i64 1, %65
	%67 = bitcast i64 %66 to i64
	%68 = sub i64 %67, 1
	%69 = bitcast i64 %68 to i64
	store i64 %69, i64* %6
	; ForStmt
	br label %for.loop-11

for.loop-11:
	%70 = load i64, i64* %2, align 8
	; SelectorExpr
	%71 = load %decimal.Decimal*, %decimal.Decimal** %0, align 8
	%72 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %71, i64 0
	%73 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %72, i64 0, i32 1
	%74 = load i64, i64* %73, align 8
	%75 = icmp slt i64 %70, %74
	%76 = zext i1 %75 to i8
	%77 = trunc i8 %76 to i1
	br i1 %77, label %for.body-12, label %for.done-13

for.body-12:
	; c
	; IndexExpr
	; SelectorExpr
	%78 = load %decimal.Decimal*, %decimal.Decimal** %0, align 8
	%79 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %78, i64 0
	%80 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %79, i64 0, i32 0
	%81 = load i64, i64* %2, align 8
	%82 = trunc i64 %81 to i32
	%83 = getelementptr inbounds [384 x i8], [384 x i8]* %80, i64 0, i32 %82
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([34 x i8], [34 x i8]* @str$1a3, i64 0, i32 0), i64 33}, i64 107, i64 22, i64 %81, i64 384)
	%84 = load i8, i8* %83, align 1
	%85 = zext i8 %84 to i64
	store i64 %85, i64* %7
	; dig
	%86 = load i64, i64* %4, align 8
	%87 = load i64, i64* %1, align 8
	%88 = lshr i64 %86, %87
	store i64 %88, i64* %8
	; AssignStmt
	%89 = load i64, i64* %6, align 8
	%90 = load i64, i64* %4, align 8
	%91 = and i64 %90, %89
	store i64 %91, i64* %4
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%92 = load %decimal.Decimal*, %decimal.Decimal** %0, align 8
	%93 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %92, i64 0
	%94 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %93, i64 0, i32 0
	%95 = load i64, i64* %3, align 8
	%96 = trunc i64 %95 to i32
	%97 = getelementptr inbounds [384 x i8], [384 x i8]* %94, i64 0, i32 %96
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([34 x i8], [34 x i8]* @str$1a4, i64 0, i32 0), i64 33}, i64 110, i64 12, i64 %95, i64 384)
	%98 = load i64, i64* %8, align 8
	%99 = add i64 48, %98
	%100 = trunc i64 %99 to i8
	store i8 %100, i8* %97
	; AssignStmt
	%101 = load i64, i64* %3, align 8
	%102 = add i64 %101, 1
	store i64 %102, i64* %3
	; AssignStmt
	%103 = load i64, i64* %4, align 8
	%104 = mul i64 %103, 10
	%105 = load i64, i64* %7, align 8
	%106 = add i64 %104, %105
	%107 = sub i64 %106, 48
	store i64 %107, i64* %4
	; AssignStmt
	%108 = load i64, i64* %2, align 8
	%109 = add i64 %108, 1
	store i64 %109, i64* %2
	br label %for.loop-11

for.done-13:
	; ForStmt
	br label %for.loop-14

for.loop-14:
	%110 = load i64, i64* %4, align 8
	%111 = icmp ugt i64 %110, 0
	%112 = zext i1 %111 to i8
	%113 = trunc i8 %112 to i1
	br i1 %113, label %for.body-15, label %for.done-21

for.body-15:
	; dig
	%114 = load i64, i64* %4, align 8
	%115 = load i64, i64* %1, align 8
	%116 = lshr i64 %114, %115
	store i64 %116, i64* %9
	; AssignStmt
	%117 = load i64, i64* %6, align 8
	%118 = load i64, i64* %4, align 8
	%119 = and i64 %118, %117
	store i64 %119, i64* %4
	; IfStmt
	%120 = load i64, i64* %3, align 8
	%121 = icmp slt i64 %120, 384
	%122 = zext i1 %121 to i8
	%123 = trunc i8 %122 to i1
	br i1 %123, label %if.then-16, label %if.else-17

if.then-16:
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%124 = load %decimal.Decimal*, %decimal.Decimal** %0, align 8
	%125 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %124, i64 0
	%126 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %125, i64 0, i32 0
	%127 = load i64, i64* %3, align 8
	%128 = trunc i64 %127 to i32
	%129 = getelementptr inbounds [384 x i8], [384 x i8]* %126, i64 0, i32 %128
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([34 x i8], [34 x i8]* @str$1a5, i64 0, i32 0), i64 33}, i64 119, i64 13, i64 %127, i64 384)
	%130 = load i64, i64* %9, align 8
	%131 = add i64 48, %130
	%132 = trunc i64 %131 to i8
	store i8 %132, i8* %129
	; AssignStmt
	%133 = load i64, i64* %3, align 8
	%134 = add i64 %133, 1
	store i64 %134, i64* %3
	br label %if.done-20

if.else-17:
	; IfStmt
	%135 = load i64, i64* %9, align 8
	%136 = icmp ugt i64 %135, 0
	%137 = zext i1 %136 to i8
	%138 = trunc i8 %137 to i1
	br i1 %138, label %if.then-18, label %if.done-19

if.then-18:
	; AssignStmt
	; SelectorExpr
	%139 = load %decimal.Decimal*, %decimal.Decimal** %0, align 8
	%140 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %139, i64 0
	%141 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %140, i64 0, i32 4
	store i8 1, i8* %141
	br label %if.done-19

if.done-19:
	br label %if.done-20

if.done-20:
	; AssignStmt
	%142 = load i64, i64* %4, align 8
	%143 = mul i64 %142, 10
	store i64 %143, i64* %4
	br label %for.loop-14

for.done-21:
	; AssignStmt
	; SelectorExpr
	%144 = load %decimal.Decimal*, %decimal.Decimal** %0, align 8
	%145 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %144, i64 0
	%146 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %145, i64 0, i32 1
	%147 = load i64, i64* %3, align 8
	store i64 %147, i64* %146
	%148 = load %decimal.Decimal*, %decimal.Decimal** %0, align 8
	call void @decimal.trim(%decimal.Decimal* %148, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	ret void
}

define void @decimal.shift_left(%decimal.Decimal* %a, i64 %k, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca %decimal.Decimal*, align 16
	%1 = alloca i64, align 16
	%2 = alloca i64, align 16
	%3 = alloca i64, align 16
	%4 = alloca i64, align 16
	%5 = alloca i64, align 16
	%6 = alloca i64, align 16
	%7 = alloca i64, align 16
	%8 = alloca i64, align 16
	%9 = alloca i64, align 16
	store %decimal.Decimal* %a, %decimal.Decimal** %0
	store i64 %k, i64* %1
	; delta
	%10 = load i64, i64* %1, align 8
	%11 = udiv i64 %10, 4
	%12 = bitcast i64 %11 to i64
	store i64 %12, i64* %2
	; r
	; SelectorExpr
	%13 = load %decimal.Decimal*, %decimal.Decimal** %0, align 8
	%14 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %13, i64 0
	%15 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %14, i64 0, i32 1
	%16 = load i64, i64* %15, align 8
	store i64 %16, i64* %3
	; w
	; SelectorExpr
	%17 = load %decimal.Decimal*, %decimal.Decimal** %0, align 8
	%18 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %17, i64 0
	%19 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %18, i64 0, i32 1
	%20 = load i64, i64* %19, align 8
	%21 = load i64, i64* %2, align 8
	%22 = add i64 %20, %21
	store i64 %22, i64* %4
	; n
	%23 = bitcast i64* %5 to %..rawptr
	%24 = call %..rawptr @mem.zero(%..rawptr %23, i64 8) noinline
	store i64 zeroinitializer, i64* %5
	; ForStmt
	; AssignStmt
	%25 = load i64, i64* %3, align 8
	%26 = sub i64 %25, 1
	store i64 %26, i64* %3
	br label %for.loop-1

for.loop-1:
	%27 = load i64, i64* %3, align 8
	%28 = icmp sge i64 %27, 0
	%29 = zext i1 %28 to i8
	%30 = trunc i8 %29 to i1
	br i1 %30, label %for.body-2, label %for.done-8

for.body-2:
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%31 = load %decimal.Decimal*, %decimal.Decimal** %0, align 8
	%32 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %31, i64 0
	%33 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %32, i64 0, i32 0
	%34 = load i64, i64* %3, align 8
	%35 = trunc i64 %34 to i32
	%36 = getelementptr inbounds [384 x i8], [384 x i8]* %33, i64 0, i32 %35
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([34 x i8], [34 x i8]* @str$1a6, i64 0, i32 0), i64 33}, i64 140, i64 23, i64 %34, i64 384)
	%37 = load i8, i8* %36, align 1
	%38 = zext i8 %37 to i64
	%39 = sub i64 %38, 48
	%40 = load i64, i64* %1, align 8
	%41 = shl i64 %39, %40
	%42 = load i64, i64* %5, align 8
	%43 = add i64 %42, %41
	store i64 %43, i64* %5
	; quo
	%44 = load i64, i64* %5, align 8
	%45 = udiv i64 %44, 10
	store i64 %45, i64* %6
	; rem
	%46 = load i64, i64* %5, align 8
	%47 = load i64, i64* %6, align 8
	%48 = mul i64 10, %47
	%49 = sub i64 %46, %48
	store i64 %49, i64* %7
	; AssignStmt
	%50 = load i64, i64* %4, align 8
	%51 = sub i64 %50, 1
	store i64 %51, i64* %4
	; IfStmt
	%52 = load i64, i64* %4, align 8
	%53 = icmp slt i64 %52, 384
	%54 = zext i1 %53 to i8
	%55 = trunc i8 %54 to i1
	br i1 %55, label %if.then-3, label %if.else-4

if.then-3:
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%56 = load %decimal.Decimal*, %decimal.Decimal** %0, align 8
	%57 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %56, i64 0
	%58 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %57, i64 0, i32 0
	%59 = load i64, i64* %4, align 8
	%60 = trunc i64 %59 to i32
	%61 = getelementptr inbounds [384 x i8], [384 x i8]* %58, i64 0, i32 %60
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([34 x i8], [34 x i8]* @str$1a7, i64 0, i32 0), i64 33}, i64 145, i64 13, i64 %59, i64 384)
	%62 = load i64, i64* %7, align 8
	%63 = add i64 48, %62
	%64 = trunc i64 %63 to i8
	store i8 %64, i8* %61
	br label %if.done-7

if.else-4:
	; IfStmt
	%65 = load i64, i64* %7, align 8
	%66 = icmp ne i64 %65, 0
	%67 = zext i1 %66 to i8
	%68 = trunc i8 %67 to i1
	br i1 %68, label %if.then-5, label %if.done-6

if.then-5:
	; AssignStmt
	; SelectorExpr
	%69 = load %decimal.Decimal*, %decimal.Decimal** %0, align 8
	%70 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %69, i64 0
	%71 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %70, i64 0, i32 4
	store i8 1, i8* %71
	br label %if.done-6

if.done-6:
	br label %if.done-7

if.done-7:
	; AssignStmt
	%72 = load i64, i64* %6, align 8
	store i64 %72, i64* %5
	; AssignStmt
	%73 = load i64, i64* %3, align 8
	%74 = sub i64 %73, 1
	store i64 %74, i64* %3
	br label %for.loop-1

for.done-8:
	; ForStmt
	br label %for.loop-9

for.loop-9:
	%75 = load i64, i64* %5, align 8
	%76 = icmp ugt i64 %75, 0
	%77 = zext i1 %76 to i8
	%78 = trunc i8 %77 to i1
	br i1 %78, label %for.body-10, label %for.done-17

for.body-10:
	; quo
	%79 = load i64, i64* %5, align 8
	%80 = udiv i64 %79, 10
	store i64 %80, i64* %8
	; rem
	%81 = load i64, i64* %5, align 8
	%82 = load i64, i64* %8, align 8
	%83 = mul i64 10, %82
	%84 = sub i64 %81, %83
	store i64 %84, i64* %9
	; AssignStmt
	%85 = load i64, i64* %4, align 8
	%86 = sub i64 %85, 1
	store i64 %86, i64* %4
	; IfStmt
	%87 = load i64, i64* %4, align 8
	%88 = icmp sle i64 0, %87
	%89 = zext i1 %88 to i8
	%90 = trunc i8 %89 to i1
	br i1 %90, label %cmp.and-11, label %if.else-13

cmp.and-11:
	%91 = load i64, i64* %4, align 8
	%92 = icmp slt i64 %91, 384
	%93 = zext i1 %92 to i8
	%94 = trunc i8 %93 to i1
	br i1 %94, label %if.then-12, label %if.else-13

if.then-12:
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%95 = load %decimal.Decimal*, %decimal.Decimal** %0, align 8
	%96 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %95, i64 0
	%97 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %96, i64 0, i32 0
	%98 = load i64, i64* %4, align 8
	%99 = trunc i64 %98 to i32
	%100 = getelementptr inbounds [384 x i8], [384 x i8]* %97, i64 0, i32 %99
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([34 x i8], [34 x i8]* @str$1a8, i64 0, i32 0), i64 33}, i64 157, i64 13, i64 %98, i64 384)
	%101 = load i64, i64* %9, align 8
	%102 = add i64 48, %101
	%103 = trunc i64 %102 to i8
	store i8 %103, i8* %100
	br label %if.done-16

if.else-13:
	; IfStmt
	%104 = load i64, i64* %9, align 8
	%105 = icmp ne i64 %104, 0
	%106 = zext i1 %105 to i8
	%107 = trunc i8 %106 to i1
	br i1 %107, label %if.then-14, label %if.done-15

if.then-14:
	; AssignStmt
	; SelectorExpr
	%108 = load %decimal.Decimal*, %decimal.Decimal** %0, align 8
	%109 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %108, i64 0
	%110 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %109, i64 0, i32 4
	store i8 1, i8* %110
	br label %if.done-15

if.done-15:
	br label %if.done-16

if.done-16:
	; AssignStmt
	%111 = load i64, i64* %8, align 8
	store i64 %111, i64* %5
	br label %for.loop-9

for.done-17:
	; AssignStmt
	; SelectorExpr
	%112 = load %decimal.Decimal*, %decimal.Decimal** %0, align 8
	%113 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %112, i64 0
	%114 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %113, i64 0, i32 1
	%115 = load i64, i64* %2, align 8
	%116 = load i64, i64* %114, align 8
	%117 = add i64 %116, %115
	store i64 %117, i64* %114
	; AssignStmt
	; SelectorExpr
	%118 = load %decimal.Decimal*, %decimal.Decimal** %0, align 8
	%119 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %118, i64 0
	%120 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %119, i64 0, i32 1
	; min
	; SelectorExpr
	%121 = load %decimal.Decimal*, %decimal.Decimal** %0, align 8
	%122 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %121, i64 0
	%123 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %122, i64 0, i32 1
	%124 = load i64, i64* %123, align 8
	%125 = icmp slt i64 %124, 384
	%126 = select i1 %125, i64 %124, i64 384
	store i64 %126, i64* %120
	; AssignStmt
	; SelectorExpr
	%127 = load %decimal.Decimal*, %decimal.Decimal** %0, align 8
	%128 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %127, i64 0
	%129 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %128, i64 0, i32 2
	%130 = load i64, i64* %2, align 8
	%131 = load i64, i64* %129, align 8
	%132 = add i64 %131, %130
	store i64 %132, i64* %129
	%133 = load %decimal.Decimal*, %decimal.Decimal** %0, align 8
	call void @decimal.trim(%decimal.Decimal* %133, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	ret void
}

define void @decimal.shift(%decimal.Decimal* %a, i64 %k, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca %decimal.Decimal*, align 16
	%1 = alloca i64, align 16
	store %decimal.Decimal* %a, %decimal.Decimal** %0
	store i64 %k, i64* %1
	; SwitchStmt
	; SelectorExpr
	%2 = load %decimal.Decimal*, %decimal.Decimal** %0, align 8
	%3 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %2, i64 0
	%4 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %3, i64 0, i32 1
	%5 = load i64, i64* %4, align 8
	%6 = icmp eq i64 %5, 0
	%7 = zext i1 %6 to i8
	%8 = icmp eq i8 1, %7
	br i1 %8, label %switch.case.body-2, label %switch.case.next-1

switch.case.next-1:
	%9 = load i64, i64* %1, align 8
	%10 = icmp sgt i64 %9, 0
	%11 = zext i1 %10 to i8
	%12 = icmp eq i8 1, %11
	br i1 %12, label %switch.fall.body-4, label %switch.case.next-3

switch.case.body-2:
	br label %switch.done-13

switch.case.next-3:
	%13 = load i64, i64* %1, align 8
	%14 = icmp slt i64 %13, 0
	%15 = zext i1 %14 to i8
	%16 = icmp eq i8 1, %15
	br i1 %16, label %switch.fall.body-9, label %switch.case.next-8

switch.fall.body-4:
	; ForStmt
	br label %for.loop-5

for.loop-5:
	%17 = load i64, i64* %1, align 8
	%18 = icmp sgt i64 %17, 60
	%19 = zext i1 %18 to i8
	%20 = trunc i8 %19 to i1
	br i1 %20, label %for.body-6, label %for.done-7

for.body-6:
	%21 = load %decimal.Decimal*, %decimal.Decimal** %0, align 8
	call void @decimal.shift_left(%decimal.Decimal* %21, i64 60, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	; AssignStmt
	%22 = load i64, i64* %1, align 8
	%23 = sub i64 %22, 60
	store i64 %23, i64* %1
	br label %for.loop-5

for.done-7:
	%24 = load %decimal.Decimal*, %decimal.Decimal** %0, align 8
	%25 = load i64, i64* %1, align 8
	%26 = bitcast i64 %25 to i64
	call void @decimal.shift_left(%decimal.Decimal* %24, i64 %26, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %switch.done-13

switch.case.next-8:
	br label %switch.done-13

switch.fall.body-9:
	; ForStmt
	br label %for.loop-10

for.loop-10:
	%27 = load i64, i64* %1, align 8
	%28 = icmp slt i64 %27, -60
	%29 = zext i1 %28 to i8
	%30 = trunc i8 %29 to i1
	br i1 %30, label %for.body-11, label %for.done-12

for.body-11:
	%31 = load %decimal.Decimal*, %decimal.Decimal** %0, align 8
	call void @decimal.shift_right(%decimal.Decimal* %31, i64 60, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	; AssignStmt
	%32 = load i64, i64* %1, align 8
	%33 = add i64 %32, 60
	store i64 %33, i64* %1
	br label %for.loop-10

for.done-12:
	%34 = load %decimal.Decimal*, %decimal.Decimal** %0, align 8
	%35 = load i64, i64* %1, align 8
	%36 = sub i64 0, %35
	%37 = bitcast i64 %36 to i64
	call void @decimal.shift_right(%decimal.Decimal* %34, i64 %37, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %switch.done-13

switch.done-13:
	ret void
}

define i8 @decimal.can_round_up(%decimal.Decimal* %a, i64 %nd, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca %decimal.Decimal*, align 16
	%1 = alloca i64, align 16
	store %decimal.Decimal* %a, %decimal.Decimal** %0
	store i64 %nd, i64* %1
	; IfStmt
	%2 = load i64, i64* %1, align 8
	%3 = icmp slt i64 %2, 0
	%4 = zext i1 %3 to i8
	%5 = trunc i8 %4 to i1
	br i1 %5, label %if.then-2, label %cmp.or-1

cmp.or-1:
	%6 = load i64, i64* %1, align 8
	; SelectorExpr
	%7 = load %decimal.Decimal*, %decimal.Decimal** %0, align 8
	%8 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %7, i64 0
	%9 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %8, i64 0, i32 1
	%10 = load i64, i64* %9, align 8
	%11 = icmp sge i64 %6, %10
	%12 = zext i1 %11 to i8
	%13 = trunc i8 %12 to i1
	br i1 %13, label %if.then-2, label %if.done-3

if.then-2:
	; ReturnStmt
	ret i8 0

if.done-3:
	; IfStmt
	; IndexExpr
	; SelectorExpr
	%14 = load %decimal.Decimal*, %decimal.Decimal** %0, align 8
	%15 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %14, i64 0
	%16 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %15, i64 0, i32 0
	%17 = load i64, i64* %1, align 8
	%18 = trunc i64 %17 to i32
	%19 = getelementptr inbounds [384 x i8], [384 x i8]* %16, i64 0, i32 %18
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([34 x i8], [34 x i8]* @str$1a9, i64 0, i32 0), i64 33}, i64 196, i64 14, i64 %17, i64 384)
	%20 = load i8, i8* %19, align 1
	%21 = icmp eq i8 %20, 53
	%22 = zext i1 %21 to i8
	%23 = trunc i8 %22 to i1
	br i1 %23, label %cmp.and-4, label %if.done-10

cmp.and-4:
	%24 = load i64, i64* %1, align 8
	%25 = add i64 %24, 1
	; SelectorExpr
	%26 = load %decimal.Decimal*, %decimal.Decimal** %0, align 8
	%27 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %26, i64 0
	%28 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %27, i64 0, i32 1
	%29 = load i64, i64* %28, align 8
	%30 = icmp eq i64 %25, %29
	%31 = zext i1 %30 to i8
	%32 = trunc i8 %31 to i1
	br i1 %32, label %if.then-5, label %if.done-10

if.then-5:
	; IfStmt
	; SelectorExpr
	%33 = load %decimal.Decimal*, %decimal.Decimal** %0, align 8
	%34 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %33, i64 0
	%35 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %34, i64 0, i32 4
	%36 = load i8, i8* %35, align 1
	%37 = trunc i8 %36 to i1
	br i1 %37, label %if.then-6, label %if.done-7

if.then-6:
	; ReturnStmt
	ret i8 1

if.done-7:
	; ReturnStmt
	%38 = load i64, i64* %1, align 8
	%39 = icmp sgt i64 %38, 0
	%40 = zext i1 %39 to i8
	%41 = load i64, i64* %1, align 8
	%42 = icmp sgt i64 %41, 0
	%43 = zext i1 %42 to i8
	%44 = trunc i8 %43 to i1
	br i1 %44, label %logical.cmp.rhs-8, label %logical.cmp.done-9

logical.cmp.rhs-8:
	; IndexExpr
	; SelectorExpr
	%45 = load %decimal.Decimal*, %decimal.Decimal** %0, align 8
	%46 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %45, i64 0
	%47 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %46, i64 0, i32 0
	%48 = load i64, i64* %1, align 8
	%49 = sub i64 %48, 1
	%50 = trunc i64 %49 to i32
	%51 = getelementptr inbounds [384 x i8], [384 x i8]* %47, i64 0, i32 %50
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([34 x i8], [34 x i8]* @str$1aa, i64 0, i32 0), i64 33}, i64 198, i64 30, i64 %49, i64 384)
	%52 = load i8, i8* %51, align 1
	%53 = sub i8 %52, 48
	%54 = urem i8 %53, 2
	%55 = icmp ne i8 %54, 0
	%56 = zext i1 %55 to i8
	br label %logical.cmp.done-9

logical.cmp.done-9:
	%57 = phi i8 [ 0, %if.done-7 ], [ %56, %logical.cmp.rhs-8 ]
	ret i8 %57

if.done-10:
	; ReturnStmt
	; IndexExpr
	; SelectorExpr
	%58 = load %decimal.Decimal*, %decimal.Decimal** %0, align 8
	%59 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %58, i64 0
	%60 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %59, i64 0, i32 0
	%61 = load i64, i64* %1, align 8
	%62 = trunc i64 %61 to i32
	%63 = getelementptr inbounds [384 x i8], [384 x i8]* %60, i64 0, i32 %62
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([34 x i8], [34 x i8]* @str$1ab, i64 0, i32 0), i64 33}, i64 201, i64 18, i64 %61, i64 384)
	%64 = load i8, i8* %63, align 1
	%65 = icmp uge i8 %64, 53
	%66 = zext i1 %65 to i8
	ret i8 %66
}

define void @decimal.round(%decimal.Decimal* %a, i64 %nd, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca %decimal.Decimal*, align 16
	%1 = alloca i64, align 16
	store %decimal.Decimal* %a, %decimal.Decimal** %0
	store i64 %nd, i64* %1
	; IfStmt
	%2 = load i64, i64* %1, align 8
	%3 = icmp slt i64 %2, 0
	%4 = zext i1 %3 to i8
	%5 = trunc i8 %4 to i1
	br i1 %5, label %if.then-2, label %cmp.or-1

cmp.or-1:
	%6 = load i64, i64* %1, align 8
	; SelectorExpr
	%7 = load %decimal.Decimal*, %decimal.Decimal** %0, align 8
	%8 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %7, i64 0
	%9 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %8, i64 0, i32 1
	%10 = load i64, i64* %9, align 8
	%11 = icmp sge i64 %6, %10
	%12 = zext i1 %11 to i8
	%13 = trunc i8 %12 to i1
	br i1 %13, label %if.then-2, label %if.done-3

if.then-2:
	; ReturnStmt
	ret void

if.done-3:
	; IfStmt
	%14 = load %decimal.Decimal*, %decimal.Decimal** %0, align 8
	%15 = load i64, i64* %1, align 8
	%16 = call i8 @decimal.can_round_up(%decimal.Decimal* %14, i64 %15, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	%17 = trunc i8 %16 to i1
	br i1 %17, label %if.then-4, label %if.else-5

if.then-4:
	%18 = load %decimal.Decimal*, %decimal.Decimal** %0, align 8
	%19 = load i64, i64* %1, align 8
	call void @decimal.round_up(%decimal.Decimal* %18, i64 %19, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %if.done-6

if.else-5:
	%20 = load %decimal.Decimal*, %decimal.Decimal** %0, align 8
	%21 = load i64, i64* %1, align 8
	call void @decimal.round_down(%decimal.Decimal* %20, i64 %21, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %if.done-6

if.done-6:
	ret void
}

define void @decimal.round_up(%decimal.Decimal* %a, i64 %nd, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca %decimal.Decimal*, align 16
	%1 = alloca i64, align 16
	%2 = alloca i64, align 16
	%3 = alloca i8, align 16
	store %decimal.Decimal* %a, %decimal.Decimal** %0
	store i64 %nd, i64* %1
	; IfStmt
	%4 = load i64, i64* %1, align 8
	%5 = icmp slt i64 %4, 0
	%6 = zext i1 %5 to i8
	%7 = trunc i8 %6 to i1
	br i1 %7, label %if.then-2, label %cmp.or-1

cmp.or-1:
	%8 = load i64, i64* %1, align 8
	; SelectorExpr
	%9 = load %decimal.Decimal*, %decimal.Decimal** %0, align 8
	%10 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %9, i64 0
	%11 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %10, i64 0, i32 1
	%12 = load i64, i64* %11, align 8
	%13 = icmp sge i64 %8, %12
	%14 = zext i1 %13 to i8
	%15 = trunc i8 %14 to i1
	br i1 %15, label %if.then-2, label %if.done-3

if.then-2:
	; ReturnStmt
	ret void

if.done-3:
	; ForStmt
	; i
	%16 = load i64, i64* %1, align 8
	%17 = sub i64 %16, 1
	store i64 %17, i64* %2
	br label %for.loop-4

for.loop-4:
	%18 = load i64, i64* %2, align 8
	%19 = icmp sge i64 %18, 0
	%20 = zext i1 %19 to i8
	%21 = trunc i8 %20 to i1
	br i1 %21, label %for.body-5, label %for.done-8

for.body-5:
	; IfStmt
	; c
	; IndexExpr
	; SelectorExpr
	%22 = load %decimal.Decimal*, %decimal.Decimal** %0, align 8
	%23 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %22, i64 0
	%24 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %23, i64 0, i32 0
	%25 = load i64, i64* %2, align 8
	%26 = trunc i64 %25 to i32
	%27 = getelementptr inbounds [384 x i8], [384 x i8]* %24, i64 0, i32 %26
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([34 x i8], [34 x i8]* @str$1ac, i64 0, i32 0), i64 33}, i64 217, i64 20, i64 %25, i64 384)
	%28 = load i8, i8* %27, align 1
	store i8 %28, i8* %3
	%29 = load i8, i8* %3, align 1
	%30 = icmp ult i8 %29, 57
	%31 = zext i1 %30 to i8
	%32 = trunc i8 %31 to i1
	br i1 %32, label %if.then-6, label %if.done-7

if.then-6:
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%33 = load %decimal.Decimal*, %decimal.Decimal** %0, align 8
	%34 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %33, i64 0
	%35 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %34, i64 0, i32 0
	%36 = load i64, i64* %2, align 8
	%37 = trunc i64 %36 to i32
	%38 = getelementptr inbounds [384 x i8], [384 x i8]* %35, i64 0, i32 %37
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([34 x i8], [34 x i8]* @str$1ad, i64 0, i32 0), i64 33}, i64 218, i64 13, i64 %36, i64 384)
	%39 = load i8, i8* %38, align 1
	%40 = add i8 %39, 1
	store i8 %40, i8* %38
	; AssignStmt
	; SelectorExpr
	%41 = load %decimal.Decimal*, %decimal.Decimal** %0, align 8
	%42 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %41, i64 0
	%43 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %42, i64 0, i32 1
	%44 = load i64, i64* %2, align 8
	%45 = add i64 %44, 1
	store i64 %45, i64* %43
	; ReturnStmt
	ret void

if.done-7:
	; AssignStmt
	%46 = load i64, i64* %2, align 8
	%47 = sub i64 %46, 1
	store i64 %47, i64* %2
	br label %for.loop-4

for.done-8:
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%48 = load %decimal.Decimal*, %decimal.Decimal** %0, align 8
	%49 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %48, i64 0
	%50 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %49, i64 0, i32 0
	%51 = getelementptr inbounds [384 x i8], [384 x i8]* %50, i64 0, i32 0
	store i8 49, i8* %51
	; AssignStmt
	; SelectorExpr
	%52 = load %decimal.Decimal*, %decimal.Decimal** %0, align 8
	%53 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %52, i64 0
	%54 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %53, i64 0, i32 1
	store i64 1, i64* %54
	; AssignStmt
	; SelectorExpr
	%55 = load %decimal.Decimal*, %decimal.Decimal** %0, align 8
	%56 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %55, i64 0
	%57 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %56, i64 0, i32 2
	%58 = load i64, i64* %57, align 8
	%59 = add i64 %58, 1
	store i64 %59, i64* %57
	ret void
}

define void @decimal.round_down(%decimal.Decimal* %a, i64 %nd, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca %decimal.Decimal*, align 16
	%1 = alloca i64, align 16
	store %decimal.Decimal* %a, %decimal.Decimal** %0
	store i64 %nd, i64* %1
	; IfStmt
	%2 = load i64, i64* %1, align 8
	%3 = icmp slt i64 %2, 0
	%4 = zext i1 %3 to i8
	%5 = trunc i8 %4 to i1
	br i1 %5, label %if.then-2, label %cmp.or-1

cmp.or-1:
	%6 = load i64, i64* %1, align 8
	; SelectorExpr
	%7 = load %decimal.Decimal*, %decimal.Decimal** %0, align 8
	%8 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %7, i64 0
	%9 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %8, i64 0, i32 1
	%10 = load i64, i64* %9, align 8
	%11 = icmp sge i64 %6, %10
	%12 = zext i1 %11 to i8
	%13 = trunc i8 %12 to i1
	br i1 %13, label %if.then-2, label %if.done-3

if.then-2:
	; ReturnStmt
	ret void

if.done-3:
	; AssignStmt
	; SelectorExpr
	%14 = load %decimal.Decimal*, %decimal.Decimal** %0, align 8
	%15 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %14, i64 0
	%16 = getelementptr inbounds %decimal.Decimal, %decimal.Decimal* %15, i64 0, i32 1
	%17 = load i64, i64* %1, align 8
	store i64 %17, i64* %16
	%18 = load %decimal.Decimal*, %decimal.Decimal** %0, align 8
	call void @decimal.trim(%decimal.Decimal* %18, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	ret void
}

define i8 @types.is_rune(%runtime.Type_Info* %info, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca %runtime.Type_Info*, align 16
	%1 = alloca i8, align 16
	%2 = alloca %runtime.Type_Info*, align 16
	%3 = alloca {%runtime.Type_Info_Rune, i8}, align 16
	store %runtime.Type_Info* %info, %runtime.Type_Info** %0
	; IfStmt
	%4 = load %runtime.Type_Info*, %runtime.Type_Info** %0, align 8
	%5 = icmp eq %runtime.Type_Info* %4, zeroinitializer
	%6 = zext i1 %5 to i8
	%7 = trunc i8 %6 to i1
	br i1 %7, label %if.then-1, label %if.done-2

if.then-1:
	; ReturnStmt
	ret i8 0

if.done-2:
	; ok
	; SelectorExpr
	; SelectorExpr
	%8 = load %runtime.Type_Info*, %runtime.Type_Info** %0, align 8
	%9 = call %runtime.Type_Info* @runtime.type_info_base(%runtime.Type_Info* %8)
	%10 = bitcast %runtime.Type_Info** %2 to %..rawptr
	%11 = call %..rawptr @mem.zero(%..rawptr %10, i64 8) noinline
	store %runtime.Type_Info* zeroinitializer, %runtime.Type_Info** %2
	store %runtime.Type_Info* %9, %runtime.Type_Info** %2
	%12 = load %runtime.Type_Info*, %runtime.Type_Info** %2, align 8
	%13 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %12, i64 0
	%14 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %13, i64 0, i32 3
	%15 = load {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %14, align 8
	; cast - union_cast
	%16 = bitcast {%runtime.Type_Info_Rune, i8}* %3 to %..rawptr
	%17 = call %..rawptr @mem.zero(%..rawptr %16, i64 1) noinline
	store {%runtime.Type_Info_Rune, i8} zeroinitializer, {%runtime.Type_Info_Rune, i8}* %3
	%18 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %14, i64 0, i32 2 ; UnionTagPtr
	%19 = load i64, i64* %18, align 8
	%20 = icmp eq i64 %19, 3
	br i1 %20, label %union_cast.ok-3, label %union_cast.end-4

union_cast.ok-3:
	%21 = getelementptr inbounds {%runtime.Type_Info_Rune, i8}, {%runtime.Type_Info_Rune, i8}* %3, i64 0, i32 0
	%22 = getelementptr inbounds {%runtime.Type_Info_Rune, i8}, {%runtime.Type_Info_Rune, i8}* %3, i64 0, i32 1
	%23 = bitcast {[0 x i64], [72 x i8], i64}* %14 to %runtime.Type_Info_Rune*
	%24 = load %runtime.Type_Info_Rune, %runtime.Type_Info_Rune* %23, align 1
	store %runtime.Type_Info_Rune %24, %runtime.Type_Info_Rune* %21
	store i8 1, i8* %22
	br label %union_cast.end-4

union_cast.end-4:
	%25 = load {%runtime.Type_Info_Rune, i8}, {%runtime.Type_Info_Rune, i8}* %3, align 1
	%26 = extractvalue {%runtime.Type_Info_Rune, i8} %25, 0
	%27 = extractvalue {%runtime.Type_Info_Rune, i8} %25, 1
	store i8 %27, i8* %1
	; ReturnStmt
	%28 = load i8, i8* %1, align 1
	ret i8 %28
}

define i8 @types.is_any(%runtime.Type_Info* %info, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca %runtime.Type_Info*, align 16
	%1 = alloca i8, align 16
	%2 = alloca %runtime.Type_Info*, align 16
	%3 = alloca {%runtime.Type_Info_Any, i8}, align 16
	store %runtime.Type_Info* %info, %runtime.Type_Info** %0
	; IfStmt
	%4 = load %runtime.Type_Info*, %runtime.Type_Info** %0, align 8
	%5 = icmp eq %runtime.Type_Info* %4, zeroinitializer
	%6 = zext i1 %5 to i8
	%7 = trunc i8 %6 to i1
	br i1 %7, label %if.then-1, label %if.done-2

if.then-1:
	; ReturnStmt
	ret i8 0

if.done-2:
	; ok
	; SelectorExpr
	; SelectorExpr
	%8 = load %runtime.Type_Info*, %runtime.Type_Info** %0, align 8
	%9 = call %runtime.Type_Info* @runtime.type_info_base(%runtime.Type_Info* %8)
	%10 = bitcast %runtime.Type_Info** %2 to %..rawptr
	%11 = call %..rawptr @mem.zero(%..rawptr %10, i64 8) noinline
	store %runtime.Type_Info* zeroinitializer, %runtime.Type_Info** %2
	store %runtime.Type_Info* %9, %runtime.Type_Info** %2
	%12 = load %runtime.Type_Info*, %runtime.Type_Info** %2, align 8
	%13 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %12, i64 0
	%14 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %13, i64 0, i32 3
	%15 = load {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %14, align 8
	; cast - union_cast
	%16 = bitcast {%runtime.Type_Info_Any, i8}* %3 to %..rawptr
	%17 = call %..rawptr @mem.zero(%..rawptr %16, i64 1) noinline
	store {%runtime.Type_Info_Any, i8} zeroinitializer, {%runtime.Type_Info_Any, i8}* %3
	%18 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %14, i64 0, i32 2 ; UnionTagPtr
	%19 = load i64, i64* %18, align 8
	%20 = icmp eq i64 %19, 8
	br i1 %20, label %union_cast.ok-3, label %union_cast.end-4

union_cast.ok-3:
	%21 = getelementptr inbounds {%runtime.Type_Info_Any, i8}, {%runtime.Type_Info_Any, i8}* %3, i64 0, i32 0
	%22 = getelementptr inbounds {%runtime.Type_Info_Any, i8}, {%runtime.Type_Info_Any, i8}* %3, i64 0, i32 1
	%23 = bitcast {[0 x i64], [72 x i8], i64}* %14 to %runtime.Type_Info_Any*
	%24 = load %runtime.Type_Info_Any, %runtime.Type_Info_Any* %23, align 1
	store %runtime.Type_Info_Any %24, %runtime.Type_Info_Any* %21
	store i8 1, i8* %22
	br label %union_cast.end-4

union_cast.end-4:
	%25 = load {%runtime.Type_Info_Any, i8}, {%runtime.Type_Info_Any, i8}* %3, align 1
	%26 = extractvalue {%runtime.Type_Info_Any, i8} %25, 0
	%27 = extractvalue {%runtime.Type_Info_Any, i8} %25, 1
	store i8 %27, i8* %1
	; ReturnStmt
	%28 = load i8, i8* %1, align 1
	ret i8 %28
}

define i8 @types.is_string(%runtime.Type_Info* %info, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca %runtime.Type_Info*, align 16
	%1 = alloca i8, align 16
	%2 = alloca %runtime.Type_Info*, align 16
	%3 = alloca {%runtime.Type_Info_String, i8}, align 16
	store %runtime.Type_Info* %info, %runtime.Type_Info** %0
	; IfStmt
	%4 = load %runtime.Type_Info*, %runtime.Type_Info** %0, align 8
	%5 = icmp eq %runtime.Type_Info* %4, zeroinitializer
	%6 = zext i1 %5 to i8
	%7 = trunc i8 %6 to i1
	br i1 %7, label %if.then-1, label %if.done-2

if.then-1:
	; ReturnStmt
	ret i8 0

if.done-2:
	; ok
	; SelectorExpr
	; SelectorExpr
	%8 = load %runtime.Type_Info*, %runtime.Type_Info** %0, align 8
	%9 = call %runtime.Type_Info* @runtime.type_info_base(%runtime.Type_Info* %8)
	%10 = bitcast %runtime.Type_Info** %2 to %..rawptr
	%11 = call %..rawptr @mem.zero(%..rawptr %10, i64 8) noinline
	store %runtime.Type_Info* zeroinitializer, %runtime.Type_Info** %2
	store %runtime.Type_Info* %9, %runtime.Type_Info** %2
	%12 = load %runtime.Type_Info*, %runtime.Type_Info** %2, align 8
	%13 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %12, i64 0
	%14 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %13, i64 0, i32 3
	%15 = load {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %14, align 8
	; cast - union_cast
	%16 = bitcast {%runtime.Type_Info_String, i8}* %3 to %..rawptr
	%17 = call %..rawptr @mem.zero(%..rawptr %16, i64 2) noinline
	store {%runtime.Type_Info_String, i8} zeroinitializer, {%runtime.Type_Info_String, i8}* %3
	%18 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %14, i64 0, i32 2 ; UnionTagPtr
	%19 = load i64, i64* %18, align 8
	%20 = icmp eq i64 %19, 6
	br i1 %20, label %union_cast.ok-3, label %union_cast.end-4

union_cast.ok-3:
	%21 = getelementptr inbounds {%runtime.Type_Info_String, i8}, {%runtime.Type_Info_String, i8}* %3, i64 0, i32 0
	%22 = getelementptr inbounds {%runtime.Type_Info_String, i8}, {%runtime.Type_Info_String, i8}* %3, i64 0, i32 1
	%23 = bitcast {[0 x i64], [72 x i8], i64}* %14 to %runtime.Type_Info_String*
	%24 = load %runtime.Type_Info_String, %runtime.Type_Info_String* %23, align 1
	store %runtime.Type_Info_String %24, %runtime.Type_Info_String* %21
	store i8 1, i8* %22
	br label %union_cast.end-4

union_cast.end-4:
	%25 = load {%runtime.Type_Info_String, i8}, {%runtime.Type_Info_String, i8}* %3, align 1
	%26 = extractvalue {%runtime.Type_Info_String, i8} %25, 0
	%27 = extractvalue {%runtime.Type_Info_String, i8} %25, 1
	store i8 %27, i8* %1
	; ReturnStmt
	%28 = load i8, i8* %1, align 1
	ret i8 %28
}

define i8 @types.is_enum(%runtime.Type_Info* %info, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca %runtime.Type_Info*, align 16
	%1 = alloca i8, align 16
	%2 = alloca %runtime.Type_Info*, align 16
	%3 = alloca {%runtime.Type_Info_Enum, i8}, align 16
	store %runtime.Type_Info* %info, %runtime.Type_Info** %0
	; IfStmt
	%4 = load %runtime.Type_Info*, %runtime.Type_Info** %0, align 8
	%5 = icmp eq %runtime.Type_Info* %4, zeroinitializer
	%6 = zext i1 %5 to i8
	%7 = trunc i8 %6 to i1
	br i1 %7, label %if.then-1, label %if.done-2

if.then-1:
	; ReturnStmt
	ret i8 0

if.done-2:
	; ok
	; SelectorExpr
	; SelectorExpr
	%8 = load %runtime.Type_Info*, %runtime.Type_Info** %0, align 8
	%9 = call %runtime.Type_Info* @runtime.type_info_base(%runtime.Type_Info* %8)
	%10 = bitcast %runtime.Type_Info** %2 to %..rawptr
	%11 = call %..rawptr @mem.zero(%..rawptr %10, i64 8) noinline
	store %runtime.Type_Info* zeroinitializer, %runtime.Type_Info** %2
	store %runtime.Type_Info* %9, %runtime.Type_Info** %2
	%12 = load %runtime.Type_Info*, %runtime.Type_Info** %2, align 8
	%13 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %12, i64 0
	%14 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %13, i64 0, i32 3
	%15 = load {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %14, align 8
	; cast - union_cast
	%16 = bitcast {%runtime.Type_Info_Enum, i8}* %3 to %..rawptr
	%17 = call %..rawptr @mem.zero(%..rawptr %16, i64 48) noinline
	store {%runtime.Type_Info_Enum, i8} zeroinitializer, {%runtime.Type_Info_Enum, i8}* %3
	%18 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %14, i64 0, i32 2 ; UnionTagPtr
	%19 = load i64, i64* %18, align 8
	%20 = icmp eq i64 %19, 18
	br i1 %20, label %union_cast.ok-3, label %union_cast.end-4

union_cast.ok-3:
	%21 = getelementptr inbounds {%runtime.Type_Info_Enum, i8}, {%runtime.Type_Info_Enum, i8}* %3, i64 0, i32 0
	%22 = getelementptr inbounds {%runtime.Type_Info_Enum, i8}, {%runtime.Type_Info_Enum, i8}* %3, i64 0, i32 1
	%23 = bitcast {[0 x i64], [72 x i8], i64}* %14 to %runtime.Type_Info_Enum*
	%24 = load %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %23, align 8
	store %runtime.Type_Info_Enum %24, %runtime.Type_Info_Enum* %21
	store i8 1, i8* %22
	br label %union_cast.end-4

union_cast.end-4:
	%25 = load {%runtime.Type_Info_Enum, i8}, {%runtime.Type_Info_Enum, i8}* %3, align 8
	%26 = extractvalue {%runtime.Type_Info_Enum, i8} %25, 0
	%27 = extractvalue {%runtime.Type_Info_Enum, i8} %25, 1
	store i8 %27, i8* %1
	; ReturnStmt
	%28 = load i8, i8* %1, align 1
	ret i8 %28
}

define i8* @mem.ptr_offset-4617(i8* %ptr, i64 %n) #0 {
decls-0:
	%0 = alloca i8*, align 16
	%1 = alloca i64, align 16
	%2 = alloca i64, align 16
	store i8* %ptr, i8** %0
	store i64 %n, i64* %1
	; new
	%3 = load i8*, i8** %0, align 8
	%4 = ptrtoint i8* %3 to i64
	%5 = bitcast i64 %4 to i64
	%6 = load i64, i64* %1, align 8
	%7 = mul i64 1, %6
	%8 = add i64 %5, %7
	store i64 %8, i64* %2
	; ReturnStmt
	%9 = load i64, i64* %2, align 8
	%10 = bitcast i64 %9 to i64
	%11 = inttoptr i64 %10 to i8*
	ret i8* %11
}

define {i8*, i64} @mem.make_slice-4755(i64 %len, %mem.Allocator* %allocator, %runtime.Source_Code_Location* %loc, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca i64, align 16
	%1 = alloca %runtime.Source_Code_Location, align 16
	%2 = alloca %..rawptr, align 16
	%3 = alloca %mem.Allocator, align 16
	%4 = alloca %runtime.Source_Code_Location, align 16
	%5 = alloca %mem.Raw_Slice, align 16
	%6 = alloca %mem.Raw_Slice, align 16
	store i64 %len, i64* %0
	%7 = load %mem.Allocator, %mem.Allocator* %allocator, align 8
	%8 = load %runtime.Source_Code_Location, %runtime.Source_Code_Location* %loc, align 8
	; SelectorExpr
	%9 = load %runtime.Source_Code_Location, %runtime.Source_Code_Location* %loc, align 8
	%10 = load i64, i64* %0, align 8
	%11 = bitcast %runtime.Source_Code_Location* %1 to %..rawptr
	store %runtime.Source_Code_Location zeroinitializer, %runtime.Source_Code_Location* %1
	store %runtime.Source_Code_Location %9, %runtime.Source_Code_Location* %1
	call void @runtime.make_slice_error_loc(%runtime.Source_Code_Location* %1, i64 %10)
	; data
	%12 = load i64, i64* %0, align 8
	%13 = mul i64 1, %12
	%14 = load %mem.Allocator, %mem.Allocator* %allocator, align 8
	%15 = load %runtime.Source_Code_Location, %runtime.Source_Code_Location* %loc, align 8
	%16 = bitcast %mem.Allocator* %3 to %..rawptr
	store %mem.Allocator zeroinitializer, %mem.Allocator* %3
	store %mem.Allocator %14, %mem.Allocator* %3
	%17 = bitcast %runtime.Source_Code_Location* %4 to %..rawptr
	store %runtime.Source_Code_Location zeroinitializer, %runtime.Source_Code_Location* %4
	store %runtime.Source_Code_Location %15, %runtime.Source_Code_Location* %4
	%18 = call %..rawptr @mem.alloc(i64 %13, i64 1, %mem.Allocator* %3, %runtime.Source_Code_Location* %4, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	store %..rawptr %18, %..rawptr* %2
	; s
	; CompoundLit
	%19 = bitcast %mem.Raw_Slice* %6 to %..rawptr
	store %mem.Raw_Slice zeroinitializer, %mem.Raw_Slice* %6
	store %mem.Raw_Slice {%..rawptr zeroinitializer, i64 zeroinitializer}, %mem.Raw_Slice* %6
	%20 = load %..rawptr, %..rawptr* %2, align 8
	%21 = getelementptr inbounds %mem.Raw_Slice, %mem.Raw_Slice* %6, i64 0, i32 0
	store %..rawptr %20, %..rawptr* %21
	%22 = load i64, i64* %0, align 8
	%23 = getelementptr inbounds %mem.Raw_Slice, %mem.Raw_Slice* %6, i64 0, i32 1
	store i64 %22, i64* %23
	%24 = load %mem.Raw_Slice, %mem.Raw_Slice* %6, align 8
	store %mem.Raw_Slice %24, %mem.Raw_Slice* %5
	; ReturnStmt
	%25 = load %mem.Raw_Slice, %mem.Raw_Slice* %5, align 8
	%26 = bitcast %mem.Raw_Slice* %5 to {i8*, i64}*
	%27 = load {i8*, i64}, {i8*, i64}* %26, align 8
	ret {i8*, i64} %27
}

define {i8*, i64} @mem.slice_ptr-4991(i8* %ptr, i64 %len) #0 {
decls-0:
	%0 = alloca i8*, align 16
	%1 = alloca i64, align 16
	%2 = alloca %runtime.Source_Code_Location, align 16
	%3 = alloca %mem.Raw_Slice, align 16
	%4 = alloca %mem.Raw_Slice, align 16
	store i8* %ptr, i8** %0
	store i64 %len, i64* %1
	%5 = load i64, i64* %1, align 8
	%6 = icmp sge i64 %5, 0
	%7 = zext i1 %6 to i8
	%8 = trunc i8 %7 to i1
	%9 = bitcast %runtime.Source_Code_Location* %2 to %..rawptr
	store %runtime.Source_Code_Location zeroinitializer, %runtime.Source_Code_Location* %2
	store %runtime.Source_Code_Location {%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @str$1ae, i64 0, i32 0), i64 25}, i64 122, i64 2, %..string {i8* getelementptr inbounds ([10 x i8], [10 x i8]* @str$1af, i64 0, i32 0), i64 9}}, %runtime.Source_Code_Location* %2
	%10 = call i8 @runtime.assert(i1 %8, %..string zeroinitializer, %runtime.Source_Code_Location* %2)
	; slice
	; CompoundLit
	%11 = bitcast %mem.Raw_Slice* %4 to %..rawptr
	store %mem.Raw_Slice zeroinitializer, %mem.Raw_Slice* %4
	store %mem.Raw_Slice {%..rawptr zeroinitializer, i64 zeroinitializer}, %mem.Raw_Slice* %4
	%12 = load i8*, i8** %0, align 8
	%13 = bitcast i8* %12 to %..rawptr
	%14 = getelementptr inbounds %mem.Raw_Slice, %mem.Raw_Slice* %4, i64 0, i32 0
	store %..rawptr %13, %..rawptr* %14
	%15 = load i64, i64* %1, align 8
	%16 = getelementptr inbounds %mem.Raw_Slice, %mem.Raw_Slice* %4, i64 0, i32 1
	store i64 %15, i64* %16
	%17 = load %mem.Raw_Slice, %mem.Raw_Slice* %4, align 8
	store %mem.Raw_Slice %17, %mem.Raw_Slice* %3
	; ReturnStmt
	%18 = load %mem.Raw_Slice, %mem.Raw_Slice* %3, align 8
	%19 = bitcast %mem.Raw_Slice* %3 to {i8*, i64}*
	%20 = load {i8*, i64}, {i8*, i64}* %19, align 8
	ret {i8*, i64} %20
}

define {i64*, i64} @mem.slice_ptr-5005(i64* %ptr, i64 %len) #0 {
decls-0:
	%0 = alloca i64*, align 16
	%1 = alloca i64, align 16
	%2 = alloca %runtime.Source_Code_Location, align 16
	%3 = alloca %mem.Raw_Slice, align 16
	%4 = alloca %mem.Raw_Slice, align 16
	store i64* %ptr, i64** %0
	store i64 %len, i64* %1
	%5 = load i64, i64* %1, align 8
	%6 = icmp sge i64 %5, 0
	%7 = zext i1 %6 to i8
	%8 = trunc i8 %7 to i1
	%9 = bitcast %runtime.Source_Code_Location* %2 to %..rawptr
	store %runtime.Source_Code_Location zeroinitializer, %runtime.Source_Code_Location* %2
	store %runtime.Source_Code_Location {%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @str$1b0, i64 0, i32 0), i64 25}, i64 122, i64 2, %..string {i8* getelementptr inbounds ([10 x i8], [10 x i8]* @str$1b1, i64 0, i32 0), i64 9}}, %runtime.Source_Code_Location* %2
	%10 = call i8 @runtime.assert(i1 %8, %..string zeroinitializer, %runtime.Source_Code_Location* %2)
	; slice
	; CompoundLit
	%11 = bitcast %mem.Raw_Slice* %4 to %..rawptr
	store %mem.Raw_Slice zeroinitializer, %mem.Raw_Slice* %4
	store %mem.Raw_Slice {%..rawptr zeroinitializer, i64 zeroinitializer}, %mem.Raw_Slice* %4
	%12 = load i64*, i64** %0, align 8
	%13 = bitcast i64* %12 to %..rawptr
	%14 = getelementptr inbounds %mem.Raw_Slice, %mem.Raw_Slice* %4, i64 0, i32 0
	store %..rawptr %13, %..rawptr* %14
	%15 = load i64, i64* %1, align 8
	%16 = getelementptr inbounds %mem.Raw_Slice, %mem.Raw_Slice* %4, i64 0, i32 1
	store i64 %15, i64* %16
	%17 = load %mem.Raw_Slice, %mem.Raw_Slice* %4, align 8
	store %mem.Raw_Slice %17, %mem.Raw_Slice* %3
	; ReturnStmt
	%18 = load %mem.Raw_Slice, %mem.Raw_Slice* %3, align 8
	%19 = bitcast %mem.Raw_Slice* %3 to {i64*, i64}*
	%20 = load {i64*, i64}, {i64*, i64}* %19, align 8
	ret {i64*, i64} %20
}

define {%..rawptr*, i64, i64, %mem.Allocator} @mem.make_dynamic_array-5177(%mem.Allocator* %allocator, %runtime.Source_Code_Location* %loc, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca %mem.Allocator, align 16
	%1 = alloca %runtime.Source_Code_Location, align 16
	%2 = load %mem.Allocator, %mem.Allocator* %allocator, align 8
	%3 = load %runtime.Source_Code_Location, %runtime.Source_Code_Location* %loc, align 8
	; ReturnStmt
	%4 = load %mem.Allocator, %mem.Allocator* %allocator, align 8
	%5 = load %runtime.Source_Code_Location, %runtime.Source_Code_Location* %loc, align 8
	%6 = bitcast %mem.Allocator* %0 to %..rawptr
	store %mem.Allocator zeroinitializer, %mem.Allocator* %0
	store %mem.Allocator %4, %mem.Allocator* %0
	%7 = bitcast %runtime.Source_Code_Location* %1 to %..rawptr
	store %runtime.Source_Code_Location zeroinitializer, %runtime.Source_Code_Location* %1
	store %runtime.Source_Code_Location %5, %runtime.Source_Code_Location* %1
	%8 = call {%..rawptr*, i64, i64, %mem.Allocator} @mem.make_dynamic_array_len_cap-6962(i64 0, i64 16, %mem.Allocator* %0, %runtime.Source_Code_Location* %1, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	ret {%..rawptr*, i64, i64, %mem.Allocator} %8
}

define i64 @runtime.append_elem-5222({%..rawptr*, i64, i64, %mem.Allocator}* %array, %..rawptr %arg, %runtime.Source_Code_Location* %loc, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca {%..rawptr*, i64, i64, %mem.Allocator}*, align 16
	%1 = alloca %..rawptr, align 16
	%2 = alloca i64, align 16
	%3 = alloca i64, align 16
	%4 = alloca %runtime.Source_Code_Location, align 16
	%5 = alloca %mem.Raw_Dynamic_Array*, align 16
	%6 = alloca %..rawptr*, align 16
	%7 = alloca %runtime.Source_Code_Location, align 16
	store {%..rawptr*, i64, i64, %mem.Allocator}* %array, {%..rawptr*, i64, i64, %mem.Allocator}** %0
	store %..rawptr %arg, %..rawptr* %1
	%8 = load %runtime.Source_Code_Location, %runtime.Source_Code_Location* %loc, align 8
	; IfStmt
	%9 = load {%..rawptr*, i64, i64, %mem.Allocator}*, {%..rawptr*, i64, i64, %mem.Allocator}** %0, align 8
	%10 = icmp eq {%..rawptr*, i64, i64, %mem.Allocator}* %9, zeroinitializer
	%11 = zext i1 %10 to i8
	%12 = trunc i8 %11 to i1
	br i1 %12, label %if.then-1, label %if.done-2

if.then-1:
	; ReturnStmt
	ret i64 0

if.done-2:
	; arg_len
	store i64 1, i64* %2
	; IfStmt
	%13 = load {%..rawptr*, i64, i64, %mem.Allocator}*, {%..rawptr*, i64, i64, %mem.Allocator}** %0, align 8
	%14 = load {%..rawptr*, i64, i64, %mem.Allocator}, {%..rawptr*, i64, i64, %mem.Allocator}* %13, align 8
	%15 = extractvalue {%..rawptr*, i64, i64, %mem.Allocator} %14, 2
	%16 = load {%..rawptr*, i64, i64, %mem.Allocator}*, {%..rawptr*, i64, i64, %mem.Allocator}** %0, align 8
	%17 = load {%..rawptr*, i64, i64, %mem.Allocator}, {%..rawptr*, i64, i64, %mem.Allocator}* %16, align 8
	%18 = extractvalue {%..rawptr*, i64, i64, %mem.Allocator} %17, 1
	%19 = load i64, i64* %2, align 8
	%20 = add i64 %18, %19
	%21 = icmp sle i64 %15, %20
	%22 = zext i1 %21 to i8
	%23 = trunc i8 %22 to i1
	br i1 %23, label %if.then-3, label %if.done-4

if.then-3:
	; cap
	%24 = load {%..rawptr*, i64, i64, %mem.Allocator}*, {%..rawptr*, i64, i64, %mem.Allocator}** %0, align 8
	%25 = load {%..rawptr*, i64, i64, %mem.Allocator}, {%..rawptr*, i64, i64, %mem.Allocator}* %24, align 8
	%26 = extractvalue {%..rawptr*, i64, i64, %mem.Allocator} %25, 2
	%27 = mul i64 2, %26
	; max
	%28 = load i64, i64* %2, align 8
	%29 = icmp sgt i64 8, %28
	%30 = select i1 %29, i64 8, i64 %28
	%31 = add i64 %27, %30
	store i64 %31, i64* %3
	; AssignStmt
	%32 = load {%..rawptr*, i64, i64, %mem.Allocator}*, {%..rawptr*, i64, i64, %mem.Allocator}** %0, align 8
	%33 = load i64, i64* %3, align 8
	%34 = load %runtime.Source_Code_Location, %runtime.Source_Code_Location* %loc, align 8
	%35 = bitcast %runtime.Source_Code_Location* %4 to %..rawptr
	%36 = call %..rawptr @mem.zero(%..rawptr %35, i64 48) noinline
	store %runtime.Source_Code_Location zeroinitializer, %runtime.Source_Code_Location* %4
	store %runtime.Source_Code_Location %34, %runtime.Source_Code_Location* %4
	%37 = call i8 @runtime.reserve_dynamic_array-6984({%..rawptr*, i64, i64, %mem.Allocator}* %32, i64 %33, %runtime.Source_Code_Location* %4, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %if.done-4

if.done-4:
	; AssignStmt
	; min
	%38 = load i64, i64* %2, align 8
	%39 = load {%..rawptr*, i64, i64, %mem.Allocator}*, {%..rawptr*, i64, i64, %mem.Allocator}** %0, align 8
	%40 = load {%..rawptr*, i64, i64, %mem.Allocator}, {%..rawptr*, i64, i64, %mem.Allocator}* %39, align 8
	%41 = extractvalue {%..rawptr*, i64, i64, %mem.Allocator} %40, 2
	%42 = load {%..rawptr*, i64, i64, %mem.Allocator}*, {%..rawptr*, i64, i64, %mem.Allocator}** %0, align 8
	%43 = load {%..rawptr*, i64, i64, %mem.Allocator}, {%..rawptr*, i64, i64, %mem.Allocator}* %42, align 8
	%44 = extractvalue {%..rawptr*, i64, i64, %mem.Allocator} %43, 1
	%45 = sub i64 %41, %44
	%46 = icmp slt i64 %45, %38
	%47 = select i1 %46, i64 %45, i64 %38
	store i64 %47, i64* %2
	; IfStmt
	%48 = load i64, i64* %2, align 8
	%49 = icmp sgt i64 %48, 0
	%50 = zext i1 %49 to i8
	%51 = trunc i8 %50 to i1
	br i1 %51, label %if.then-5, label %if.done-6

if.then-5:
	; a
	%52 = load {%..rawptr*, i64, i64, %mem.Allocator}*, {%..rawptr*, i64, i64, %mem.Allocator}** %0, align 8
	%53 = bitcast {%..rawptr*, i64, i64, %mem.Allocator}* %52 to %mem.Raw_Dynamic_Array*
	store %mem.Raw_Dynamic_Array* %53, %mem.Raw_Dynamic_Array** %5
	; data
	; SelectorExpr
	%54 = load %mem.Raw_Dynamic_Array*, %mem.Raw_Dynamic_Array** %5, align 8
	%55 = getelementptr inbounds %mem.Raw_Dynamic_Array, %mem.Raw_Dynamic_Array* %54, i64 0
	%56 = getelementptr inbounds %mem.Raw_Dynamic_Array, %mem.Raw_Dynamic_Array* %55, i64 0, i32 0
	%57 = load %..rawptr, %..rawptr* %56, align 8
	%58 = bitcast %..rawptr %57 to %..rawptr*
	store %..rawptr* %58, %..rawptr** %6
	%59 = load %..rawptr*, %..rawptr** %6, align 8
	%60 = icmp ne %..rawptr* %59, zeroinitializer
	%61 = zext i1 %60 to i8
	%62 = trunc i8 %61 to i1
	%63 = bitcast %runtime.Source_Code_Location* %7 to %..rawptr
	%64 = call %..rawptr @mem.zero(%..rawptr %63, i64 48) noinline
	store %runtime.Source_Code_Location zeroinitializer, %runtime.Source_Code_Location* %7
	store %runtime.Source_Code_Location {%..string {i8* getelementptr inbounds ([31 x i8], [31 x i8]* @str$1b2, i64 0, i32 0), i64 30}, i64 483, i64 3, %..string {i8* getelementptr inbounds ([12 x i8], [12 x i8]* @str$1b3, i64 0, i32 0), i64 11}}, %runtime.Source_Code_Location* %7
	%65 = call i8 @runtime.assert(i1 %62, %..string zeroinitializer, %runtime.Source_Code_Location* %7)
	; SelectorExpr
	; SelectorExpr
	%66 = load %..rawptr*, %..rawptr** %6, align 8
	; SelectorExpr
	%67 = load %mem.Raw_Dynamic_Array*, %mem.Raw_Dynamic_Array** %5, align 8
	%68 = getelementptr inbounds %mem.Raw_Dynamic_Array, %mem.Raw_Dynamic_Array* %67, i64 0
	%69 = getelementptr inbounds %mem.Raw_Dynamic_Array, %mem.Raw_Dynamic_Array* %68, i64 0, i32 1
	%70 = load i64, i64* %69, align 8
	%71 = call %..rawptr* @mem.ptr_offset-6998(%..rawptr* %66, i64 %70)
	%72 = bitcast %..rawptr* %71 to %..rawptr
	%73 = bitcast %..rawptr* %1 to %..rawptr
	%74 = call %..rawptr @mem.copy(%..rawptr %72, %..rawptr %73, i64 8)
	; AssignStmt
	; SelectorExpr
	%75 = load %mem.Raw_Dynamic_Array*, %mem.Raw_Dynamic_Array** %5, align 8
	%76 = getelementptr inbounds %mem.Raw_Dynamic_Array, %mem.Raw_Dynamic_Array* %75, i64 0
	%77 = getelementptr inbounds %mem.Raw_Dynamic_Array, %mem.Raw_Dynamic_Array* %76, i64 0, i32 1
	%78 = load i64, i64* %2, align 8
	%79 = load i64, i64* %77, align 8
	%80 = add i64 %79, %78
	store i64 %80, i64* %77
	br label %if.done-6

if.done-6:
	; ReturnStmt
	%81 = load {%..rawptr*, i64, i64, %mem.Allocator}*, {%..rawptr*, i64, i64, %mem.Allocator}** %0, align 8
	%82 = load {%..rawptr*, i64, i64, %mem.Allocator}, {%..rawptr*, i64, i64, %mem.Allocator}* %81, align 8
	%83 = extractvalue {%..rawptr*, i64, i64, %mem.Allocator} %82, 1
	ret i64 %83
}

define void @runtime.clear_dynamic_array-5251({%..rawptr*, i64, i64, %mem.Allocator}* %array) alwaysinline #1 {
decls-0:
	%0 = alloca {%..rawptr*, i64, i64, %mem.Allocator}*, align 16
	%1 = alloca %mem.Raw_Dynamic_Array*, align 16
	store {%..rawptr*, i64, i64, %mem.Allocator}* %array, {%..rawptr*, i64, i64, %mem.Allocator}** %0
	; IfStmt
	%2 = load {%..rawptr*, i64, i64, %mem.Allocator}*, {%..rawptr*, i64, i64, %mem.Allocator}** %0, align 8
	%3 = icmp ne {%..rawptr*, i64, i64, %mem.Allocator}* %2, zeroinitializer
	%4 = zext i1 %3 to i8
	%5 = trunc i8 %4 to i1
	br i1 %5, label %if.then-1, label %if.done-2

if.then-1:
	; AssignStmt
	; SelectorExpr
	%6 = load {%..rawptr*, i64, i64, %mem.Allocator}*, {%..rawptr*, i64, i64, %mem.Allocator}** %0, align 8
	%7 = bitcast {%..rawptr*, i64, i64, %mem.Allocator}* %6 to %mem.Raw_Dynamic_Array*
	%8 = bitcast %mem.Raw_Dynamic_Array** %1 to %..rawptr
	%9 = call %..rawptr @mem.zero(%..rawptr %8, i64 8) noinline
	store %mem.Raw_Dynamic_Array* zeroinitializer, %mem.Raw_Dynamic_Array** %1
	store %mem.Raw_Dynamic_Array* %7, %mem.Raw_Dynamic_Array** %1
	%10 = load %mem.Raw_Dynamic_Array*, %mem.Raw_Dynamic_Array** %1, align 8
	%11 = getelementptr inbounds %mem.Raw_Dynamic_Array, %mem.Raw_Dynamic_Array* %10, i64 0
	%12 = getelementptr inbounds %mem.Raw_Dynamic_Array, %mem.Raw_Dynamic_Array* %11, i64 0, i32 1
	store i64 0, i64* %12
	br label %if.done-2

if.done-2:
	ret void
}

define i64 @runtime.append_string-5669({i8*, i64, i64, %mem.Allocator}* %array, {%..string*, i64}* %args, %runtime.Source_Code_Location* %loc, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca {i8*, i64, i64, %mem.Allocator}*, align 16
	%1 = alloca %..string, align 16
	%2 = alloca i64, align 16
	%3 = alloca i64, align 16
	%4 = alloca i8*, align 16
	%5 = alloca {i8*, i64}, align 16
	%6 = alloca {i8*, i64}, align 16
	%7 = alloca %runtime.Source_Code_Location, align 16
	store {i8*, i64, i64, %mem.Allocator}* %array, {i8*, i64, i64, %mem.Allocator}** %0
	%8 = load {%..string*, i64}, {%..string*, i64}* %args, align 8
	%9 = load %runtime.Source_Code_Location, %runtime.Source_Code_Location* %loc, align 8
	; RangeStmt
	; arg
	%10 = bitcast %..string* %1 to %..rawptr
	%11 = call %..rawptr @mem.zero(%..rawptr %10, i64 16) noinline
	store %..string zeroinitializer, %..string* %1
	%12 = load {%..string*, i64}, {%..string*, i64}* %args, align 8
	%13 = bitcast i64* %2 to %..rawptr
	%14 = call %..rawptr @mem.zero(%..rawptr %13, i64 8) noinline
	store i64 zeroinitializer, i64* %2
	%15 = extractvalue {%..string*, i64} %12, 1
	store i64 %15, i64* %2
	%16 = bitcast i64* %3 to %..rawptr
	%17 = call %..rawptr @mem.zero(%..rawptr %16, i64 8) noinline
	store i64 zeroinitializer, i64* %3
	store i64 -1, i64* %3
	br label %for.index.loop-1

for.index.loop-1:
	%18 = load i64, i64* %3, align 8
	%19 = add i64 %18, 1
	store i64 %19, i64* %3
	%20 = load i64, i64* %2, align 8
	%21 = icmp slt i64 %19, %20
	br i1 %21, label %for.index.body-2, label %for.index.done-3

for.index.body-2:
	%22 = load i64, i64* %3, align 8
	%23 = extractvalue {%..string*, i64} %12, 0
	%24 = getelementptr inbounds %..string, %..string* %23, i64 %22
	%25 = load %..string, %..string* %24, align 8
	store %..string %25, %..string* %1
	%26 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	%27 = load %..string, %..string* %1, align 8
	%28 = extractvalue %..string %27, 0
	%29 = bitcast i8** %4 to %..rawptr
	%30 = call %..rawptr @mem.zero(%..rawptr %29, i64 8) noinline
	store i8* zeroinitializer, i8** %4
	store i8* %28, i8** %4
	%31 = extractvalue %..string %27, 1
	%32 = sub i64 %31, 0
	%33 = load i8*, i8** %4, align 8
	%34 = getelementptr inbounds i8, i8* %33, i64 0
	%35 = bitcast {i8*, i64}* %5 to %..rawptr
	%36 = call %..rawptr @mem.zero(%..rawptr %35, i64 16) noinline
	store {i8*, i64} zeroinitializer, {i8*, i64}* %5
	%37 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %5, i64 0, i32 0
	store i8* %34, i8** %37
	%38 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %5, i64 0, i32 1
	store i64 %32, i64* %38
	%39 = load {i8*, i64}, {i8*, i64}* %5, align 8
	%40 = load %runtime.Source_Code_Location, %runtime.Source_Code_Location* %loc, align 8
	%41 = bitcast {i8*, i64}* %6 to %..rawptr
	%42 = call %..rawptr @mem.zero(%..rawptr %41, i64 16) noinline
	store {i8*, i64} zeroinitializer, {i8*, i64}* %6
	store {i8*, i64} %39, {i8*, i64}* %6
	%43 = bitcast %runtime.Source_Code_Location* %7 to %..rawptr
	%44 = call %..rawptr @mem.zero(%..rawptr %43, i64 48) noinline
	store %runtime.Source_Code_Location zeroinitializer, %runtime.Source_Code_Location* %7
	store %runtime.Source_Code_Location %40, %runtime.Source_Code_Location* %7
	%45 = call i64 @runtime.append_elems-5682({i8*, i64, i64, %mem.Allocator}* %26, {i8*, i64}* %6, %runtime.Source_Code_Location* %7, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %for.index.loop-1

for.index.done-3:
	; ReturnStmt
	%46 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	%47 = load {i8*, i64, i64, %mem.Allocator}, {i8*, i64, i64, %mem.Allocator}* %46, align 8
	%48 = extractvalue {i8*, i64, i64, %mem.Allocator} %47, 1
	ret i64 %48
}

define i64 @runtime.append_elems-5682({i8*, i64, i64, %mem.Allocator}* %array, {i8*, i64}* %args, %runtime.Source_Code_Location* %loc, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca {i8*, i64, i64, %mem.Allocator}*, align 16
	%1 = alloca i64, align 16
	%2 = alloca i64, align 16
	%3 = alloca %runtime.Source_Code_Location, align 16
	%4 = alloca %mem.Raw_Dynamic_Array*, align 16
	%5 = alloca i8*, align 16
	%6 = alloca %runtime.Source_Code_Location, align 16
	store {i8*, i64, i64, %mem.Allocator}* %array, {i8*, i64, i64, %mem.Allocator}** %0
	%7 = load {i8*, i64}, {i8*, i64}* %args, align 8
	%8 = load %runtime.Source_Code_Location, %runtime.Source_Code_Location* %loc, align 8
	; IfStmt
	%9 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	%10 = icmp eq {i8*, i64, i64, %mem.Allocator}* %9, zeroinitializer
	%11 = zext i1 %10 to i8
	%12 = trunc i8 %11 to i1
	br i1 %12, label %if.then-1, label %if.done-2

if.then-1:
	; ReturnStmt
	ret i64 0

if.done-2:
	; arg_len
	%13 = load {i8*, i64}, {i8*, i64}* %args, align 8
	%14 = extractvalue {i8*, i64} %13, 1
	store i64 %14, i64* %1
	; IfStmt
	%15 = load i64, i64* %1, align 8
	%16 = icmp sle i64 %15, 0
	%17 = zext i1 %16 to i8
	%18 = trunc i8 %17 to i1
	br i1 %18, label %if.then-3, label %if.done-4

if.then-3:
	; ReturnStmt
	%19 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	%20 = load {i8*, i64, i64, %mem.Allocator}, {i8*, i64, i64, %mem.Allocator}* %19, align 8
	%21 = extractvalue {i8*, i64, i64, %mem.Allocator} %20, 1
	ret i64 %21

if.done-4:
	; IfStmt
	%22 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	%23 = load {i8*, i64, i64, %mem.Allocator}, {i8*, i64, i64, %mem.Allocator}* %22, align 8
	%24 = extractvalue {i8*, i64, i64, %mem.Allocator} %23, 2
	%25 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	%26 = load {i8*, i64, i64, %mem.Allocator}, {i8*, i64, i64, %mem.Allocator}* %25, align 8
	%27 = extractvalue {i8*, i64, i64, %mem.Allocator} %26, 1
	%28 = load i64, i64* %1, align 8
	%29 = add i64 %27, %28
	%30 = icmp sle i64 %24, %29
	%31 = zext i1 %30 to i8
	%32 = trunc i8 %31 to i1
	br i1 %32, label %if.then-5, label %if.done-6

if.then-5:
	; cap
	%33 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	%34 = load {i8*, i64, i64, %mem.Allocator}, {i8*, i64, i64, %mem.Allocator}* %33, align 8
	%35 = extractvalue {i8*, i64, i64, %mem.Allocator} %34, 2
	%36 = mul i64 2, %35
	; max
	%37 = load i64, i64* %1, align 8
	%38 = icmp sgt i64 8, %37
	%39 = select i1 %38, i64 8, i64 %37
	%40 = add i64 %36, %39
	store i64 %40, i64* %2
	; AssignStmt
	%41 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	%42 = load i64, i64* %2, align 8
	%43 = load %runtime.Source_Code_Location, %runtime.Source_Code_Location* %loc, align 8
	%44 = bitcast %runtime.Source_Code_Location* %3 to %..rawptr
	%45 = call %..rawptr @mem.zero(%..rawptr %44, i64 48) noinline
	store %runtime.Source_Code_Location zeroinitializer, %runtime.Source_Code_Location* %3
	store %runtime.Source_Code_Location %43, %runtime.Source_Code_Location* %3
	%46 = call i8 @runtime.reserve_dynamic_array-7130({i8*, i64, i64, %mem.Allocator}* %41, i64 %42, %runtime.Source_Code_Location* %3, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %if.done-6

if.done-6:
	; AssignStmt
	; min
	%47 = load i64, i64* %1, align 8
	%48 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	%49 = load {i8*, i64, i64, %mem.Allocator}, {i8*, i64, i64, %mem.Allocator}* %48, align 8
	%50 = extractvalue {i8*, i64, i64, %mem.Allocator} %49, 2
	%51 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	%52 = load {i8*, i64, i64, %mem.Allocator}, {i8*, i64, i64, %mem.Allocator}* %51, align 8
	%53 = extractvalue {i8*, i64, i64, %mem.Allocator} %52, 1
	%54 = sub i64 %50, %53
	%55 = icmp slt i64 %54, %47
	%56 = select i1 %55, i64 %54, i64 %47
	store i64 %56, i64* %1
	; IfStmt
	%57 = load i64, i64* %1, align 8
	%58 = icmp sgt i64 %57, 0
	%59 = zext i1 %58 to i8
	%60 = trunc i8 %59 to i1
	br i1 %60, label %if.then-7, label %if.done-8

if.then-7:
	; a
	%61 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	%62 = bitcast {i8*, i64, i64, %mem.Allocator}* %61 to %mem.Raw_Dynamic_Array*
	store %mem.Raw_Dynamic_Array* %62, %mem.Raw_Dynamic_Array** %4
	; data
	; SelectorExpr
	%63 = load %mem.Raw_Dynamic_Array*, %mem.Raw_Dynamic_Array** %4, align 8
	%64 = getelementptr inbounds %mem.Raw_Dynamic_Array, %mem.Raw_Dynamic_Array* %63, i64 0
	%65 = getelementptr inbounds %mem.Raw_Dynamic_Array, %mem.Raw_Dynamic_Array* %64, i64 0, i32 0
	%66 = load %..rawptr, %..rawptr* %65, align 8
	%67 = bitcast %..rawptr %66 to i8*
	store i8* %67, i8** %5
	%68 = load i8*, i8** %5, align 8
	%69 = icmp ne i8* %68, zeroinitializer
	%70 = zext i1 %69 to i8
	%71 = trunc i8 %70 to i1
	%72 = bitcast %runtime.Source_Code_Location* %6 to %..rawptr
	%73 = call %..rawptr @mem.zero(%..rawptr %72, i64 48) noinline
	store %runtime.Source_Code_Location zeroinitializer, %runtime.Source_Code_Location* %6
	store %runtime.Source_Code_Location {%..string {i8* getelementptr inbounds ([31 x i8], [31 x i8]* @str$1b4, i64 0, i32 0), i64 30}, i64 505, i64 3, %..string {i8* getelementptr inbounds ([13 x i8], [13 x i8]* @str$1b5, i64 0, i32 0), i64 12}}, %runtime.Source_Code_Location* %6
	%74 = call i8 @runtime.assert(i1 %71, %..string zeroinitializer, %runtime.Source_Code_Location* %6)
	; SelectorExpr
	; SelectorExpr
	%75 = load i8*, i8** %5, align 8
	; SelectorExpr
	%76 = load %mem.Raw_Dynamic_Array*, %mem.Raw_Dynamic_Array** %4, align 8
	%77 = getelementptr inbounds %mem.Raw_Dynamic_Array, %mem.Raw_Dynamic_Array* %76, i64 0
	%78 = getelementptr inbounds %mem.Raw_Dynamic_Array, %mem.Raw_Dynamic_Array* %77, i64 0, i32 1
	%79 = load i64, i64* %78, align 8
	%80 = call i8* @mem.ptr_offset-4617(i8* %75, i64 %79)
	; IndexExpr
	%81 = load {i8*, i64}, {i8*, i64}* %args, align 8
	%82 = extractvalue {i8*, i64} %81, 0
	%83 = extractvalue {i8*, i64} %81, 1
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([31 x i8], [31 x i8]* @str$1b6, i64 0, i32 0), i64 30}, i64 506, i64 47, i64 0, i64 %83)
	%84 = getelementptr inbounds i8, i8* %82, i64 0
	%85 = load i64, i64* %1, align 8
	%86 = mul i64 1, %85
	%87 = bitcast i8* %80 to %..rawptr
	%88 = bitcast i8* %84 to %..rawptr
	%89 = call %..rawptr @mem.copy(%..rawptr %87, %..rawptr %88, i64 %86)
	; AssignStmt
	; SelectorExpr
	%90 = load %mem.Raw_Dynamic_Array*, %mem.Raw_Dynamic_Array** %4, align 8
	%91 = getelementptr inbounds %mem.Raw_Dynamic_Array, %mem.Raw_Dynamic_Array* %90, i64 0
	%92 = getelementptr inbounds %mem.Raw_Dynamic_Array, %mem.Raw_Dynamic_Array* %91, i64 0, i32 1
	%93 = load i64, i64* %1, align 8
	%94 = load i64, i64* %92, align 8
	%95 = add i64 %94, %93
	store i64 %95, i64* %92
	br label %if.done-8

if.done-8:
	; ReturnStmt
	%96 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	%97 = load {i8*, i64, i64, %mem.Allocator}, {i8*, i64, i64, %mem.Allocator}* %96, align 8
	%98 = extractvalue {i8*, i64, i64, %mem.Allocator} %97, 1
	ret i64 %98
}

define i64 @runtime.append_elem-5701({i8*, i64, i64, %mem.Allocator}* %array, i8 %arg, %runtime.Source_Code_Location* %loc, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca {i8*, i64, i64, %mem.Allocator}*, align 16
	%1 = alloca i8, align 16
	%2 = alloca i64, align 16
	%3 = alloca i64, align 16
	%4 = alloca %runtime.Source_Code_Location, align 16
	%5 = alloca %mem.Raw_Dynamic_Array*, align 16
	%6 = alloca i8*, align 16
	%7 = alloca %runtime.Source_Code_Location, align 16
	store {i8*, i64, i64, %mem.Allocator}* %array, {i8*, i64, i64, %mem.Allocator}** %0
	store i8 %arg, i8* %1
	%8 = load %runtime.Source_Code_Location, %runtime.Source_Code_Location* %loc, align 8
	; IfStmt
	%9 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	%10 = icmp eq {i8*, i64, i64, %mem.Allocator}* %9, zeroinitializer
	%11 = zext i1 %10 to i8
	%12 = trunc i8 %11 to i1
	br i1 %12, label %if.then-1, label %if.done-2

if.then-1:
	; ReturnStmt
	ret i64 0

if.done-2:
	; arg_len
	store i64 1, i64* %2
	; IfStmt
	%13 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	%14 = load {i8*, i64, i64, %mem.Allocator}, {i8*, i64, i64, %mem.Allocator}* %13, align 8
	%15 = extractvalue {i8*, i64, i64, %mem.Allocator} %14, 2
	%16 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	%17 = load {i8*, i64, i64, %mem.Allocator}, {i8*, i64, i64, %mem.Allocator}* %16, align 8
	%18 = extractvalue {i8*, i64, i64, %mem.Allocator} %17, 1
	%19 = load i64, i64* %2, align 8
	%20 = add i64 %18, %19
	%21 = icmp sle i64 %15, %20
	%22 = zext i1 %21 to i8
	%23 = trunc i8 %22 to i1
	br i1 %23, label %if.then-3, label %if.done-4

if.then-3:
	; cap
	%24 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	%25 = load {i8*, i64, i64, %mem.Allocator}, {i8*, i64, i64, %mem.Allocator}* %24, align 8
	%26 = extractvalue {i8*, i64, i64, %mem.Allocator} %25, 2
	%27 = mul i64 2, %26
	; max
	%28 = load i64, i64* %2, align 8
	%29 = icmp sgt i64 8, %28
	%30 = select i1 %29, i64 8, i64 %28
	%31 = add i64 %27, %30
	store i64 %31, i64* %3
	; AssignStmt
	%32 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	%33 = load i64, i64* %3, align 8
	%34 = load %runtime.Source_Code_Location, %runtime.Source_Code_Location* %loc, align 8
	%35 = bitcast %runtime.Source_Code_Location* %4 to %..rawptr
	%36 = call %..rawptr @mem.zero(%..rawptr %35, i64 48) noinline
	store %runtime.Source_Code_Location zeroinitializer, %runtime.Source_Code_Location* %4
	store %runtime.Source_Code_Location %34, %runtime.Source_Code_Location* %4
	%37 = call i8 @runtime.reserve_dynamic_array-7130({i8*, i64, i64, %mem.Allocator}* %32, i64 %33, %runtime.Source_Code_Location* %4, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	br label %if.done-4

if.done-4:
	; AssignStmt
	; min
	%38 = load i64, i64* %2, align 8
	%39 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	%40 = load {i8*, i64, i64, %mem.Allocator}, {i8*, i64, i64, %mem.Allocator}* %39, align 8
	%41 = extractvalue {i8*, i64, i64, %mem.Allocator} %40, 2
	%42 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	%43 = load {i8*, i64, i64, %mem.Allocator}, {i8*, i64, i64, %mem.Allocator}* %42, align 8
	%44 = extractvalue {i8*, i64, i64, %mem.Allocator} %43, 1
	%45 = sub i64 %41, %44
	%46 = icmp slt i64 %45, %38
	%47 = select i1 %46, i64 %45, i64 %38
	store i64 %47, i64* %2
	; IfStmt
	%48 = load i64, i64* %2, align 8
	%49 = icmp sgt i64 %48, 0
	%50 = zext i1 %49 to i8
	%51 = trunc i8 %50 to i1
	br i1 %51, label %if.then-5, label %if.done-6

if.then-5:
	; a
	%52 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	%53 = bitcast {i8*, i64, i64, %mem.Allocator}* %52 to %mem.Raw_Dynamic_Array*
	store %mem.Raw_Dynamic_Array* %53, %mem.Raw_Dynamic_Array** %5
	; data
	; SelectorExpr
	%54 = load %mem.Raw_Dynamic_Array*, %mem.Raw_Dynamic_Array** %5, align 8
	%55 = getelementptr inbounds %mem.Raw_Dynamic_Array, %mem.Raw_Dynamic_Array* %54, i64 0
	%56 = getelementptr inbounds %mem.Raw_Dynamic_Array, %mem.Raw_Dynamic_Array* %55, i64 0, i32 0
	%57 = load %..rawptr, %..rawptr* %56, align 8
	%58 = bitcast %..rawptr %57 to i8*
	store i8* %58, i8** %6
	%59 = load i8*, i8** %6, align 8
	%60 = icmp ne i8* %59, zeroinitializer
	%61 = zext i1 %60 to i8
	%62 = trunc i8 %61 to i1
	%63 = bitcast %runtime.Source_Code_Location* %7 to %..rawptr
	%64 = call %..rawptr @mem.zero(%..rawptr %63, i64 48) noinline
	store %runtime.Source_Code_Location zeroinitializer, %runtime.Source_Code_Location* %7
	store %runtime.Source_Code_Location {%..string {i8* getelementptr inbounds ([31 x i8], [31 x i8]* @str$1b7, i64 0, i32 0), i64 30}, i64 483, i64 3, %..string {i8* getelementptr inbounds ([12 x i8], [12 x i8]* @str$1b8, i64 0, i32 0), i64 11}}, %runtime.Source_Code_Location* %7
	%65 = call i8 @runtime.assert(i1 %62, %..string zeroinitializer, %runtime.Source_Code_Location* %7)
	; SelectorExpr
	; SelectorExpr
	%66 = load i8*, i8** %6, align 8
	; SelectorExpr
	%67 = load %mem.Raw_Dynamic_Array*, %mem.Raw_Dynamic_Array** %5, align 8
	%68 = getelementptr inbounds %mem.Raw_Dynamic_Array, %mem.Raw_Dynamic_Array* %67, i64 0
	%69 = getelementptr inbounds %mem.Raw_Dynamic_Array, %mem.Raw_Dynamic_Array* %68, i64 0, i32 1
	%70 = load i64, i64* %69, align 8
	%71 = call i8* @mem.ptr_offset-4617(i8* %66, i64 %70)
	%72 = bitcast i8* %71 to %..rawptr
	%73 = bitcast i8* %1 to %..rawptr
	%74 = call %..rawptr @mem.copy(%..rawptr %72, %..rawptr %73, i64 1)
	; AssignStmt
	; SelectorExpr
	%75 = load %mem.Raw_Dynamic_Array*, %mem.Raw_Dynamic_Array** %5, align 8
	%76 = getelementptr inbounds %mem.Raw_Dynamic_Array, %mem.Raw_Dynamic_Array* %75, i64 0
	%77 = getelementptr inbounds %mem.Raw_Dynamic_Array, %mem.Raw_Dynamic_Array* %76, i64 0, i32 1
	%78 = load i64, i64* %2, align 8
	%79 = load i64, i64* %77, align 8
	%80 = add i64 %79, %78
	store i64 %80, i64* %77
	br label %if.done-6

if.done-6:
	; ReturnStmt
	%81 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	%82 = load {i8*, i64, i64, %mem.Allocator}, {i8*, i64, i64, %mem.Allocator}* %81, align 8
	%83 = extractvalue {i8*, i64, i64, %mem.Allocator} %82, 1
	ret i64 %83
}

define {i8*, i64, i64, %mem.Allocator} @mem.make_dynamic_array-5748(%mem.Allocator* %allocator, %runtime.Source_Code_Location* %loc, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca %mem.Allocator, align 16
	%1 = alloca %runtime.Source_Code_Location, align 16
	%2 = load %mem.Allocator, %mem.Allocator* %allocator, align 8
	%3 = load %runtime.Source_Code_Location, %runtime.Source_Code_Location* %loc, align 8
	; ReturnStmt
	%4 = load %mem.Allocator, %mem.Allocator* %allocator, align 8
	%5 = load %runtime.Source_Code_Location, %runtime.Source_Code_Location* %loc, align 8
	%6 = bitcast %mem.Allocator* %0 to %..rawptr
	store %mem.Allocator zeroinitializer, %mem.Allocator* %0
	store %mem.Allocator %4, %mem.Allocator* %0
	%7 = bitcast %runtime.Source_Code_Location* %1 to %..rawptr
	store %runtime.Source_Code_Location zeroinitializer, %runtime.Source_Code_Location* %1
	store %runtime.Source_Code_Location %5, %runtime.Source_Code_Location* %1
	%8 = call {i8*, i64, i64, %mem.Allocator} @mem.make_dynamic_array_len_cap-7178(i64 0, i64 16, %mem.Allocator* %0, %runtime.Source_Code_Location* %1, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	ret {i8*, i64, i64, %mem.Allocator} %8
}

define i64 @runtime.copy-6386({i8*, i64}* %dst, {i8*, i64}* %src) #0 {
decls-0:
	%0 = alloca i64, align 16
	%1 = load {i8*, i64}, {i8*, i64}* %dst, align 8
	%2 = load {i8*, i64}, {i8*, i64}* %src, align 8
	; n
	; max
	; min
	%3 = load {i8*, i64}, {i8*, i64}* %src, align 8
	%4 = extractvalue {i8*, i64} %3, 1
	%5 = load {i8*, i64}, {i8*, i64}* %dst, align 8
	%6 = extractvalue {i8*, i64} %5, 1
	%7 = icmp slt i64 %6, %4
	%8 = select i1 %7, i64 %6, i64 %4
	%9 = icmp sgt i64 0, %8
	%10 = select i1 %9, i64 0, i64 %8
	store i64 %10, i64* %0
	; IfStmt
	%11 = load i64, i64* %0, align 8
	%12 = icmp sgt i64 %11, 0
	%13 = zext i1 %12 to i8
	%14 = trunc i8 %13 to i1
	br i1 %14, label %if.then-1, label %if.done-2

if.then-1:
	; SelectorExpr
	; IndexExpr
	%15 = load {i8*, i64}, {i8*, i64}* %dst, align 8
	%16 = extractvalue {i8*, i64} %15, 0
	%17 = extractvalue {i8*, i64} %15, 1
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([31 x i8], [31 x i8]* @str$1b9, i64 0, i32 0), i64 30}, i64 370, i64 28, i64 0, i64 %17)
	%18 = getelementptr inbounds i8, i8* %16, i64 0
	; IndexExpr
	%19 = load {i8*, i64}, {i8*, i64}* %src, align 8
	%20 = extractvalue {i8*, i64} %19, 0
	%21 = extractvalue {i8*, i64} %19, 1
	call void @runtime.bounds_check_error(%..string {i8* getelementptr inbounds ([31 x i8], [31 x i8]* @str$1ba, i64 0, i32 0), i64 30}, i64 370, i64 37, i64 0, i64 %21)
	%22 = getelementptr inbounds i8, i8* %20, i64 0
	%23 = load i64, i64* %0, align 8
	%24 = mul i64 %23, 1
	%25 = bitcast i8* %18 to %..rawptr
	%26 = bitcast i8* %22 to %..rawptr
	%27 = call %..rawptr @mem.copy(%..rawptr %25, %..rawptr %26, i64 %24)
	br label %if.done-2

if.done-2:
	; ReturnStmt
	%28 = load i64, i64* %0, align 8
	ret i64 %28
}

define {%..rawptr*, i64, i64, %mem.Allocator} @mem.make_dynamic_array_len_cap-6962(i64 %len, i64 %cap, %mem.Allocator* %allocator, %runtime.Source_Code_Location* %loc, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca i64, align 16
	%1 = alloca i64, align 16
	%2 = alloca %runtime.Source_Code_Location, align 16
	%3 = alloca %..rawptr, align 16
	%4 = alloca %mem.Allocator, align 16
	%5 = alloca %runtime.Source_Code_Location, align 16
	%6 = alloca %mem.Raw_Dynamic_Array, align 16
	%7 = alloca %mem.Raw_Dynamic_Array, align 16
	store i64 %len, i64* %0
	store i64 %cap, i64* %1
	%8 = load %mem.Allocator, %mem.Allocator* %allocator, align 8
	%9 = load %runtime.Source_Code_Location, %runtime.Source_Code_Location* %loc, align 8
	; SelectorExpr
	%10 = load %runtime.Source_Code_Location, %runtime.Source_Code_Location* %loc, align 8
	%11 = load i64, i64* %0, align 8
	%12 = load i64, i64* %1, align 8
	%13 = bitcast %runtime.Source_Code_Location* %2 to %..rawptr
	store %runtime.Source_Code_Location zeroinitializer, %runtime.Source_Code_Location* %2
	store %runtime.Source_Code_Location %10, %runtime.Source_Code_Location* %2
	call void @runtime.make_dynamic_array_error_loc(%runtime.Source_Code_Location* %2, i64 %11, i64 %12)
	; data
	%14 = load i64, i64* %1, align 8
	%15 = mul i64 8, %14
	%16 = load %mem.Allocator, %mem.Allocator* %allocator, align 8
	%17 = load %runtime.Source_Code_Location, %runtime.Source_Code_Location* %loc, align 8
	%18 = bitcast %mem.Allocator* %4 to %..rawptr
	store %mem.Allocator zeroinitializer, %mem.Allocator* %4
	store %mem.Allocator %16, %mem.Allocator* %4
	%19 = bitcast %runtime.Source_Code_Location* %5 to %..rawptr
	store %runtime.Source_Code_Location zeroinitializer, %runtime.Source_Code_Location* %5
	store %runtime.Source_Code_Location %17, %runtime.Source_Code_Location* %5
	%20 = call %..rawptr @mem.alloc(i64 %15, i64 8, %mem.Allocator* %4, %runtime.Source_Code_Location* %5, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	store %..rawptr %20, %..rawptr* %3
	; s
	; CompoundLit
	%21 = bitcast %mem.Raw_Dynamic_Array* %7 to %..rawptr
	store %mem.Raw_Dynamic_Array zeroinitializer, %mem.Raw_Dynamic_Array* %7
	store %mem.Raw_Dynamic_Array {%..rawptr zeroinitializer, i64 zeroinitializer, i64 zeroinitializer, %mem.Allocator zeroinitializer}, %mem.Raw_Dynamic_Array* %7
	%22 = load %..rawptr, %..rawptr* %3, align 8
	%23 = getelementptr inbounds %mem.Raw_Dynamic_Array, %mem.Raw_Dynamic_Array* %7, i64 0, i32 0
	store %..rawptr %22, %..rawptr* %23
	%24 = load i64, i64* %0, align 8
	%25 = getelementptr inbounds %mem.Raw_Dynamic_Array, %mem.Raw_Dynamic_Array* %7, i64 0, i32 1
	store i64 %24, i64* %25
	%26 = load i64, i64* %1, align 8
	%27 = getelementptr inbounds %mem.Raw_Dynamic_Array, %mem.Raw_Dynamic_Array* %7, i64 0, i32 2
	store i64 %26, i64* %27
	%28 = load %mem.Allocator, %mem.Allocator* %allocator, align 8
	%29 = getelementptr inbounds %mem.Raw_Dynamic_Array, %mem.Raw_Dynamic_Array* %7, i64 0, i32 3
	store %mem.Allocator %28, %mem.Allocator* %29
	%30 = load %mem.Raw_Dynamic_Array, %mem.Raw_Dynamic_Array* %7, align 8
	store %mem.Raw_Dynamic_Array %30, %mem.Raw_Dynamic_Array* %6
	; ReturnStmt
	%31 = load %mem.Raw_Dynamic_Array, %mem.Raw_Dynamic_Array* %6, align 8
	%32 = bitcast %mem.Raw_Dynamic_Array* %6 to {%..rawptr*, i64, i64, %mem.Allocator}*
	%33 = load {%..rawptr*, i64, i64, %mem.Allocator}, {%..rawptr*, i64, i64, %mem.Allocator}* %32, align 8
	ret {%..rawptr*, i64, i64, %mem.Allocator} %33
}

define i8 @runtime.reserve_dynamic_array-6984({%..rawptr*, i64, i64, %mem.Allocator}* %array, i64 %capacity, %runtime.Source_Code_Location* %loc, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca {%..rawptr*, i64, i64, %mem.Allocator}*, align 16
	%1 = alloca i64, align 16
	%2 = alloca %mem.Raw_Dynamic_Array*, align 16
	%3 = alloca %runtime.Source_Code_Location, align 16
	%4 = alloca i64, align 16
	%5 = alloca i64, align 16
	%6 = alloca %mem.Allocator, align 16
	%7 = alloca %..rawptr, align 16
	%8 = alloca %runtime.Source_Code_Location, align 16
	store {%..rawptr*, i64, i64, %mem.Allocator}* %array, {%..rawptr*, i64, i64, %mem.Allocator}** %0
	store i64 %capacity, i64* %1
	%9 = load %runtime.Source_Code_Location, %runtime.Source_Code_Location* %loc, align 8
	; IfStmt
	%10 = load {%..rawptr*, i64, i64, %mem.Allocator}*, {%..rawptr*, i64, i64, %mem.Allocator}** %0, align 8
	%11 = icmp eq {%..rawptr*, i64, i64, %mem.Allocator}* %10, zeroinitializer
	%12 = zext i1 %11 to i8
	%13 = trunc i8 %12 to i1
	br i1 %13, label %if.then-1, label %if.done-2

if.then-1:
	; ReturnStmt
	ret i8 0

if.done-2:
	; a
	%14 = load {%..rawptr*, i64, i64, %mem.Allocator}*, {%..rawptr*, i64, i64, %mem.Allocator}** %0, align 8
	%15 = bitcast {%..rawptr*, i64, i64, %mem.Allocator}* %14 to %mem.Raw_Dynamic_Array*
	store %mem.Raw_Dynamic_Array* %15, %mem.Raw_Dynamic_Array** %2
	; IfStmt
	%16 = load i64, i64* %1, align 8
	; SelectorExpr
	%17 = load %mem.Raw_Dynamic_Array*, %mem.Raw_Dynamic_Array** %2, align 8
	%18 = getelementptr inbounds %mem.Raw_Dynamic_Array, %mem.Raw_Dynamic_Array* %17, i64 0
	%19 = getelementptr inbounds %mem.Raw_Dynamic_Array, %mem.Raw_Dynamic_Array* %18, i64 0, i32 2
	%20 = load i64, i64* %19, align 8
	%21 = icmp sle i64 %16, %20
	%22 = zext i1 %21 to i8
	%23 = trunc i8 %22 to i1
	br i1 %23, label %if.then-3, label %if.done-4

if.then-3:
	; ReturnStmt
	ret i8 1

if.done-4:
	; IfStmt
	; SelectorExpr
	; SelectorExpr
	%24 = load %mem.Raw_Dynamic_Array*, %mem.Raw_Dynamic_Array** %2, align 8
	%25 = getelementptr inbounds %mem.Raw_Dynamic_Array, %mem.Raw_Dynamic_Array* %24, i64 0
	%26 = getelementptr inbounds %mem.Raw_Dynamic_Array, %mem.Raw_Dynamic_Array* %25, i64 0, i32 3
	%27 = getelementptr inbounds %mem.Allocator, %mem.Allocator* %26, i64 0, i32 0
	%28 = load %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64, %runtime.Source_Code_Location*, %runtime.Context*)*, %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64, %runtime.Source_Code_Location*, %runtime.Context*)** %27, align 8
	%29 = icmp eq %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64, %runtime.Source_Code_Location*, %runtime.Context*)* %28, zeroinitializer
	%30 = zext i1 %29 to i8
	%31 = trunc i8 %30 to i1
	br i1 %31, label %if.then-5, label %if.done-6

if.then-5:
	; AssignStmt
	; SelectorExpr
	%32 = load %mem.Raw_Dynamic_Array*, %mem.Raw_Dynamic_Array** %2, align 8
	%33 = getelementptr inbounds %mem.Raw_Dynamic_Array, %mem.Raw_Dynamic_Array* %32, i64 0
	%34 = getelementptr inbounds %mem.Raw_Dynamic_Array, %mem.Raw_Dynamic_Array* %33, i64 0, i32 3
	; SelectorExpr
	%35 = getelementptr inbounds %runtime.Context, %runtime.Context* %__.context_ptr, i64 0, i32 0
	%36 = load %mem.Allocator, %mem.Allocator* %35, align 8
	store %mem.Allocator %36, %mem.Allocator* %34
	br label %if.done-6

if.done-6:
	; SelectorExpr
	; SelectorExpr
	%37 = load %mem.Raw_Dynamic_Array*, %mem.Raw_Dynamic_Array** %2, align 8
	%38 = getelementptr inbounds %mem.Raw_Dynamic_Array, %mem.Raw_Dynamic_Array* %37, i64 0
	%39 = getelementptr inbounds %mem.Raw_Dynamic_Array, %mem.Raw_Dynamic_Array* %38, i64 0, i32 3
	%40 = getelementptr inbounds %mem.Allocator, %mem.Allocator* %39, i64 0, i32 0
	%41 = load %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64, %runtime.Source_Code_Location*, %runtime.Context*)*, %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64, %runtime.Source_Code_Location*, %runtime.Context*)** %40, align 8
	%42 = icmp ne %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64, %runtime.Source_Code_Location*, %runtime.Context*)* %41, zeroinitializer
	%43 = zext i1 %42 to i8
	%44 = trunc i8 %43 to i1
	%45 = bitcast %runtime.Source_Code_Location* %3 to %..rawptr
	%46 = call %..rawptr @mem.zero(%..rawptr %45, i64 48) noinline
	store %runtime.Source_Code_Location zeroinitializer, %runtime.Source_Code_Location* %3
	store %runtime.Source_Code_Location {%..string {i8* getelementptr inbounds ([31 x i8], [31 x i8]* @str$1bb, i64 0, i32 0), i64 30}, i64 538, i64 2, %..string {i8* getelementptr inbounds ([22 x i8], [22 x i8]* @str$1bc, i64 0, i32 0), i64 21}}, %runtime.Source_Code_Location* %3
	%47 = call i8 @runtime.assert(i1 %44, %..string zeroinitializer, %runtime.Source_Code_Location* %3)
	; old_size
	; SelectorExpr
	%48 = load %mem.Raw_Dynamic_Array*, %mem.Raw_Dynamic_Array** %2, align 8
	%49 = getelementptr inbounds %mem.Raw_Dynamic_Array, %mem.Raw_Dynamic_Array* %48, i64 0
	%50 = getelementptr inbounds %mem.Raw_Dynamic_Array, %mem.Raw_Dynamic_Array* %49, i64 0, i32 2
	%51 = load i64, i64* %50, align 8
	%52 = mul i64 %51, 8
	store i64 %52, i64* %4
	; new_size
	%53 = load i64, i64* %1, align 8
	%54 = mul i64 %53, 8
	store i64 %54, i64* %5
	; allocator
	; SelectorExpr
	%55 = load %mem.Raw_Dynamic_Array*, %mem.Raw_Dynamic_Array** %2, align 8
	%56 = getelementptr inbounds %mem.Raw_Dynamic_Array, %mem.Raw_Dynamic_Array* %55, i64 0
	%57 = getelementptr inbounds %mem.Raw_Dynamic_Array, %mem.Raw_Dynamic_Array* %56, i64 0, i32 3
	%58 = load %mem.Allocator, %mem.Allocator* %57, align 8
	store %mem.Allocator %58, %mem.Allocator* %6
	; new_data
	; SelectorExpr
	%59 = getelementptr inbounds %mem.Allocator, %mem.Allocator* %6, i64 0, i32 0
	%60 = load %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64, %runtime.Source_Code_Location*, %runtime.Context*)*, %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64, %runtime.Source_Code_Location*, %runtime.Context*)** %59, align 8
	; SelectorExpr
	%61 = getelementptr inbounds %mem.Allocator, %mem.Allocator* %6, i64 0, i32 1
	%62 = load %..rawptr, %..rawptr* %61, align 8
	%63 = load i64, i64* %5, align 8
	; SelectorExpr
	%64 = load %mem.Raw_Dynamic_Array*, %mem.Raw_Dynamic_Array** %2, align 8
	%65 = getelementptr inbounds %mem.Raw_Dynamic_Array, %mem.Raw_Dynamic_Array* %64, i64 0
	%66 = getelementptr inbounds %mem.Raw_Dynamic_Array, %mem.Raw_Dynamic_Array* %65, i64 0, i32 0
	%67 = load %..rawptr, %..rawptr* %66, align 8
	%68 = load i64, i64* %4, align 8
	%69 = load %runtime.Source_Code_Location, %runtime.Source_Code_Location* %loc, align 8
	%70 = bitcast %runtime.Source_Code_Location* %8 to %..rawptr
	%71 = call %..rawptr @mem.zero(%..rawptr %70, i64 48) noinline
	store %runtime.Source_Code_Location zeroinitializer, %runtime.Source_Code_Location* %8
	store %runtime.Source_Code_Location %69, %runtime.Source_Code_Location* %8
	%72 = call %..rawptr %60(%..rawptr %62, i8 3, i64 %63, i64 8, %..rawptr %67, i64 %68, i64 0, %runtime.Source_Code_Location* %8, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	store %..rawptr %72, %..rawptr* %7
	; IfStmt
	%73 = load %..rawptr, %..rawptr* %7, align 8
	%74 = icmp eq %..rawptr %73, zeroinitializer
	%75 = zext i1 %74 to i8
	%76 = trunc i8 %75 to i1
	br i1 %76, label %if.then-7, label %if.done-8

if.then-7:
	; ReturnStmt
	ret i8 0

if.done-8:
	; AssignStmt
	; SelectorExpr
	%77 = load %mem.Raw_Dynamic_Array*, %mem.Raw_Dynamic_Array** %2, align 8
	%78 = getelementptr inbounds %mem.Raw_Dynamic_Array, %mem.Raw_Dynamic_Array* %77, i64 0
	%79 = getelementptr inbounds %mem.Raw_Dynamic_Array, %mem.Raw_Dynamic_Array* %78, i64 0, i32 0
	%80 = load %..rawptr, %..rawptr* %7, align 8
	store %..rawptr %80, %..rawptr* %79
	; AssignStmt
	; SelectorExpr
	%81 = load %mem.Raw_Dynamic_Array*, %mem.Raw_Dynamic_Array** %2, align 8
	%82 = getelementptr inbounds %mem.Raw_Dynamic_Array, %mem.Raw_Dynamic_Array* %81, i64 0
	%83 = getelementptr inbounds %mem.Raw_Dynamic_Array, %mem.Raw_Dynamic_Array* %82, i64 0, i32 2
	%84 = load i64, i64* %1, align 8
	store i64 %84, i64* %83
	; ReturnStmt
	ret i8 1
}

define %..rawptr* @mem.ptr_offset-6998(%..rawptr* %ptr, i64 %n) #0 {
decls-0:
	%0 = alloca %..rawptr*, align 16
	%1 = alloca i64, align 16
	%2 = alloca i64, align 16
	store %..rawptr* %ptr, %..rawptr** %0
	store i64 %n, i64* %1
	; new
	%3 = load %..rawptr*, %..rawptr** %0, align 8
	%4 = ptrtoint %..rawptr* %3 to i64
	%5 = bitcast i64 %4 to i64
	%6 = load i64, i64* %1, align 8
	%7 = mul i64 8, %6
	%8 = add i64 %5, %7
	store i64 %8, i64* %2
	; ReturnStmt
	%9 = load i64, i64* %2, align 8
	%10 = bitcast i64 %9 to i64
	%11 = inttoptr i64 %10 to %..rawptr*
	ret %..rawptr* %11
}

define i8 @runtime.reserve_dynamic_array-7130({i8*, i64, i64, %mem.Allocator}* %array, i64 %capacity, %runtime.Source_Code_Location* %loc, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca {i8*, i64, i64, %mem.Allocator}*, align 16
	%1 = alloca i64, align 16
	%2 = alloca %mem.Raw_Dynamic_Array*, align 16
	%3 = alloca %runtime.Source_Code_Location, align 16
	%4 = alloca i64, align 16
	%5 = alloca i64, align 16
	%6 = alloca %mem.Allocator, align 16
	%7 = alloca %..rawptr, align 16
	%8 = alloca %runtime.Source_Code_Location, align 16
	store {i8*, i64, i64, %mem.Allocator}* %array, {i8*, i64, i64, %mem.Allocator}** %0
	store i64 %capacity, i64* %1
	%9 = load %runtime.Source_Code_Location, %runtime.Source_Code_Location* %loc, align 8
	; IfStmt
	%10 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	%11 = icmp eq {i8*, i64, i64, %mem.Allocator}* %10, zeroinitializer
	%12 = zext i1 %11 to i8
	%13 = trunc i8 %12 to i1
	br i1 %13, label %if.then-1, label %if.done-2

if.then-1:
	; ReturnStmt
	ret i8 0

if.done-2:
	; a
	%14 = load {i8*, i64, i64, %mem.Allocator}*, {i8*, i64, i64, %mem.Allocator}** %0, align 8
	%15 = bitcast {i8*, i64, i64, %mem.Allocator}* %14 to %mem.Raw_Dynamic_Array*
	store %mem.Raw_Dynamic_Array* %15, %mem.Raw_Dynamic_Array** %2
	; IfStmt
	%16 = load i64, i64* %1, align 8
	; SelectorExpr
	%17 = load %mem.Raw_Dynamic_Array*, %mem.Raw_Dynamic_Array** %2, align 8
	%18 = getelementptr inbounds %mem.Raw_Dynamic_Array, %mem.Raw_Dynamic_Array* %17, i64 0
	%19 = getelementptr inbounds %mem.Raw_Dynamic_Array, %mem.Raw_Dynamic_Array* %18, i64 0, i32 2
	%20 = load i64, i64* %19, align 8
	%21 = icmp sle i64 %16, %20
	%22 = zext i1 %21 to i8
	%23 = trunc i8 %22 to i1
	br i1 %23, label %if.then-3, label %if.done-4

if.then-3:
	; ReturnStmt
	ret i8 1

if.done-4:
	; IfStmt
	; SelectorExpr
	; SelectorExpr
	%24 = load %mem.Raw_Dynamic_Array*, %mem.Raw_Dynamic_Array** %2, align 8
	%25 = getelementptr inbounds %mem.Raw_Dynamic_Array, %mem.Raw_Dynamic_Array* %24, i64 0
	%26 = getelementptr inbounds %mem.Raw_Dynamic_Array, %mem.Raw_Dynamic_Array* %25, i64 0, i32 3
	%27 = getelementptr inbounds %mem.Allocator, %mem.Allocator* %26, i64 0, i32 0
	%28 = load %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64, %runtime.Source_Code_Location*, %runtime.Context*)*, %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64, %runtime.Source_Code_Location*, %runtime.Context*)** %27, align 8
	%29 = icmp eq %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64, %runtime.Source_Code_Location*, %runtime.Context*)* %28, zeroinitializer
	%30 = zext i1 %29 to i8
	%31 = trunc i8 %30 to i1
	br i1 %31, label %if.then-5, label %if.done-6

if.then-5:
	; AssignStmt
	; SelectorExpr
	%32 = load %mem.Raw_Dynamic_Array*, %mem.Raw_Dynamic_Array** %2, align 8
	%33 = getelementptr inbounds %mem.Raw_Dynamic_Array, %mem.Raw_Dynamic_Array* %32, i64 0
	%34 = getelementptr inbounds %mem.Raw_Dynamic_Array, %mem.Raw_Dynamic_Array* %33, i64 0, i32 3
	; SelectorExpr
	%35 = getelementptr inbounds %runtime.Context, %runtime.Context* %__.context_ptr, i64 0, i32 0
	%36 = load %mem.Allocator, %mem.Allocator* %35, align 8
	store %mem.Allocator %36, %mem.Allocator* %34
	br label %if.done-6

if.done-6:
	; SelectorExpr
	; SelectorExpr
	%37 = load %mem.Raw_Dynamic_Array*, %mem.Raw_Dynamic_Array** %2, align 8
	%38 = getelementptr inbounds %mem.Raw_Dynamic_Array, %mem.Raw_Dynamic_Array* %37, i64 0
	%39 = getelementptr inbounds %mem.Raw_Dynamic_Array, %mem.Raw_Dynamic_Array* %38, i64 0, i32 3
	%40 = getelementptr inbounds %mem.Allocator, %mem.Allocator* %39, i64 0, i32 0
	%41 = load %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64, %runtime.Source_Code_Location*, %runtime.Context*)*, %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64, %runtime.Source_Code_Location*, %runtime.Context*)** %40, align 8
	%42 = icmp ne %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64, %runtime.Source_Code_Location*, %runtime.Context*)* %41, zeroinitializer
	%43 = zext i1 %42 to i8
	%44 = trunc i8 %43 to i1
	%45 = bitcast %runtime.Source_Code_Location* %3 to %..rawptr
	%46 = call %..rawptr @mem.zero(%..rawptr %45, i64 48) noinline
	store %runtime.Source_Code_Location zeroinitializer, %runtime.Source_Code_Location* %3
	store %runtime.Source_Code_Location {%..string {i8* getelementptr inbounds ([31 x i8], [31 x i8]* @str$1bd, i64 0, i32 0), i64 30}, i64 538, i64 2, %..string {i8* getelementptr inbounds ([22 x i8], [22 x i8]* @str$1be, i64 0, i32 0), i64 21}}, %runtime.Source_Code_Location* %3
	%47 = call i8 @runtime.assert(i1 %44, %..string zeroinitializer, %runtime.Source_Code_Location* %3)
	; old_size
	; SelectorExpr
	%48 = load %mem.Raw_Dynamic_Array*, %mem.Raw_Dynamic_Array** %2, align 8
	%49 = getelementptr inbounds %mem.Raw_Dynamic_Array, %mem.Raw_Dynamic_Array* %48, i64 0
	%50 = getelementptr inbounds %mem.Raw_Dynamic_Array, %mem.Raw_Dynamic_Array* %49, i64 0, i32 2
	%51 = load i64, i64* %50, align 8
	%52 = mul i64 %51, 1
	store i64 %52, i64* %4
	; new_size
	%53 = load i64, i64* %1, align 8
	%54 = mul i64 %53, 1
	store i64 %54, i64* %5
	; allocator
	; SelectorExpr
	%55 = load %mem.Raw_Dynamic_Array*, %mem.Raw_Dynamic_Array** %2, align 8
	%56 = getelementptr inbounds %mem.Raw_Dynamic_Array, %mem.Raw_Dynamic_Array* %55, i64 0
	%57 = getelementptr inbounds %mem.Raw_Dynamic_Array, %mem.Raw_Dynamic_Array* %56, i64 0, i32 3
	%58 = load %mem.Allocator, %mem.Allocator* %57, align 8
	store %mem.Allocator %58, %mem.Allocator* %6
	; new_data
	; SelectorExpr
	%59 = getelementptr inbounds %mem.Allocator, %mem.Allocator* %6, i64 0, i32 0
	%60 = load %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64, %runtime.Source_Code_Location*, %runtime.Context*)*, %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64, %runtime.Source_Code_Location*, %runtime.Context*)** %59, align 8
	; SelectorExpr
	%61 = getelementptr inbounds %mem.Allocator, %mem.Allocator* %6, i64 0, i32 1
	%62 = load %..rawptr, %..rawptr* %61, align 8
	%63 = load i64, i64* %5, align 8
	; SelectorExpr
	%64 = load %mem.Raw_Dynamic_Array*, %mem.Raw_Dynamic_Array** %2, align 8
	%65 = getelementptr inbounds %mem.Raw_Dynamic_Array, %mem.Raw_Dynamic_Array* %64, i64 0
	%66 = getelementptr inbounds %mem.Raw_Dynamic_Array, %mem.Raw_Dynamic_Array* %65, i64 0, i32 0
	%67 = load %..rawptr, %..rawptr* %66, align 8
	%68 = load i64, i64* %4, align 8
	%69 = load %runtime.Source_Code_Location, %runtime.Source_Code_Location* %loc, align 8
	%70 = bitcast %runtime.Source_Code_Location* %8 to %..rawptr
	%71 = call %..rawptr @mem.zero(%..rawptr %70, i64 48) noinline
	store %runtime.Source_Code_Location zeroinitializer, %runtime.Source_Code_Location* %8
	store %runtime.Source_Code_Location %69, %runtime.Source_Code_Location* %8
	%72 = call %..rawptr %60(%..rawptr %62, i8 3, i64 %63, i64 1, %..rawptr %67, i64 %68, i64 0, %runtime.Source_Code_Location* %8, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	store %..rawptr %72, %..rawptr* %7
	; IfStmt
	%73 = load %..rawptr, %..rawptr* %7, align 8
	%74 = icmp eq %..rawptr %73, zeroinitializer
	%75 = zext i1 %74 to i8
	%76 = trunc i8 %75 to i1
	br i1 %76, label %if.then-7, label %if.done-8

if.then-7:
	; ReturnStmt
	ret i8 0

if.done-8:
	; AssignStmt
	; SelectorExpr
	%77 = load %mem.Raw_Dynamic_Array*, %mem.Raw_Dynamic_Array** %2, align 8
	%78 = getelementptr inbounds %mem.Raw_Dynamic_Array, %mem.Raw_Dynamic_Array* %77, i64 0
	%79 = getelementptr inbounds %mem.Raw_Dynamic_Array, %mem.Raw_Dynamic_Array* %78, i64 0, i32 0
	%80 = load %..rawptr, %..rawptr* %7, align 8
	store %..rawptr %80, %..rawptr* %79
	; AssignStmt
	; SelectorExpr
	%81 = load %mem.Raw_Dynamic_Array*, %mem.Raw_Dynamic_Array** %2, align 8
	%82 = getelementptr inbounds %mem.Raw_Dynamic_Array, %mem.Raw_Dynamic_Array* %81, i64 0
	%83 = getelementptr inbounds %mem.Raw_Dynamic_Array, %mem.Raw_Dynamic_Array* %82, i64 0, i32 2
	%84 = load i64, i64* %1, align 8
	store i64 %84, i64* %83
	; ReturnStmt
	ret i8 1
}

define {i8*, i64, i64, %mem.Allocator} @mem.make_dynamic_array_len_cap-7178(i64 %len, i64 %cap, %mem.Allocator* %allocator, %runtime.Source_Code_Location* %loc, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr) #0 {
decls-0:
	%0 = alloca i64, align 16
	%1 = alloca i64, align 16
	%2 = alloca %runtime.Source_Code_Location, align 16
	%3 = alloca %..rawptr, align 16
	%4 = alloca %mem.Allocator, align 16
	%5 = alloca %runtime.Source_Code_Location, align 16
	%6 = alloca %mem.Raw_Dynamic_Array, align 16
	%7 = alloca %mem.Raw_Dynamic_Array, align 16
	store i64 %len, i64* %0
	store i64 %cap, i64* %1
	%8 = load %mem.Allocator, %mem.Allocator* %allocator, align 8
	%9 = load %runtime.Source_Code_Location, %runtime.Source_Code_Location* %loc, align 8
	; SelectorExpr
	%10 = load %runtime.Source_Code_Location, %runtime.Source_Code_Location* %loc, align 8
	%11 = load i64, i64* %0, align 8
	%12 = load i64, i64* %1, align 8
	%13 = bitcast %runtime.Source_Code_Location* %2 to %..rawptr
	store %runtime.Source_Code_Location zeroinitializer, %runtime.Source_Code_Location* %2
	store %runtime.Source_Code_Location %10, %runtime.Source_Code_Location* %2
	call void @runtime.make_dynamic_array_error_loc(%runtime.Source_Code_Location* %2, i64 %11, i64 %12)
	; data
	%14 = load i64, i64* %1, align 8
	%15 = mul i64 1, %14
	%16 = load %mem.Allocator, %mem.Allocator* %allocator, align 8
	%17 = load %runtime.Source_Code_Location, %runtime.Source_Code_Location* %loc, align 8
	%18 = bitcast %mem.Allocator* %4 to %..rawptr
	store %mem.Allocator zeroinitializer, %mem.Allocator* %4
	store %mem.Allocator %16, %mem.Allocator* %4
	%19 = bitcast %runtime.Source_Code_Location* %5 to %..rawptr
	store %runtime.Source_Code_Location zeroinitializer, %runtime.Source_Code_Location* %5
	store %runtime.Source_Code_Location %17, %runtime.Source_Code_Location* %5
	%20 = call %..rawptr @mem.alloc(i64 %15, i64 1, %mem.Allocator* %4, %runtime.Source_Code_Location* %5, %runtime.Context* noalias nonnull nocapture inreg %__.context_ptr)
	store %..rawptr %20, %..rawptr* %3
	; s
	; CompoundLit
	%21 = bitcast %mem.Raw_Dynamic_Array* %7 to %..rawptr
	store %mem.Raw_Dynamic_Array zeroinitializer, %mem.Raw_Dynamic_Array* %7
	store %mem.Raw_Dynamic_Array {%..rawptr zeroinitializer, i64 zeroinitializer, i64 zeroinitializer, %mem.Allocator zeroinitializer}, %mem.Raw_Dynamic_Array* %7
	%22 = load %..rawptr, %..rawptr* %3, align 8
	%23 = getelementptr inbounds %mem.Raw_Dynamic_Array, %mem.Raw_Dynamic_Array* %7, i64 0, i32 0
	store %..rawptr %22, %..rawptr* %23
	%24 = load i64, i64* %0, align 8
	%25 = getelementptr inbounds %mem.Raw_Dynamic_Array, %mem.Raw_Dynamic_Array* %7, i64 0, i32 1
	store i64 %24, i64* %25
	%26 = load i64, i64* %1, align 8
	%27 = getelementptr inbounds %mem.Raw_Dynamic_Array, %mem.Raw_Dynamic_Array* %7, i64 0, i32 2
	store i64 %26, i64* %27
	%28 = load %mem.Allocator, %mem.Allocator* %allocator, align 8
	%29 = getelementptr inbounds %mem.Raw_Dynamic_Array, %mem.Raw_Dynamic_Array* %7, i64 0, i32 3
	store %mem.Allocator %28, %mem.Allocator* %29
	%30 = load %mem.Raw_Dynamic_Array, %mem.Raw_Dynamic_Array* %7, align 8
	store %mem.Raw_Dynamic_Array %30, %mem.Raw_Dynamic_Array* %6
	; ReturnStmt
	%31 = load %mem.Raw_Dynamic_Array, %mem.Raw_Dynamic_Array* %6, align 8
	%32 = bitcast %mem.Raw_Dynamic_Array* %6 to {i8*, i64, i64, %mem.Allocator}*
	%33 = load {i8*, i64, i64, %mem.Allocator}, {i8*, i64, i64, %mem.Allocator}* %32, align 8
	ret {i8*, i64, i64, %mem.Allocator} %33
}

define ccc i32 @main(i32 %argc, i8** %argv) noinline #2 {
decls-0:
	%0 = alloca i32, align 16
	%1 = alloca i8**, align 16
	store i32 %argc, i32* %0
	store i8** %argv, i8*** %1
	%2 = load i32, i32* %0, align 4
	%3 = load i8**, i8*** %1, align 8
	%4 = sext i32 %2 to i64
	%5 = getelementptr inbounds {i8**, i64}, {i8**, i64}* @runtime.args__, i64 0, i32 0
	store i8** %3, i8*** %5
	%6 = getelementptr inbounds {i8**, i64}, {i8**, i64}* @runtime.args__, i64 0, i32 1
	store i64 %4, i64* %6
	call void @__$startup_runtime()
	call void @laas.main() noinline
	ret i32 0
}

define void @__$startup_runtime() noinline #2 {
decls-0:
	%0 = alloca %runtime.Context, align 16
	%1 = bitcast %runtime.Context* %0 to %..rawptr
	%2 = call %..rawptr @mem.zero(%..rawptr %1, i64 112) noinline
	store %runtime.Context zeroinitializer, %runtime.Context* %0
	%3 = load %runtime.Context, %runtime.Context* @ggv$0, align 8
	store %runtime.Context %3, %runtime.Context* %0
	call void @runtime.__init_context(%runtime.Context* %0) noinline
	call void @runtime.__init_context(%runtime.Context* @ggv$0) noinline
	%4 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 0
	%5 = getelementptr inbounds {%runtime.Type_Info*, i64}, {%runtime.Type_Info*, i64}* @runtime.type_table, i64 0, i32 0
	store %runtime.Type_Info* %4, %runtime.Type_Info** %5
	%6 = getelementptr inbounds {%runtime.Type_Info*, i64}, {%runtime.Type_Info*, i64}* @runtime.type_table, i64 0, i32 1
	store i64 115, i64* %6
	%7 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 8
	%8 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %7, i64 0, i32 3
	%9 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %7, i64 0, i32 0
	store i64 8, i64* %9
	%10 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %7, i64 0, i32 1
	store i64 8, i64* %10
	%11 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %7, i64 0, i32 2
	store %..typeid 4683743612465315848, %..typeid* %11
	; Type_Info_Basic
	%12 = bitcast {[0 x i64], [72 x i8], i64}* %8 to %runtime.Type_Info_Integer*
	%13 = getelementptr inbounds %runtime.Type_Info_Integer, %runtime.Type_Info_Integer* %12, i64 0, i32 0
	store i8 1, i8* %13
	%14 = getelementptr inbounds %runtime.Type_Info_Integer, %runtime.Type_Info_Integer* %12, i64 0, i32 1
	store i8 0, i8* %14
	%15 = load %runtime.Type_Info_Integer, %runtime.Type_Info_Integer* %12, align 1
	%16 = bitcast {[0 x i64], [72 x i8], i64}* %8 to %runtime.Type_Info_Integer*
	store %runtime.Type_Info_Integer %15, %runtime.Type_Info_Integer* %16
	%17 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %8, i64 0, i32 2 ; UnionTagPtr
	store i64 2, i64* %17
	%18 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 14
	%19 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %18, i64 0, i32 3
	%20 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %18, i64 0, i32 0
	store i64 80, i64* %20
	%21 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %18, i64 0, i32 1
	store i64 8, i64* %21
	%22 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %18, i64 0, i32 2
	store %..typeid 1152921504606846990, %..typeid* %22
	; Type_Info_Union
	%23 = bitcast {[0 x i64], [72 x i8], i64}* %19 to %runtime.Type_Info_Union*
	%24 = getelementptr inbounds %runtime.Type_Info_Union, %runtime.Type_Info_Union* %23, i64 0, i32 0
	%25 = getelementptr inbounds %runtime.Type_Info_Union, %runtime.Type_Info_Union* %23, i64 0, i32 1
	%26 = getelementptr inbounds %runtime.Type_Info_Union, %runtime.Type_Info_Union* %23, i64 0, i32 2
	%27 = getelementptr inbounds %runtime.Type_Info_Union, %runtime.Type_Info_Union* %23, i64 0, i32 3
	%28 = getelementptr inbounds [91 x %runtime.Type_Info*], [91 x %runtime.Type_Info*]* @__$type_info_types_data, i64 0, i32 0
	%29 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 15
	%30 = bitcast %runtime.Type_Info* %29 to %runtime.Type_Info*
	%31 = getelementptr inbounds %runtime.Type_Info*, %runtime.Type_Info** %28, i64 0
	%32 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 15
	store %runtime.Type_Info* %32, %runtime.Type_Info** %31
	%33 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 17
	%34 = bitcast %runtime.Type_Info* %33 to %runtime.Type_Info*
	%35 = getelementptr inbounds %runtime.Type_Info*, %runtime.Type_Info** %28, i64 1
	%36 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 17
	store %runtime.Type_Info* %36, %runtime.Type_Info** %35
	%37 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 22
	%38 = bitcast %runtime.Type_Info* %37 to %runtime.Type_Info*
	%39 = getelementptr inbounds %runtime.Type_Info*, %runtime.Type_Info** %28, i64 2
	%40 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 22
	store %runtime.Type_Info* %40, %runtime.Type_Info** %39
	%41 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 24
	%42 = bitcast %runtime.Type_Info* %41 to %runtime.Type_Info*
	%43 = getelementptr inbounds %runtime.Type_Info*, %runtime.Type_Info** %28, i64 3
	%44 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 24
	store %runtime.Type_Info* %44, %runtime.Type_Info** %43
	%45 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 25
	%46 = bitcast %runtime.Type_Info* %45 to %runtime.Type_Info*
	%47 = getelementptr inbounds %runtime.Type_Info*, %runtime.Type_Info** %28, i64 4
	%48 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 25
	store %runtime.Type_Info* %48, %runtime.Type_Info** %47
	%49 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 26
	%50 = bitcast %runtime.Type_Info* %49 to %runtime.Type_Info*
	%51 = getelementptr inbounds %runtime.Type_Info*, %runtime.Type_Info** %28, i64 5
	%52 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 26
	store %runtime.Type_Info* %52, %runtime.Type_Info** %51
	%53 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 28
	%54 = bitcast %runtime.Type_Info* %53 to %runtime.Type_Info*
	%55 = getelementptr inbounds %runtime.Type_Info*, %runtime.Type_Info** %28, i64 6
	%56 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 28
	store %runtime.Type_Info* %56, %runtime.Type_Info** %55
	%57 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 29
	%58 = bitcast %runtime.Type_Info* %57 to %runtime.Type_Info*
	%59 = getelementptr inbounds %runtime.Type_Info*, %runtime.Type_Info** %28, i64 7
	%60 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 29
	store %runtime.Type_Info* %60, %runtime.Type_Info** %59
	%61 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 30
	%62 = bitcast %runtime.Type_Info* %61 to %runtime.Type_Info*
	%63 = getelementptr inbounds %runtime.Type_Info*, %runtime.Type_Info** %28, i64 8
	%64 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 30
	store %runtime.Type_Info* %64, %runtime.Type_Info** %63
	%65 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 31
	%66 = bitcast %runtime.Type_Info* %65 to %runtime.Type_Info*
	%67 = getelementptr inbounds %runtime.Type_Info*, %runtime.Type_Info** %28, i64 9
	%68 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 31
	store %runtime.Type_Info* %68, %runtime.Type_Info** %67
	%69 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 33
	%70 = bitcast %runtime.Type_Info* %69 to %runtime.Type_Info*
	%71 = getelementptr inbounds %runtime.Type_Info*, %runtime.Type_Info** %28, i64 10
	%72 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 33
	store %runtime.Type_Info* %72, %runtime.Type_Info** %71
	%73 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 37
	%74 = bitcast %runtime.Type_Info* %73 to %runtime.Type_Info*
	%75 = getelementptr inbounds %runtime.Type_Info*, %runtime.Type_Info** %28, i64 11
	%76 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 37
	store %runtime.Type_Info* %76, %runtime.Type_Info** %75
	%77 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 39
	%78 = bitcast %runtime.Type_Info* %77 to %runtime.Type_Info*
	%79 = getelementptr inbounds %runtime.Type_Info*, %runtime.Type_Info** %28, i64 12
	%80 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 39
	store %runtime.Type_Info* %80, %runtime.Type_Info** %79
	%81 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 41
	%82 = bitcast %runtime.Type_Info* %81 to %runtime.Type_Info*
	%83 = getelementptr inbounds %runtime.Type_Info*, %runtime.Type_Info** %28, i64 13
	%84 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 41
	store %runtime.Type_Info* %84, %runtime.Type_Info** %83
	%85 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 42
	%86 = bitcast %runtime.Type_Info* %85 to %runtime.Type_Info*
	%87 = getelementptr inbounds %runtime.Type_Info*, %runtime.Type_Info** %28, i64 14
	%88 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 42
	store %runtime.Type_Info* %88, %runtime.Type_Info** %87
	%89 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 48
	%90 = bitcast %runtime.Type_Info* %89 to %runtime.Type_Info*
	%91 = getelementptr inbounds %runtime.Type_Info*, %runtime.Type_Info** %28, i64 15
	%92 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 48
	store %runtime.Type_Info* %92, %runtime.Type_Info** %91
	%93 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 55
	%94 = bitcast %runtime.Type_Info* %93 to %runtime.Type_Info*
	%95 = getelementptr inbounds %runtime.Type_Info*, %runtime.Type_Info** %28, i64 16
	%96 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 55
	store %runtime.Type_Info* %96, %runtime.Type_Info** %95
	%97 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 57
	%98 = bitcast %runtime.Type_Info* %97 to %runtime.Type_Info*
	%99 = getelementptr inbounds %runtime.Type_Info*, %runtime.Type_Info** %28, i64 17
	%100 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 57
	store %runtime.Type_Info* %100, %runtime.Type_Info** %99
	%101 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 72
	%102 = bitcast %runtime.Type_Info* %101 to %runtime.Type_Info*
	%103 = getelementptr inbounds %runtime.Type_Info*, %runtime.Type_Info** %28, i64 18
	%104 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 72
	store %runtime.Type_Info* %104, %runtime.Type_Info** %103
	%105 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 74
	%106 = bitcast %runtime.Type_Info* %105 to %runtime.Type_Info*
	%107 = getelementptr inbounds %runtime.Type_Info*, %runtime.Type_Info** %28, i64 19
	%108 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 74
	store %runtime.Type_Info* %108, %runtime.Type_Info** %107
	%109 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 78
	%110 = bitcast %runtime.Type_Info* %109 to %runtime.Type_Info*
	%111 = getelementptr inbounds %runtime.Type_Info*, %runtime.Type_Info** %28, i64 20
	%112 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 78
	store %runtime.Type_Info* %112, %runtime.Type_Info** %111
	%113 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 80
	%114 = bitcast %runtime.Type_Info* %113 to %runtime.Type_Info*
	%115 = getelementptr inbounds %runtime.Type_Info*, %runtime.Type_Info** %28, i64 21
	%116 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 80
	store %runtime.Type_Info* %116, %runtime.Type_Info** %115
	%117 = getelementptr inbounds {%runtime.Type_Info**, i64}, {%runtime.Type_Info**, i64}* %24, i64 0, i32 0
	store %runtime.Type_Info** %28, %runtime.Type_Info*** %117
	%118 = getelementptr inbounds {%runtime.Type_Info**, i64}, {%runtime.Type_Info**, i64}* %24, i64 0, i32 1
	store i64 22, i64* %118
	store i64 72, i64* %25
	%119 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 69
	store %runtime.Type_Info* %119, %runtime.Type_Info** %26
	store i8 0, i8* %27
	%120 = load %runtime.Type_Info_Union, %runtime.Type_Info_Union* %23, align 8
	%121 = bitcast {[0 x i64], [72 x i8], i64}* %19 to %runtime.Type_Info_Union*
	store %runtime.Type_Info_Union %120, %runtime.Type_Info_Union* %121
	%122 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %19, i64 0, i32 2 ; UnionTagPtr
	store i64 17, i64* %122
	%123 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 10
	%124 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %123, i64 0, i32 3
	%125 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %123, i64 0, i32 0
	store i64 8, i64* %125
	%126 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %123, i64 0, i32 1
	store i64 8, i64* %126
	%127 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %123, i64 0, i32 2
	store %..typeid 648518346341351434, %..typeid* %127
	; Type_Info_Pointer
	%128 = bitcast {[0 x i64], [72 x i8], i64}* %124 to %runtime.Type_Info_Pointer*
	%129 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 11
	%130 = bitcast %runtime.Type_Info* %129 to %runtime.Type_Info*
	%131 = getelementptr inbounds %runtime.Type_Info_Pointer, %runtime.Type_Info_Pointer* %128, i64 0, i32 0
	store %runtime.Type_Info* %130, %runtime.Type_Info** %131
	%132 = load %runtime.Type_Info_Pointer, %runtime.Type_Info_Pointer* %128, align 8
	%133 = bitcast {[0 x i64], [72 x i8], i64}* %124 to %runtime.Type_Info_Pointer*
	store %runtime.Type_Info_Pointer %132, %runtime.Type_Info_Pointer* %133
	%134 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %124, i64 0, i32 2 ; UnionTagPtr
	store i64 10, i64* %134
	%135 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 11
	%136 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %135, i64 0, i32 3
	%137 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %135, i64 0, i32 0
	store i64 104, i64* %137
	%138 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %135, i64 0, i32 1
	store i64 8, i64* %138
	%139 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %135, i64 0, i32 2
	store %..typeid 3386706919782613003, %..typeid* %139
	; Type_Info_Named
	%140 = bitcast {[0 x i64], [72 x i8], i64}* %136 to %runtime.Type_Info_Named*
	%141 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 12
	%142 = bitcast %runtime.Type_Info* %141 to %runtime.Type_Info*
	%143 = getelementptr inbounds %runtime.Type_Info_Named, %runtime.Type_Info_Named* %140, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([10 x i8], [10 x i8]* @str$1bf, i64 0, i32 0), i64 9}, %..string* %143
	%144 = getelementptr inbounds %runtime.Type_Info_Named, %runtime.Type_Info_Named* %140, i64 0, i32 1
	store %runtime.Type_Info* %142, %runtime.Type_Info** %144
	%145 = load %runtime.Type_Info_Named, %runtime.Type_Info_Named* %140, align 8
	%146 = bitcast {[0 x i64], [72 x i8], i64}* %136 to %runtime.Type_Info_Named*
	store %runtime.Type_Info_Named %145, %runtime.Type_Info_Named* %146
	%147 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %136, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %147
	%148 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 12
	%149 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %148, i64 0, i32 3
	%150 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %148, i64 0, i32 0
	store i64 104, i64* %150
	%151 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %148, i64 0, i32 1
	store i64 8, i64* %151
	%152 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %148, i64 0, i32 2
	store %..typeid 1080863910568919052, %..typeid* %152
	; Type_Info_Struct
	%153 = bitcast {[0 x i64], [72 x i8], i64}* %149 to %runtime.Type_Info_Struct*
	%154 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %153, i64 0, i32 4
	store i8 0, i8* %154
	%155 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %153, i64 0, i32 5
	store i8 0, i8* %155
	%156 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %153, i64 0, i32 6
	store i8 0, i8* %156
	%157 = getelementptr inbounds [91 x %runtime.Type_Info*], [91 x %runtime.Type_Info*]* @__$type_info_types_data, i64 0, i32 22
	%158 = getelementptr inbounds [91 x %..string], [91 x %..string]* @__$type_info_names_data, i64 0, i32 0
	%159 = getelementptr inbounds [91 x i64], [91 x i64]* @__$type_info_offsets_data, i64 0, i32 0
	%160 = getelementptr inbounds [91 x i8], [91 x i8]* @__$type_info_usings_data, i64 0, i32 0
	%161 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 8
	%162 = bitcast %runtime.Type_Info* %161 to %runtime.Type_Info*
	%163 = getelementptr inbounds %runtime.Type_Info*, %runtime.Type_Info** %157, i64 0
	%164 = getelementptr inbounds i64, i64* %159, i64 0
	%165 = getelementptr inbounds i8, i8* %160, i64 0
	%166 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 8
	store %runtime.Type_Info* %166, %runtime.Type_Info** %163
	%167 = getelementptr inbounds %..string, %..string* %158, i64 0
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str$1c0, i64 0, i32 0), i64 4}, %..string* %167
	store i64 0, i64* %164
	store i8 0, i8* %165
	%168 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 8
	%169 = bitcast %runtime.Type_Info* %168 to %runtime.Type_Info*
	%170 = getelementptr inbounds %runtime.Type_Info*, %runtime.Type_Info** %157, i64 1
	%171 = getelementptr inbounds i64, i64* %159, i64 1
	%172 = getelementptr inbounds i8, i8* %160, i64 1
	%173 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 8
	store %runtime.Type_Info* %173, %runtime.Type_Info** %170
	%174 = getelementptr inbounds %..string, %..string* %158, i64 1
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str$1c1, i64 0, i32 0), i64 5}, %..string* %174
	store i64 8, i64* %171
	store i8 0, i8* %172
	%175 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 13
	%176 = bitcast %runtime.Type_Info* %175 to %runtime.Type_Info*
	%177 = getelementptr inbounds %runtime.Type_Info*, %runtime.Type_Info** %157, i64 2
	%178 = getelementptr inbounds i64, i64* %159, i64 2
	%179 = getelementptr inbounds i8, i8* %160, i64 2
	%180 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 13
	store %runtime.Type_Info* %180, %runtime.Type_Info** %177
	%181 = getelementptr inbounds %..string, %..string* %158, i64 2
	store %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @str$1c2, i64 0, i32 0), i64 2}, %..string* %181
	store i64 16, i64* %178
	store i8 0, i8* %179
	%182 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 14
	%183 = bitcast %runtime.Type_Info* %182 to %runtime.Type_Info*
	%184 = getelementptr inbounds %runtime.Type_Info*, %runtime.Type_Info** %157, i64 3
	%185 = getelementptr inbounds i64, i64* %159, i64 3
	%186 = getelementptr inbounds i8, i8* %160, i64 3
	%187 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 14
	store %runtime.Type_Info* %187, %runtime.Type_Info** %184
	%188 = getelementptr inbounds %..string, %..string* %158, i64 3
	store %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str$1c3, i64 0, i32 0), i64 7}, %..string* %188
	store i64 24, i64* %185
	store i8 0, i8* %186
	%189 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %153, i64 0, i32 0
	%190 = getelementptr inbounds {%runtime.Type_Info**, i64}, {%runtime.Type_Info**, i64}* %189, i64 0, i32 0
	store %runtime.Type_Info** %157, %runtime.Type_Info*** %190
	%191 = getelementptr inbounds {%runtime.Type_Info**, i64}, {%runtime.Type_Info**, i64}* %189, i64 0, i32 1
	store i64 4, i64* %191
	%192 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %153, i64 0, i32 1
	%193 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %192, i64 0, i32 0
	store %..string* %158, %..string** %193
	%194 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %192, i64 0, i32 1
	store i64 4, i64* %194
	%195 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %153, i64 0, i32 2
	%196 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %195, i64 0, i32 0
	store i64* %159, i64** %196
	%197 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %195, i64 0, i32 1
	store i64 4, i64* %197
	%198 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %153, i64 0, i32 3
	%199 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %198, i64 0, i32 0
	store i8* %160, i8** %199
	%200 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %198, i64 0, i32 1
	store i64 4, i64* %200
	%201 = load %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %153, align 8
	%202 = bitcast {[0 x i64], [72 x i8], i64}* %149 to %runtime.Type_Info_Struct*
	store %runtime.Type_Info_Struct %201, %runtime.Type_Info_Struct* %202
	%203 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %149, i64 0, i32 2 ; UnionTagPtr
	store i64 16, i64* %203
	%204 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 13
	%205 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %204, i64 0, i32 3
	%206 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %204, i64 0, i32 0
	store i64 8, i64* %206
	%207 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %204, i64 0, i32 1
	store i64 8, i64* %207
	%208 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %204, i64 0, i32 2
	store %..typeid 13, %..typeid* %208
	; Type_Info_Basic
	%209 = bitcast {[0 x i64], [72 x i8], i64}* %205 to %runtime.Type_Info_Type_Id*
	%210 = load %runtime.Type_Info_Type_Id, %runtime.Type_Info_Type_Id* %209, align 1
	%211 = bitcast {[0 x i64], [72 x i8], i64}* %205 to %runtime.Type_Info_Type_Id*
	store %runtime.Type_Info_Type_Id %210, %runtime.Type_Info_Type_Id* %211
	%212 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %205, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %212
	%213 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 15
	%214 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %213, i64 0, i32 3
	%215 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %213, i64 0, i32 0
	store i64 24, i64* %215
	%216 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %213, i64 0, i32 1
	store i64 8, i64* %216
	%217 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %213, i64 0, i32 2
	store %..typeid 3386706919782613007, %..typeid* %217
	; Type_Info_Named
	%218 = bitcast {[0 x i64], [72 x i8], i64}* %214 to %runtime.Type_Info_Named*
	%219 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 16
	%220 = bitcast %runtime.Type_Info* %219 to %runtime.Type_Info*
	%221 = getelementptr inbounds %runtime.Type_Info_Named, %runtime.Type_Info_Named* %218, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([16 x i8], [16 x i8]* @str$1c4, i64 0, i32 0), i64 15}, %..string* %221
	%222 = getelementptr inbounds %runtime.Type_Info_Named, %runtime.Type_Info_Named* %218, i64 0, i32 1
	store %runtime.Type_Info* %220, %runtime.Type_Info** %222
	%223 = load %runtime.Type_Info_Named, %runtime.Type_Info_Named* %218, align 8
	%224 = bitcast {[0 x i64], [72 x i8], i64}* %214 to %runtime.Type_Info_Named*
	store %runtime.Type_Info_Named %223, %runtime.Type_Info_Named* %224
	%225 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %214, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %225
	%226 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 16
	%227 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %226, i64 0, i32 3
	%228 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %226, i64 0, i32 0
	store i64 24, i64* %228
	%229 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %226, i64 0, i32 1
	store i64 8, i64* %229
	%230 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %226, i64 0, i32 2
	store %..typeid 1080863910568919056, %..typeid* %230
	; Type_Info_Struct
	%231 = bitcast {[0 x i64], [72 x i8], i64}* %227 to %runtime.Type_Info_Struct*
	%232 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %231, i64 0, i32 4
	store i8 0, i8* %232
	%233 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %231, i64 0, i32 5
	store i8 0, i8* %233
	%234 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %231, i64 0, i32 6
	store i8 0, i8* %234
	%235 = getelementptr inbounds [91 x %runtime.Type_Info*], [91 x %runtime.Type_Info*]* @__$type_info_types_data, i64 0, i32 26
	%236 = getelementptr inbounds [91 x %..string], [91 x %..string]* @__$type_info_names_data, i64 0, i32 4
	%237 = getelementptr inbounds [91 x i64], [91 x i64]* @__$type_info_offsets_data, i64 0, i32 4
	%238 = getelementptr inbounds [91 x i8], [91 x i8]* @__$type_info_usings_data, i64 0, i32 4
	%239 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 6
	%240 = bitcast %runtime.Type_Info* %239 to %runtime.Type_Info*
	%241 = getelementptr inbounds %runtime.Type_Info*, %runtime.Type_Info** %235, i64 0
	%242 = getelementptr inbounds i64, i64* %237, i64 0
	%243 = getelementptr inbounds i8, i8* %238, i64 0
	%244 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 6
	store %runtime.Type_Info* %244, %runtime.Type_Info** %241
	%245 = getelementptr inbounds %..string, %..string* %236, i64 0
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str$1c5, i64 0, i32 0), i64 4}, %..string* %245
	store i64 0, i64* %242
	store i8 0, i8* %243
	%246 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 10
	%247 = bitcast %runtime.Type_Info* %246 to %runtime.Type_Info*
	%248 = getelementptr inbounds %runtime.Type_Info*, %runtime.Type_Info** %235, i64 1
	%249 = getelementptr inbounds i64, i64* %237, i64 1
	%250 = getelementptr inbounds i8, i8* %238, i64 1
	%251 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 10
	store %runtime.Type_Info* %251, %runtime.Type_Info** %248
	%252 = getelementptr inbounds %..string, %..string* %236, i64 1
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str$1c6, i64 0, i32 0), i64 4}, %..string* %252
	store i64 16, i64* %249
	store i8 0, i8* %250
	%253 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %231, i64 0, i32 0
	%254 = getelementptr inbounds {%runtime.Type_Info**, i64}, {%runtime.Type_Info**, i64}* %253, i64 0, i32 0
	store %runtime.Type_Info** %235, %runtime.Type_Info*** %254
	%255 = getelementptr inbounds {%runtime.Type_Info**, i64}, {%runtime.Type_Info**, i64}* %253, i64 0, i32 1
	store i64 2, i64* %255
	%256 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %231, i64 0, i32 1
	%257 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %256, i64 0, i32 0
	store %..string* %236, %..string** %257
	%258 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %256, i64 0, i32 1
	store i64 2, i64* %258
	%259 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %231, i64 0, i32 2
	%260 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %259, i64 0, i32 0
	store i64* %237, i64** %260
	%261 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %259, i64 0, i32 1
	store i64 2, i64* %261
	%262 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %231, i64 0, i32 3
	%263 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %262, i64 0, i32 0
	store i8* %238, i8** %263
	%264 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %262, i64 0, i32 1
	store i64 2, i64* %264
	%265 = load %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %231, align 8
	%266 = bitcast {[0 x i64], [72 x i8], i64}* %227 to %runtime.Type_Info_Struct*
	store %runtime.Type_Info_Struct %265, %runtime.Type_Info_Struct* %266
	%267 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %227, i64 0, i32 2 ; UnionTagPtr
	store i64 16, i64* %267
	%268 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 6
	%269 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %268, i64 0, i32 3
	%270 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %268, i64 0, i32 0
	store i64 16, i64* %270
	%271 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %268, i64 0, i32 1
	store i64 8, i64* %271
	%272 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %268, i64 0, i32 2
	store %..typeid 360287970189639686, %..typeid* %272
	; Type_Info_Basic
	%273 = bitcast {[0 x i64], [72 x i8], i64}* %269 to %runtime.Type_Info_String*
	%274 = load %runtime.Type_Info_String, %runtime.Type_Info_String* %273, align 1
	%275 = bitcast {[0 x i64], [72 x i8], i64}* %269 to %runtime.Type_Info_String*
	store %runtime.Type_Info_String %274, %runtime.Type_Info_String* %275
	%276 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %269, i64 0, i32 2 ; UnionTagPtr
	store i64 6, i64* %276
	%277 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 7
	%278 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %277, i64 0, i32 3
	%279 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %277, i64 0, i32 0
	store i64 8, i64* %279
	%280 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %277, i64 0, i32 1
	store i64 8, i64* %280
	%281 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %277, i64 0, i32 2
	store %..typeid 648518346341351431, %..typeid* %281
	; Type_Info_Pointer
	%282 = bitcast {[0 x i64], [72 x i8], i64}* %278 to %runtime.Type_Info_Pointer*
	%283 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 3
	%284 = bitcast %runtime.Type_Info* %283 to %runtime.Type_Info*
	%285 = getelementptr inbounds %runtime.Type_Info_Pointer, %runtime.Type_Info_Pointer* %282, i64 0, i32 0
	store %runtime.Type_Info* %284, %runtime.Type_Info** %285
	%286 = load %runtime.Type_Info_Pointer, %runtime.Type_Info_Pointer* %282, align 8
	%287 = bitcast {[0 x i64], [72 x i8], i64}* %278 to %runtime.Type_Info_Pointer*
	store %runtime.Type_Info_Pointer %286, %runtime.Type_Info_Pointer* %287
	%288 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %278, i64 0, i32 2 ; UnionTagPtr
	store i64 10, i64* %288
	%289 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 3
	%290 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %289, i64 0, i32 3
	%291 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %289, i64 0, i32 0
	store i64 1, i64* %291
	%292 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %289, i64 0, i32 1
	store i64 1, i64* %292
	%293 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %289, i64 0, i32 2
	store %..typeid 72057594037927939, %..typeid* %293
	; Type_Info_Basic
	%294 = bitcast {[0 x i64], [72 x i8], i64}* %290 to %runtime.Type_Info_Integer*
	%295 = getelementptr inbounds %runtime.Type_Info_Integer, %runtime.Type_Info_Integer* %294, i64 0, i32 0
	store i8 0, i8* %295
	%296 = getelementptr inbounds %runtime.Type_Info_Integer, %runtime.Type_Info_Integer* %294, i64 0, i32 1
	store i8 0, i8* %296
	%297 = load %runtime.Type_Info_Integer, %runtime.Type_Info_Integer* %294, align 1
	%298 = bitcast {[0 x i64], [72 x i8], i64}* %290 to %runtime.Type_Info_Integer*
	store %runtime.Type_Info_Integer %297, %runtime.Type_Info_Integer* %298
	%299 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %290, i64 0, i32 2 ; UnionTagPtr
	store i64 2, i64* %299
	%300 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 17
	%301 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %300, i64 0, i32 3
	%302 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %300, i64 0, i32 0
	store i64 2, i64* %302
	%303 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %300, i64 0, i32 1
	store i64 1, i64* %303
	%304 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %300, i64 0, i32 2
	store %..typeid 3386706919782613009, %..typeid* %304
	; Type_Info_Named
	%305 = bitcast {[0 x i64], [72 x i8], i64}* %301 to %runtime.Type_Info_Named*
	%306 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 18
	%307 = bitcast %runtime.Type_Info* %306 to %runtime.Type_Info*
	%308 = getelementptr inbounds %runtime.Type_Info_Named, %runtime.Type_Info_Named* %305, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([18 x i8], [18 x i8]* @str$1c7, i64 0, i32 0), i64 17}, %..string* %308
	%309 = getelementptr inbounds %runtime.Type_Info_Named, %runtime.Type_Info_Named* %305, i64 0, i32 1
	store %runtime.Type_Info* %307, %runtime.Type_Info** %309
	%310 = load %runtime.Type_Info_Named, %runtime.Type_Info_Named* %305, align 8
	%311 = bitcast {[0 x i64], [72 x i8], i64}* %301 to %runtime.Type_Info_Named*
	store %runtime.Type_Info_Named %310, %runtime.Type_Info_Named* %311
	%312 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %301, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %312
	%313 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 18
	%314 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %313, i64 0, i32 3
	%315 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %313, i64 0, i32 0
	store i64 2, i64* %315
	%316 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %313, i64 0, i32 1
	store i64 1, i64* %316
	%317 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %313, i64 0, i32 2
	store %..typeid 1080863910568919058, %..typeid* %317
	; Type_Info_Struct
	%318 = bitcast {[0 x i64], [72 x i8], i64}* %314 to %runtime.Type_Info_Struct*
	%319 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %318, i64 0, i32 4
	store i8 0, i8* %319
	%320 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %318, i64 0, i32 5
	store i8 0, i8* %320
	%321 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %318, i64 0, i32 6
	store i8 0, i8* %321
	%322 = getelementptr inbounds [91 x %runtime.Type_Info*], [91 x %runtime.Type_Info*]* @__$type_info_types_data, i64 0, i32 28
	%323 = getelementptr inbounds [91 x %..string], [91 x %..string]* @__$type_info_names_data, i64 0, i32 6
	%324 = getelementptr inbounds [91 x i64], [91 x i64]* @__$type_info_offsets_data, i64 0, i32 6
	%325 = getelementptr inbounds [91 x i8], [91 x i8]* @__$type_info_usings_data, i64 0, i32 6
	%326 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 19
	%327 = bitcast %runtime.Type_Info* %326 to %runtime.Type_Info*
	%328 = getelementptr inbounds %runtime.Type_Info*, %runtime.Type_Info** %322, i64 0
	%329 = getelementptr inbounds i64, i64* %324, i64 0
	%330 = getelementptr inbounds i8, i8* %325, i64 0
	%331 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 19
	store %runtime.Type_Info* %331, %runtime.Type_Info** %328
	%332 = getelementptr inbounds %..string, %..string* %323, i64 0
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str$1c8, i64 0, i32 0), i64 6}, %..string* %332
	store i64 0, i64* %329
	store i8 0, i8* %330
	%333 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 20
	%334 = bitcast %runtime.Type_Info* %333 to %runtime.Type_Info*
	%335 = getelementptr inbounds %runtime.Type_Info*, %runtime.Type_Info** %322, i64 1
	%336 = getelementptr inbounds i64, i64* %324, i64 1
	%337 = getelementptr inbounds i8, i8* %325, i64 1
	%338 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 20
	store %runtime.Type_Info* %338, %runtime.Type_Info** %335
	%339 = getelementptr inbounds %..string, %..string* %323, i64 1
	store %..string {i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str$1c9, i64 0, i32 0), i64 10}, %..string* %339
	store i64 1, i64* %336
	store i8 0, i8* %337
	%340 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %318, i64 0, i32 0
	%341 = getelementptr inbounds {%runtime.Type_Info**, i64}, {%runtime.Type_Info**, i64}* %340, i64 0, i32 0
	store %runtime.Type_Info** %322, %runtime.Type_Info*** %341
	%342 = getelementptr inbounds {%runtime.Type_Info**, i64}, {%runtime.Type_Info**, i64}* %340, i64 0, i32 1
	store i64 2, i64* %342
	%343 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %318, i64 0, i32 1
	%344 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %343, i64 0, i32 0
	store %..string* %323, %..string** %344
	%345 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %343, i64 0, i32 1
	store i64 2, i64* %345
	%346 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %318, i64 0, i32 2
	%347 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %346, i64 0, i32 0
	store i64* %324, i64** %347
	%348 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %346, i64 0, i32 1
	store i64 2, i64* %348
	%349 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %318, i64 0, i32 3
	%350 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %349, i64 0, i32 0
	store i8* %325, i8** %350
	%351 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %349, i64 0, i32 1
	store i64 2, i64* %351
	%352 = load %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %318, align 8
	%353 = bitcast {[0 x i64], [72 x i8], i64}* %314 to %runtime.Type_Info_Struct*
	store %runtime.Type_Info_Struct %352, %runtime.Type_Info_Struct* %353
	%354 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %314, i64 0, i32 2 ; UnionTagPtr
	store i64 16, i64* %354
	%355 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 19
	%356 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %355, i64 0, i32 3
	%357 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %355, i64 0, i32 0
	store i64 1, i64* %357
	%358 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %355, i64 0, i32 1
	store i64 1, i64* %358
	%359 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %355, i64 0, i32 2
	store %..typeid 432345564227567635, %..typeid* %359
	; Type_Info_Basic
	%360 = bitcast {[0 x i64], [72 x i8], i64}* %356 to %runtime.Type_Info_Boolean*
	%361 = load %runtime.Type_Info_Boolean, %runtime.Type_Info_Boolean* %360, align 1
	%362 = bitcast {[0 x i64], [72 x i8], i64}* %356 to %runtime.Type_Info_Boolean*
	store %runtime.Type_Info_Boolean %361, %runtime.Type_Info_Boolean* %362
	%363 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %356, i64 0, i32 2 ; UnionTagPtr
	store i64 7, i64* %363
	%364 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 20
	%365 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %364, i64 0, i32 3
	%366 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %364, i64 0, i32 0
	store i64 1, i64* %366
	%367 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %364, i64 0, i32 1
	store i64 1, i64* %367
	%368 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %364, i64 0, i32 2
	store %..typeid 3530822107858468884, %..typeid* %368
	; Type_Info_Named
	%369 = bitcast {[0 x i64], [72 x i8], i64}* %365 to %runtime.Type_Info_Named*
	%370 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 21
	%371 = bitcast %runtime.Type_Info* %370 to %runtime.Type_Info*
	%372 = getelementptr inbounds %runtime.Type_Info_Named, %runtime.Type_Info_Named* %369, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([21 x i8], [21 x i8]* @str$1ca, i64 0, i32 0), i64 20}, %..string* %372
	%373 = getelementptr inbounds %runtime.Type_Info_Named, %runtime.Type_Info_Named* %369, i64 0, i32 1
	store %runtime.Type_Info* %371, %runtime.Type_Info** %373
	%374 = load %runtime.Type_Info_Named, %runtime.Type_Info_Named* %369, align 8
	%375 = bitcast {[0 x i64], [72 x i8], i64}* %365 to %runtime.Type_Info_Named*
	store %runtime.Type_Info_Named %374, %runtime.Type_Info_Named* %375
	%376 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %365, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %376
	%377 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 21
	%378 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %377, i64 0, i32 3
	%379 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %377, i64 0, i32 0
	store i64 1, i64* %379
	%380 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %377, i64 0, i32 1
	store i64 1, i64* %380
	%381 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %377, i64 0, i32 2
	store %..typeid 1224979098644774933, %..typeid* %381
	; Type_Info_Enum
	%382 = bitcast {[0 x i64], [72 x i8], i64}* %378 to %runtime.Type_Info_Enum*
	%383 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 3
	%384 = getelementptr inbounds %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %382, i64 0, i32 0
	store %runtime.Type_Info* %383, %runtime.Type_Info** %384
	%385 = getelementptr inbounds [3 x %..string], [3 x %..string]* @$enum_names-15, i64 0, i32 0
	%386 = getelementptr inbounds [3 x %runtime.Type_Info_Enum_Value], [3 x %runtime.Type_Info_Enum_Value]* @$enum_values-15, i64 0, i32 0
	%387 = bitcast %runtime.Type_Info_Enum_Value* %386 to i8*
	store i8 0, i8* %387
	%388 = getelementptr inbounds %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %386, i64 0, i32 2 ; UnionTagPtr
	store i64 7, i64* %388
	store %..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @str$1cb, i64 0, i32 0), i64 8}, %..string* %385
	%389 = getelementptr inbounds [3 x %..string], [3 x %..string]* @$enum_names-15, i64 0, i32 1
	%390 = getelementptr inbounds [3 x %runtime.Type_Info_Enum_Value], [3 x %runtime.Type_Info_Enum_Value]* @$enum_values-15, i64 0, i32 1
	%391 = bitcast %runtime.Type_Info_Enum_Value* %390 to i8*
	store i8 1, i8* %391
	%392 = getelementptr inbounds %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %390, i64 0, i32 2 ; UnionTagPtr
	store i64 7, i64* %392
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str$1cc, i64 0, i32 0), i64 6}, %..string* %389
	%393 = getelementptr inbounds [3 x %..string], [3 x %..string]* @$enum_names-15, i64 0, i32 2
	%394 = getelementptr inbounds [3 x %runtime.Type_Info_Enum_Value], [3 x %runtime.Type_Info_Enum_Value]* @$enum_values-15, i64 0, i32 2
	%395 = bitcast %runtime.Type_Info_Enum_Value* %394 to i8*
	store i8 2, i8* %395
	%396 = getelementptr inbounds %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %394, i64 0, i32 2 ; UnionTagPtr
	store i64 7, i64* %396
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str$1cd, i64 0, i32 0), i64 3}, %..string* %393
	%397 = getelementptr inbounds %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %382, i64 0, i32 1
	%398 = getelementptr inbounds [3 x %..string], [3 x %..string]* @$enum_names-15, i64 0, i32 0
	%399 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %397, i64 0, i32 0
	store %..string* %398, %..string** %399
	%400 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %397, i64 0, i32 1
	store i64 3, i64* %400
	%401 = getelementptr inbounds %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %382, i64 0, i32 2
	%402 = getelementptr inbounds [3 x %runtime.Type_Info_Enum_Value], [3 x %runtime.Type_Info_Enum_Value]* @$enum_values-15, i64 0, i32 0
	%403 = getelementptr inbounds {%runtime.Type_Info_Enum_Value*, i64}, {%runtime.Type_Info_Enum_Value*, i64}* %401, i64 0, i32 0
	store %runtime.Type_Info_Enum_Value* %402, %runtime.Type_Info_Enum_Value** %403
	%404 = getelementptr inbounds {%runtime.Type_Info_Enum_Value*, i64}, {%runtime.Type_Info_Enum_Value*, i64}* %401, i64 0, i32 1
	store i64 3, i64* %404
	%405 = load %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %382, align 8
	%406 = bitcast {[0 x i64], [72 x i8], i64}* %378 to %runtime.Type_Info_Enum*
	store %runtime.Type_Info_Enum %405, %runtime.Type_Info_Enum* %406
	%407 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %378, i64 0, i32 2 ; UnionTagPtr
	store i64 18, i64* %407
	%408 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 22
	%409 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %408, i64 0, i32 3
	%410 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %408, i64 0, i32 0
	store i64 0, i64* %410
	%411 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %408, i64 0, i32 1
	store i64 1, i64* %411
	%412 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %408, i64 0, i32 2
	store %..typeid 3386706919782613014, %..typeid* %412
	; Type_Info_Named
	%413 = bitcast {[0 x i64], [72 x i8], i64}* %409 to %runtime.Type_Info_Named*
	%414 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 23
	%415 = bitcast %runtime.Type_Info* %414 to %runtime.Type_Info*
	%416 = getelementptr inbounds %runtime.Type_Info_Named, %runtime.Type_Info_Named* %413, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([15 x i8], [15 x i8]* @str$1ce, i64 0, i32 0), i64 14}, %..string* %416
	%417 = getelementptr inbounds %runtime.Type_Info_Named, %runtime.Type_Info_Named* %413, i64 0, i32 1
	store %runtime.Type_Info* %415, %runtime.Type_Info** %417
	%418 = load %runtime.Type_Info_Named, %runtime.Type_Info_Named* %413, align 8
	%419 = bitcast {[0 x i64], [72 x i8], i64}* %409 to %runtime.Type_Info_Named*
	store %runtime.Type_Info_Named %418, %runtime.Type_Info_Named* %419
	%420 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %409, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %420
	%421 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 23
	%422 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %421, i64 0, i32 3
	%423 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %421, i64 0, i32 0
	store i64 0, i64* %423
	%424 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %421, i64 0, i32 1
	store i64 1, i64* %424
	%425 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %421, i64 0, i32 2
	store %..typeid 1080863910568919063, %..typeid* %425
	; Type_Info_Struct
	%426 = bitcast {[0 x i64], [72 x i8], i64}* %422 to %runtime.Type_Info_Struct*
	%427 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %426, i64 0, i32 4
	store i8 0, i8* %427
	%428 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %426, i64 0, i32 5
	store i8 0, i8* %428
	%429 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %426, i64 0, i32 6
	store i8 0, i8* %429
	%430 = load %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %426, align 8
	%431 = bitcast {[0 x i64], [72 x i8], i64}* %422 to %runtime.Type_Info_Struct*
	store %runtime.Type_Info_Struct %430, %runtime.Type_Info_Struct* %431
	%432 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %422, i64 0, i32 2 ; UnionTagPtr
	store i64 16, i64* %432
	%433 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 24
	%434 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %433, i64 0, i32 3
	%435 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %433, i64 0, i32 0
	store i64 0, i64* %435
	%436 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %433, i64 0, i32 1
	store i64 1, i64* %436
	%437 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %433, i64 0, i32 2
	store %..typeid 3386706919782613016, %..typeid* %437
	; Type_Info_Named
	%438 = bitcast {[0 x i64], [72 x i8], i64}* %434 to %runtime.Type_Info_Named*
	%439 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 23
	%440 = bitcast %runtime.Type_Info* %439 to %runtime.Type_Info*
	%441 = getelementptr inbounds %runtime.Type_Info_Named, %runtime.Type_Info_Named* %438, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([16 x i8], [16 x i8]* @str$1cf, i64 0, i32 0), i64 15}, %..string* %441
	%442 = getelementptr inbounds %runtime.Type_Info_Named, %runtime.Type_Info_Named* %438, i64 0, i32 1
	store %runtime.Type_Info* %440, %runtime.Type_Info** %442
	%443 = load %runtime.Type_Info_Named, %runtime.Type_Info_Named* %438, align 8
	%444 = bitcast {[0 x i64], [72 x i8], i64}* %434 to %runtime.Type_Info_Named*
	store %runtime.Type_Info_Named %443, %runtime.Type_Info_Named* %444
	%445 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %434, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %445
	%446 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 25
	%447 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %446, i64 0, i32 3
	%448 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %446, i64 0, i32 0
	store i64 0, i64* %448
	%449 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %446, i64 0, i32 1
	store i64 1, i64* %449
	%450 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %446, i64 0, i32 2
	store %..typeid 3386706919782613017, %..typeid* %450
	; Type_Info_Named
	%451 = bitcast {[0 x i64], [72 x i8], i64}* %447 to %runtime.Type_Info_Named*
	%452 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 23
	%453 = bitcast %runtime.Type_Info* %452 to %runtime.Type_Info*
	%454 = getelementptr inbounds %runtime.Type_Info_Named, %runtime.Type_Info_Named* %451, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([18 x i8], [18 x i8]* @str$1d0, i64 0, i32 0), i64 17}, %..string* %454
	%455 = getelementptr inbounds %runtime.Type_Info_Named, %runtime.Type_Info_Named* %451, i64 0, i32 1
	store %runtime.Type_Info* %453, %runtime.Type_Info** %455
	%456 = load %runtime.Type_Info_Named, %runtime.Type_Info_Named* %451, align 8
	%457 = bitcast {[0 x i64], [72 x i8], i64}* %447 to %runtime.Type_Info_Named*
	store %runtime.Type_Info_Named %456, %runtime.Type_Info_Named* %457
	%458 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %447, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %458
	%459 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 26
	%460 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %459, i64 0, i32 3
	%461 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %459, i64 0, i32 0
	store i64 1, i64* %461
	%462 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %459, i64 0, i32 1
	store i64 1, i64* %462
	%463 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %459, i64 0, i32 2
	store %..typeid 3386706919782613018, %..typeid* %463
	; Type_Info_Named
	%464 = bitcast {[0 x i64], [72 x i8], i64}* %460 to %runtime.Type_Info_Named*
	%465 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 27
	%466 = bitcast %runtime.Type_Info* %465 to %runtime.Type_Info*
	%467 = getelementptr inbounds %runtime.Type_Info_Named, %runtime.Type_Info_Named* %464, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([17 x i8], [17 x i8]* @str$1d1, i64 0, i32 0), i64 16}, %..string* %467
	%468 = getelementptr inbounds %runtime.Type_Info_Named, %runtime.Type_Info_Named* %464, i64 0, i32 1
	store %runtime.Type_Info* %466, %runtime.Type_Info** %468
	%469 = load %runtime.Type_Info_Named, %runtime.Type_Info_Named* %464, align 8
	%470 = bitcast {[0 x i64], [72 x i8], i64}* %460 to %runtime.Type_Info_Named*
	store %runtime.Type_Info_Named %469, %runtime.Type_Info_Named* %470
	%471 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %460, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %471
	%472 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 27
	%473 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %472, i64 0, i32 3
	%474 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %472, i64 0, i32 0
	store i64 1, i64* %474
	%475 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %472, i64 0, i32 1
	store i64 1, i64* %475
	%476 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %472, i64 0, i32 2
	store %..typeid 1080863910568919067, %..typeid* %476
	; Type_Info_Struct
	%477 = bitcast {[0 x i64], [72 x i8], i64}* %473 to %runtime.Type_Info_Struct*
	%478 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %477, i64 0, i32 4
	store i8 0, i8* %478
	%479 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %477, i64 0, i32 5
	store i8 0, i8* %479
	%480 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %477, i64 0, i32 6
	store i8 0, i8* %480
	%481 = getelementptr inbounds [91 x %runtime.Type_Info*], [91 x %runtime.Type_Info*]* @__$type_info_types_data, i64 0, i32 30
	%482 = getelementptr inbounds [91 x %..string], [91 x %..string]* @__$type_info_names_data, i64 0, i32 8
	%483 = getelementptr inbounds [91 x i64], [91 x i64]* @__$type_info_offsets_data, i64 0, i32 8
	%484 = getelementptr inbounds [91 x i8], [91 x i8]* @__$type_info_usings_data, i64 0, i32 8
	%485 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 19
	%486 = bitcast %runtime.Type_Info* %485 to %runtime.Type_Info*
	%487 = getelementptr inbounds %runtime.Type_Info*, %runtime.Type_Info** %481, i64 0
	%488 = getelementptr inbounds i64, i64* %483, i64 0
	%489 = getelementptr inbounds i8, i8* %484, i64 0
	%490 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 19
	store %runtime.Type_Info* %490, %runtime.Type_Info** %487
	%491 = getelementptr inbounds %..string, %..string* %482, i64 0
	store %..string {i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str$1d2, i64 0, i32 0), i64 10}, %..string* %491
	store i64 0, i64* %488
	store i8 0, i8* %489
	%492 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %477, i64 0, i32 0
	%493 = getelementptr inbounds {%runtime.Type_Info**, i64}, {%runtime.Type_Info**, i64}* %492, i64 0, i32 0
	store %runtime.Type_Info** %481, %runtime.Type_Info*** %493
	%494 = getelementptr inbounds {%runtime.Type_Info**, i64}, {%runtime.Type_Info**, i64}* %492, i64 0, i32 1
	store i64 1, i64* %494
	%495 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %477, i64 0, i32 1
	%496 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %495, i64 0, i32 0
	store %..string* %482, %..string** %496
	%497 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %495, i64 0, i32 1
	store i64 1, i64* %497
	%498 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %477, i64 0, i32 2
	%499 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %498, i64 0, i32 0
	store i64* %483, i64** %499
	%500 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %498, i64 0, i32 1
	store i64 1, i64* %500
	%501 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %477, i64 0, i32 3
	%502 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %501, i64 0, i32 0
	store i8* %484, i8** %502
	%503 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %501, i64 0, i32 1
	store i64 1, i64* %503
	%504 = load %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %477, align 8
	%505 = bitcast {[0 x i64], [72 x i8], i64}* %473 to %runtime.Type_Info_Struct*
	store %runtime.Type_Info_Struct %504, %runtime.Type_Info_Struct* %505
	%506 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %473, i64 0, i32 2 ; UnionTagPtr
	store i64 16, i64* %506
	%507 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 28
	%508 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %507, i64 0, i32 3
	%509 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %507, i64 0, i32 0
	store i64 0, i64* %509
	%510 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %507, i64 0, i32 1
	store i64 1, i64* %510
	%511 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %507, i64 0, i32 2
	store %..typeid 3386706919782613020, %..typeid* %511
	; Type_Info_Named
	%512 = bitcast {[0 x i64], [72 x i8], i64}* %508 to %runtime.Type_Info_Named*
	%513 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 23
	%514 = bitcast %runtime.Type_Info* %513 to %runtime.Type_Info*
	%515 = getelementptr inbounds %runtime.Type_Info_Named, %runtime.Type_Info_Named* %512, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([18 x i8], [18 x i8]* @str$1d3, i64 0, i32 0), i64 17}, %..string* %515
	%516 = getelementptr inbounds %runtime.Type_Info_Named, %runtime.Type_Info_Named* %512, i64 0, i32 1
	store %runtime.Type_Info* %514, %runtime.Type_Info** %516
	%517 = load %runtime.Type_Info_Named, %runtime.Type_Info_Named* %512, align 8
	%518 = bitcast {[0 x i64], [72 x i8], i64}* %508 to %runtime.Type_Info_Named*
	store %runtime.Type_Info_Named %517, %runtime.Type_Info_Named* %518
	%519 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %508, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %519
	%520 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 29
	%521 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %520, i64 0, i32 3
	%522 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %520, i64 0, i32 0
	store i64 0, i64* %522
	%523 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %520, i64 0, i32 1
	store i64 1, i64* %523
	%524 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %520, i64 0, i32 2
	store %..typeid 3386706919782613021, %..typeid* %524
	; Type_Info_Named
	%525 = bitcast {[0 x i64], [72 x i8], i64}* %521 to %runtime.Type_Info_Named*
	%526 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 23
	%527 = bitcast %runtime.Type_Info* %526 to %runtime.Type_Info*
	%528 = getelementptr inbounds %runtime.Type_Info_Named, %runtime.Type_Info_Named* %525, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @str$1d4, i64 0, i32 0), i64 13}, %..string* %528
	%529 = getelementptr inbounds %runtime.Type_Info_Named, %runtime.Type_Info_Named* %525, i64 0, i32 1
	store %runtime.Type_Info* %527, %runtime.Type_Info** %529
	%530 = load %runtime.Type_Info_Named, %runtime.Type_Info_Named* %525, align 8
	%531 = bitcast {[0 x i64], [72 x i8], i64}* %521 to %runtime.Type_Info_Named*
	store %runtime.Type_Info_Named %530, %runtime.Type_Info_Named* %531
	%532 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %521, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %532
	%533 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 30
	%534 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %533, i64 0, i32 3
	%535 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %533, i64 0, i32 0
	store i64 0, i64* %535
	%536 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %533, i64 0, i32 1
	store i64 1, i64* %536
	%537 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %533, i64 0, i32 2
	store %..typeid 3386706919782613022, %..typeid* %537
	; Type_Info_Named
	%538 = bitcast {[0 x i64], [72 x i8], i64}* %534 to %runtime.Type_Info_Named*
	%539 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 23
	%540 = bitcast %runtime.Type_Info* %539 to %runtime.Type_Info*
	%541 = getelementptr inbounds %runtime.Type_Info_Named, %runtime.Type_Info_Named* %538, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([18 x i8], [18 x i8]* @str$1d5, i64 0, i32 0), i64 17}, %..string* %541
	%542 = getelementptr inbounds %runtime.Type_Info_Named, %runtime.Type_Info_Named* %538, i64 0, i32 1
	store %runtime.Type_Info* %540, %runtime.Type_Info** %542
	%543 = load %runtime.Type_Info_Named, %runtime.Type_Info_Named* %538, align 8
	%544 = bitcast {[0 x i64], [72 x i8], i64}* %534 to %runtime.Type_Info_Named*
	store %runtime.Type_Info_Named %543, %runtime.Type_Info_Named* %544
	%545 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %534, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %545
	%546 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 31
	%547 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %546, i64 0, i32 3
	%548 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %546, i64 0, i32 0
	store i64 8, i64* %548
	%549 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %546, i64 0, i32 1
	store i64 8, i64* %549
	%550 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %546, i64 0, i32 2
	store %..typeid 3386706919782613023, %..typeid* %550
	; Type_Info_Named
	%551 = bitcast {[0 x i64], [72 x i8], i64}* %547 to %runtime.Type_Info_Named*
	%552 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 32
	%553 = bitcast %runtime.Type_Info* %552 to %runtime.Type_Info*
	%554 = getelementptr inbounds %runtime.Type_Info_Named, %runtime.Type_Info_Named* %551, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([18 x i8], [18 x i8]* @str$1d6, i64 0, i32 0), i64 17}, %..string* %554
	%555 = getelementptr inbounds %runtime.Type_Info_Named, %runtime.Type_Info_Named* %551, i64 0, i32 1
	store %runtime.Type_Info* %553, %runtime.Type_Info** %555
	%556 = load %runtime.Type_Info_Named, %runtime.Type_Info_Named* %551, align 8
	%557 = bitcast {[0 x i64], [72 x i8], i64}* %547 to %runtime.Type_Info_Named*
	store %runtime.Type_Info_Named %556, %runtime.Type_Info_Named* %557
	%558 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %547, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %558
	%559 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 32
	%560 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %559, i64 0, i32 3
	%561 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %559, i64 0, i32 0
	store i64 8, i64* %561
	%562 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %559, i64 0, i32 1
	store i64 8, i64* %562
	%563 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %559, i64 0, i32 2
	store %..typeid 1080863910568919072, %..typeid* %563
	; Type_Info_Struct
	%564 = bitcast {[0 x i64], [72 x i8], i64}* %560 to %runtime.Type_Info_Struct*
	%565 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %564, i64 0, i32 4
	store i8 0, i8* %565
	%566 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %564, i64 0, i32 5
	store i8 0, i8* %566
	%567 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %564, i64 0, i32 6
	store i8 0, i8* %567
	%568 = getelementptr inbounds [91 x %runtime.Type_Info*], [91 x %runtime.Type_Info*]* @__$type_info_types_data, i64 0, i32 31
	%569 = getelementptr inbounds [91 x %..string], [91 x %..string]* @__$type_info_names_data, i64 0, i32 9
	%570 = getelementptr inbounds [91 x i64], [91 x i64]* @__$type_info_offsets_data, i64 0, i32 9
	%571 = getelementptr inbounds [91 x i8], [91 x i8]* @__$type_info_usings_data, i64 0, i32 9
	%572 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 10
	%573 = bitcast %runtime.Type_Info* %572 to %runtime.Type_Info*
	%574 = getelementptr inbounds %runtime.Type_Info*, %runtime.Type_Info** %568, i64 0
	%575 = getelementptr inbounds i64, i64* %570, i64 0
	%576 = getelementptr inbounds i8, i8* %571, i64 0
	%577 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 10
	store %runtime.Type_Info* %577, %runtime.Type_Info** %574
	%578 = getelementptr inbounds %..string, %..string* %569, i64 0
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str$1d7, i64 0, i32 0), i64 4}, %..string* %578
	store i64 0, i64* %575
	store i8 0, i8* %576
	%579 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %564, i64 0, i32 0
	%580 = getelementptr inbounds {%runtime.Type_Info**, i64}, {%runtime.Type_Info**, i64}* %579, i64 0, i32 0
	store %runtime.Type_Info** %568, %runtime.Type_Info*** %580
	%581 = getelementptr inbounds {%runtime.Type_Info**, i64}, {%runtime.Type_Info**, i64}* %579, i64 0, i32 1
	store i64 1, i64* %581
	%582 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %564, i64 0, i32 1
	%583 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %582, i64 0, i32 0
	store %..string* %569, %..string** %583
	%584 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %582, i64 0, i32 1
	store i64 1, i64* %584
	%585 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %564, i64 0, i32 2
	%586 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %585, i64 0, i32 0
	store i64* %570, i64** %586
	%587 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %585, i64 0, i32 1
	store i64 1, i64* %587
	%588 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %564, i64 0, i32 3
	%589 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %588, i64 0, i32 0
	store i8* %571, i8** %589
	%590 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %588, i64 0, i32 1
	store i64 1, i64* %590
	%591 = load %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %564, align 8
	%592 = bitcast {[0 x i64], [72 x i8], i64}* %560 to %runtime.Type_Info_Struct*
	store %runtime.Type_Info_Struct %591, %runtime.Type_Info_Struct* %592
	%593 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %560, i64 0, i32 2 ; UnionTagPtr
	store i64 16, i64* %593
	%594 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 33
	%595 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %594, i64 0, i32 3
	%596 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %594, i64 0, i32 0
	store i64 32, i64* %596
	%597 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %594, i64 0, i32 1
	store i64 8, i64* %597
	%598 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %594, i64 0, i32 2
	store %..typeid 3386706919782613025, %..typeid* %598
	; Type_Info_Named
	%599 = bitcast {[0 x i64], [72 x i8], i64}* %595 to %runtime.Type_Info_Named*
	%600 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 34
	%601 = bitcast %runtime.Type_Info* %600 to %runtime.Type_Info*
	%602 = getelementptr inbounds %runtime.Type_Info_Named, %runtime.Type_Info_Named* %599, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([20 x i8], [20 x i8]* @str$1d8, i64 0, i32 0), i64 19}, %..string* %602
	%603 = getelementptr inbounds %runtime.Type_Info_Named, %runtime.Type_Info_Named* %599, i64 0, i32 1
	store %runtime.Type_Info* %601, %runtime.Type_Info** %603
	%604 = load %runtime.Type_Info_Named, %runtime.Type_Info_Named* %599, align 8
	%605 = bitcast {[0 x i64], [72 x i8], i64}* %595 to %runtime.Type_Info_Named*
	store %runtime.Type_Info_Named %604, %runtime.Type_Info_Named* %605
	%606 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %595, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %606
	%607 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 34
	%608 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %607, i64 0, i32 3
	%609 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %607, i64 0, i32 0
	store i64 32, i64* %609
	%610 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %607, i64 0, i32 1
	store i64 8, i64* %610
	%611 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %607, i64 0, i32 2
	store %..typeid 1080863910568919074, %..typeid* %611
	; Type_Info_Struct
	%612 = bitcast {[0 x i64], [72 x i8], i64}* %608 to %runtime.Type_Info_Struct*
	%613 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %612, i64 0, i32 4
	store i8 0, i8* %613
	%614 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %612, i64 0, i32 5
	store i8 0, i8* %614
	%615 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %612, i64 0, i32 6
	store i8 0, i8* %615
	%616 = getelementptr inbounds [91 x %runtime.Type_Info*], [91 x %runtime.Type_Info*]* @__$type_info_types_data, i64 0, i32 32
	%617 = getelementptr inbounds [91 x %..string], [91 x %..string]* @__$type_info_names_data, i64 0, i32 10
	%618 = getelementptr inbounds [91 x i64], [91 x i64]* @__$type_info_offsets_data, i64 0, i32 10
	%619 = getelementptr inbounds [91 x i8], [91 x i8]* @__$type_info_usings_data, i64 0, i32 10
	%620 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 10
	%621 = bitcast %runtime.Type_Info* %620 to %runtime.Type_Info*
	%622 = getelementptr inbounds %runtime.Type_Info*, %runtime.Type_Info** %616, i64 0
	%623 = getelementptr inbounds i64, i64* %618, i64 0
	%624 = getelementptr inbounds i8, i8* %619, i64 0
	%625 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 10
	store %runtime.Type_Info* %625, %runtime.Type_Info** %622
	%626 = getelementptr inbounds %..string, %..string* %617, i64 0
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str$1d9, i64 0, i32 0), i64 6}, %..string* %626
	store i64 0, i64* %623
	store i8 0, i8* %624
	%627 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 10
	%628 = bitcast %runtime.Type_Info* %627 to %runtime.Type_Info*
	%629 = getelementptr inbounds %runtime.Type_Info*, %runtime.Type_Info** %616, i64 1
	%630 = getelementptr inbounds i64, i64* %618, i64 1
	%631 = getelementptr inbounds i8, i8* %619, i64 1
	%632 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 10
	store %runtime.Type_Info* %632, %runtime.Type_Info** %629
	%633 = getelementptr inbounds %..string, %..string* %617, i64 1
	store %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str$1da, i64 0, i32 0), i64 7}, %..string* %633
	store i64 8, i64* %630
	store i8 0, i8* %631
	%634 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 19
	%635 = bitcast %runtime.Type_Info* %634 to %runtime.Type_Info*
	%636 = getelementptr inbounds %runtime.Type_Info*, %runtime.Type_Info** %616, i64 2
	%637 = getelementptr inbounds i64, i64* %618, i64 2
	%638 = getelementptr inbounds i8, i8* %619, i64 2
	%639 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 19
	store %runtime.Type_Info* %639, %runtime.Type_Info** %636
	%640 = getelementptr inbounds %..string, %..string* %617, i64 2
	store %..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @str$1db, i64 0, i32 0), i64 8}, %..string* %640
	store i64 16, i64* %637
	store i8 0, i8* %638
	%641 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 35
	%642 = bitcast %runtime.Type_Info* %641 to %runtime.Type_Info*
	%643 = getelementptr inbounds %runtime.Type_Info*, %runtime.Type_Info** %616, i64 3
	%644 = getelementptr inbounds i64, i64* %618, i64 3
	%645 = getelementptr inbounds i8, i8* %619, i64 3
	%646 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 35
	store %runtime.Type_Info* %646, %runtime.Type_Info** %643
	%647 = getelementptr inbounds %..string, %..string* %617, i64 3
	store %..string {i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str$1dc, i64 0, i32 0), i64 10}, %..string* %647
	store i64 24, i64* %644
	store i8 0, i8* %645
	%648 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %612, i64 0, i32 0
	%649 = getelementptr inbounds {%runtime.Type_Info**, i64}, {%runtime.Type_Info**, i64}* %648, i64 0, i32 0
	store %runtime.Type_Info** %616, %runtime.Type_Info*** %649
	%650 = getelementptr inbounds {%runtime.Type_Info**, i64}, {%runtime.Type_Info**, i64}* %648, i64 0, i32 1
	store i64 4, i64* %650
	%651 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %612, i64 0, i32 1
	%652 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %651, i64 0, i32 0
	store %..string* %617, %..string** %652
	%653 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %651, i64 0, i32 1
	store i64 4, i64* %653
	%654 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %612, i64 0, i32 2
	%655 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %654, i64 0, i32 0
	store i64* %618, i64** %655
	%656 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %654, i64 0, i32 1
	store i64 4, i64* %656
	%657 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %612, i64 0, i32 3
	%658 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %657, i64 0, i32 0
	store i8* %619, i8** %658
	%659 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %657, i64 0, i32 1
	store i64 4, i64* %659
	%660 = load %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %612, align 8
	%661 = bitcast {[0 x i64], [72 x i8], i64}* %608 to %runtime.Type_Info_Struct*
	store %runtime.Type_Info_Struct %660, %runtime.Type_Info_Struct* %661
	%662 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %608, i64 0, i32 2 ; UnionTagPtr
	store i64 16, i64* %662
	%663 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 35
	%664 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %663, i64 0, i32 3
	%665 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %663, i64 0, i32 0
	store i64 8, i64* %665
	%666 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %663, i64 0, i32 1
	store i64 8, i64* %666
	%667 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %663, i64 0, i32 2
	store %..typeid 3530822107858468899, %..typeid* %667
	; Type_Info_Named
	%668 = bitcast {[0 x i64], [72 x i8], i64}* %664 to %runtime.Type_Info_Named*
	%669 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 36
	%670 = bitcast %runtime.Type_Info* %669 to %runtime.Type_Info*
	%671 = getelementptr inbounds %runtime.Type_Info_Named, %runtime.Type_Info_Named* %668, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([19 x i8], [19 x i8]* @str$1dd, i64 0, i32 0), i64 18}, %..string* %671
	%672 = getelementptr inbounds %runtime.Type_Info_Named, %runtime.Type_Info_Named* %668, i64 0, i32 1
	store %runtime.Type_Info* %670, %runtime.Type_Info** %672
	%673 = load %runtime.Type_Info_Named, %runtime.Type_Info_Named* %668, align 8
	%674 = bitcast {[0 x i64], [72 x i8], i64}* %664 to %runtime.Type_Info_Named*
	store %runtime.Type_Info_Named %673, %runtime.Type_Info_Named* %674
	%675 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %664, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %675
	%676 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 36
	%677 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %676, i64 0, i32 3
	%678 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %676, i64 0, i32 0
	store i64 8, i64* %678
	%679 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %676, i64 0, i32 1
	store i64 8, i64* %679
	%680 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %676, i64 0, i32 2
	store %..typeid 1224979098644774948, %..typeid* %680
	; Type_Info_Enum
	%681 = bitcast {[0 x i64], [72 x i8], i64}* %677 to %runtime.Type_Info_Enum*
	%682 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 8
	%683 = getelementptr inbounds %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %681, i64 0, i32 0
	store %runtime.Type_Info* %682, %runtime.Type_Info** %683
	%684 = getelementptr inbounds [6 x %..string], [6 x %..string]* @$enum_names-24, i64 0, i32 0
	%685 = getelementptr inbounds [6 x %runtime.Type_Info_Enum_Value], [6 x %runtime.Type_Info_Enum_Value]* @$enum_values-24, i64 0, i32 0
	%686 = bitcast %runtime.Type_Info_Enum_Value* %685 to i64*
	store i64 0, i64* %686
	%687 = getelementptr inbounds %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %685, i64 0, i32 2 ; UnionTagPtr
	store i64 6, i64* %687
	store %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str$1de, i64 0, i32 0), i64 7}, %..string* %684
	%688 = getelementptr inbounds [6 x %..string], [6 x %..string]* @$enum_names-24, i64 0, i32 1
	%689 = getelementptr inbounds [6 x %runtime.Type_Info_Enum_Value], [6 x %runtime.Type_Info_Enum_Value]* @$enum_values-24, i64 0, i32 1
	%690 = bitcast %runtime.Type_Info_Enum_Value* %689 to i64*
	store i64 1, i64* %690
	%691 = getelementptr inbounds %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %689, i64 0, i32 2 ; UnionTagPtr
	store i64 6, i64* %691
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str$1df, i64 0, i32 0), i64 4}, %..string* %688
	%692 = getelementptr inbounds [6 x %..string], [6 x %..string]* @$enum_names-24, i64 0, i32 2
	%693 = getelementptr inbounds [6 x %runtime.Type_Info_Enum_Value], [6 x %runtime.Type_Info_Enum_Value]* @$enum_values-24, i64 0, i32 2
	%694 = bitcast %runtime.Type_Info_Enum_Value* %693 to i64*
	store i64 2, i64* %694
	%695 = getelementptr inbounds %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %693, i64 0, i32 2 ; UnionTagPtr
	store i64 6, i64* %695
	store %..string {i8* getelementptr inbounds ([12 x i8], [12 x i8]* @str$1e0, i64 0, i32 0), i64 11}, %..string* %692
	%696 = getelementptr inbounds [6 x %..string], [6 x %..string]* @$enum_names-24, i64 0, i32 3
	%697 = getelementptr inbounds [6 x %runtime.Type_Info_Enum_Value], [6 x %runtime.Type_Info_Enum_Value]* @$enum_values-24, i64 0, i32 3
	%698 = bitcast %runtime.Type_Info_Enum_Value* %697 to i64*
	store i64 3, i64* %698
	%699 = getelementptr inbounds %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %697, i64 0, i32 2 ; UnionTagPtr
	store i64 6, i64* %699
	store %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str$1e1, i64 0, i32 0), i64 1}, %..string* %696
	%700 = getelementptr inbounds [6 x %..string], [6 x %..string]* @$enum_names-24, i64 0, i32 4
	%701 = getelementptr inbounds [6 x %runtime.Type_Info_Enum_Value], [6 x %runtime.Type_Info_Enum_Value]* @$enum_values-24, i64 0, i32 4
	%702 = bitcast %runtime.Type_Info_Enum_Value* %701 to i64*
	store i64 4, i64* %702
	%703 = getelementptr inbounds %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %701, i64 0, i32 2 ; UnionTagPtr
	store i64 6, i64* %703
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str$1e2, i64 0, i32 0), i64 3}, %..string* %700
	%704 = getelementptr inbounds [6 x %..string], [6 x %..string]* @$enum_names-24, i64 0, i32 5
	%705 = getelementptr inbounds [6 x %runtime.Type_Info_Enum_Value], [6 x %runtime.Type_Info_Enum_Value]* @$enum_values-24, i64 0, i32 5
	%706 = bitcast %runtime.Type_Info_Enum_Value* %705 to i64*
	store i64 5, i64* %706
	%707 = getelementptr inbounds %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %705, i64 0, i32 2 ; UnionTagPtr
	store i64 6, i64* %707
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str$1e3, i64 0, i32 0), i64 4}, %..string* %704
	%708 = getelementptr inbounds %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %681, i64 0, i32 1
	%709 = getelementptr inbounds [6 x %..string], [6 x %..string]* @$enum_names-24, i64 0, i32 0
	%710 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %708, i64 0, i32 0
	store %..string* %709, %..string** %710
	%711 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %708, i64 0, i32 1
	store i64 6, i64* %711
	%712 = getelementptr inbounds %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %681, i64 0, i32 2
	%713 = getelementptr inbounds [6 x %runtime.Type_Info_Enum_Value], [6 x %runtime.Type_Info_Enum_Value]* @$enum_values-24, i64 0, i32 0
	%714 = getelementptr inbounds {%runtime.Type_Info_Enum_Value*, i64}, {%runtime.Type_Info_Enum_Value*, i64}* %712, i64 0, i32 0
	store %runtime.Type_Info_Enum_Value* %713, %runtime.Type_Info_Enum_Value** %714
	%715 = getelementptr inbounds {%runtime.Type_Info_Enum_Value*, i64}, {%runtime.Type_Info_Enum_Value*, i64}* %712, i64 0, i32 1
	store i64 6, i64* %715
	%716 = load %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %681, align 8
	%717 = bitcast {[0 x i64], [72 x i8], i64}* %677 to %runtime.Type_Info_Enum*
	store %runtime.Type_Info_Enum %716, %runtime.Type_Info_Enum* %717
	%718 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %677, i64 0, i32 2 ; UnionTagPtr
	store i64 18, i64* %718
	%719 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 37
	%720 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %719, i64 0, i32 3
	%721 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %719, i64 0, i32 0
	store i64 24, i64* %721
	%722 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %719, i64 0, i32 1
	store i64 8, i64* %722
	%723 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %719, i64 0, i32 2
	store %..typeid 3386706919782613029, %..typeid* %723
	; Type_Info_Named
	%724 = bitcast {[0 x i64], [72 x i8], i64}* %720 to %runtime.Type_Info_Named*
	%725 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 38
	%726 = bitcast %runtime.Type_Info* %725 to %runtime.Type_Info*
	%727 = getelementptr inbounds %runtime.Type_Info_Named, %runtime.Type_Info_Named* %724, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([16 x i8], [16 x i8]* @str$1e4, i64 0, i32 0), i64 15}, %..string* %727
	%728 = getelementptr inbounds %runtime.Type_Info_Named, %runtime.Type_Info_Named* %724, i64 0, i32 1
	store %runtime.Type_Info* %726, %runtime.Type_Info** %728
	%729 = load %runtime.Type_Info_Named, %runtime.Type_Info_Named* %724, align 8
	%730 = bitcast {[0 x i64], [72 x i8], i64}* %720 to %runtime.Type_Info_Named*
	store %runtime.Type_Info_Named %729, %runtime.Type_Info_Named* %730
	%731 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %720, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %731
	%732 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 38
	%733 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %732, i64 0, i32 3
	%734 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %732, i64 0, i32 0
	store i64 24, i64* %734
	%735 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %732, i64 0, i32 1
	store i64 8, i64* %735
	%736 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %732, i64 0, i32 2
	store %..typeid 1080863910568919078, %..typeid* %736
	; Type_Info_Struct
	%737 = bitcast {[0 x i64], [72 x i8], i64}* %733 to %runtime.Type_Info_Struct*
	%738 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %737, i64 0, i32 4
	store i8 0, i8* %738
	%739 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %737, i64 0, i32 5
	store i8 0, i8* %739
	%740 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %737, i64 0, i32 6
	store i8 0, i8* %740
	%741 = getelementptr inbounds [91 x %runtime.Type_Info*], [91 x %runtime.Type_Info*]* @__$type_info_types_data, i64 0, i32 36
	%742 = getelementptr inbounds [91 x %..string], [91 x %..string]* @__$type_info_names_data, i64 0, i32 14
	%743 = getelementptr inbounds [91 x i64], [91 x i64]* @__$type_info_offsets_data, i64 0, i32 14
	%744 = getelementptr inbounds [91 x i8], [91 x i8]* @__$type_info_usings_data, i64 0, i32 14
	%745 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 10
	%746 = bitcast %runtime.Type_Info* %745 to %runtime.Type_Info*
	%747 = getelementptr inbounds %runtime.Type_Info*, %runtime.Type_Info** %741, i64 0
	%748 = getelementptr inbounds i64, i64* %743, i64 0
	%749 = getelementptr inbounds i8, i8* %744, i64 0
	%750 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 10
	store %runtime.Type_Info* %750, %runtime.Type_Info** %747
	%751 = getelementptr inbounds %..string, %..string* %742, i64 0
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str$1e5, i64 0, i32 0), i64 4}, %..string* %751
	store i64 0, i64* %748
	store i8 0, i8* %749
	%752 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 8
	%753 = bitcast %runtime.Type_Info* %752 to %runtime.Type_Info*
	%754 = getelementptr inbounds %runtime.Type_Info*, %runtime.Type_Info** %741, i64 1
	%755 = getelementptr inbounds i64, i64* %743, i64 1
	%756 = getelementptr inbounds i8, i8* %744, i64 1
	%757 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 8
	store %runtime.Type_Info* %757, %runtime.Type_Info** %754
	%758 = getelementptr inbounds %..string, %..string* %742, i64 1
	store %..string {i8* getelementptr inbounds ([10 x i8], [10 x i8]* @str$1e6, i64 0, i32 0), i64 9}, %..string* %758
	store i64 8, i64* %755
	store i8 0, i8* %756
	%759 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 8
	%760 = bitcast %runtime.Type_Info* %759 to %runtime.Type_Info*
	%761 = getelementptr inbounds %runtime.Type_Info*, %runtime.Type_Info** %741, i64 2
	%762 = getelementptr inbounds i64, i64* %743, i64 2
	%763 = getelementptr inbounds i8, i8* %744, i64 2
	%764 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 8
	store %runtime.Type_Info* %764, %runtime.Type_Info** %761
	%765 = getelementptr inbounds %..string, %..string* %742, i64 2
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str$1e7, i64 0, i32 0), i64 5}, %..string* %765
	store i64 16, i64* %762
	store i8 0, i8* %763
	%766 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %737, i64 0, i32 0
	%767 = getelementptr inbounds {%runtime.Type_Info**, i64}, {%runtime.Type_Info**, i64}* %766, i64 0, i32 0
	store %runtime.Type_Info** %741, %runtime.Type_Info*** %767
	%768 = getelementptr inbounds {%runtime.Type_Info**, i64}, {%runtime.Type_Info**, i64}* %766, i64 0, i32 1
	store i64 3, i64* %768
	%769 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %737, i64 0, i32 1
	%770 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %769, i64 0, i32 0
	store %..string* %742, %..string** %770
	%771 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %769, i64 0, i32 1
	store i64 3, i64* %771
	%772 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %737, i64 0, i32 2
	%773 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %772, i64 0, i32 0
	store i64* %743, i64** %773
	%774 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %772, i64 0, i32 1
	store i64 3, i64* %774
	%775 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %737, i64 0, i32 3
	%776 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %775, i64 0, i32 0
	store i8* %744, i8** %776
	%777 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %775, i64 0, i32 1
	store i64 3, i64* %777
	%778 = load %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %737, align 8
	%779 = bitcast {[0 x i64], [72 x i8], i64}* %733 to %runtime.Type_Info_Struct*
	store %runtime.Type_Info_Struct %778, %runtime.Type_Info_Struct* %779
	%780 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %733, i64 0, i32 2 ; UnionTagPtr
	store i64 16, i64* %780
	%781 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 39
	%782 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %781, i64 0, i32 3
	%783 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %781, i64 0, i32 0
	store i64 16, i64* %783
	%784 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %781, i64 0, i32 1
	store i64 8, i64* %784
	%785 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %781, i64 0, i32 2
	store %..typeid 3386706919782613031, %..typeid* %785
	; Type_Info_Named
	%786 = bitcast {[0 x i64], [72 x i8], i64}* %782 to %runtime.Type_Info_Named*
	%787 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 40
	%788 = bitcast %runtime.Type_Info* %787 to %runtime.Type_Info*
	%789 = getelementptr inbounds %runtime.Type_Info_Named, %runtime.Type_Info_Named* %786, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([24 x i8], [24 x i8]* @str$1e8, i64 0, i32 0), i64 23}, %..string* %789
	%790 = getelementptr inbounds %runtime.Type_Info_Named, %runtime.Type_Info_Named* %786, i64 0, i32 1
	store %runtime.Type_Info* %788, %runtime.Type_Info** %790
	%791 = load %runtime.Type_Info_Named, %runtime.Type_Info_Named* %786, align 8
	%792 = bitcast {[0 x i64], [72 x i8], i64}* %782 to %runtime.Type_Info_Named*
	store %runtime.Type_Info_Named %791, %runtime.Type_Info_Named* %792
	%793 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %782, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %793
	%794 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 40
	%795 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %794, i64 0, i32 3
	%796 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %794, i64 0, i32 0
	store i64 16, i64* %796
	%797 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %794, i64 0, i32 1
	store i64 8, i64* %797
	%798 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %794, i64 0, i32 2
	store %..typeid 1080863910568919080, %..typeid* %798
	; Type_Info_Struct
	%799 = bitcast {[0 x i64], [72 x i8], i64}* %795 to %runtime.Type_Info_Struct*
	%800 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %799, i64 0, i32 4
	store i8 0, i8* %800
	%801 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %799, i64 0, i32 5
	store i8 0, i8* %801
	%802 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %799, i64 0, i32 6
	store i8 0, i8* %802
	%803 = getelementptr inbounds [91 x %runtime.Type_Info*], [91 x %runtime.Type_Info*]* @__$type_info_types_data, i64 0, i32 39
	%804 = getelementptr inbounds [91 x %..string], [91 x %..string]* @__$type_info_names_data, i64 0, i32 17
	%805 = getelementptr inbounds [91 x i64], [91 x i64]* @__$type_info_offsets_data, i64 0, i32 17
	%806 = getelementptr inbounds [91 x i8], [91 x i8]* @__$type_info_usings_data, i64 0, i32 17
	%807 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 10
	%808 = bitcast %runtime.Type_Info* %807 to %runtime.Type_Info*
	%809 = getelementptr inbounds %runtime.Type_Info*, %runtime.Type_Info** %803, i64 0
	%810 = getelementptr inbounds i64, i64* %805, i64 0
	%811 = getelementptr inbounds i8, i8* %806, i64 0
	%812 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 10
	store %runtime.Type_Info* %812, %runtime.Type_Info** %809
	%813 = getelementptr inbounds %..string, %..string* %804, i64 0
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str$1e9, i64 0, i32 0), i64 4}, %..string* %813
	store i64 0, i64* %810
	store i8 0, i8* %811
	%814 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 8
	%815 = bitcast %runtime.Type_Info* %814 to %runtime.Type_Info*
	%816 = getelementptr inbounds %runtime.Type_Info*, %runtime.Type_Info** %803, i64 1
	%817 = getelementptr inbounds i64, i64* %805, i64 1
	%818 = getelementptr inbounds i8, i8* %806, i64 1
	%819 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 8
	store %runtime.Type_Info* %819, %runtime.Type_Info** %816
	%820 = getelementptr inbounds %..string, %..string* %804, i64 1
	store %..string {i8* getelementptr inbounds ([10 x i8], [10 x i8]* @str$1ea, i64 0, i32 0), i64 9}, %..string* %820
	store i64 8, i64* %817
	store i8 0, i8* %818
	%821 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %799, i64 0, i32 0
	%822 = getelementptr inbounds {%runtime.Type_Info**, i64}, {%runtime.Type_Info**, i64}* %821, i64 0, i32 0
	store %runtime.Type_Info** %803, %runtime.Type_Info*** %822
	%823 = getelementptr inbounds {%runtime.Type_Info**, i64}, {%runtime.Type_Info**, i64}* %821, i64 0, i32 1
	store i64 2, i64* %823
	%824 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %799, i64 0, i32 1
	%825 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %824, i64 0, i32 0
	store %..string* %804, %..string** %825
	%826 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %824, i64 0, i32 1
	store i64 2, i64* %826
	%827 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %799, i64 0, i32 2
	%828 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %827, i64 0, i32 0
	store i64* %805, i64** %828
	%829 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %827, i64 0, i32 1
	store i64 2, i64* %829
	%830 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %799, i64 0, i32 3
	%831 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %830, i64 0, i32 0
	store i8* %806, i8** %831
	%832 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %830, i64 0, i32 1
	store i64 2, i64* %832
	%833 = load %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %799, align 8
	%834 = bitcast {[0 x i64], [72 x i8], i64}* %795 to %runtime.Type_Info_Struct*
	store %runtime.Type_Info_Struct %833, %runtime.Type_Info_Struct* %834
	%835 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %795, i64 0, i32 2 ; UnionTagPtr
	store i64 16, i64* %835
	%836 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 41
	%837 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %836, i64 0, i32 3
	%838 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %836, i64 0, i32 0
	store i64 16, i64* %838
	%839 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %836, i64 0, i32 1
	store i64 8, i64* %839
	%840 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %836, i64 0, i32 2
	store %..typeid 3386706919782613033, %..typeid* %840
	; Type_Info_Named
	%841 = bitcast {[0 x i64], [72 x i8], i64}* %837 to %runtime.Type_Info_Named*
	%842 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 40
	%843 = bitcast %runtime.Type_Info* %842 to %runtime.Type_Info*
	%844 = getelementptr inbounds %runtime.Type_Info_Named, %runtime.Type_Info_Named* %841, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([16 x i8], [16 x i8]* @str$1eb, i64 0, i32 0), i64 15}, %..string* %844
	%845 = getelementptr inbounds %runtime.Type_Info_Named, %runtime.Type_Info_Named* %841, i64 0, i32 1
	store %runtime.Type_Info* %843, %runtime.Type_Info** %845
	%846 = load %runtime.Type_Info_Named, %runtime.Type_Info_Named* %841, align 8
	%847 = bitcast {[0 x i64], [72 x i8], i64}* %837 to %runtime.Type_Info_Named*
	store %runtime.Type_Info_Named %846, %runtime.Type_Info_Named* %847
	%848 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %837, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %848
	%849 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 42
	%850 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %849, i64 0, i32 3
	%851 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %849, i64 0, i32 0
	store i64 32, i64* %851
	%852 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %849, i64 0, i32 1
	store i64 8, i64* %852
	%853 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %849, i64 0, i32 2
	store %..typeid 3386706919782613034, %..typeid* %853
	; Type_Info_Named
	%854 = bitcast {[0 x i64], [72 x i8], i64}* %850 to %runtime.Type_Info_Named*
	%855 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 43
	%856 = bitcast %runtime.Type_Info* %855 to %runtime.Type_Info*
	%857 = getelementptr inbounds %runtime.Type_Info_Named, %runtime.Type_Info_Named* %854, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([16 x i8], [16 x i8]* @str$1ec, i64 0, i32 0), i64 15}, %..string* %857
	%858 = getelementptr inbounds %runtime.Type_Info_Named, %runtime.Type_Info_Named* %854, i64 0, i32 1
	store %runtime.Type_Info* %856, %runtime.Type_Info** %858
	%859 = load %runtime.Type_Info_Named, %runtime.Type_Info_Named* %854, align 8
	%860 = bitcast {[0 x i64], [72 x i8], i64}* %850 to %runtime.Type_Info_Named*
	store %runtime.Type_Info_Named %859, %runtime.Type_Info_Named* %860
	%861 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %850, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %861
	%862 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 43
	%863 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %862, i64 0, i32 3
	%864 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %862, i64 0, i32 0
	store i64 32, i64* %864
	%865 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %862, i64 0, i32 1
	store i64 8, i64* %865
	%866 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %862, i64 0, i32 2
	store %..typeid 1080863910568919083, %..typeid* %866
	; Type_Info_Struct
	%867 = bitcast {[0 x i64], [72 x i8], i64}* %863 to %runtime.Type_Info_Struct*
	%868 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %867, i64 0, i32 4
	store i8 0, i8* %868
	%869 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %867, i64 0, i32 5
	store i8 0, i8* %869
	%870 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %867, i64 0, i32 6
	store i8 0, i8* %870
	%871 = getelementptr inbounds [91 x %runtime.Type_Info*], [91 x %runtime.Type_Info*]* @__$type_info_types_data, i64 0, i32 41
	%872 = getelementptr inbounds [91 x %..string], [91 x %..string]* @__$type_info_names_data, i64 0, i32 19
	%873 = getelementptr inbounds [91 x i64], [91 x i64]* @__$type_info_offsets_data, i64 0, i32 19
	%874 = getelementptr inbounds [91 x i8], [91 x i8]* @__$type_info_usings_data, i64 0, i32 19
	%875 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 44
	%876 = bitcast %runtime.Type_Info* %875 to %runtime.Type_Info*
	%877 = getelementptr inbounds %runtime.Type_Info*, %runtime.Type_Info** %871, i64 0
	%878 = getelementptr inbounds i64, i64* %873, i64 0
	%879 = getelementptr inbounds i8, i8* %874, i64 0
	%880 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 44
	store %runtime.Type_Info* %880, %runtime.Type_Info** %877
	%881 = getelementptr inbounds %..string, %..string* %872, i64 0
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str$1ed, i64 0, i32 0), i64 5}, %..string* %881
	store i64 0, i64* %878
	store i8 0, i8* %879
	%882 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 46
	%883 = bitcast %runtime.Type_Info* %882 to %runtime.Type_Info*
	%884 = getelementptr inbounds %runtime.Type_Info*, %runtime.Type_Info** %871, i64 1
	%885 = getelementptr inbounds i64, i64* %873, i64 1
	%886 = getelementptr inbounds i8, i8* %874, i64 1
	%887 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 46
	store %runtime.Type_Info* %887, %runtime.Type_Info** %884
	%888 = getelementptr inbounds %..string, %..string* %872, i64 1
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str$1ee, i64 0, i32 0), i64 5}, %..string* %888
	store i64 16, i64* %885
	store i8 0, i8* %886
	%889 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %867, i64 0, i32 0
	%890 = getelementptr inbounds {%runtime.Type_Info**, i64}, {%runtime.Type_Info**, i64}* %889, i64 0, i32 0
	store %runtime.Type_Info** %871, %runtime.Type_Info*** %890
	%891 = getelementptr inbounds {%runtime.Type_Info**, i64}, {%runtime.Type_Info**, i64}* %889, i64 0, i32 1
	store i64 2, i64* %891
	%892 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %867, i64 0, i32 1
	%893 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %892, i64 0, i32 0
	store %..string* %872, %..string** %893
	%894 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %892, i64 0, i32 1
	store i64 2, i64* %894
	%895 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %867, i64 0, i32 2
	%896 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %895, i64 0, i32 0
	store i64* %873, i64** %896
	%897 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %895, i64 0, i32 1
	store i64 2, i64* %897
	%898 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %867, i64 0, i32 3
	%899 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %898, i64 0, i32 0
	store i8* %874, i8** %899
	%900 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %898, i64 0, i32 1
	store i64 2, i64* %900
	%901 = load %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %867, align 8
	%902 = bitcast {[0 x i64], [72 x i8], i64}* %863 to %runtime.Type_Info_Struct*
	store %runtime.Type_Info_Struct %901, %runtime.Type_Info_Struct* %902
	%903 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %863, i64 0, i32 2 ; UnionTagPtr
	store i64 16, i64* %903
	%904 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 44
	%905 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %904, i64 0, i32 3
	%906 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %904, i64 0, i32 0
	store i64 16, i64* %906
	%907 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %904, i64 0, i32 1
	store i64 8, i64* %907
	%908 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %904, i64 0, i32 2
	store %..typeid 936748722493063212, %..typeid* %908
	; Type_Info_Slice
	%909 = bitcast {[0 x i64], [72 x i8], i64}* %905 to %runtime.Type_Info_Slice*
	%910 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 10
	%911 = bitcast %runtime.Type_Info* %910 to %runtime.Type_Info*
	%912 = getelementptr inbounds %runtime.Type_Info_Slice, %runtime.Type_Info_Slice* %909, i64 0, i32 0
	store %runtime.Type_Info* %911, %runtime.Type_Info** %912
	%913 = getelementptr inbounds %runtime.Type_Info_Slice, %runtime.Type_Info_Slice* %909, i64 0, i32 1
	store i64 8, i64* %913
	%914 = load %runtime.Type_Info_Slice, %runtime.Type_Info_Slice* %909, align 8
	%915 = bitcast {[0 x i64], [72 x i8], i64}* %905 to %runtime.Type_Info_Slice*
	store %runtime.Type_Info_Slice %914, %runtime.Type_Info_Slice* %915
	%916 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %905, i64 0, i32 2 ; UnionTagPtr
	store i64 14, i64* %916
	%917 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 45
	%918 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %917, i64 0, i32 3
	%919 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %917, i64 0, i32 0
	store i64 8, i64* %919
	%920 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %917, i64 0, i32 1
	store i64 8, i64* %920
	%921 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %917, i64 0, i32 2
	store %..typeid 648518346341351469, %..typeid* %921
	; Type_Info_Pointer
	%922 = bitcast {[0 x i64], [72 x i8], i64}* %918 to %runtime.Type_Info_Pointer*
	%923 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 10
	%924 = bitcast %runtime.Type_Info* %923 to %runtime.Type_Info*
	%925 = getelementptr inbounds %runtime.Type_Info_Pointer, %runtime.Type_Info_Pointer* %922, i64 0, i32 0
	store %runtime.Type_Info* %924, %runtime.Type_Info** %925
	%926 = load %runtime.Type_Info_Pointer, %runtime.Type_Info_Pointer* %922, align 8
	%927 = bitcast {[0 x i64], [72 x i8], i64}* %918 to %runtime.Type_Info_Pointer*
	store %runtime.Type_Info_Pointer %926, %runtime.Type_Info_Pointer* %927
	%928 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %918, i64 0, i32 2 ; UnionTagPtr
	store i64 10, i64* %928
	%929 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 46
	%930 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %929, i64 0, i32 3
	%931 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %929, i64 0, i32 0
	store i64 16, i64* %931
	%932 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %929, i64 0, i32 1
	store i64 8, i64* %932
	%933 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %929, i64 0, i32 2
	store %..typeid 936748722493063214, %..typeid* %933
	; Type_Info_Slice
	%934 = bitcast {[0 x i64], [72 x i8], i64}* %930 to %runtime.Type_Info_Slice*
	%935 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 6
	%936 = bitcast %runtime.Type_Info* %935 to %runtime.Type_Info*
	%937 = getelementptr inbounds %runtime.Type_Info_Slice, %runtime.Type_Info_Slice* %934, i64 0, i32 0
	store %runtime.Type_Info* %936, %runtime.Type_Info** %937
	%938 = getelementptr inbounds %runtime.Type_Info_Slice, %runtime.Type_Info_Slice* %934, i64 0, i32 1
	store i64 16, i64* %938
	%939 = load %runtime.Type_Info_Slice, %runtime.Type_Info_Slice* %934, align 8
	%940 = bitcast {[0 x i64], [72 x i8], i64}* %930 to %runtime.Type_Info_Slice*
	store %runtime.Type_Info_Slice %939, %runtime.Type_Info_Slice* %940
	%941 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %930, i64 0, i32 2 ; UnionTagPtr
	store i64 14, i64* %941
	%942 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 47
	%943 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %942, i64 0, i32 3
	%944 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %942, i64 0, i32 0
	store i64 8, i64* %944
	%945 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %942, i64 0, i32 1
	store i64 8, i64* %945
	%946 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %942, i64 0, i32 2
	store %..typeid 648518346341351471, %..typeid* %946
	; Type_Info_Pointer
	%947 = bitcast {[0 x i64], [72 x i8], i64}* %943 to %runtime.Type_Info_Pointer*
	%948 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 6
	%949 = bitcast %runtime.Type_Info* %948 to %runtime.Type_Info*
	%950 = getelementptr inbounds %runtime.Type_Info_Pointer, %runtime.Type_Info_Pointer* %947, i64 0, i32 0
	store %runtime.Type_Info* %949, %runtime.Type_Info** %950
	%951 = load %runtime.Type_Info_Pointer, %runtime.Type_Info_Pointer* %947, align 8
	%952 = bitcast {[0 x i64], [72 x i8], i64}* %943 to %runtime.Type_Info_Pointer*
	store %runtime.Type_Info_Pointer %951, %runtime.Type_Info_Pointer* %952
	%953 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %943, i64 0, i32 2 ; UnionTagPtr
	store i64 10, i64* %953
	%954 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 48
	%955 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %954, i64 0, i32 3
	%956 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %954, i64 0, i32 0
	store i64 72, i64* %956
	%957 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %954, i64 0, i32 1
	store i64 8, i64* %957
	%958 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %954, i64 0, i32 2
	store %..typeid 3386706919782613040, %..typeid* %958
	; Type_Info_Named
	%959 = bitcast {[0 x i64], [72 x i8], i64}* %955 to %runtime.Type_Info_Named*
	%960 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 49
	%961 = bitcast %runtime.Type_Info* %960 to %runtime.Type_Info*
	%962 = getelementptr inbounds %runtime.Type_Info_Named, %runtime.Type_Info_Named* %959, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([17 x i8], [17 x i8]* @str$1ef, i64 0, i32 0), i64 16}, %..string* %962
	%963 = getelementptr inbounds %runtime.Type_Info_Named, %runtime.Type_Info_Named* %959, i64 0, i32 1
	store %runtime.Type_Info* %961, %runtime.Type_Info** %963
	%964 = load %runtime.Type_Info_Named, %runtime.Type_Info_Named* %959, align 8
	%965 = bitcast {[0 x i64], [72 x i8], i64}* %955 to %runtime.Type_Info_Named*
	store %runtime.Type_Info_Named %964, %runtime.Type_Info_Named* %965
	%966 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %955, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %966
	%967 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 49
	%968 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %967, i64 0, i32 3
	%969 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %967, i64 0, i32 0
	store i64 72, i64* %969
	%970 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %967, i64 0, i32 1
	store i64 8, i64* %970
	%971 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %967, i64 0, i32 2
	store %..typeid 1080863910568919089, %..typeid* %971
	; Type_Info_Struct
	%972 = bitcast {[0 x i64], [72 x i8], i64}* %968 to %runtime.Type_Info_Struct*
	%973 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %972, i64 0, i32 4
	store i8 0, i8* %973
	%974 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %972, i64 0, i32 5
	store i8 0, i8* %974
	%975 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %972, i64 0, i32 6
	store i8 0, i8* %975
	%976 = getelementptr inbounds [91 x %runtime.Type_Info*], [91 x %runtime.Type_Info*]* @__$type_info_types_data, i64 0, i32 43
	%977 = getelementptr inbounds [91 x %..string], [91 x %..string]* @__$type_info_names_data, i64 0, i32 21
	%978 = getelementptr inbounds [91 x i64], [91 x i64]* @__$type_info_offsets_data, i64 0, i32 21
	%979 = getelementptr inbounds [91 x i8], [91 x i8]* @__$type_info_usings_data, i64 0, i32 21
	%980 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 44
	%981 = bitcast %runtime.Type_Info* %980 to %runtime.Type_Info*
	%982 = getelementptr inbounds %runtime.Type_Info*, %runtime.Type_Info** %976, i64 0
	%983 = getelementptr inbounds i64, i64* %978, i64 0
	%984 = getelementptr inbounds i8, i8* %979, i64 0
	%985 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 44
	store %runtime.Type_Info* %985, %runtime.Type_Info** %982
	%986 = getelementptr inbounds %..string, %..string* %977, i64 0
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str$1f0, i64 0, i32 0), i64 5}, %..string* %986
	store i64 0, i64* %983
	store i8 0, i8* %984
	%987 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 46
	%988 = bitcast %runtime.Type_Info* %987 to %runtime.Type_Info*
	%989 = getelementptr inbounds %runtime.Type_Info*, %runtime.Type_Info** %976, i64 1
	%990 = getelementptr inbounds i64, i64* %978, i64 1
	%991 = getelementptr inbounds i8, i8* %979, i64 1
	%992 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 46
	store %runtime.Type_Info* %992, %runtime.Type_Info** %989
	%993 = getelementptr inbounds %..string, %..string* %977, i64 1
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str$1f1, i64 0, i32 0), i64 5}, %..string* %993
	store i64 16, i64* %990
	store i8 0, i8* %991
	%994 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 50
	%995 = bitcast %runtime.Type_Info* %994 to %runtime.Type_Info*
	%996 = getelementptr inbounds %runtime.Type_Info*, %runtime.Type_Info** %976, i64 2
	%997 = getelementptr inbounds i64, i64* %978, i64 2
	%998 = getelementptr inbounds i8, i8* %979, i64 2
	%999 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 50
	store %runtime.Type_Info* %999, %runtime.Type_Info** %996
	%1000 = getelementptr inbounds %..string, %..string* %977, i64 2
	store %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str$1f2, i64 0, i32 0), i64 7}, %..string* %1000
	store i64 32, i64* %997
	store i8 0, i8* %998
	%1001 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 53
	%1002 = bitcast %runtime.Type_Info* %1001 to %runtime.Type_Info*
	%1003 = getelementptr inbounds %runtime.Type_Info*, %runtime.Type_Info** %976, i64 3
	%1004 = getelementptr inbounds i64, i64* %978, i64 3
	%1005 = getelementptr inbounds i8, i8* %979, i64 3
	%1006 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 53
	store %runtime.Type_Info* %1006, %runtime.Type_Info** %1003
	%1007 = getelementptr inbounds %..string, %..string* %977, i64 3
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str$1f3, i64 0, i32 0), i64 6}, %..string* %1007
	store i64 48, i64* %1004
	store i8 0, i8* %1005
	%1008 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 19
	%1009 = bitcast %runtime.Type_Info* %1008 to %runtime.Type_Info*
	%1010 = getelementptr inbounds %runtime.Type_Info*, %runtime.Type_Info** %976, i64 4
	%1011 = getelementptr inbounds i64, i64* %978, i64 4
	%1012 = getelementptr inbounds i8, i8* %979, i64 4
	%1013 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 19
	store %runtime.Type_Info* %1013, %runtime.Type_Info** %1010
	%1014 = getelementptr inbounds %..string, %..string* %977, i64 4
	store %..string {i8* getelementptr inbounds ([10 x i8], [10 x i8]* @str$1f4, i64 0, i32 0), i64 9}, %..string* %1014
	store i64 64, i64* %1011
	store i8 0, i8* %1012
	%1015 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 19
	%1016 = bitcast %runtime.Type_Info* %1015 to %runtime.Type_Info*
	%1017 = getelementptr inbounds %runtime.Type_Info*, %runtime.Type_Info** %976, i64 5
	%1018 = getelementptr inbounds i64, i64* %978, i64 5
	%1019 = getelementptr inbounds i8, i8* %979, i64 5
	%1020 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 19
	store %runtime.Type_Info* %1020, %runtime.Type_Info** %1017
	%1021 = getelementptr inbounds %..string, %..string* %977, i64 5
	store %..string {i8* getelementptr inbounds ([13 x i8], [13 x i8]* @str$1f5, i64 0, i32 0), i64 12}, %..string* %1021
	store i64 65, i64* %1018
	store i8 0, i8* %1019
	%1022 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 19
	%1023 = bitcast %runtime.Type_Info* %1022 to %runtime.Type_Info*
	%1024 = getelementptr inbounds %runtime.Type_Info*, %runtime.Type_Info** %976, i64 6
	%1025 = getelementptr inbounds i64, i64* %978, i64 6
	%1026 = getelementptr inbounds i8, i8* %979, i64 6
	%1027 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 19
	store %runtime.Type_Info* %1027, %runtime.Type_Info** %1024
	%1028 = getelementptr inbounds %..string, %..string* %977, i64 6
	store %..string {i8* getelementptr inbounds ([13 x i8], [13 x i8]* @str$1f6, i64 0, i32 0), i64 12}, %..string* %1028
	store i64 66, i64* %1025
	store i8 0, i8* %1026
	%1029 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %972, i64 0, i32 0
	%1030 = getelementptr inbounds {%runtime.Type_Info**, i64}, {%runtime.Type_Info**, i64}* %1029, i64 0, i32 0
	store %runtime.Type_Info** %976, %runtime.Type_Info*** %1030
	%1031 = getelementptr inbounds {%runtime.Type_Info**, i64}, {%runtime.Type_Info**, i64}* %1029, i64 0, i32 1
	store i64 7, i64* %1031
	%1032 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %972, i64 0, i32 1
	%1033 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %1032, i64 0, i32 0
	store %..string* %977, %..string** %1033
	%1034 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %1032, i64 0, i32 1
	store i64 7, i64* %1034
	%1035 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %972, i64 0, i32 2
	%1036 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %1035, i64 0, i32 0
	store i64* %978, i64** %1036
	%1037 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %1035, i64 0, i32 1
	store i64 7, i64* %1037
	%1038 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %972, i64 0, i32 3
	%1039 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %1038, i64 0, i32 0
	store i8* %979, i8** %1039
	%1040 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %1038, i64 0, i32 1
	store i64 7, i64* %1040
	%1041 = load %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %972, align 8
	%1042 = bitcast {[0 x i64], [72 x i8], i64}* %968 to %runtime.Type_Info_Struct*
	store %runtime.Type_Info_Struct %1041, %runtime.Type_Info_Struct* %1042
	%1043 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %968, i64 0, i32 2 ; UnionTagPtr
	store i64 16, i64* %1043
	%1044 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 50
	%1045 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1044, i64 0, i32 3
	%1046 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1044, i64 0, i32 0
	store i64 16, i64* %1046
	%1047 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1044, i64 0, i32 1
	store i64 8, i64* %1047
	%1048 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1044, i64 0, i32 2
	store %..typeid 936748722493063218, %..typeid* %1048
	; Type_Info_Slice
	%1049 = bitcast {[0 x i64], [72 x i8], i64}* %1045 to %runtime.Type_Info_Slice*
	%1050 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 51
	%1051 = bitcast %runtime.Type_Info* %1050 to %runtime.Type_Info*
	%1052 = getelementptr inbounds %runtime.Type_Info_Slice, %runtime.Type_Info_Slice* %1049, i64 0, i32 0
	store %runtime.Type_Info* %1051, %runtime.Type_Info** %1052
	%1053 = getelementptr inbounds %runtime.Type_Info_Slice, %runtime.Type_Info_Slice* %1049, i64 0, i32 1
	store i64 8, i64* %1053
	%1054 = load %runtime.Type_Info_Slice, %runtime.Type_Info_Slice* %1049, align 8
	%1055 = bitcast {[0 x i64], [72 x i8], i64}* %1045 to %runtime.Type_Info_Slice*
	store %runtime.Type_Info_Slice %1054, %runtime.Type_Info_Slice* %1055
	%1056 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %1045, i64 0, i32 2 ; UnionTagPtr
	store i64 14, i64* %1056
	%1057 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 51
	%1058 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1057, i64 0, i32 3
	%1059 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1057, i64 0, i32 0
	store i64 8, i64* %1059
	%1060 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1057, i64 0, i32 1
	store i64 8, i64* %1060
	%1061 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1057, i64 0, i32 2
	store %..typeid 72057594037927987, %..typeid* %1061
	; Type_Info_Basic
	%1062 = bitcast {[0 x i64], [72 x i8], i64}* %1058 to %runtime.Type_Info_Integer*
	%1063 = getelementptr inbounds %runtime.Type_Info_Integer, %runtime.Type_Info_Integer* %1062, i64 0, i32 0
	store i8 0, i8* %1063
	%1064 = getelementptr inbounds %runtime.Type_Info_Integer, %runtime.Type_Info_Integer* %1062, i64 0, i32 1
	store i8 0, i8* %1064
	%1065 = load %runtime.Type_Info_Integer, %runtime.Type_Info_Integer* %1062, align 1
	%1066 = bitcast {[0 x i64], [72 x i8], i64}* %1058 to %runtime.Type_Info_Integer*
	store %runtime.Type_Info_Integer %1065, %runtime.Type_Info_Integer* %1066
	%1067 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %1058, i64 0, i32 2 ; UnionTagPtr
	store i64 2, i64* %1067
	%1068 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 52
	%1069 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1068, i64 0, i32 3
	%1070 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1068, i64 0, i32 0
	store i64 8, i64* %1070
	%1071 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1068, i64 0, i32 1
	store i64 8, i64* %1071
	%1072 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1068, i64 0, i32 2
	store %..typeid 648518346341351476, %..typeid* %1072
	; Type_Info_Pointer
	%1073 = bitcast {[0 x i64], [72 x i8], i64}* %1069 to %runtime.Type_Info_Pointer*
	%1074 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 51
	%1075 = bitcast %runtime.Type_Info* %1074 to %runtime.Type_Info*
	%1076 = getelementptr inbounds %runtime.Type_Info_Pointer, %runtime.Type_Info_Pointer* %1073, i64 0, i32 0
	store %runtime.Type_Info* %1075, %runtime.Type_Info** %1076
	%1077 = load %runtime.Type_Info_Pointer, %runtime.Type_Info_Pointer* %1073, align 8
	%1078 = bitcast {[0 x i64], [72 x i8], i64}* %1069 to %runtime.Type_Info_Pointer*
	store %runtime.Type_Info_Pointer %1077, %runtime.Type_Info_Pointer* %1078
	%1079 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %1069, i64 0, i32 2 ; UnionTagPtr
	store i64 10, i64* %1079
	%1080 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 53
	%1081 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1080, i64 0, i32 3
	%1082 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1080, i64 0, i32 0
	store i64 16, i64* %1082
	%1083 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1080, i64 0, i32 1
	store i64 8, i64* %1083
	%1084 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1080, i64 0, i32 2
	store %..typeid 936748722493063221, %..typeid* %1084
	; Type_Info_Slice
	%1085 = bitcast {[0 x i64], [72 x i8], i64}* %1081 to %runtime.Type_Info_Slice*
	%1086 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 19
	%1087 = bitcast %runtime.Type_Info* %1086 to %runtime.Type_Info*
	%1088 = getelementptr inbounds %runtime.Type_Info_Slice, %runtime.Type_Info_Slice* %1085, i64 0, i32 0
	store %runtime.Type_Info* %1087, %runtime.Type_Info** %1088
	%1089 = getelementptr inbounds %runtime.Type_Info_Slice, %runtime.Type_Info_Slice* %1085, i64 0, i32 1
	store i64 1, i64* %1089
	%1090 = load %runtime.Type_Info_Slice, %runtime.Type_Info_Slice* %1085, align 8
	%1091 = bitcast {[0 x i64], [72 x i8], i64}* %1081 to %runtime.Type_Info_Slice*
	store %runtime.Type_Info_Slice %1090, %runtime.Type_Info_Slice* %1091
	%1092 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %1081, i64 0, i32 2 ; UnionTagPtr
	store i64 14, i64* %1092
	%1093 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 54
	%1094 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1093, i64 0, i32 3
	%1095 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1093, i64 0, i32 0
	store i64 8, i64* %1095
	%1096 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1093, i64 0, i32 1
	store i64 8, i64* %1096
	%1097 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1093, i64 0, i32 2
	store %..typeid 648518346341351478, %..typeid* %1097
	; Type_Info_Pointer
	%1098 = bitcast {[0 x i64], [72 x i8], i64}* %1094 to %runtime.Type_Info_Pointer*
	%1099 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 19
	%1100 = bitcast %runtime.Type_Info* %1099 to %runtime.Type_Info*
	%1101 = getelementptr inbounds %runtime.Type_Info_Pointer, %runtime.Type_Info_Pointer* %1098, i64 0, i32 0
	store %runtime.Type_Info* %1100, %runtime.Type_Info** %1101
	%1102 = load %runtime.Type_Info_Pointer, %runtime.Type_Info_Pointer* %1098, align 8
	%1103 = bitcast {[0 x i64], [72 x i8], i64}* %1094 to %runtime.Type_Info_Pointer*
	store %runtime.Type_Info_Pointer %1102, %runtime.Type_Info_Pointer* %1103
	%1104 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %1094, i64 0, i32 2 ; UnionTagPtr
	store i64 10, i64* %1104
	%1105 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 55
	%1106 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1105, i64 0, i32 3
	%1107 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1105, i64 0, i32 0
	store i64 40, i64* %1107
	%1108 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1105, i64 0, i32 1
	store i64 8, i64* %1108
	%1109 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1105, i64 0, i32 2
	store %..typeid 3386706919782613047, %..typeid* %1109
	; Type_Info_Named
	%1110 = bitcast {[0 x i64], [72 x i8], i64}* %1106 to %runtime.Type_Info_Named*
	%1111 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 56
	%1112 = bitcast %runtime.Type_Info* %1111 to %runtime.Type_Info*
	%1113 = getelementptr inbounds %runtime.Type_Info_Named, %runtime.Type_Info_Named* %1110, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([16 x i8], [16 x i8]* @str$1f7, i64 0, i32 0), i64 15}, %..string* %1113
	%1114 = getelementptr inbounds %runtime.Type_Info_Named, %runtime.Type_Info_Named* %1110, i64 0, i32 1
	store %runtime.Type_Info* %1112, %runtime.Type_Info** %1114
	%1115 = load %runtime.Type_Info_Named, %runtime.Type_Info_Named* %1110, align 8
	%1116 = bitcast {[0 x i64], [72 x i8], i64}* %1106 to %runtime.Type_Info_Named*
	store %runtime.Type_Info_Named %1115, %runtime.Type_Info_Named* %1116
	%1117 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %1106, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %1117
	%1118 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 56
	%1119 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1118, i64 0, i32 3
	%1120 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1118, i64 0, i32 0
	store i64 40, i64* %1120
	%1121 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1118, i64 0, i32 1
	store i64 8, i64* %1121
	%1122 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1118, i64 0, i32 2
	store %..typeid 1080863910568919096, %..typeid* %1122
	; Type_Info_Struct
	%1123 = bitcast {[0 x i64], [72 x i8], i64}* %1119 to %runtime.Type_Info_Struct*
	%1124 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %1123, i64 0, i32 4
	store i8 0, i8* %1124
	%1125 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %1123, i64 0, i32 5
	store i8 0, i8* %1125
	%1126 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %1123, i64 0, i32 6
	store i8 0, i8* %1126
	%1127 = getelementptr inbounds [91 x %runtime.Type_Info*], [91 x %runtime.Type_Info*]* @__$type_info_types_data, i64 0, i32 50
	%1128 = getelementptr inbounds [91 x %..string], [91 x %..string]* @__$type_info_names_data, i64 0, i32 28
	%1129 = getelementptr inbounds [91 x i64], [91 x i64]* @__$type_info_offsets_data, i64 0, i32 28
	%1130 = getelementptr inbounds [91 x i8], [91 x i8]* @__$type_info_usings_data, i64 0, i32 28
	%1131 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 44
	%1132 = bitcast %runtime.Type_Info* %1131 to %runtime.Type_Info*
	%1133 = getelementptr inbounds %runtime.Type_Info*, %runtime.Type_Info** %1127, i64 0
	%1134 = getelementptr inbounds i64, i64* %1129, i64 0
	%1135 = getelementptr inbounds i8, i8* %1130, i64 0
	%1136 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 44
	store %runtime.Type_Info* %1136, %runtime.Type_Info** %1133
	%1137 = getelementptr inbounds %..string, %..string* %1128, i64 0
	store %..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @str$1f8, i64 0, i32 0), i64 8}, %..string* %1137
	store i64 0, i64* %1134
	store i8 0, i8* %1135
	%1138 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 51
	%1139 = bitcast %runtime.Type_Info* %1138 to %runtime.Type_Info*
	%1140 = getelementptr inbounds %runtime.Type_Info*, %runtime.Type_Info** %1127, i64 1
	%1141 = getelementptr inbounds i64, i64* %1129, i64 1
	%1142 = getelementptr inbounds i8, i8* %1130, i64 1
	%1143 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 51
	store %runtime.Type_Info* %1143, %runtime.Type_Info** %1140
	%1144 = getelementptr inbounds %..string, %..string* %1128, i64 1
	store %..string {i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str$1f9, i64 0, i32 0), i64 10}, %..string* %1144
	store i64 16, i64* %1141
	store i8 0, i8* %1142
	%1145 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 10
	%1146 = bitcast %runtime.Type_Info* %1145 to %runtime.Type_Info*
	%1147 = getelementptr inbounds %runtime.Type_Info*, %runtime.Type_Info** %1127, i64 2
	%1148 = getelementptr inbounds i64, i64* %1129, i64 2
	%1149 = getelementptr inbounds i8, i8* %1130, i64 2
	%1150 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 10
	store %runtime.Type_Info* %1150, %runtime.Type_Info** %1147
	%1151 = getelementptr inbounds %..string, %..string* %1128, i64 2
	store %..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @str$1fa, i64 0, i32 0), i64 8}, %..string* %1151
	store i64 24, i64* %1148
	store i8 0, i8* %1149
	%1152 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 19
	%1153 = bitcast %runtime.Type_Info* %1152 to %runtime.Type_Info*
	%1154 = getelementptr inbounds %runtime.Type_Info*, %runtime.Type_Info** %1127, i64 3
	%1155 = getelementptr inbounds i64, i64* %1129, i64 3
	%1156 = getelementptr inbounds i8, i8* %1130, i64 3
	%1157 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 19
	store %runtime.Type_Info* %1157, %runtime.Type_Info** %1154
	%1158 = getelementptr inbounds %..string, %..string* %1128, i64 3
	store %..string {i8* getelementptr inbounds ([13 x i8], [13 x i8]* @str$1fb, i64 0, i32 0), i64 12}, %..string* %1158
	store i64 32, i64* %1155
	store i8 0, i8* %1156
	%1159 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %1123, i64 0, i32 0
	%1160 = getelementptr inbounds {%runtime.Type_Info**, i64}, {%runtime.Type_Info**, i64}* %1159, i64 0, i32 0
	store %runtime.Type_Info** %1127, %runtime.Type_Info*** %1160
	%1161 = getelementptr inbounds {%runtime.Type_Info**, i64}, {%runtime.Type_Info**, i64}* %1159, i64 0, i32 1
	store i64 4, i64* %1161
	%1162 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %1123, i64 0, i32 1
	%1163 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %1162, i64 0, i32 0
	store %..string* %1128, %..string** %1163
	%1164 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %1162, i64 0, i32 1
	store i64 4, i64* %1164
	%1165 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %1123, i64 0, i32 2
	%1166 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %1165, i64 0, i32 0
	store i64* %1129, i64** %1166
	%1167 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %1165, i64 0, i32 1
	store i64 4, i64* %1167
	%1168 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %1123, i64 0, i32 3
	%1169 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %1168, i64 0, i32 0
	store i8* %1130, i8** %1169
	%1170 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %1168, i64 0, i32 1
	store i64 4, i64* %1170
	%1171 = load %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %1123, align 8
	%1172 = bitcast {[0 x i64], [72 x i8], i64}* %1119 to %runtime.Type_Info_Struct*
	store %runtime.Type_Info_Struct %1171, %runtime.Type_Info_Struct* %1172
	%1173 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %1119, i64 0, i32 2 ; UnionTagPtr
	store i64 16, i64* %1173
	%1174 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 57
	%1175 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1174, i64 0, i32 3
	%1176 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1174, i64 0, i32 0
	store i64 40, i64* %1176
	%1177 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1174, i64 0, i32 1
	store i64 8, i64* %1177
	%1178 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1174, i64 0, i32 2
	store %..typeid 3386706919782613049, %..typeid* %1178
	; Type_Info_Named
	%1179 = bitcast {[0 x i64], [72 x i8], i64}* %1175 to %runtime.Type_Info_Named*
	%1180 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 58
	%1181 = bitcast %runtime.Type_Info* %1180 to %runtime.Type_Info*
	%1182 = getelementptr inbounds %runtime.Type_Info_Named, %runtime.Type_Info_Named* %1179, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([15 x i8], [15 x i8]* @str$1fc, i64 0, i32 0), i64 14}, %..string* %1182
	%1183 = getelementptr inbounds %runtime.Type_Info_Named, %runtime.Type_Info_Named* %1179, i64 0, i32 1
	store %runtime.Type_Info* %1181, %runtime.Type_Info** %1183
	%1184 = load %runtime.Type_Info_Named, %runtime.Type_Info_Named* %1179, align 8
	%1185 = bitcast {[0 x i64], [72 x i8], i64}* %1175 to %runtime.Type_Info_Named*
	store %runtime.Type_Info_Named %1184, %runtime.Type_Info_Named* %1185
	%1186 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %1175, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %1186
	%1187 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 58
	%1188 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1187, i64 0, i32 3
	%1189 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1187, i64 0, i32 0
	store i64 40, i64* %1189
	%1190 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1187, i64 0, i32 1
	store i64 8, i64* %1190
	%1191 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1187, i64 0, i32 2
	store %..typeid 1080863910568919098, %..typeid* %1191
	; Type_Info_Struct
	%1192 = bitcast {[0 x i64], [72 x i8], i64}* %1188 to %runtime.Type_Info_Struct*
	%1193 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %1192, i64 0, i32 4
	store i8 0, i8* %1193
	%1194 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %1192, i64 0, i32 5
	store i8 0, i8* %1194
	%1195 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %1192, i64 0, i32 6
	store i8 0, i8* %1195
	%1196 = getelementptr inbounds [91 x %runtime.Type_Info*], [91 x %runtime.Type_Info*]* @__$type_info_types_data, i64 0, i32 54
	%1197 = getelementptr inbounds [91 x %..string], [91 x %..string]* @__$type_info_names_data, i64 0, i32 32
	%1198 = getelementptr inbounds [91 x i64], [91 x i64]* @__$type_info_offsets_data, i64 0, i32 32
	%1199 = getelementptr inbounds [91 x i8], [91 x i8]* @__$type_info_usings_data, i64 0, i32 32
	%1200 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 10
	%1201 = bitcast %runtime.Type_Info* %1200 to %runtime.Type_Info*
	%1202 = getelementptr inbounds %runtime.Type_Info*, %runtime.Type_Info** %1196, i64 0
	%1203 = getelementptr inbounds i64, i64* %1198, i64 0
	%1204 = getelementptr inbounds i8, i8* %1199, i64 0
	%1205 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 10
	store %runtime.Type_Info* %1205, %runtime.Type_Info** %1202
	%1206 = getelementptr inbounds %..string, %..string* %1197, i64 0
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str$1fd, i64 0, i32 0), i64 4}, %..string* %1206
	store i64 0, i64* %1203
	store i8 0, i8* %1204
	%1207 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 46
	%1208 = bitcast %runtime.Type_Info* %1207 to %runtime.Type_Info*
	%1209 = getelementptr inbounds %runtime.Type_Info*, %runtime.Type_Info** %1196, i64 1
	%1210 = getelementptr inbounds i64, i64* %1198, i64 1
	%1211 = getelementptr inbounds i8, i8* %1199, i64 1
	%1212 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 46
	store %runtime.Type_Info* %1212, %runtime.Type_Info** %1209
	%1213 = getelementptr inbounds %..string, %..string* %1197, i64 1
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str$1fe, i64 0, i32 0), i64 5}, %..string* %1213
	store i64 8, i64* %1210
	store i8 0, i8* %1211
	%1214 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 59
	%1215 = bitcast %runtime.Type_Info* %1214 to %runtime.Type_Info*
	%1216 = getelementptr inbounds %runtime.Type_Info*, %runtime.Type_Info** %1196, i64 2
	%1217 = getelementptr inbounds i64, i64* %1198, i64 2
	%1218 = getelementptr inbounds i8, i8* %1199, i64 2
	%1219 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 59
	store %runtime.Type_Info* %1219, %runtime.Type_Info** %1216
	%1220 = getelementptr inbounds %..string, %..string* %1197, i64 2
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str$1ff, i64 0, i32 0), i64 6}, %..string* %1220
	store i64 24, i64* %1217
	store i8 0, i8* %1218
	%1221 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %1192, i64 0, i32 0
	%1222 = getelementptr inbounds {%runtime.Type_Info**, i64}, {%runtime.Type_Info**, i64}* %1221, i64 0, i32 0
	store %runtime.Type_Info** %1196, %runtime.Type_Info*** %1222
	%1223 = getelementptr inbounds {%runtime.Type_Info**, i64}, {%runtime.Type_Info**, i64}* %1221, i64 0, i32 1
	store i64 3, i64* %1223
	%1224 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %1192, i64 0, i32 1
	%1225 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %1224, i64 0, i32 0
	store %..string* %1197, %..string** %1225
	%1226 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %1224, i64 0, i32 1
	store i64 3, i64* %1226
	%1227 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %1192, i64 0, i32 2
	%1228 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %1227, i64 0, i32 0
	store i64* %1198, i64** %1228
	%1229 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %1227, i64 0, i32 1
	store i64 3, i64* %1229
	%1230 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %1192, i64 0, i32 3
	%1231 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %1230, i64 0, i32 0
	store i8* %1199, i8** %1231
	%1232 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %1230, i64 0, i32 1
	store i64 3, i64* %1232
	%1233 = load %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %1192, align 8
	%1234 = bitcast {[0 x i64], [72 x i8], i64}* %1188 to %runtime.Type_Info_Struct*
	store %runtime.Type_Info_Struct %1233, %runtime.Type_Info_Struct* %1234
	%1235 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %1188, i64 0, i32 2 ; UnionTagPtr
	store i64 16, i64* %1235
	%1236 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 59
	%1237 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1236, i64 0, i32 3
	%1238 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1236, i64 0, i32 0
	store i64 16, i64* %1238
	%1239 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1236, i64 0, i32 1
	store i64 8, i64* %1239
	%1240 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1236, i64 0, i32 2
	store %..typeid 936748722493063227, %..typeid* %1240
	; Type_Info_Slice
	%1241 = bitcast {[0 x i64], [72 x i8], i64}* %1237 to %runtime.Type_Info_Slice*
	%1242 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 60
	%1243 = bitcast %runtime.Type_Info* %1242 to %runtime.Type_Info*
	%1244 = getelementptr inbounds %runtime.Type_Info_Slice, %runtime.Type_Info_Slice* %1241, i64 0, i32 0
	store %runtime.Type_Info* %1243, %runtime.Type_Info** %1244
	%1245 = getelementptr inbounds %runtime.Type_Info_Slice, %runtime.Type_Info_Slice* %1241, i64 0, i32 1
	store i64 16, i64* %1245
	%1246 = load %runtime.Type_Info_Slice, %runtime.Type_Info_Slice* %1241, align 8
	%1247 = bitcast {[0 x i64], [72 x i8], i64}* %1237 to %runtime.Type_Info_Slice*
	store %runtime.Type_Info_Slice %1246, %runtime.Type_Info_Slice* %1247
	%1248 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %1237, i64 0, i32 2 ; UnionTagPtr
	store i64 14, i64* %1248
	%1249 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 60
	%1250 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1249, i64 0, i32 3
	%1251 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1249, i64 0, i32 0
	store i64 16, i64* %1251
	%1252 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1249, i64 0, i32 1
	store i64 8, i64* %1252
	%1253 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1249, i64 0, i32 2
	store %..typeid 3458764513820540988, %..typeid* %1253
	; Type_Info_Named
	%1254 = bitcast {[0 x i64], [72 x i8], i64}* %1250 to %runtime.Type_Info_Named*
	%1255 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 61
	%1256 = bitcast %runtime.Type_Info* %1255 to %runtime.Type_Info*
	%1257 = getelementptr inbounds %runtime.Type_Info_Named, %runtime.Type_Info_Named* %1254, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([21 x i8], [21 x i8]* @str$200, i64 0, i32 0), i64 20}, %..string* %1257
	%1258 = getelementptr inbounds %runtime.Type_Info_Named, %runtime.Type_Info_Named* %1254, i64 0, i32 1
	store %runtime.Type_Info* %1256, %runtime.Type_Info** %1258
	%1259 = load %runtime.Type_Info_Named, %runtime.Type_Info_Named* %1254, align 8
	%1260 = bitcast {[0 x i64], [72 x i8], i64}* %1250 to %runtime.Type_Info_Named*
	store %runtime.Type_Info_Named %1259, %runtime.Type_Info_Named* %1260
	%1261 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %1250, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %1261
	%1262 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 61
	%1263 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1262, i64 0, i32 3
	%1264 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1262, i64 0, i32 0
	store i64 16, i64* %1264
	%1265 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1262, i64 0, i32 1
	store i64 8, i64* %1265
	%1266 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1262, i64 0, i32 2
	store %..typeid 1152921504606847037, %..typeid* %1266
	; Type_Info_Union
	%1267 = bitcast {[0 x i64], [72 x i8], i64}* %1263 to %runtime.Type_Info_Union*
	%1268 = getelementptr inbounds %runtime.Type_Info_Union, %runtime.Type_Info_Union* %1267, i64 0, i32 0
	%1269 = getelementptr inbounds %runtime.Type_Info_Union, %runtime.Type_Info_Union* %1267, i64 0, i32 1
	%1270 = getelementptr inbounds %runtime.Type_Info_Union, %runtime.Type_Info_Union* %1267, i64 0, i32 2
	%1271 = getelementptr inbounds %runtime.Type_Info_Union, %runtime.Type_Info_Union* %1267, i64 0, i32 3
	%1272 = getelementptr inbounds [91 x %runtime.Type_Info*], [91 x %runtime.Type_Info*]* @__$type_info_types_data, i64 0, i32 57
	%1273 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 62
	%1274 = bitcast %runtime.Type_Info* %1273 to %runtime.Type_Info*
	%1275 = getelementptr inbounds %runtime.Type_Info*, %runtime.Type_Info** %1272, i64 0
	%1276 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 62
	store %runtime.Type_Info* %1276, %runtime.Type_Info** %1275
	%1277 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 63
	%1278 = bitcast %runtime.Type_Info* %1277 to %runtime.Type_Info*
	%1279 = getelementptr inbounds %runtime.Type_Info*, %runtime.Type_Info** %1272, i64 1
	%1280 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 63
	store %runtime.Type_Info* %1280, %runtime.Type_Info** %1279
	%1281 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 64
	%1282 = bitcast %runtime.Type_Info* %1281 to %runtime.Type_Info*
	%1283 = getelementptr inbounds %runtime.Type_Info*, %runtime.Type_Info** %1272, i64 2
	%1284 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 64
	store %runtime.Type_Info* %1284, %runtime.Type_Info** %1283
	%1285 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 65
	%1286 = bitcast %runtime.Type_Info* %1285 to %runtime.Type_Info*
	%1287 = getelementptr inbounds %runtime.Type_Info*, %runtime.Type_Info** %1272, i64 3
	%1288 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 65
	store %runtime.Type_Info* %1288, %runtime.Type_Info** %1287
	%1289 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 66
	%1290 = bitcast %runtime.Type_Info* %1289 to %runtime.Type_Info*
	%1291 = getelementptr inbounds %runtime.Type_Info*, %runtime.Type_Info** %1272, i64 4
	%1292 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 66
	store %runtime.Type_Info* %1292, %runtime.Type_Info** %1291
	%1293 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 8
	%1294 = bitcast %runtime.Type_Info* %1293 to %runtime.Type_Info*
	%1295 = getelementptr inbounds %runtime.Type_Info*, %runtime.Type_Info** %1272, i64 5
	%1296 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 8
	store %runtime.Type_Info* %1296, %runtime.Type_Info** %1295
	%1297 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 3
	%1298 = bitcast %runtime.Type_Info* %1297 to %runtime.Type_Info*
	%1299 = getelementptr inbounds %runtime.Type_Info*, %runtime.Type_Info** %1272, i64 6
	%1300 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 3
	store %runtime.Type_Info* %1300, %runtime.Type_Info** %1299
	%1301 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 67
	%1302 = bitcast %runtime.Type_Info* %1301 to %runtime.Type_Info*
	%1303 = getelementptr inbounds %runtime.Type_Info*, %runtime.Type_Info** %1272, i64 7
	%1304 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 67
	store %runtime.Type_Info* %1304, %runtime.Type_Info** %1303
	%1305 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 68
	%1306 = bitcast %runtime.Type_Info* %1305 to %runtime.Type_Info*
	%1307 = getelementptr inbounds %runtime.Type_Info*, %runtime.Type_Info** %1272, i64 8
	%1308 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 68
	store %runtime.Type_Info* %1308, %runtime.Type_Info** %1307
	%1309 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 69
	%1310 = bitcast %runtime.Type_Info* %1309 to %runtime.Type_Info*
	%1311 = getelementptr inbounds %runtime.Type_Info*, %runtime.Type_Info** %1272, i64 9
	%1312 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 69
	store %runtime.Type_Info* %1312, %runtime.Type_Info** %1311
	%1313 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 70
	%1314 = bitcast %runtime.Type_Info* %1313 to %runtime.Type_Info*
	%1315 = getelementptr inbounds %runtime.Type_Info*, %runtime.Type_Info** %1272, i64 10
	%1316 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 70
	store %runtime.Type_Info* %1316, %runtime.Type_Info** %1315
	%1317 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 51
	%1318 = bitcast %runtime.Type_Info* %1317 to %runtime.Type_Info*
	%1319 = getelementptr inbounds %runtime.Type_Info*, %runtime.Type_Info** %1272, i64 11
	%1320 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 51
	store %runtime.Type_Info* %1320, %runtime.Type_Info** %1319
	%1321 = getelementptr inbounds {%runtime.Type_Info**, i64}, {%runtime.Type_Info**, i64}* %1268, i64 0, i32 0
	store %runtime.Type_Info** %1272, %runtime.Type_Info*** %1321
	%1322 = getelementptr inbounds {%runtime.Type_Info**, i64}, {%runtime.Type_Info**, i64}* %1268, i64 0, i32 1
	store i64 12, i64* %1322
	store i64 8, i64* %1269
	%1323 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 69
	store %runtime.Type_Info* %1323, %runtime.Type_Info** %1270
	store i8 0, i8* %1271
	%1324 = load %runtime.Type_Info_Union, %runtime.Type_Info_Union* %1267, align 8
	%1325 = bitcast {[0 x i64], [72 x i8], i64}* %1263 to %runtime.Type_Info_Union*
	store %runtime.Type_Info_Union %1324, %runtime.Type_Info_Union* %1325
	%1326 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %1263, i64 0, i32 2 ; UnionTagPtr
	store i64 17, i64* %1326
	%1327 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 62
	%1328 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1327, i64 0, i32 3
	%1329 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1327, i64 0, i32 0
	store i64 4, i64* %1329
	%1330 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1327, i64 0, i32 1
	store i64 4, i64* %1330
	%1331 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1327, i64 0, i32 2
	store %..typeid 4755801206503243838, %..typeid* %1331
	; Type_Info_Basic
	%1332 = bitcast {[0 x i64], [72 x i8], i64}* %1328 to %runtime.Type_Info_Rune*
	%1333 = load %runtime.Type_Info_Rune, %runtime.Type_Info_Rune* %1332, align 1
	%1334 = bitcast {[0 x i64], [72 x i8], i64}* %1328 to %runtime.Type_Info_Rune*
	store %runtime.Type_Info_Rune %1333, %runtime.Type_Info_Rune* %1334
	%1335 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %1328, i64 0, i32 2 ; UnionTagPtr
	store i64 3, i64* %1335
	%1336 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 63
	%1337 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1336, i64 0, i32 3
	%1338 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1336, i64 0, i32 0
	store i64 1, i64* %1338
	%1339 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1336, i64 0, i32 1
	store i64 1, i64* %1339
	%1340 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1336, i64 0, i32 2
	store %..typeid 4683743612465315903, %..typeid* %1340
	; Type_Info_Basic
	%1341 = bitcast {[0 x i64], [72 x i8], i64}* %1337 to %runtime.Type_Info_Integer*
	%1342 = getelementptr inbounds %runtime.Type_Info_Integer, %runtime.Type_Info_Integer* %1341, i64 0, i32 0
	store i8 1, i8* %1342
	%1343 = getelementptr inbounds %runtime.Type_Info_Integer, %runtime.Type_Info_Integer* %1341, i64 0, i32 1
	store i8 0, i8* %1343
	%1344 = load %runtime.Type_Info_Integer, %runtime.Type_Info_Integer* %1341, align 1
	%1345 = bitcast {[0 x i64], [72 x i8], i64}* %1337 to %runtime.Type_Info_Integer*
	store %runtime.Type_Info_Integer %1344, %runtime.Type_Info_Integer* %1345
	%1346 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %1337, i64 0, i32 2 ; UnionTagPtr
	store i64 2, i64* %1346
	%1347 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 64
	%1348 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1347, i64 0, i32 3
	%1349 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1347, i64 0, i32 0
	store i64 2, i64* %1349
	%1350 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1347, i64 0, i32 1
	store i64 2, i64* %1350
	%1351 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1347, i64 0, i32 2
	store %..typeid 4683743612465315904, %..typeid* %1351
	; Type_Info_Basic
	%1352 = bitcast {[0 x i64], [72 x i8], i64}* %1348 to %runtime.Type_Info_Integer*
	%1353 = getelementptr inbounds %runtime.Type_Info_Integer, %runtime.Type_Info_Integer* %1352, i64 0, i32 0
	store i8 1, i8* %1353
	%1354 = getelementptr inbounds %runtime.Type_Info_Integer, %runtime.Type_Info_Integer* %1352, i64 0, i32 1
	store i8 0, i8* %1354
	%1355 = load %runtime.Type_Info_Integer, %runtime.Type_Info_Integer* %1352, align 1
	%1356 = bitcast {[0 x i64], [72 x i8], i64}* %1348 to %runtime.Type_Info_Integer*
	store %runtime.Type_Info_Integer %1355, %runtime.Type_Info_Integer* %1356
	%1357 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %1348, i64 0, i32 2 ; UnionTagPtr
	store i64 2, i64* %1357
	%1358 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 65
	%1359 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1358, i64 0, i32 3
	%1360 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1358, i64 0, i32 0
	store i64 4, i64* %1360
	%1361 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1358, i64 0, i32 1
	store i64 4, i64* %1361
	%1362 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1358, i64 0, i32 2
	store %..typeid 4683743612465315905, %..typeid* %1362
	; Type_Info_Basic
	%1363 = bitcast {[0 x i64], [72 x i8], i64}* %1359 to %runtime.Type_Info_Integer*
	%1364 = getelementptr inbounds %runtime.Type_Info_Integer, %runtime.Type_Info_Integer* %1363, i64 0, i32 0
	store i8 1, i8* %1364
	%1365 = getelementptr inbounds %runtime.Type_Info_Integer, %runtime.Type_Info_Integer* %1363, i64 0, i32 1
	store i8 0, i8* %1365
	%1366 = load %runtime.Type_Info_Integer, %runtime.Type_Info_Integer* %1363, align 1
	%1367 = bitcast {[0 x i64], [72 x i8], i64}* %1359 to %runtime.Type_Info_Integer*
	store %runtime.Type_Info_Integer %1366, %runtime.Type_Info_Integer* %1367
	%1368 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %1359, i64 0, i32 2 ; UnionTagPtr
	store i64 2, i64* %1368
	%1369 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 66
	%1370 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1369, i64 0, i32 3
	%1371 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1369, i64 0, i32 0
	store i64 8, i64* %1371
	%1372 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1369, i64 0, i32 1
	store i64 8, i64* %1372
	%1373 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1369, i64 0, i32 2
	store %..typeid 4683743612465315906, %..typeid* %1373
	; Type_Info_Basic
	%1374 = bitcast {[0 x i64], [72 x i8], i64}* %1370 to %runtime.Type_Info_Integer*
	%1375 = getelementptr inbounds %runtime.Type_Info_Integer, %runtime.Type_Info_Integer* %1374, i64 0, i32 0
	store i8 1, i8* %1375
	%1376 = getelementptr inbounds %runtime.Type_Info_Integer, %runtime.Type_Info_Integer* %1374, i64 0, i32 1
	store i8 0, i8* %1376
	%1377 = load %runtime.Type_Info_Integer, %runtime.Type_Info_Integer* %1374, align 1
	%1378 = bitcast {[0 x i64], [72 x i8], i64}* %1370 to %runtime.Type_Info_Integer*
	store %runtime.Type_Info_Integer %1377, %runtime.Type_Info_Integer* %1378
	%1379 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %1370, i64 0, i32 2 ; UnionTagPtr
	store i64 2, i64* %1379
	%1380 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 67
	%1381 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1380, i64 0, i32 3
	%1382 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1380, i64 0, i32 0
	store i64 2, i64* %1382
	%1383 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1380, i64 0, i32 1
	store i64 2, i64* %1383
	%1384 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1380, i64 0, i32 2
	store %..typeid 72057594037928003, %..typeid* %1384
	; Type_Info_Basic
	%1385 = bitcast {[0 x i64], [72 x i8], i64}* %1381 to %runtime.Type_Info_Integer*
	%1386 = getelementptr inbounds %runtime.Type_Info_Integer, %runtime.Type_Info_Integer* %1385, i64 0, i32 0
	store i8 0, i8* %1386
	%1387 = getelementptr inbounds %runtime.Type_Info_Integer, %runtime.Type_Info_Integer* %1385, i64 0, i32 1
	store i8 0, i8* %1387
	%1388 = load %runtime.Type_Info_Integer, %runtime.Type_Info_Integer* %1385, align 1
	%1389 = bitcast {[0 x i64], [72 x i8], i64}* %1381 to %runtime.Type_Info_Integer*
	store %runtime.Type_Info_Integer %1388, %runtime.Type_Info_Integer* %1389
	%1390 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %1381, i64 0, i32 2 ; UnionTagPtr
	store i64 2, i64* %1390
	%1391 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 68
	%1392 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1391, i64 0, i32 3
	%1393 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1391, i64 0, i32 0
	store i64 4, i64* %1393
	%1394 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1391, i64 0, i32 1
	store i64 4, i64* %1394
	%1395 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1391, i64 0, i32 2
	store %..typeid 72057594037928004, %..typeid* %1395
	; Type_Info_Basic
	%1396 = bitcast {[0 x i64], [72 x i8], i64}* %1392 to %runtime.Type_Info_Integer*
	%1397 = getelementptr inbounds %runtime.Type_Info_Integer, %runtime.Type_Info_Integer* %1396, i64 0, i32 0
	store i8 0, i8* %1397
	%1398 = getelementptr inbounds %runtime.Type_Info_Integer, %runtime.Type_Info_Integer* %1396, i64 0, i32 1
	store i8 0, i8* %1398
	%1399 = load %runtime.Type_Info_Integer, %runtime.Type_Info_Integer* %1396, align 1
	%1400 = bitcast {[0 x i64], [72 x i8], i64}* %1392 to %runtime.Type_Info_Integer*
	store %runtime.Type_Info_Integer %1399, %runtime.Type_Info_Integer* %1400
	%1401 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %1392, i64 0, i32 2 ; UnionTagPtr
	store i64 2, i64* %1401
	%1402 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 69
	%1403 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1402, i64 0, i32 3
	%1404 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1402, i64 0, i32 0
	store i64 8, i64* %1404
	%1405 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1402, i64 0, i32 1
	store i64 8, i64* %1405
	%1406 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1402, i64 0, i32 2
	store %..typeid 72057594037928005, %..typeid* %1406
	; Type_Info_Basic
	%1407 = bitcast {[0 x i64], [72 x i8], i64}* %1403 to %runtime.Type_Info_Integer*
	%1408 = getelementptr inbounds %runtime.Type_Info_Integer, %runtime.Type_Info_Integer* %1407, i64 0, i32 0
	store i8 0, i8* %1408
	%1409 = getelementptr inbounds %runtime.Type_Info_Integer, %runtime.Type_Info_Integer* %1407, i64 0, i32 1
	store i8 0, i8* %1409
	%1410 = load %runtime.Type_Info_Integer, %runtime.Type_Info_Integer* %1407, align 1
	%1411 = bitcast {[0 x i64], [72 x i8], i64}* %1403 to %runtime.Type_Info_Integer*
	store %runtime.Type_Info_Integer %1410, %runtime.Type_Info_Integer* %1411
	%1412 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %1403, i64 0, i32 2 ; UnionTagPtr
	store i64 2, i64* %1412
	%1413 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 70
	%1414 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1413, i64 0, i32 3
	%1415 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1413, i64 0, i32 0
	store i64 8, i64* %1415
	%1416 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1413, i64 0, i32 1
	store i64 8, i64* %1416
	%1417 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1413, i64 0, i32 2
	store %..typeid 72057594037928006, %..typeid* %1417
	; Type_Info_Basic
	%1418 = bitcast {[0 x i64], [72 x i8], i64}* %1414 to %runtime.Type_Info_Integer*
	%1419 = getelementptr inbounds %runtime.Type_Info_Integer, %runtime.Type_Info_Integer* %1418, i64 0, i32 0
	store i8 0, i8* %1419
	%1420 = getelementptr inbounds %runtime.Type_Info_Integer, %runtime.Type_Info_Integer* %1418, i64 0, i32 1
	store i8 0, i8* %1420
	%1421 = load %runtime.Type_Info_Integer, %runtime.Type_Info_Integer* %1418, align 1
	%1422 = bitcast {[0 x i64], [72 x i8], i64}* %1414 to %runtime.Type_Info_Integer*
	store %runtime.Type_Info_Integer %1421, %runtime.Type_Info_Integer* %1422
	%1423 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %1414, i64 0, i32 2 ; UnionTagPtr
	store i64 2, i64* %1423
	%1424 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 71
	%1425 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1424, i64 0, i32 3
	%1426 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1424, i64 0, i32 0
	store i64 8, i64* %1426
	%1427 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1424, i64 0, i32 1
	store i64 8, i64* %1427
	%1428 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1424, i64 0, i32 2
	store %..typeid 648518346341351495, %..typeid* %1428
	; Type_Info_Pointer
	%1429 = bitcast {[0 x i64], [72 x i8], i64}* %1425 to %runtime.Type_Info_Pointer*
	%1430 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 60
	%1431 = bitcast %runtime.Type_Info* %1430 to %runtime.Type_Info*
	%1432 = getelementptr inbounds %runtime.Type_Info_Pointer, %runtime.Type_Info_Pointer* %1429, i64 0, i32 0
	store %runtime.Type_Info* %1431, %runtime.Type_Info** %1432
	%1433 = load %runtime.Type_Info_Pointer, %runtime.Type_Info_Pointer* %1429, align 8
	%1434 = bitcast {[0 x i64], [72 x i8], i64}* %1425 to %runtime.Type_Info_Pointer*
	store %runtime.Type_Info_Pointer %1433, %runtime.Type_Info_Pointer* %1434
	%1435 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %1425, i64 0, i32 2 ; UnionTagPtr
	store i64 10, i64* %1435
	%1436 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 72
	%1437 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1436, i64 0, i32 3
	%1438 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1436, i64 0, i32 0
	store i64 24, i64* %1438
	%1439 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1436, i64 0, i32 1
	store i64 8, i64* %1439
	%1440 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1436, i64 0, i32 2
	store %..typeid 3386706919782613064, %..typeid* %1440
	; Type_Info_Named
	%1441 = bitcast {[0 x i64], [72 x i8], i64}* %1437 to %runtime.Type_Info_Named*
	%1442 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 73
	%1443 = bitcast %runtime.Type_Info* %1442 to %runtime.Type_Info*
	%1444 = getelementptr inbounds %runtime.Type_Info_Named, %runtime.Type_Info_Named* %1441, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @str$201, i64 0, i32 0), i64 13}, %..string* %1444
	%1445 = getelementptr inbounds %runtime.Type_Info_Named, %runtime.Type_Info_Named* %1441, i64 0, i32 1
	store %runtime.Type_Info* %1443, %runtime.Type_Info** %1445
	%1446 = load %runtime.Type_Info_Named, %runtime.Type_Info_Named* %1441, align 8
	%1447 = bitcast {[0 x i64], [72 x i8], i64}* %1437 to %runtime.Type_Info_Named*
	store %runtime.Type_Info_Named %1446, %runtime.Type_Info_Named* %1447
	%1448 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %1437, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %1448
	%1449 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 73
	%1450 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1449, i64 0, i32 3
	%1451 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1449, i64 0, i32 0
	store i64 24, i64* %1451
	%1452 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1449, i64 0, i32 1
	store i64 8, i64* %1452
	%1453 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1449, i64 0, i32 2
	store %..typeid 1080863910568919113, %..typeid* %1453
	; Type_Info_Struct
	%1454 = bitcast {[0 x i64], [72 x i8], i64}* %1450 to %runtime.Type_Info_Struct*
	%1455 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %1454, i64 0, i32 4
	store i8 0, i8* %1455
	%1456 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %1454, i64 0, i32 5
	store i8 0, i8* %1456
	%1457 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %1454, i64 0, i32 6
	store i8 0, i8* %1457
	%1458 = getelementptr inbounds [91 x %runtime.Type_Info*], [91 x %runtime.Type_Info*]* @__$type_info_types_data, i64 0, i32 69
	%1459 = getelementptr inbounds [91 x %..string], [91 x %..string]* @__$type_info_names_data, i64 0, i32 35
	%1460 = getelementptr inbounds [91 x i64], [91 x i64]* @__$type_info_offsets_data, i64 0, i32 35
	%1461 = getelementptr inbounds [91 x i8], [91 x i8]* @__$type_info_usings_data, i64 0, i32 35
	%1462 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 10
	%1463 = bitcast %runtime.Type_Info* %1462 to %runtime.Type_Info*
	%1464 = getelementptr inbounds %runtime.Type_Info*, %runtime.Type_Info** %1458, i64 0
	%1465 = getelementptr inbounds i64, i64* %1460, i64 0
	%1466 = getelementptr inbounds i8, i8* %1461, i64 0
	%1467 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 10
	store %runtime.Type_Info* %1467, %runtime.Type_Info** %1464
	%1468 = getelementptr inbounds %..string, %..string* %1459, i64 0
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str$202, i64 0, i32 0), i64 3}, %..string* %1468
	store i64 0, i64* %1465
	store i8 0, i8* %1466
	%1469 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 10
	%1470 = bitcast %runtime.Type_Info* %1469 to %runtime.Type_Info*
	%1471 = getelementptr inbounds %runtime.Type_Info*, %runtime.Type_Info** %1458, i64 1
	%1472 = getelementptr inbounds i64, i64* %1460, i64 1
	%1473 = getelementptr inbounds i8, i8* %1461, i64 1
	%1474 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 10
	store %runtime.Type_Info* %1474, %runtime.Type_Info** %1471
	%1475 = getelementptr inbounds %..string, %..string* %1459, i64 1
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str$203, i64 0, i32 0), i64 5}, %..string* %1475
	store i64 8, i64* %1472
	store i8 0, i8* %1473
	%1476 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 10
	%1477 = bitcast %runtime.Type_Info* %1476 to %runtime.Type_Info*
	%1478 = getelementptr inbounds %runtime.Type_Info*, %runtime.Type_Info** %1458, i64 2
	%1479 = getelementptr inbounds i64, i64* %1460, i64 2
	%1480 = getelementptr inbounds i8, i8* %1461, i64 2
	%1481 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 10
	store %runtime.Type_Info* %1481, %runtime.Type_Info** %1478
	%1482 = getelementptr inbounds %..string, %..string* %1459, i64 2
	store %..string {i8* getelementptr inbounds ([17 x i8], [17 x i8]* @str$204, i64 0, i32 0), i64 16}, %..string* %1482
	store i64 16, i64* %1479
	store i8 0, i8* %1480
	%1483 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %1454, i64 0, i32 0
	%1484 = getelementptr inbounds {%runtime.Type_Info**, i64}, {%runtime.Type_Info**, i64}* %1483, i64 0, i32 0
	store %runtime.Type_Info** %1458, %runtime.Type_Info*** %1484
	%1485 = getelementptr inbounds {%runtime.Type_Info**, i64}, {%runtime.Type_Info**, i64}* %1483, i64 0, i32 1
	store i64 3, i64* %1485
	%1486 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %1454, i64 0, i32 1
	%1487 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %1486, i64 0, i32 0
	store %..string* %1459, %..string** %1487
	%1488 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %1486, i64 0, i32 1
	store i64 3, i64* %1488
	%1489 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %1454, i64 0, i32 2
	%1490 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %1489, i64 0, i32 0
	store i64* %1460, i64** %1490
	%1491 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %1489, i64 0, i32 1
	store i64 3, i64* %1491
	%1492 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %1454, i64 0, i32 3
	%1493 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %1492, i64 0, i32 0
	store i8* %1461, i8** %1493
	%1494 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %1492, i64 0, i32 1
	store i64 3, i64* %1494
	%1495 = load %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %1454, align 8
	%1496 = bitcast {[0 x i64], [72 x i8], i64}* %1450 to %runtime.Type_Info_Struct*
	store %runtime.Type_Info_Struct %1495, %runtime.Type_Info_Struct* %1496
	%1497 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %1450, i64 0, i32 2 ; UnionTagPtr
	store i64 16, i64* %1497
	%1498 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 74
	%1499 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1498, i64 0, i32 3
	%1500 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1498, i64 0, i32 0
	store i64 48, i64* %1500
	%1501 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1498, i64 0, i32 1
	store i64 8, i64* %1501
	%1502 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1498, i64 0, i32 2
	store %..typeid 3386706919782613066, %..typeid* %1502
	; Type_Info_Named
	%1503 = bitcast {[0 x i64], [72 x i8], i64}* %1499 to %runtime.Type_Info_Named*
	%1504 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 75
	%1505 = bitcast %runtime.Type_Info* %1504 to %runtime.Type_Info*
	%1506 = getelementptr inbounds %runtime.Type_Info_Named, %runtime.Type_Info_Named* %1503, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([20 x i8], [20 x i8]* @str$205, i64 0, i32 0), i64 19}, %..string* %1506
	%1507 = getelementptr inbounds %runtime.Type_Info_Named, %runtime.Type_Info_Named* %1503, i64 0, i32 1
	store %runtime.Type_Info* %1505, %runtime.Type_Info** %1507
	%1508 = load %runtime.Type_Info_Named, %runtime.Type_Info_Named* %1503, align 8
	%1509 = bitcast {[0 x i64], [72 x i8], i64}* %1499 to %runtime.Type_Info_Named*
	store %runtime.Type_Info_Named %1508, %runtime.Type_Info_Named* %1509
	%1510 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %1499, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %1510
	%1511 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 75
	%1512 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1511, i64 0, i32 3
	%1513 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1511, i64 0, i32 0
	store i64 48, i64* %1513
	%1514 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1511, i64 0, i32 1
	store i64 8, i64* %1514
	%1515 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1511, i64 0, i32 2
	store %..typeid 1080863910568919115, %..typeid* %1515
	; Type_Info_Struct
	%1516 = bitcast {[0 x i64], [72 x i8], i64}* %1512 to %runtime.Type_Info_Struct*
	%1517 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %1516, i64 0, i32 4
	store i8 0, i8* %1517
	%1518 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %1516, i64 0, i32 5
	store i8 0, i8* %1518
	%1519 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %1516, i64 0, i32 6
	store i8 0, i8* %1519
	%1520 = getelementptr inbounds [91 x %runtime.Type_Info*], [91 x %runtime.Type_Info*]* @__$type_info_types_data, i64 0, i32 72
	%1521 = getelementptr inbounds [91 x %..string], [91 x %..string]* @__$type_info_names_data, i64 0, i32 38
	%1522 = getelementptr inbounds [91 x i64], [91 x i64]* @__$type_info_offsets_data, i64 0, i32 38
	%1523 = getelementptr inbounds [91 x i8], [91 x i8]* @__$type_info_usings_data, i64 0, i32 38
	%1524 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 46
	%1525 = bitcast %runtime.Type_Info* %1524 to %runtime.Type_Info*
	%1526 = getelementptr inbounds %runtime.Type_Info*, %runtime.Type_Info** %1520, i64 0
	%1527 = getelementptr inbounds i64, i64* %1522, i64 0
	%1528 = getelementptr inbounds i8, i8* %1523, i64 0
	%1529 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 46
	store %runtime.Type_Info* %1529, %runtime.Type_Info** %1526
	%1530 = getelementptr inbounds %..string, %..string* %1521, i64 0
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str$206, i64 0, i32 0), i64 5}, %..string* %1530
	store i64 0, i64* %1527
	store i8 0, i8* %1528
	%1531 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 76
	%1532 = bitcast %runtime.Type_Info* %1531 to %runtime.Type_Info*
	%1533 = getelementptr inbounds %runtime.Type_Info*, %runtime.Type_Info** %1520, i64 1
	%1534 = getelementptr inbounds i64, i64* %1522, i64 1
	%1535 = getelementptr inbounds i8, i8* %1523, i64 1
	%1536 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 76
	store %runtime.Type_Info* %1536, %runtime.Type_Info** %1533
	%1537 = getelementptr inbounds %..string, %..string* %1521, i64 1
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str$207, i64 0, i32 0), i64 4}, %..string* %1537
	store i64 16, i64* %1534
	store i8 0, i8* %1535
	%1538 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 76
	%1539 = bitcast %runtime.Type_Info* %1538 to %runtime.Type_Info*
	%1540 = getelementptr inbounds %runtime.Type_Info*, %runtime.Type_Info** %1520, i64 2
	%1541 = getelementptr inbounds i64, i64* %1522, i64 2
	%1542 = getelementptr inbounds i8, i8* %1523, i64 2
	%1543 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 76
	store %runtime.Type_Info* %1543, %runtime.Type_Info** %1540
	%1544 = getelementptr inbounds %..string, %..string* %1521, i64 2
	store %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str$208, i64 0, i32 0), i64 7}, %..string* %1544
	store i64 32, i64* %1541
	store i8 0, i8* %1542
	%1545 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %1516, i64 0, i32 0
	%1546 = getelementptr inbounds {%runtime.Type_Info**, i64}, {%runtime.Type_Info**, i64}* %1545, i64 0, i32 0
	store %runtime.Type_Info** %1520, %runtime.Type_Info*** %1546
	%1547 = getelementptr inbounds {%runtime.Type_Info**, i64}, {%runtime.Type_Info**, i64}* %1545, i64 0, i32 1
	store i64 3, i64* %1547
	%1548 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %1516, i64 0, i32 1
	%1549 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %1548, i64 0, i32 0
	store %..string* %1521, %..string** %1549
	%1550 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %1548, i64 0, i32 1
	store i64 3, i64* %1550
	%1551 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %1516, i64 0, i32 2
	%1552 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %1551, i64 0, i32 0
	store i64* %1522, i64** %1552
	%1553 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %1551, i64 0, i32 1
	store i64 3, i64* %1553
	%1554 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %1516, i64 0, i32 3
	%1555 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %1554, i64 0, i32 0
	store i8* %1523, i8** %1555
	%1556 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %1554, i64 0, i32 1
	store i64 3, i64* %1556
	%1557 = load %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %1516, align 8
	%1558 = bitcast {[0 x i64], [72 x i8], i64}* %1512 to %runtime.Type_Info_Struct*
	store %runtime.Type_Info_Struct %1557, %runtime.Type_Info_Struct* %1558
	%1559 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %1512, i64 0, i32 2 ; UnionTagPtr
	store i64 16, i64* %1559
	%1560 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 76
	%1561 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1560, i64 0, i32 3
	%1562 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1560, i64 0, i32 0
	store i64 16, i64* %1562
	%1563 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1560, i64 0, i32 1
	store i64 8, i64* %1563
	%1564 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1560, i64 0, i32 2
	store %..typeid 936748722493063244, %..typeid* %1564
	; Type_Info_Slice
	%1565 = bitcast {[0 x i64], [72 x i8], i64}* %1561 to %runtime.Type_Info_Slice*
	%1566 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 65
	%1567 = bitcast %runtime.Type_Info* %1566 to %runtime.Type_Info*
	%1568 = getelementptr inbounds %runtime.Type_Info_Slice, %runtime.Type_Info_Slice* %1565, i64 0, i32 0
	store %runtime.Type_Info* %1567, %runtime.Type_Info** %1568
	%1569 = getelementptr inbounds %runtime.Type_Info_Slice, %runtime.Type_Info_Slice* %1565, i64 0, i32 1
	store i64 4, i64* %1569
	%1570 = load %runtime.Type_Info_Slice, %runtime.Type_Info_Slice* %1565, align 8
	%1571 = bitcast {[0 x i64], [72 x i8], i64}* %1561 to %runtime.Type_Info_Slice*
	store %runtime.Type_Info_Slice %1570, %runtime.Type_Info_Slice* %1571
	%1572 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %1561, i64 0, i32 2 ; UnionTagPtr
	store i64 14, i64* %1572
	%1573 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 77
	%1574 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1573, i64 0, i32 3
	%1575 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1573, i64 0, i32 0
	store i64 8, i64* %1575
	%1576 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1573, i64 0, i32 1
	store i64 8, i64* %1576
	%1577 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1573, i64 0, i32 2
	store %..typeid 648518346341351501, %..typeid* %1577
	; Type_Info_Pointer
	%1578 = bitcast {[0 x i64], [72 x i8], i64}* %1574 to %runtime.Type_Info_Pointer*
	%1579 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 65
	%1580 = bitcast %runtime.Type_Info* %1579 to %runtime.Type_Info*
	%1581 = getelementptr inbounds %runtime.Type_Info_Pointer, %runtime.Type_Info_Pointer* %1578, i64 0, i32 0
	store %runtime.Type_Info* %1580, %runtime.Type_Info** %1581
	%1582 = load %runtime.Type_Info_Pointer, %runtime.Type_Info_Pointer* %1578, align 8
	%1583 = bitcast {[0 x i64], [72 x i8], i64}* %1574 to %runtime.Type_Info_Pointer*
	store %runtime.Type_Info_Pointer %1582, %runtime.Type_Info_Pointer* %1583
	%1584 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %1574, i64 0, i32 2 ; UnionTagPtr
	store i64 10, i64* %1584
	%1585 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 78
	%1586 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1585, i64 0, i32 3
	%1587 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1585, i64 0, i32 0
	store i64 32, i64* %1587
	%1588 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1585, i64 0, i32 1
	store i64 8, i64* %1588
	%1589 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1585, i64 0, i32 2
	store %..typeid 3386706919782613070, %..typeid* %1589
	; Type_Info_Named
	%1590 = bitcast {[0 x i64], [72 x i8], i64}* %1586 to %runtime.Type_Info_Named*
	%1591 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 79
	%1592 = bitcast %runtime.Type_Info* %1591 to %runtime.Type_Info*
	%1593 = getelementptr inbounds %runtime.Type_Info_Named, %runtime.Type_Info_Named* %1590, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([18 x i8], [18 x i8]* @str$209, i64 0, i32 0), i64 17}, %..string* %1593
	%1594 = getelementptr inbounds %runtime.Type_Info_Named, %runtime.Type_Info_Named* %1590, i64 0, i32 1
	store %runtime.Type_Info* %1592, %runtime.Type_Info** %1594
	%1595 = load %runtime.Type_Info_Named, %runtime.Type_Info_Named* %1590, align 8
	%1596 = bitcast {[0 x i64], [72 x i8], i64}* %1586 to %runtime.Type_Info_Named*
	store %runtime.Type_Info_Named %1595, %runtime.Type_Info_Named* %1596
	%1597 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %1586, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %1597
	%1598 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 79
	%1599 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1598, i64 0, i32 3
	%1600 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1598, i64 0, i32 0
	store i64 32, i64* %1600
	%1601 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1598, i64 0, i32 1
	store i64 8, i64* %1601
	%1602 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1598, i64 0, i32 2
	store %..typeid 1080863910568919119, %..typeid* %1602
	; Type_Info_Struct
	%1603 = bitcast {[0 x i64], [72 x i8], i64}* %1599 to %runtime.Type_Info_Struct*
	%1604 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %1603, i64 0, i32 4
	store i8 0, i8* %1604
	%1605 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %1603, i64 0, i32 5
	store i8 0, i8* %1605
	%1606 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %1603, i64 0, i32 6
	store i8 0, i8* %1606
	%1607 = getelementptr inbounds [91 x %runtime.Type_Info*], [91 x %runtime.Type_Info*]* @__$type_info_types_data, i64 0, i32 75
	%1608 = getelementptr inbounds [91 x %..string], [91 x %..string]* @__$type_info_names_data, i64 0, i32 41
	%1609 = getelementptr inbounds [91 x i64], [91 x i64]* @__$type_info_offsets_data, i64 0, i32 41
	%1610 = getelementptr inbounds [91 x i8], [91 x i8]* @__$type_info_usings_data, i64 0, i32 41
	%1611 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 10
	%1612 = bitcast %runtime.Type_Info* %1611 to %runtime.Type_Info*
	%1613 = getelementptr inbounds %runtime.Type_Info*, %runtime.Type_Info** %1607, i64 0
	%1614 = getelementptr inbounds i64, i64* %1609, i64 0
	%1615 = getelementptr inbounds i8, i8* %1610, i64 0
	%1616 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 10
	store %runtime.Type_Info* %1616, %runtime.Type_Info** %1613
	%1617 = getelementptr inbounds %..string, %..string* %1608, i64 0
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str$20a, i64 0, i32 0), i64 4}, %..string* %1617
	store i64 0, i64* %1614
	store i8 0, i8* %1615
	%1618 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 10
	%1619 = bitcast %runtime.Type_Info* %1618 to %runtime.Type_Info*
	%1620 = getelementptr inbounds %runtime.Type_Info*, %runtime.Type_Info** %1607, i64 1
	%1621 = getelementptr inbounds i64, i64* %1609, i64 1
	%1622 = getelementptr inbounds i8, i8* %1610, i64 1
	%1623 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 10
	store %runtime.Type_Info* %1623, %runtime.Type_Info** %1620
	%1624 = getelementptr inbounds %..string, %..string* %1608, i64 1
	store %..string {i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str$20b, i64 0, i32 0), i64 10}, %..string* %1624
	store i64 8, i64* %1621
	store i8 0, i8* %1622
	%1625 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 66
	%1626 = bitcast %runtime.Type_Info* %1625 to %runtime.Type_Info*
	%1627 = getelementptr inbounds %runtime.Type_Info*, %runtime.Type_Info** %1607, i64 2
	%1628 = getelementptr inbounds i64, i64* %1609, i64 2
	%1629 = getelementptr inbounds i8, i8* %1610, i64 2
	%1630 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 66
	store %runtime.Type_Info* %1630, %runtime.Type_Info** %1627
	%1631 = getelementptr inbounds %..string, %..string* %1608, i64 2
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str$20c, i64 0, i32 0), i64 5}, %..string* %1631
	store i64 16, i64* %1628
	store i8 0, i8* %1629
	%1632 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 66
	%1633 = bitcast %runtime.Type_Info* %1632 to %runtime.Type_Info*
	%1634 = getelementptr inbounds %runtime.Type_Info*, %runtime.Type_Info** %1607, i64 3
	%1635 = getelementptr inbounds i64, i64* %1609, i64 3
	%1636 = getelementptr inbounds i8, i8* %1610, i64 3
	%1637 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 66
	store %runtime.Type_Info* %1637, %runtime.Type_Info** %1634
	%1638 = getelementptr inbounds %..string, %..string* %1608, i64 3
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str$20d, i64 0, i32 0), i64 5}, %..string* %1638
	store i64 24, i64* %1635
	store i8 0, i8* %1636
	%1639 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %1603, i64 0, i32 0
	%1640 = getelementptr inbounds {%runtime.Type_Info**, i64}, {%runtime.Type_Info**, i64}* %1639, i64 0, i32 0
	store %runtime.Type_Info** %1607, %runtime.Type_Info*** %1640
	%1641 = getelementptr inbounds {%runtime.Type_Info**, i64}, {%runtime.Type_Info**, i64}* %1639, i64 0, i32 1
	store i64 4, i64* %1641
	%1642 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %1603, i64 0, i32 1
	%1643 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %1642, i64 0, i32 0
	store %..string* %1608, %..string** %1643
	%1644 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %1642, i64 0, i32 1
	store i64 4, i64* %1644
	%1645 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %1603, i64 0, i32 2
	%1646 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %1645, i64 0, i32 0
	store i64* %1609, i64** %1646
	%1647 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %1645, i64 0, i32 1
	store i64 4, i64* %1647
	%1648 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %1603, i64 0, i32 3
	%1649 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %1648, i64 0, i32 0
	store i8* %1610, i8** %1649
	%1650 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %1648, i64 0, i32 1
	store i64 4, i64* %1650
	%1651 = load %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %1603, align 8
	%1652 = bitcast {[0 x i64], [72 x i8], i64}* %1599 to %runtime.Type_Info_Struct*
	store %runtime.Type_Info_Struct %1651, %runtime.Type_Info_Struct* %1652
	%1653 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %1599, i64 0, i32 2 ; UnionTagPtr
	store i64 16, i64* %1653
	%1654 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 80
	%1655 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1654, i64 0, i32 3
	%1656 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1654, i64 0, i32 0
	store i64 8, i64* %1656
	%1657 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1654, i64 0, i32 1
	store i64 8, i64* %1657
	%1658 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1654, i64 0, i32 2
	store %..typeid 3386706919782613072, %..typeid* %1658
	; Type_Info_Named
	%1659 = bitcast {[0 x i64], [72 x i8], i64}* %1655 to %runtime.Type_Info_Named*
	%1660 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 32
	%1661 = bitcast %runtime.Type_Info* %1660 to %runtime.Type_Info*
	%1662 = getelementptr inbounds %runtime.Type_Info_Named, %runtime.Type_Info_Named* %1659, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([17 x i8], [17 x i8]* @str$20e, i64 0, i32 0), i64 16}, %..string* %1662
	%1663 = getelementptr inbounds %runtime.Type_Info_Named, %runtime.Type_Info_Named* %1659, i64 0, i32 1
	store %runtime.Type_Info* %1661, %runtime.Type_Info** %1663
	%1664 = load %runtime.Type_Info_Named, %runtime.Type_Info_Named* %1659, align 8
	%1665 = bitcast {[0 x i64], [72 x i8], i64}* %1655 to %runtime.Type_Info_Named*
	store %runtime.Type_Info_Named %1664, %runtime.Type_Info_Named* %1665
	%1666 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %1655, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %1666
	%1667 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 1
	%1668 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1667, i64 0, i32 3
	%1669 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1667, i64 0, i32 0
	store i64 1, i64* %1669
	%1670 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1667, i64 0, i32 1
	store i64 1, i64* %1670
	%1671 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1667, i64 0, i32 2
	store %..typeid 3530822107858468865, %..typeid* %1671
	; Type_Info_Named
	%1672 = bitcast {[0 x i64], [72 x i8], i64}* %1668 to %runtime.Type_Info_Named*
	%1673 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 2
	%1674 = bitcast %runtime.Type_Info* %1673 to %runtime.Type_Info*
	%1675 = getelementptr inbounds %runtime.Type_Info_Named, %runtime.Type_Info_Named* %1672, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([15 x i8], [15 x i8]* @str$20f, i64 0, i32 0), i64 14}, %..string* %1675
	%1676 = getelementptr inbounds %runtime.Type_Info_Named, %runtime.Type_Info_Named* %1672, i64 0, i32 1
	store %runtime.Type_Info* %1674, %runtime.Type_Info** %1676
	%1677 = load %runtime.Type_Info_Named, %runtime.Type_Info_Named* %1672, align 8
	%1678 = bitcast {[0 x i64], [72 x i8], i64}* %1668 to %runtime.Type_Info_Named*
	store %runtime.Type_Info_Named %1677, %runtime.Type_Info_Named* %1678
	%1679 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %1668, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %1679
	%1680 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 2
	%1681 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1680, i64 0, i32 3
	%1682 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1680, i64 0, i32 0
	store i64 1, i64* %1682
	%1683 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1680, i64 0, i32 1
	store i64 1, i64* %1683
	%1684 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1680, i64 0, i32 2
	store %..typeid 1224979098644774914, %..typeid* %1684
	; Type_Info_Enum
	%1685 = bitcast {[0 x i64], [72 x i8], i64}* %1681 to %runtime.Type_Info_Enum*
	%1686 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 3
	%1687 = getelementptr inbounds %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %1685, i64 0, i32 0
	store %runtime.Type_Info* %1686, %runtime.Type_Info** %1687
	%1688 = getelementptr inbounds [4 x %..string], [4 x %..string]* @$enum_names-2, i64 0, i32 0
	%1689 = getelementptr inbounds [4 x %runtime.Type_Info_Enum_Value], [4 x %runtime.Type_Info_Enum_Value]* @$enum_values-2, i64 0, i32 0
	%1690 = bitcast %runtime.Type_Info_Enum_Value* %1689 to i8*
	store i8 0, i8* %1690
	%1691 = getelementptr inbounds %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %1689, i64 0, i32 2 ; UnionTagPtr
	store i64 7, i64* %1691
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str$210, i64 0, i32 0), i64 5}, %..string* %1688
	%1692 = getelementptr inbounds [4 x %..string], [4 x %..string]* @$enum_names-2, i64 0, i32 1
	%1693 = getelementptr inbounds [4 x %runtime.Type_Info_Enum_Value], [4 x %runtime.Type_Info_Enum_Value]* @$enum_values-2, i64 0, i32 1
	%1694 = bitcast %runtime.Type_Info_Enum_Value* %1693 to i8*
	store i8 1, i8* %1694
	%1695 = getelementptr inbounds %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %1693, i64 0, i32 2 ; UnionTagPtr
	store i64 7, i64* %1695
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str$211, i64 0, i32 0), i64 4}, %..string* %1692
	%1696 = getelementptr inbounds [4 x %..string], [4 x %..string]* @$enum_names-2, i64 0, i32 2
	%1697 = getelementptr inbounds [4 x %runtime.Type_Info_Enum_Value], [4 x %runtime.Type_Info_Enum_Value]* @$enum_values-2, i64 0, i32 2
	%1698 = bitcast %runtime.Type_Info_Enum_Value* %1697 to i8*
	store i8 2, i8* %1698
	%1699 = getelementptr inbounds %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %1697, i64 0, i32 2 ; UnionTagPtr
	store i64 7, i64* %1699
	store %..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @str$212, i64 0, i32 0), i64 8}, %..string* %1696
	%1700 = getelementptr inbounds [4 x %..string], [4 x %..string]* @$enum_names-2, i64 0, i32 3
	%1701 = getelementptr inbounds [4 x %runtime.Type_Info_Enum_Value], [4 x %runtime.Type_Info_Enum_Value]* @$enum_values-2, i64 0, i32 3
	%1702 = bitcast %runtime.Type_Info_Enum_Value* %1701 to i8*
	store i8 3, i8* %1702
	%1703 = getelementptr inbounds %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %1701, i64 0, i32 2 ; UnionTagPtr
	store i64 7, i64* %1703
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str$213, i64 0, i32 0), i64 6}, %..string* %1700
	%1704 = getelementptr inbounds %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %1685, i64 0, i32 1
	%1705 = getelementptr inbounds [4 x %..string], [4 x %..string]* @$enum_names-2, i64 0, i32 0
	%1706 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %1704, i64 0, i32 0
	store %..string* %1705, %..string** %1706
	%1707 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %1704, i64 0, i32 1
	store i64 4, i64* %1707
	%1708 = getelementptr inbounds %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %1685, i64 0, i32 2
	%1709 = getelementptr inbounds [4 x %runtime.Type_Info_Enum_Value], [4 x %runtime.Type_Info_Enum_Value]* @$enum_values-2, i64 0, i32 0
	%1710 = getelementptr inbounds {%runtime.Type_Info_Enum_Value*, i64}, {%runtime.Type_Info_Enum_Value*, i64}* %1708, i64 0, i32 0
	store %runtime.Type_Info_Enum_Value* %1709, %runtime.Type_Info_Enum_Value** %1710
	%1711 = getelementptr inbounds {%runtime.Type_Info_Enum_Value*, i64}, {%runtime.Type_Info_Enum_Value*, i64}* %1708, i64 0, i32 1
	store i64 4, i64* %1711
	%1712 = load %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %1685, align 8
	%1713 = bitcast {[0 x i64], [72 x i8], i64}* %1681 to %runtime.Type_Info_Enum*
	store %runtime.Type_Info_Enum %1712, %runtime.Type_Info_Enum* %1713
	%1714 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %1681, i64 0, i32 2 ; UnionTagPtr
	store i64 18, i64* %1714
	%1715 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 89
	%1716 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1715, i64 0, i32 3
	%1717 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1715, i64 0, i32 0
	store i64 16, i64* %1717
	%1718 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1715, i64 0, i32 1
	store i64 8, i64* %1718
	%1719 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1715, i64 0, i32 2
	store %..typeid 89, %..typeid* %1719
	; Type_Info_Basic
	%1720 = bitcast {[0 x i64], [72 x i8], i64}* %1716 to %runtime.Type_Info_Any*
	%1721 = load %runtime.Type_Info_Any, %runtime.Type_Info_Any* %1720, align 1
	%1722 = bitcast {[0 x i64], [72 x i8], i64}* %1716 to %runtime.Type_Info_Any*
	store %runtime.Type_Info_Any %1721, %runtime.Type_Info_Any* %1722
	%1723 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %1716, i64 0, i32 2 ; UnionTagPtr
	store i64 8, i64* %1723
	%1724 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 90
	%1725 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1724, i64 0, i32 3
	%1726 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1724, i64 0, i32 0
	store i64 8, i64* %1726
	%1727 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1724, i64 0, i32 1
	store i64 8, i64* %1727
	%1728 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1724, i64 0, i32 2
	store %..typeid 648518346341351514, %..typeid* %1728
	; Type_Info_Basic
	%1729 = bitcast {[0 x i64], [72 x i8], i64}* %1725 to %runtime.Type_Info_Pointer*
	%1730 = load %runtime.Type_Info_Pointer, %runtime.Type_Info_Pointer* %1729, align 8
	%1731 = bitcast {[0 x i64], [72 x i8], i64}* %1725 to %runtime.Type_Info_Pointer*
	store %runtime.Type_Info_Pointer %1730, %runtime.Type_Info_Pointer* %1731
	%1732 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %1725, i64 0, i32 2 ; UnionTagPtr
	store i64 10, i64* %1732
	%1733 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 4
	%1734 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1733, i64 0, i32 3
	%1735 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1733, i64 0, i32 0
	store i64 56, i64* %1735
	%1736 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1733, i64 0, i32 1
	store i64 8, i64* %1736
	%1737 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1733, i64 0, i32 2
	store %..typeid 3386706919782612996, %..typeid* %1737
	; Type_Info_Named
	%1738 = bitcast {[0 x i64], [72 x i8], i64}* %1734 to %runtime.Type_Info_Named*
	%1739 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 5
	%1740 = bitcast %runtime.Type_Info* %1739 to %runtime.Type_Info*
	%1741 = getelementptr inbounds %runtime.Type_Info_Named, %runtime.Type_Info_Named* %1738, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str$214, i64 0, i32 0), i64 5}, %..string* %1741
	%1742 = getelementptr inbounds %runtime.Type_Info_Named, %runtime.Type_Info_Named* %1738, i64 0, i32 1
	store %runtime.Type_Info* %1740, %runtime.Type_Info** %1742
	%1743 = load %runtime.Type_Info_Named, %runtime.Type_Info_Named* %1738, align 8
	%1744 = bitcast {[0 x i64], [72 x i8], i64}* %1734 to %runtime.Type_Info_Named*
	store %runtime.Type_Info_Named %1743, %runtime.Type_Info_Named* %1744
	%1745 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %1734, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %1745
	%1746 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 5
	%1747 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1746, i64 0, i32 3
	%1748 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1746, i64 0, i32 0
	store i64 56, i64* %1748
	%1749 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1746, i64 0, i32 1
	store i64 8, i64* %1749
	%1750 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1746, i64 0, i32 2
	store %..typeid 1080863910568919045, %..typeid* %1750
	; Type_Info_Struct
	%1751 = bitcast {[0 x i64], [72 x i8], i64}* %1747 to %runtime.Type_Info_Struct*
	%1752 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %1751, i64 0, i32 4
	store i8 0, i8* %1752
	%1753 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %1751, i64 0, i32 5
	store i8 0, i8* %1753
	%1754 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %1751, i64 0, i32 6
	store i8 0, i8* %1754
	%1755 = getelementptr inbounds [91 x %runtime.Type_Info*], [91 x %runtime.Type_Info*]* @__$type_info_types_data, i64 0, i32 79
	%1756 = getelementptr inbounds [91 x %..string], [91 x %..string]* @__$type_info_names_data, i64 0, i32 45
	%1757 = getelementptr inbounds [91 x i64], [91 x i64]* @__$type_info_offsets_data, i64 0, i32 45
	%1758 = getelementptr inbounds [91 x i8], [91 x i8]* @__$type_info_usings_data, i64 0, i32 45
	%1759 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 6
	%1760 = bitcast %runtime.Type_Info* %1759 to %runtime.Type_Info*
	%1761 = getelementptr inbounds %runtime.Type_Info*, %runtime.Type_Info** %1755, i64 0
	%1762 = getelementptr inbounds i64, i64* %1757, i64 0
	%1763 = getelementptr inbounds i8, i8* %1758, i64 0
	%1764 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 6
	store %runtime.Type_Info* %1764, %runtime.Type_Info** %1761
	%1765 = getelementptr inbounds %..string, %..string* %1756, i64 0
	store %..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @str$215, i64 0, i32 0), i64 13}, %..string* %1765
	store i64 0, i64* %1762
	store i8 0, i8* %1763
	%1766 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 9
	%1767 = bitcast %runtime.Type_Info* %1766 to %runtime.Type_Info*
	%1768 = getelementptr inbounds %runtime.Type_Info*, %runtime.Type_Info** %1755, i64 1
	%1769 = getelementptr inbounds i64, i64* %1757, i64 1
	%1770 = getelementptr inbounds i8, i8* %1758, i64 1
	%1771 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 9
	store %runtime.Type_Info* %1771, %runtime.Type_Info** %1768
	%1772 = getelementptr inbounds %..string, %..string* %1756, i64 1
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str$216, i64 0, i32 0), i64 4}, %..string* %1772
	store i64 16, i64* %1769
	store i8 0, i8* %1770
	%1773 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %1751, i64 0, i32 0
	%1774 = getelementptr inbounds {%runtime.Type_Info**, i64}, {%runtime.Type_Info**, i64}* %1773, i64 0, i32 0
	store %runtime.Type_Info** %1755, %runtime.Type_Info*** %1774
	%1775 = getelementptr inbounds {%runtime.Type_Info**, i64}, {%runtime.Type_Info**, i64}* %1773, i64 0, i32 1
	store i64 2, i64* %1775
	%1776 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %1751, i64 0, i32 1
	%1777 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %1776, i64 0, i32 0
	store %..string* %1756, %..string** %1777
	%1778 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %1776, i64 0, i32 1
	store i64 2, i64* %1778
	%1779 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %1751, i64 0, i32 2
	%1780 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %1779, i64 0, i32 0
	store i64* %1757, i64** %1780
	%1781 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %1779, i64 0, i32 1
	store i64 2, i64* %1781
	%1782 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %1751, i64 0, i32 3
	%1783 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %1782, i64 0, i32 0
	store i8* %1758, i8** %1783
	%1784 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %1782, i64 0, i32 1
	store i64 2, i64* %1784
	%1785 = load %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %1751, align 8
	%1786 = bitcast {[0 x i64], [72 x i8], i64}* %1747 to %runtime.Type_Info_Struct*
	store %runtime.Type_Info_Struct %1785, %runtime.Type_Info_Struct* %1786
	%1787 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %1747, i64 0, i32 2 ; UnionTagPtr
	store i64 16, i64* %1787
	%1788 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 9
	%1789 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1788, i64 0, i32 3
	%1790 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1788, i64 0, i32 0
	store i64 40, i64* %1790
	%1791 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1788, i64 0, i32 1
	store i64 8, i64* %1791
	%1792 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1788, i64 0, i32 2
	store %..typeid 1152921504606846985, %..typeid* %1792
	; Type_Info_Union
	%1793 = bitcast {[0 x i64], [72 x i8], i64}* %1789 to %runtime.Type_Info_Union*
	%1794 = getelementptr inbounds %runtime.Type_Info_Union, %runtime.Type_Info_Union* %1793, i64 0, i32 0
	%1795 = getelementptr inbounds %runtime.Type_Info_Union, %runtime.Type_Info_Union* %1793, i64 0, i32 1
	%1796 = getelementptr inbounds %runtime.Type_Info_Union, %runtime.Type_Info_Union* %1793, i64 0, i32 2
	%1797 = getelementptr inbounds %runtime.Type_Info_Union, %runtime.Type_Info_Union* %1793, i64 0, i32 3
	%1798 = getelementptr inbounds [91 x %runtime.Type_Info*], [91 x %runtime.Type_Info*]* @__$type_info_types_data, i64 0, i32 81
	%1799 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 81
	%1800 = bitcast %runtime.Type_Info* %1799 to %runtime.Type_Info*
	%1801 = getelementptr inbounds %runtime.Type_Info*, %runtime.Type_Info** %1798, i64 0
	%1802 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 81
	store %runtime.Type_Info* %1802, %runtime.Type_Info** %1801
	%1803 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 83
	%1804 = bitcast %runtime.Type_Info* %1803 to %runtime.Type_Info*
	%1805 = getelementptr inbounds %runtime.Type_Info*, %runtime.Type_Info** %1798, i64 1
	%1806 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 83
	store %runtime.Type_Info* %1806, %runtime.Type_Info** %1805
	%1807 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 86
	%1808 = bitcast %runtime.Type_Info* %1807 to %runtime.Type_Info*
	%1809 = getelementptr inbounds %runtime.Type_Info*, %runtime.Type_Info** %1798, i64 2
	%1810 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 86
	store %runtime.Type_Info* %1810, %runtime.Type_Info** %1809
	%1811 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 87
	%1812 = bitcast %runtime.Type_Info* %1811 to %runtime.Type_Info*
	%1813 = getelementptr inbounds %runtime.Type_Info*, %runtime.Type_Info** %1798, i64 3
	%1814 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 87
	store %runtime.Type_Info* %1814, %runtime.Type_Info** %1813
	%1815 = getelementptr inbounds {%runtime.Type_Info**, i64}, {%runtime.Type_Info**, i64}* %1794, i64 0, i32 0
	store %runtime.Type_Info** %1798, %runtime.Type_Info*** %1815
	%1816 = getelementptr inbounds {%runtime.Type_Info**, i64}, {%runtime.Type_Info**, i64}* %1794, i64 0, i32 1
	store i64 4, i64* %1816
	store i64 32, i64* %1795
	%1817 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 69
	store %runtime.Type_Info* %1817, %runtime.Type_Info** %1796
	store i8 0, i8* %1797
	%1818 = load %runtime.Type_Info_Union, %runtime.Type_Info_Union* %1793, align 8
	%1819 = bitcast {[0 x i64], [72 x i8], i64}* %1789 to %runtime.Type_Info_Union*
	store %runtime.Type_Info_Union %1818, %runtime.Type_Info_Union* %1819
	%1820 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %1789, i64 0, i32 2 ; UnionTagPtr
	store i64 17, i64* %1820
	%1821 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 81
	%1822 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1821, i64 0, i32 3
	%1823 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1821, i64 0, i32 0
	store i64 16, i64* %1823
	%1824 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1821, i64 0, i32 1
	store i64 8, i64* %1824
	%1825 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1821, i64 0, i32 2
	store %..typeid 3386706919782613073, %..typeid* %1825
	; Type_Info_Named
	%1826 = bitcast {[0 x i64], [72 x i8], i64}* %1822 to %runtime.Type_Info_Named*
	%1827 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 82
	%1828 = bitcast %runtime.Type_Info* %1827 to %runtime.Type_Info*
	%1829 = getelementptr inbounds %runtime.Type_Info_Named, %runtime.Type_Info_Named* %1826, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([17 x i8], [17 x i8]* @str$217, i64 0, i32 0), i64 16}, %..string* %1829
	%1830 = getelementptr inbounds %runtime.Type_Info_Named, %runtime.Type_Info_Named* %1826, i64 0, i32 1
	store %runtime.Type_Info* %1828, %runtime.Type_Info** %1830
	%1831 = load %runtime.Type_Info_Named, %runtime.Type_Info_Named* %1826, align 8
	%1832 = bitcast {[0 x i64], [72 x i8], i64}* %1822 to %runtime.Type_Info_Named*
	store %runtime.Type_Info_Named %1831, %runtime.Type_Info_Named* %1832
	%1833 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %1822, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %1833
	%1834 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 82
	%1835 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1834, i64 0, i32 3
	%1836 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1834, i64 0, i32 0
	store i64 16, i64* %1836
	%1837 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1834, i64 0, i32 1
	store i64 8, i64* %1837
	%1838 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1834, i64 0, i32 2
	store %..typeid 1080863910568919122, %..typeid* %1838
	; Type_Info_Struct
	%1839 = bitcast {[0 x i64], [72 x i8], i64}* %1835 to %runtime.Type_Info_Struct*
	%1840 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %1839, i64 0, i32 4
	store i8 0, i8* %1840
	%1841 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %1839, i64 0, i32 5
	store i8 0, i8* %1841
	%1842 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %1839, i64 0, i32 6
	store i8 0, i8* %1842
	%1843 = getelementptr inbounds [91 x %runtime.Type_Info*], [91 x %runtime.Type_Info*]* @__$type_info_types_data, i64 0, i32 85
	%1844 = getelementptr inbounds [91 x %..string], [91 x %..string]* @__$type_info_names_data, i64 0, i32 47
	%1845 = getelementptr inbounds [91 x i64], [91 x i64]* @__$type_info_offsets_data, i64 0, i32 47
	%1846 = getelementptr inbounds [91 x i8], [91 x i8]* @__$type_info_usings_data, i64 0, i32 47
	%1847 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 6
	%1848 = bitcast %runtime.Type_Info* %1847 to %runtime.Type_Info*
	%1849 = getelementptr inbounds %runtime.Type_Info*, %runtime.Type_Info** %1843, i64 0
	%1850 = getelementptr inbounds i64, i64* %1845, i64 0
	%1851 = getelementptr inbounds i8, i8* %1846, i64 0
	%1852 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 6
	store %runtime.Type_Info* %1852, %runtime.Type_Info** %1849
	%1853 = getelementptr inbounds %..string, %..string* %1844, i64 0
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str$218, i64 0, i32 0), i64 5}, %..string* %1853
	store i64 0, i64* %1850
	store i8 0, i8* %1851
	%1854 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %1839, i64 0, i32 0
	%1855 = getelementptr inbounds {%runtime.Type_Info**, i64}, {%runtime.Type_Info**, i64}* %1854, i64 0, i32 0
	store %runtime.Type_Info** %1843, %runtime.Type_Info*** %1855
	%1856 = getelementptr inbounds {%runtime.Type_Info**, i64}, {%runtime.Type_Info**, i64}* %1854, i64 0, i32 1
	store i64 1, i64* %1856
	%1857 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %1839, i64 0, i32 1
	%1858 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %1857, i64 0, i32 0
	store %..string* %1844, %..string** %1858
	%1859 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %1857, i64 0, i32 1
	store i64 1, i64* %1859
	%1860 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %1839, i64 0, i32 2
	%1861 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %1860, i64 0, i32 0
	store i64* %1845, i64** %1861
	%1862 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %1860, i64 0, i32 1
	store i64 1, i64* %1862
	%1863 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %1839, i64 0, i32 3
	%1864 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %1863, i64 0, i32 0
	store i8* %1846, i8** %1864
	%1865 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %1863, i64 0, i32 1
	store i64 1, i64* %1865
	%1866 = load %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %1839, align 8
	%1867 = bitcast {[0 x i64], [72 x i8], i64}* %1835 to %runtime.Type_Info_Struct*
	store %runtime.Type_Info_Struct %1866, %runtime.Type_Info_Struct* %1867
	%1868 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %1835, i64 0, i32 2 ; UnionTagPtr
	store i64 16, i64* %1868
	%1869 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 83
	%1870 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1869, i64 0, i32 3
	%1871 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1869, i64 0, i32 0
	store i64 32, i64* %1871
	%1872 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1869, i64 0, i32 1
	store i64 8, i64* %1872
	%1873 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1869, i64 0, i32 2
	store %..typeid 3386706919782613075, %..typeid* %1873
	; Type_Info_Named
	%1874 = bitcast {[0 x i64], [72 x i8], i64}* %1870 to %runtime.Type_Info_Named*
	%1875 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 84
	%1876 = bitcast %runtime.Type_Info* %1875 to %runtime.Type_Info*
	%1877 = getelementptr inbounds %runtime.Type_Info_Named, %runtime.Type_Info_Named* %1874, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([13 x i8], [13 x i8]* @str$219, i64 0, i32 0), i64 12}, %..string* %1877
	%1878 = getelementptr inbounds %runtime.Type_Info_Named, %runtime.Type_Info_Named* %1874, i64 0, i32 1
	store %runtime.Type_Info* %1876, %runtime.Type_Info** %1878
	%1879 = load %runtime.Type_Info_Named, %runtime.Type_Info_Named* %1874, align 8
	%1880 = bitcast {[0 x i64], [72 x i8], i64}* %1870 to %runtime.Type_Info_Named*
	store %runtime.Type_Info_Named %1879, %runtime.Type_Info_Named* %1880
	%1881 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %1870, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %1881
	%1882 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 84
	%1883 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1882, i64 0, i32 3
	%1884 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1882, i64 0, i32 0
	store i64 32, i64* %1884
	%1885 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1882, i64 0, i32 1
	store i64 8, i64* %1885
	%1886 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1882, i64 0, i32 2
	store %..typeid 1080863910568919124, %..typeid* %1886
	; Type_Info_Struct
	%1887 = bitcast {[0 x i64], [72 x i8], i64}* %1883 to %runtime.Type_Info_Struct*
	%1888 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %1887, i64 0, i32 4
	store i8 0, i8* %1888
	%1889 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %1887, i64 0, i32 5
	store i8 0, i8* %1889
	%1890 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %1887, i64 0, i32 6
	store i8 0, i8* %1890
	%1891 = getelementptr inbounds [91 x %runtime.Type_Info*], [91 x %runtime.Type_Info*]* @__$type_info_types_data, i64 0, i32 86
	%1892 = getelementptr inbounds [91 x %..string], [91 x %..string]* @__$type_info_names_data, i64 0, i32 48
	%1893 = getelementptr inbounds [91 x i64], [91 x i64]* @__$type_info_offsets_data, i64 0, i32 48
	%1894 = getelementptr inbounds [91 x i8], [91 x i8]* @__$type_info_usings_data, i64 0, i32 48
	%1895 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 66
	%1896 = bitcast %runtime.Type_Info* %1895 to %runtime.Type_Info*
	%1897 = getelementptr inbounds %runtime.Type_Info*, %runtime.Type_Info** %1891, i64 0
	%1898 = getelementptr inbounds i64, i64* %1893, i64 0
	%1899 = getelementptr inbounds i8, i8* %1894, i64 0
	%1900 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 66
	store %runtime.Type_Info* %1900, %runtime.Type_Info** %1897
	%1901 = getelementptr inbounds %..string, %..string* %1892, i64 0
	store %..string {i8* getelementptr inbounds ([10 x i8], [10 x i8]* @str$21a, i64 0, i32 0), i64 9}, %..string* %1901
	store i64 0, i64* %1898
	store i8 0, i8* %1899
	%1902 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 69
	%1903 = bitcast %runtime.Type_Info* %1902 to %runtime.Type_Info*
	%1904 = getelementptr inbounds %runtime.Type_Info*, %runtime.Type_Info** %1891, i64 1
	%1905 = getelementptr inbounds i64, i64* %1893, i64 1
	%1906 = getelementptr inbounds i8, i8* %1894, i64 1
	%1907 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 69
	store %runtime.Type_Info* %1907, %runtime.Type_Info** %1904
	%1908 = getelementptr inbounds %..string, %..string* %1892, i64 1
	store %..string {i8* getelementptr inbounds ([19 x i8], [19 x i8]* @str$21b, i64 0, i32 0), i64 18}, %..string* %1908
	store i64 8, i64* %1905
	store i8 0, i8* %1906
	%1909 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 85
	%1910 = bitcast %runtime.Type_Info* %1909 to %runtime.Type_Info*
	%1911 = getelementptr inbounds %runtime.Type_Info*, %runtime.Type_Info** %1891, i64 2
	%1912 = getelementptr inbounds i64, i64* %1893, i64 2
	%1913 = getelementptr inbounds i8, i8* %1894, i64 2
	%1914 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 85
	store %runtime.Type_Info* %1914, %runtime.Type_Info** %1911
	%1915 = getelementptr inbounds %..string, %..string* %1892, i64 2
	store %..string {i8* getelementptr inbounds ([12 x i8], [12 x i8]* @str$21c, i64 0, i32 0), i64 11}, %..string* %1915
	store i64 16, i64* %1912
	store i8 0, i8* %1913
	%1916 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 19
	%1917 = bitcast %runtime.Type_Info* %1916 to %runtime.Type_Info*
	%1918 = getelementptr inbounds %runtime.Type_Info*, %runtime.Type_Info** %1891, i64 3
	%1919 = getelementptr inbounds i64, i64* %1893, i64 3
	%1920 = getelementptr inbounds i8, i8* %1894, i64 3
	%1921 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 19
	store %runtime.Type_Info* %1921, %runtime.Type_Info** %1918
	%1922 = getelementptr inbounds %..string, %..string* %1892, i64 3
	store %..string {i8* getelementptr inbounds ([10 x i8], [10 x i8]* @str$21d, i64 0, i32 0), i64 9}, %..string* %1922
	store i64 24, i64* %1919
	store i8 0, i8* %1920
	%1923 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %1887, i64 0, i32 0
	%1924 = getelementptr inbounds {%runtime.Type_Info**, i64}, {%runtime.Type_Info**, i64}* %1923, i64 0, i32 0
	store %runtime.Type_Info** %1891, %runtime.Type_Info*** %1924
	%1925 = getelementptr inbounds {%runtime.Type_Info**, i64}, {%runtime.Type_Info**, i64}* %1923, i64 0, i32 1
	store i64 4, i64* %1925
	%1926 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %1887, i64 0, i32 1
	%1927 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %1926, i64 0, i32 0
	store %..string* %1892, %..string** %1927
	%1928 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %1926, i64 0, i32 1
	store i64 4, i64* %1928
	%1929 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %1887, i64 0, i32 2
	%1930 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %1929, i64 0, i32 0
	store i64* %1893, i64** %1930
	%1931 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %1929, i64 0, i32 1
	store i64 4, i64* %1931
	%1932 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %1887, i64 0, i32 3
	%1933 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %1932, i64 0, i32 0
	store i8* %1894, i8** %1933
	%1934 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %1932, i64 0, i32 1
	store i64 4, i64* %1934
	%1935 = load %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %1887, align 8
	%1936 = bitcast {[0 x i64], [72 x i8], i64}* %1883 to %runtime.Type_Info_Struct*
	store %runtime.Type_Info_Struct %1935, %runtime.Type_Info_Struct* %1936
	%1937 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %1883, i64 0, i32 2 ; UnionTagPtr
	store i64 16, i64* %1937
	%1938 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 85
	%1939 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1938, i64 0, i32 3
	%1940 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1938, i64 0, i32 0
	store i64 8, i64* %1940
	%1941 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1938, i64 0, i32 1
	store i64 8, i64* %1941
	%1942 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1938, i64 0, i32 2
	store %..typeid 216172782113783893, %..typeid* %1942
	; Type_Info_Basic
	%1943 = bitcast {[0 x i64], [72 x i8], i64}* %1939 to %runtime.Type_Info_Float*
	%1944 = load %runtime.Type_Info_Float, %runtime.Type_Info_Float* %1943, align 1
	%1945 = bitcast {[0 x i64], [72 x i8], i64}* %1939 to %runtime.Type_Info_Float*
	store %runtime.Type_Info_Float %1944, %runtime.Type_Info_Float* %1945
	%1946 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %1939, i64 0, i32 2 ; UnionTagPtr
	store i64 4, i64* %1946
	%1947 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 86
	%1948 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1947, i64 0, i32 3
	%1949 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1947, i64 0, i32 0
	store i64 16, i64* %1949
	%1950 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1947, i64 0, i32 1
	store i64 8, i64* %1950
	%1951 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1947, i64 0, i32 2
	store %..typeid 3386706919782613078, %..typeid* %1951
	; Type_Info_Named
	%1952 = bitcast {[0 x i64], [72 x i8], i64}* %1948 to %runtime.Type_Info_Named*
	%1953 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 82
	%1954 = bitcast %runtime.Type_Info* %1953 to %runtime.Type_Info*
	%1955 = getelementptr inbounds %runtime.Type_Info_Named, %runtime.Type_Info_Named* %1952, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([13 x i8], [13 x i8]* @str$21e, i64 0, i32 0), i64 12}, %..string* %1955
	%1956 = getelementptr inbounds %runtime.Type_Info_Named, %runtime.Type_Info_Named* %1952, i64 0, i32 1
	store %runtime.Type_Info* %1954, %runtime.Type_Info** %1956
	%1957 = load %runtime.Type_Info_Named, %runtime.Type_Info_Named* %1952, align 8
	%1958 = bitcast {[0 x i64], [72 x i8], i64}* %1948 to %runtime.Type_Info_Named*
	store %runtime.Type_Info_Named %1957, %runtime.Type_Info_Named* %1958
	%1959 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %1948, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %1959
	%1960 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 87
	%1961 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1960, i64 0, i32 3
	%1962 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1960, i64 0, i32 0
	store i64 4, i64* %1962
	%1963 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1960, i64 0, i32 1
	store i64 4, i64* %1963
	%1964 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1960, i64 0, i32 2
	store %..typeid 3386706919782613079, %..typeid* %1964
	; Type_Info_Named
	%1965 = bitcast {[0 x i64], [72 x i8], i64}* %1961 to %runtime.Type_Info_Named*
	%1966 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 88
	%1967 = bitcast %runtime.Type_Info* %1966 to %runtime.Type_Info*
	%1968 = getelementptr inbounds %runtime.Type_Info_Named, %runtime.Type_Info_Named* %1965, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([13 x i8], [13 x i8]* @str$21f, i64 0, i32 0), i64 12}, %..string* %1968
	%1969 = getelementptr inbounds %runtime.Type_Info_Named, %runtime.Type_Info_Named* %1965, i64 0, i32 1
	store %runtime.Type_Info* %1967, %runtime.Type_Info** %1969
	%1970 = load %runtime.Type_Info_Named, %runtime.Type_Info_Named* %1965, align 8
	%1971 = bitcast {[0 x i64], [72 x i8], i64}* %1961 to %runtime.Type_Info_Named*
	store %runtime.Type_Info_Named %1970, %runtime.Type_Info_Named* %1971
	%1972 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %1961, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %1972
	%1973 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 88
	%1974 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1973, i64 0, i32 3
	%1975 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1973, i64 0, i32 0
	store i64 4, i64* %1975
	%1976 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1973, i64 0, i32 1
	store i64 4, i64* %1976
	%1977 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1973, i64 0, i32 2
	store %..typeid 1080863910568919128, %..typeid* %1977
	; Type_Info_Struct
	%1978 = bitcast {[0 x i64], [72 x i8], i64}* %1974 to %runtime.Type_Info_Struct*
	%1979 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %1978, i64 0, i32 4
	store i8 0, i8* %1979
	%1980 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %1978, i64 0, i32 5
	store i8 0, i8* %1980
	%1981 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %1978, i64 0, i32 6
	store i8 0, i8* %1981
	%1982 = getelementptr inbounds [91 x %runtime.Type_Info*], [91 x %runtime.Type_Info*]* @__$type_info_types_data, i64 0, i32 90
	%1983 = getelementptr inbounds [91 x %..string], [91 x %..string]* @__$type_info_names_data, i64 0, i32 52
	%1984 = getelementptr inbounds [91 x i64], [91 x i64]* @__$type_info_offsets_data, i64 0, i32 52
	%1985 = getelementptr inbounds [91 x i8], [91 x i8]* @__$type_info_usings_data, i64 0, i32 52
	%1986 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 62
	%1987 = bitcast %runtime.Type_Info* %1986 to %runtime.Type_Info*
	%1988 = getelementptr inbounds %runtime.Type_Info*, %runtime.Type_Info** %1982, i64 0
	%1989 = getelementptr inbounds i64, i64* %1984, i64 0
	%1990 = getelementptr inbounds i8, i8* %1985, i64 0
	%1991 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 62
	store %runtime.Type_Info* %1991, %runtime.Type_Info** %1988
	%1992 = getelementptr inbounds %..string, %..string* %1983, i64 0
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str$220, i64 0, i32 0), i64 5}, %..string* %1992
	store i64 0, i64* %1989
	store i8 0, i8* %1990
	%1993 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %1978, i64 0, i32 0
	%1994 = getelementptr inbounds {%runtime.Type_Info**, i64}, {%runtime.Type_Info**, i64}* %1993, i64 0, i32 0
	store %runtime.Type_Info** %1982, %runtime.Type_Info*** %1994
	%1995 = getelementptr inbounds {%runtime.Type_Info**, i64}, {%runtime.Type_Info**, i64}* %1993, i64 0, i32 1
	store i64 1, i64* %1995
	%1996 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %1978, i64 0, i32 1
	%1997 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %1996, i64 0, i32 0
	store %..string* %1983, %..string** %1997
	%1998 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %1996, i64 0, i32 1
	store i64 1, i64* %1998
	%1999 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %1978, i64 0, i32 2
	%2000 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %1999, i64 0, i32 0
	store i64* %1984, i64** %2000
	%2001 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %1999, i64 0, i32 1
	store i64 1, i64* %2001
	%2002 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %1978, i64 0, i32 3
	%2003 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %2002, i64 0, i32 0
	store i8* %1985, i8** %2003
	%2004 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %2002, i64 0, i32 1
	store i64 1, i64* %2004
	%2005 = load %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %1978, align 8
	%2006 = bitcast {[0 x i64], [72 x i8], i64}* %1974 to %runtime.Type_Info_Struct*
	store %runtime.Type_Info_Struct %2005, %runtime.Type_Info_Struct* %2006
	%2007 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %1974, i64 0, i32 2 ; UnionTagPtr
	store i64 16, i64* %2007
	%2008 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 91
	%2009 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %2008, i64 0, i32 3
	%2010 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %2008, i64 0, i32 0
	store i64 16, i64* %2010
	%2011 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %2008, i64 0, i32 1
	store i64 8, i64* %2011
	%2012 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %2008, i64 0, i32 2
	store %..typeid 936748722493063259, %..typeid* %2012
	; Type_Info_Slice
	%2013 = bitcast {[0 x i64], [72 x i8], i64}* %2009 to %runtime.Type_Info_Slice*
	%2014 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 89
	%2015 = bitcast %runtime.Type_Info* %2014 to %runtime.Type_Info*
	%2016 = getelementptr inbounds %runtime.Type_Info_Slice, %runtime.Type_Info_Slice* %2013, i64 0, i32 0
	store %runtime.Type_Info* %2015, %runtime.Type_Info** %2016
	%2017 = getelementptr inbounds %runtime.Type_Info_Slice, %runtime.Type_Info_Slice* %2013, i64 0, i32 1
	store i64 16, i64* %2017
	%2018 = load %runtime.Type_Info_Slice, %runtime.Type_Info_Slice* %2013, align 8
	%2019 = bitcast {[0 x i64], [72 x i8], i64}* %2009 to %runtime.Type_Info_Slice*
	store %runtime.Type_Info_Slice %2018, %runtime.Type_Info_Slice* %2019
	%2020 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %2009, i64 0, i32 2 ; UnionTagPtr
	store i64 14, i64* %2020
	%2021 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 92
	%2022 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %2021, i64 0, i32 3
	%2023 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %2021, i64 0, i32 0
	store i64 8, i64* %2023
	%2024 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %2021, i64 0, i32 1
	store i64 8, i64* %2024
	%2025 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %2021, i64 0, i32 2
	store %..typeid 648518346341351516, %..typeid* %2025
	; Type_Info_Pointer
	%2026 = bitcast {[0 x i64], [72 x i8], i64}* %2022 to %runtime.Type_Info_Pointer*
	%2027 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 89
	%2028 = bitcast %runtime.Type_Info* %2027 to %runtime.Type_Info*
	%2029 = getelementptr inbounds %runtime.Type_Info_Pointer, %runtime.Type_Info_Pointer* %2026, i64 0, i32 0
	store %runtime.Type_Info* %2028, %runtime.Type_Info** %2029
	%2030 = load %runtime.Type_Info_Pointer, %runtime.Type_Info_Pointer* %2026, align 8
	%2031 = bitcast {[0 x i64], [72 x i8], i64}* %2022 to %runtime.Type_Info_Pointer*
	store %runtime.Type_Info_Pointer %2030, %runtime.Type_Info_Pointer* %2031
	%2032 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %2022, i64 0, i32 2 ; UnionTagPtr
	store i64 10, i64* %2032
	%2033 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 95
	%2034 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %2033, i64 0, i32 3
	%2035 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %2033, i64 0, i32 0
	store i64 1, i64* %2035
	%2036 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %2033, i64 0, i32 1
	store i64 1, i64* %2036
	%2037 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %2033, i64 0, i32 2
	store %..typeid 432345564227567711, %..typeid* %2037
	; Type_Info_Basic
	%2038 = bitcast {[0 x i64], [72 x i8], i64}* %2034 to %runtime.Type_Info_Boolean*
	%2039 = load %runtime.Type_Info_Boolean, %runtime.Type_Info_Boolean* %2038, align 1
	%2040 = bitcast {[0 x i64], [72 x i8], i64}* %2034 to %runtime.Type_Info_Boolean*
	store %runtime.Type_Info_Boolean %2039, %runtime.Type_Info_Boolean* %2040
	%2041 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %2034, i64 0, i32 2 ; UnionTagPtr
	store i64 7, i64* %2041
	%2042 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 96
	%2043 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %2042, i64 0, i32 3
	%2044 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %2042, i64 0, i32 0
	store i64 2, i64* %2044
	%2045 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %2042, i64 0, i32 1
	store i64 2, i64* %2045
	%2046 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %2042, i64 0, i32 2
	store %..typeid 432345564227567712, %..typeid* %2046
	; Type_Info_Basic
	%2047 = bitcast {[0 x i64], [72 x i8], i64}* %2043 to %runtime.Type_Info_Boolean*
	%2048 = load %runtime.Type_Info_Boolean, %runtime.Type_Info_Boolean* %2047, align 1
	%2049 = bitcast {[0 x i64], [72 x i8], i64}* %2043 to %runtime.Type_Info_Boolean*
	store %runtime.Type_Info_Boolean %2048, %runtime.Type_Info_Boolean* %2049
	%2050 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %2043, i64 0, i32 2 ; UnionTagPtr
	store i64 7, i64* %2050
	%2051 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 97
	%2052 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %2051, i64 0, i32 3
	%2053 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %2051, i64 0, i32 0
	store i64 4, i64* %2053
	%2054 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %2051, i64 0, i32 1
	store i64 4, i64* %2054
	%2055 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %2051, i64 0, i32 2
	store %..typeid 432345564227567713, %..typeid* %2055
	; Type_Info_Basic
	%2056 = bitcast {[0 x i64], [72 x i8], i64}* %2052 to %runtime.Type_Info_Boolean*
	%2057 = load %runtime.Type_Info_Boolean, %runtime.Type_Info_Boolean* %2056, align 1
	%2058 = bitcast {[0 x i64], [72 x i8], i64}* %2052 to %runtime.Type_Info_Boolean*
	store %runtime.Type_Info_Boolean %2057, %runtime.Type_Info_Boolean* %2058
	%2059 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %2052, i64 0, i32 2 ; UnionTagPtr
	store i64 7, i64* %2059
	%2060 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 98
	%2061 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %2060, i64 0, i32 3
	%2062 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %2060, i64 0, i32 0
	store i64 8, i64* %2062
	%2063 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %2060, i64 0, i32 1
	store i64 8, i64* %2063
	%2064 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %2060, i64 0, i32 2
	store %..typeid 432345564227567714, %..typeid* %2064
	; Type_Info_Basic
	%2065 = bitcast {[0 x i64], [72 x i8], i64}* %2061 to %runtime.Type_Info_Boolean*
	%2066 = load %runtime.Type_Info_Boolean, %runtime.Type_Info_Boolean* %2065, align 1
	%2067 = bitcast {[0 x i64], [72 x i8], i64}* %2061 to %runtime.Type_Info_Boolean*
	store %runtime.Type_Info_Boolean %2066, %runtime.Type_Info_Boolean* %2067
	%2068 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %2061, i64 0, i32 2 ; UnionTagPtr
	store i64 7, i64* %2068
	%2069 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 99
	%2070 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %2069, i64 0, i32 3
	%2071 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %2069, i64 0, i32 0
	store i64 4, i64* %2071
	%2072 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %2069, i64 0, i32 1
	store i64 4, i64* %2072
	%2073 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %2069, i64 0, i32 2
	store %..typeid 216172782113783907, %..typeid* %2073
	; Type_Info_Basic
	%2074 = bitcast {[0 x i64], [72 x i8], i64}* %2070 to %runtime.Type_Info_Float*
	%2075 = load %runtime.Type_Info_Float, %runtime.Type_Info_Float* %2074, align 1
	%2076 = bitcast {[0 x i64], [72 x i8], i64}* %2070 to %runtime.Type_Info_Float*
	store %runtime.Type_Info_Float %2075, %runtime.Type_Info_Float* %2076
	%2077 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %2070, i64 0, i32 2 ; UnionTagPtr
	store i64 4, i64* %2077
	%2078 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 100
	%2079 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %2078, i64 0, i32 3
	%2080 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %2078, i64 0, i32 0
	store i64 8, i64* %2080
	%2081 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %2078, i64 0, i32 1
	store i64 4, i64* %2081
	%2082 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %2078, i64 0, i32 2
	store %..typeid 288230376151711844, %..typeid* %2082
	; Type_Info_Basic
	%2083 = bitcast {[0 x i64], [72 x i8], i64}* %2079 to %runtime.Type_Info_Complex*
	%2084 = load %runtime.Type_Info_Complex, %runtime.Type_Info_Complex* %2083, align 1
	%2085 = bitcast {[0 x i64], [72 x i8], i64}* %2079 to %runtime.Type_Info_Complex*
	store %runtime.Type_Info_Complex %2084, %runtime.Type_Info_Complex* %2085
	%2086 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %2079, i64 0, i32 2 ; UnionTagPtr
	store i64 5, i64* %2086
	%2087 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 101
	%2088 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %2087, i64 0, i32 3
	%2089 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %2087, i64 0, i32 0
	store i64 16, i64* %2089
	%2090 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %2087, i64 0, i32 1
	store i64 8, i64* %2090
	%2091 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %2087, i64 0, i32 2
	store %..typeid 288230376151711845, %..typeid* %2091
	; Type_Info_Basic
	%2092 = bitcast {[0 x i64], [72 x i8], i64}* %2088 to %runtime.Type_Info_Complex*
	%2093 = load %runtime.Type_Info_Complex, %runtime.Type_Info_Complex* %2092, align 1
	%2094 = bitcast {[0 x i64], [72 x i8], i64}* %2088 to %runtime.Type_Info_Complex*
	store %runtime.Type_Info_Complex %2093, %runtime.Type_Info_Complex* %2094
	%2095 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %2088, i64 0, i32 2 ; UnionTagPtr
	store i64 5, i64* %2095
	%2096 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 102
	%2097 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %2096, i64 0, i32 3
	%2098 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %2096, i64 0, i32 0
	store i64 8, i64* %2098
	%2099 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %2096, i64 0, i32 1
	store i64 8, i64* %2099
	%2100 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %2096, i64 0, i32 2
	store %..typeid 4971973988617027686, %..typeid* %2100
	; Type_Info_Basic
	%2101 = bitcast {[0 x i64], [72 x i8], i64}* %2097 to %runtime.Type_Info_String*
	%2102 = getelementptr inbounds %runtime.Type_Info_String, %runtime.Type_Info_String* %2101, i64 0, i32 0
	store i8 1, i8* %2102
	%2103 = load %runtime.Type_Info_String, %runtime.Type_Info_String* %2101, align 1
	%2104 = bitcast {[0 x i64], [72 x i8], i64}* %2097 to %runtime.Type_Info_String*
	store %runtime.Type_Info_String %2103, %runtime.Type_Info_String* %2104
	%2105 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %2097, i64 0, i32 2 ; UnionTagPtr
	store i64 6, i64* %2105
	%2106 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 103
	%2107 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %2106, i64 0, i32 3
	%2108 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %2106, i64 0, i32 0
	store i64 2, i64* %2108
	%2109 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %2106, i64 0, i32 1
	store i64 2, i64* %2109
	%2110 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %2106, i64 0, i32 2
	store %..typeid 4683743612465315943, %..typeid* %2110
	; Type_Info_Basic
	%2111 = bitcast {[0 x i64], [72 x i8], i64}* %2107 to %runtime.Type_Info_Integer*
	%2112 = getelementptr inbounds %runtime.Type_Info_Integer, %runtime.Type_Info_Integer* %2111, i64 0, i32 0
	store i8 1, i8* %2112
	%2113 = getelementptr inbounds %runtime.Type_Info_Integer, %runtime.Type_Info_Integer* %2111, i64 0, i32 1
	store i8 1, i8* %2113
	%2114 = load %runtime.Type_Info_Integer, %runtime.Type_Info_Integer* %2111, align 1
	%2115 = bitcast {[0 x i64], [72 x i8], i64}* %2107 to %runtime.Type_Info_Integer*
	store %runtime.Type_Info_Integer %2114, %runtime.Type_Info_Integer* %2115
	%2116 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %2107, i64 0, i32 2 ; UnionTagPtr
	store i64 2, i64* %2116
	%2117 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 104
	%2118 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %2117, i64 0, i32 3
	%2119 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %2117, i64 0, i32 0
	store i64 2, i64* %2119
	%2120 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %2117, i64 0, i32 1
	store i64 2, i64* %2120
	%2121 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %2117, i64 0, i32 2
	store %..typeid 72057594037928040, %..typeid* %2121
	; Type_Info_Basic
	%2122 = bitcast {[0 x i64], [72 x i8], i64}* %2118 to %runtime.Type_Info_Integer*
	%2123 = getelementptr inbounds %runtime.Type_Info_Integer, %runtime.Type_Info_Integer* %2122, i64 0, i32 0
	store i8 0, i8* %2123
	%2124 = getelementptr inbounds %runtime.Type_Info_Integer, %runtime.Type_Info_Integer* %2122, i64 0, i32 1
	store i8 1, i8* %2124
	%2125 = load %runtime.Type_Info_Integer, %runtime.Type_Info_Integer* %2122, align 1
	%2126 = bitcast {[0 x i64], [72 x i8], i64}* %2118 to %runtime.Type_Info_Integer*
	store %runtime.Type_Info_Integer %2125, %runtime.Type_Info_Integer* %2126
	%2127 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %2118, i64 0, i32 2 ; UnionTagPtr
	store i64 2, i64* %2127
	%2128 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 105
	%2129 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %2128, i64 0, i32 3
	%2130 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %2128, i64 0, i32 0
	store i64 4, i64* %2130
	%2131 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %2128, i64 0, i32 1
	store i64 4, i64* %2131
	%2132 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %2128, i64 0, i32 2
	store %..typeid 4683743612465315945, %..typeid* %2132
	; Type_Info_Basic
	%2133 = bitcast {[0 x i64], [72 x i8], i64}* %2129 to %runtime.Type_Info_Integer*
	%2134 = getelementptr inbounds %runtime.Type_Info_Integer, %runtime.Type_Info_Integer* %2133, i64 0, i32 0
	store i8 1, i8* %2134
	%2135 = getelementptr inbounds %runtime.Type_Info_Integer, %runtime.Type_Info_Integer* %2133, i64 0, i32 1
	store i8 1, i8* %2135
	%2136 = load %runtime.Type_Info_Integer, %runtime.Type_Info_Integer* %2133, align 1
	%2137 = bitcast {[0 x i64], [72 x i8], i64}* %2129 to %runtime.Type_Info_Integer*
	store %runtime.Type_Info_Integer %2136, %runtime.Type_Info_Integer* %2137
	%2138 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %2129, i64 0, i32 2 ; UnionTagPtr
	store i64 2, i64* %2138
	%2139 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 106
	%2140 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %2139, i64 0, i32 3
	%2141 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %2139, i64 0, i32 0
	store i64 4, i64* %2141
	%2142 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %2139, i64 0, i32 1
	store i64 4, i64* %2142
	%2143 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %2139, i64 0, i32 2
	store %..typeid 72057594037928042, %..typeid* %2143
	; Type_Info_Basic
	%2144 = bitcast {[0 x i64], [72 x i8], i64}* %2140 to %runtime.Type_Info_Integer*
	%2145 = getelementptr inbounds %runtime.Type_Info_Integer, %runtime.Type_Info_Integer* %2144, i64 0, i32 0
	store i8 0, i8* %2145
	%2146 = getelementptr inbounds %runtime.Type_Info_Integer, %runtime.Type_Info_Integer* %2144, i64 0, i32 1
	store i8 1, i8* %2146
	%2147 = load %runtime.Type_Info_Integer, %runtime.Type_Info_Integer* %2144, align 1
	%2148 = bitcast {[0 x i64], [72 x i8], i64}* %2140 to %runtime.Type_Info_Integer*
	store %runtime.Type_Info_Integer %2147, %runtime.Type_Info_Integer* %2148
	%2149 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %2140, i64 0, i32 2 ; UnionTagPtr
	store i64 2, i64* %2149
	%2150 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 107
	%2151 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %2150, i64 0, i32 3
	%2152 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %2150, i64 0, i32 0
	store i64 8, i64* %2152
	%2153 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %2150, i64 0, i32 1
	store i64 8, i64* %2153
	%2154 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %2150, i64 0, i32 2
	store %..typeid 4683743612465315947, %..typeid* %2154
	; Type_Info_Basic
	%2155 = bitcast {[0 x i64], [72 x i8], i64}* %2151 to %runtime.Type_Info_Integer*
	%2156 = getelementptr inbounds %runtime.Type_Info_Integer, %runtime.Type_Info_Integer* %2155, i64 0, i32 0
	store i8 1, i8* %2156
	%2157 = getelementptr inbounds %runtime.Type_Info_Integer, %runtime.Type_Info_Integer* %2155, i64 0, i32 1
	store i8 1, i8* %2157
	%2158 = load %runtime.Type_Info_Integer, %runtime.Type_Info_Integer* %2155, align 1
	%2159 = bitcast {[0 x i64], [72 x i8], i64}* %2151 to %runtime.Type_Info_Integer*
	store %runtime.Type_Info_Integer %2158, %runtime.Type_Info_Integer* %2159
	%2160 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %2151, i64 0, i32 2 ; UnionTagPtr
	store i64 2, i64* %2160
	%2161 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 108
	%2162 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %2161, i64 0, i32 3
	%2163 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %2161, i64 0, i32 0
	store i64 8, i64* %2163
	%2164 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %2161, i64 0, i32 1
	store i64 8, i64* %2164
	%2165 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %2161, i64 0, i32 2
	store %..typeid 72057594037928044, %..typeid* %2165
	; Type_Info_Basic
	%2166 = bitcast {[0 x i64], [72 x i8], i64}* %2162 to %runtime.Type_Info_Integer*
	%2167 = getelementptr inbounds %runtime.Type_Info_Integer, %runtime.Type_Info_Integer* %2166, i64 0, i32 0
	store i8 0, i8* %2167
	%2168 = getelementptr inbounds %runtime.Type_Info_Integer, %runtime.Type_Info_Integer* %2166, i64 0, i32 1
	store i8 1, i8* %2168
	%2169 = load %runtime.Type_Info_Integer, %runtime.Type_Info_Integer* %2166, align 1
	%2170 = bitcast {[0 x i64], [72 x i8], i64}* %2162 to %runtime.Type_Info_Integer*
	store %runtime.Type_Info_Integer %2169, %runtime.Type_Info_Integer* %2170
	%2171 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %2162, i64 0, i32 2 ; UnionTagPtr
	store i64 2, i64* %2171
	%2172 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 109
	%2173 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %2172, i64 0, i32 3
	%2174 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %2172, i64 0, i32 0
	store i64 2, i64* %2174
	%2175 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %2172, i64 0, i32 1
	store i64 2, i64* %2175
	%2176 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %2172, i64 0, i32 2
	store %..typeid 4683743612465315949, %..typeid* %2176
	; Type_Info_Basic
	%2177 = bitcast {[0 x i64], [72 x i8], i64}* %2173 to %runtime.Type_Info_Integer*
	%2178 = getelementptr inbounds %runtime.Type_Info_Integer, %runtime.Type_Info_Integer* %2177, i64 0, i32 0
	store i8 1, i8* %2178
	%2179 = getelementptr inbounds %runtime.Type_Info_Integer, %runtime.Type_Info_Integer* %2177, i64 0, i32 1
	store i8 2, i8* %2179
	%2180 = load %runtime.Type_Info_Integer, %runtime.Type_Info_Integer* %2177, align 1
	%2181 = bitcast {[0 x i64], [72 x i8], i64}* %2173 to %runtime.Type_Info_Integer*
	store %runtime.Type_Info_Integer %2180, %runtime.Type_Info_Integer* %2181
	%2182 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %2173, i64 0, i32 2 ; UnionTagPtr
	store i64 2, i64* %2182
	%2183 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 110
	%2184 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %2183, i64 0, i32 3
	%2185 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %2183, i64 0, i32 0
	store i64 2, i64* %2185
	%2186 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %2183, i64 0, i32 1
	store i64 2, i64* %2186
	%2187 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %2183, i64 0, i32 2
	store %..typeid 72057594037928046, %..typeid* %2187
	; Type_Info_Basic
	%2188 = bitcast {[0 x i64], [72 x i8], i64}* %2184 to %runtime.Type_Info_Integer*
	%2189 = getelementptr inbounds %runtime.Type_Info_Integer, %runtime.Type_Info_Integer* %2188, i64 0, i32 0
	store i8 0, i8* %2189
	%2190 = getelementptr inbounds %runtime.Type_Info_Integer, %runtime.Type_Info_Integer* %2188, i64 0, i32 1
	store i8 2, i8* %2190
	%2191 = load %runtime.Type_Info_Integer, %runtime.Type_Info_Integer* %2188, align 1
	%2192 = bitcast {[0 x i64], [72 x i8], i64}* %2184 to %runtime.Type_Info_Integer*
	store %runtime.Type_Info_Integer %2191, %runtime.Type_Info_Integer* %2192
	%2193 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %2184, i64 0, i32 2 ; UnionTagPtr
	store i64 2, i64* %2193
	%2194 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 111
	%2195 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %2194, i64 0, i32 3
	%2196 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %2194, i64 0, i32 0
	store i64 4, i64* %2196
	%2197 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %2194, i64 0, i32 1
	store i64 4, i64* %2197
	%2198 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %2194, i64 0, i32 2
	store %..typeid 4683743612465315951, %..typeid* %2198
	; Type_Info_Basic
	%2199 = bitcast {[0 x i64], [72 x i8], i64}* %2195 to %runtime.Type_Info_Integer*
	%2200 = getelementptr inbounds %runtime.Type_Info_Integer, %runtime.Type_Info_Integer* %2199, i64 0, i32 0
	store i8 1, i8* %2200
	%2201 = getelementptr inbounds %runtime.Type_Info_Integer, %runtime.Type_Info_Integer* %2199, i64 0, i32 1
	store i8 2, i8* %2201
	%2202 = load %runtime.Type_Info_Integer, %runtime.Type_Info_Integer* %2199, align 1
	%2203 = bitcast {[0 x i64], [72 x i8], i64}* %2195 to %runtime.Type_Info_Integer*
	store %runtime.Type_Info_Integer %2202, %runtime.Type_Info_Integer* %2203
	%2204 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %2195, i64 0, i32 2 ; UnionTagPtr
	store i64 2, i64* %2204
	%2205 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 112
	%2206 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %2205, i64 0, i32 3
	%2207 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %2205, i64 0, i32 0
	store i64 4, i64* %2207
	%2208 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %2205, i64 0, i32 1
	store i64 4, i64* %2208
	%2209 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %2205, i64 0, i32 2
	store %..typeid 72057594037928048, %..typeid* %2209
	; Type_Info_Basic
	%2210 = bitcast {[0 x i64], [72 x i8], i64}* %2206 to %runtime.Type_Info_Integer*
	%2211 = getelementptr inbounds %runtime.Type_Info_Integer, %runtime.Type_Info_Integer* %2210, i64 0, i32 0
	store i8 0, i8* %2211
	%2212 = getelementptr inbounds %runtime.Type_Info_Integer, %runtime.Type_Info_Integer* %2210, i64 0, i32 1
	store i8 2, i8* %2212
	%2213 = load %runtime.Type_Info_Integer, %runtime.Type_Info_Integer* %2210, align 1
	%2214 = bitcast {[0 x i64], [72 x i8], i64}* %2206 to %runtime.Type_Info_Integer*
	store %runtime.Type_Info_Integer %2213, %runtime.Type_Info_Integer* %2214
	%2215 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %2206, i64 0, i32 2 ; UnionTagPtr
	store i64 2, i64* %2215
	%2216 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 113
	%2217 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %2216, i64 0, i32 3
	%2218 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %2216, i64 0, i32 0
	store i64 8, i64* %2218
	%2219 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %2216, i64 0, i32 1
	store i64 8, i64* %2219
	%2220 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %2216, i64 0, i32 2
	store %..typeid 4683743612465315953, %..typeid* %2220
	; Type_Info_Basic
	%2221 = bitcast {[0 x i64], [72 x i8], i64}* %2217 to %runtime.Type_Info_Integer*
	%2222 = getelementptr inbounds %runtime.Type_Info_Integer, %runtime.Type_Info_Integer* %2221, i64 0, i32 0
	store i8 1, i8* %2222
	%2223 = getelementptr inbounds %runtime.Type_Info_Integer, %runtime.Type_Info_Integer* %2221, i64 0, i32 1
	store i8 2, i8* %2223
	%2224 = load %runtime.Type_Info_Integer, %runtime.Type_Info_Integer* %2221, align 1
	%2225 = bitcast {[0 x i64], [72 x i8], i64}* %2217 to %runtime.Type_Info_Integer*
	store %runtime.Type_Info_Integer %2224, %runtime.Type_Info_Integer* %2225
	%2226 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %2217, i64 0, i32 2 ; UnionTagPtr
	store i64 2, i64* %2226
	%2227 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 114
	%2228 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %2227, i64 0, i32 3
	%2229 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %2227, i64 0, i32 0
	store i64 8, i64* %2229
	%2230 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %2227, i64 0, i32 1
	store i64 8, i64* %2230
	%2231 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %2227, i64 0, i32 2
	store %..typeid 72057594037928050, %..typeid* %2231
	; Type_Info_Basic
	%2232 = bitcast {[0 x i64], [72 x i8], i64}* %2228 to %runtime.Type_Info_Integer*
	%2233 = getelementptr inbounds %runtime.Type_Info_Integer, %runtime.Type_Info_Integer* %2232, i64 0, i32 0
	store i8 0, i8* %2233
	%2234 = getelementptr inbounds %runtime.Type_Info_Integer, %runtime.Type_Info_Integer* %2232, i64 0, i32 1
	store i8 2, i8* %2234
	%2235 = load %runtime.Type_Info_Integer, %runtime.Type_Info_Integer* %2232, align 1
	%2236 = bitcast {[0 x i64], [72 x i8], i64}* %2228 to %runtime.Type_Info_Integer*
	store %runtime.Type_Info_Integer %2235, %runtime.Type_Info_Integer* %2236
	%2237 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %2228, i64 0, i32 2 ; UnionTagPtr
	store i64 2, i64* %2237
	%2238 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 93
	%2239 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %2238, i64 0, i32 3
	%2240 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %2238, i64 0, i32 0
	store i64 8, i64* %2240
	%2241 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %2238, i64 0, i32 1
	store i64 8, i64* %2241
	%2242 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %2238, i64 0, i32 2
	store %..typeid 3530822107858468957, %..typeid* %2242
	; Type_Info_Named
	%2243 = bitcast {[0 x i64], [72 x i8], i64}* %2239 to %runtime.Type_Info_Named*
	%2244 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 94
	%2245 = bitcast %runtime.Type_Info* %2244 to %runtime.Type_Info*
	%2246 = getelementptr inbounds %runtime.Type_Info_Named, %runtime.Type_Info_Named* %2243, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @str$221, i64 0, i32 0), i64 8}, %..string* %2246
	%2247 = getelementptr inbounds %runtime.Type_Info_Named, %runtime.Type_Info_Named* %2243, i64 0, i32 1
	store %runtime.Type_Info* %2245, %runtime.Type_Info** %2247
	%2248 = load %runtime.Type_Info_Named, %runtime.Type_Info_Named* %2243, align 8
	%2249 = bitcast {[0 x i64], [72 x i8], i64}* %2239 to %runtime.Type_Info_Named*
	store %runtime.Type_Info_Named %2248, %runtime.Type_Info_Named* %2249
	%2250 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %2239, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %2250
	%2251 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 94
	%2252 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %2251, i64 0, i32 3
	%2253 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %2251, i64 0, i32 0
	store i64 8, i64* %2253
	%2254 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %2251, i64 0, i32 1
	store i64 8, i64* %2254
	%2255 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %2251, i64 0, i32 2
	store %..typeid 1224979098644775006, %..typeid* %2255
	; Type_Info_Enum
	%2256 = bitcast {[0 x i64], [72 x i8], i64}* %2252 to %runtime.Type_Info_Enum*
	%2257 = getelementptr inbounds [115 x %runtime.Type_Info], [115 x %runtime.Type_Info]* @__$type_info_data, i64 0, i32 8
	%2258 = getelementptr inbounds %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %2256, i64 0, i32 0
	store %runtime.Type_Info* %2257, %runtime.Type_Info** %2258
	%2259 = getelementptr inbounds [3 x %..string], [3 x %..string]* @$enum_names-5e, i64 0, i32 0
	%2260 = getelementptr inbounds [3 x %runtime.Type_Info_Enum_Value], [3 x %runtime.Type_Info_Enum_Value]* @$enum_values-5e, i64 0, i32 0
	%2261 = bitcast %runtime.Type_Info_Enum_Value* %2260 to i64*
	store i64 0, i64* %2261
	%2262 = getelementptr inbounds %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %2260, i64 0, i32 2 ; UnionTagPtr
	store i64 6, i64* %2262
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str$222, i64 0, i32 0), i64 6}, %..string* %2259
	%2263 = getelementptr inbounds [3 x %..string], [3 x %..string]* @$enum_names-5e, i64 0, i32 1
	%2264 = getelementptr inbounds [3 x %runtime.Type_Info_Enum_Value], [3 x %runtime.Type_Info_Enum_Value]* @$enum_values-5e, i64 0, i32 1
	%2265 = bitcast %runtime.Type_Info_Enum_Value* %2264 to i64*
	store i64 1, i64* %2265
	%2266 = getelementptr inbounds %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %2264, i64 0, i32 2 ; UnionTagPtr
	store i64 6, i64* %2266
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str$223, i64 0, i32 0), i64 4}, %..string* %2263
	%2267 = getelementptr inbounds [3 x %..string], [3 x %..string]* @$enum_names-5e, i64 0, i32 2
	%2268 = getelementptr inbounds [3 x %runtime.Type_Info_Enum_Value], [3 x %runtime.Type_Info_Enum_Value]* @$enum_values-5e, i64 0, i32 2
	%2269 = bitcast %runtime.Type_Info_Enum_Value* %2268 to i64*
	store i64 2, i64* %2269
	%2270 = getelementptr inbounds %runtime.Type_Info_Enum_Value, %runtime.Type_Info_Enum_Value* %2268, i64 0, i32 2 ; UnionTagPtr
	store i64 6, i64* %2270
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str$224, i64 0, i32 0), i64 5}, %..string* %2267
	%2271 = getelementptr inbounds %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %2256, i64 0, i32 1
	%2272 = getelementptr inbounds [3 x %..string], [3 x %..string]* @$enum_names-5e, i64 0, i32 0
	%2273 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %2271, i64 0, i32 0
	store %..string* %2272, %..string** %2273
	%2274 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %2271, i64 0, i32 1
	store i64 3, i64* %2274
	%2275 = getelementptr inbounds %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %2256, i64 0, i32 2
	%2276 = getelementptr inbounds [3 x %runtime.Type_Info_Enum_Value], [3 x %runtime.Type_Info_Enum_Value]* @$enum_values-5e, i64 0, i32 0
	%2277 = getelementptr inbounds {%runtime.Type_Info_Enum_Value*, i64}, {%runtime.Type_Info_Enum_Value*, i64}* %2275, i64 0, i32 0
	store %runtime.Type_Info_Enum_Value* %2276, %runtime.Type_Info_Enum_Value** %2277
	%2278 = getelementptr inbounds {%runtime.Type_Info_Enum_Value*, i64}, {%runtime.Type_Info_Enum_Value*, i64}* %2275, i64 0, i32 1
	store i64 3, i64* %2278
	%2279 = load %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %2256, align 8
	%2280 = bitcast {[0 x i64], [72 x i8], i64}* %2252 to %runtime.Type_Info_Enum*
	store %runtime.Type_Info_Enum %2279, %runtime.Type_Info_Enum* %2280
	%2281 = getelementptr inbounds {[0 x i64], [72 x i8], i64}, {[0 x i64], [72 x i8], i64}* %2252, i64 0, i32 2 ; UnionTagPtr
	store i64 18, i64* %2281
	store [5 x %utf8.Accept_Range] [%utf8.Accept_Range {i8 128, i8 191}, %utf8.Accept_Range {i8 160, i8 191}, %utf8.Accept_Range {i8 128, i8 159}, %utf8.Accept_Range {i8 144, i8 191}, %utf8.Accept_Range {i8 128, i8 143}], [5 x %utf8.Accept_Range]* @utf8.accept_ranges
	store [256 x i8] [i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 19, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 35, i8 3, i8 3, i8 52, i8 4, i8 4, i8 4, i8 68, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241], [256 x i8]* @utf8.accept_sizes
	store %..string {i8* getelementptr inbounds ([18 x i8], [18 x i8]* @str$225, i64 0, i32 0), i64 17}, %..string* @fmt.__DIGITS_LOWER
	store %..string {i8* getelementptr inbounds ([18 x i8], [18 x i8]* @str$226, i64 0, i32 0), i64 17}, %..string* @fmt.__DIGITS_UPPER
	store %strconv.FloatInfo {i64 23, i64 8, i64 -127}, %strconv.FloatInfo* @strconv._f32_info
	store %strconv.FloatInfo {i64 52, i64 11, i64 -1023}, %strconv.FloatInfo* @strconv._f64_info
	store %..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @str$227, i64 0, i32 0), i64 36}, %..string* @strconv.digits
	%2282 = call i64 @os.get_std_handle(i64 -11, %runtime.Context* noalias nonnull nocapture inreg %0) noinline
	store i64 %2282, i64* @os.stdout
	%2283 = call i64 @os.get_std_handle(i64 -12, %runtime.Context* noalias nonnull nocapture inreg %0) noinline
	store i64 %2283, i64* @os.stderr
	ret void
}
@__$type_info_data = private global [115 x %runtime.Type_Info] zeroinitializer
@__$type_info_types_data = global [91 x %runtime.Type_Info*] zeroinitializer
@__$type_info_names_data = global [91 x %..string] zeroinitializer
@__$type_info_offsets_data = global [91 x i64] zeroinitializer
@__$type_info_usings_data = global [91 x i8] zeroinitializer
@ggv$0 = global %runtime.Context zeroinitializer
@runtime.type_table = global {%runtime.Type_Info*, i64} zeroinitializer
@runtime.args__ = global {i8**, i64} zeroinitializer
@runtime.global_scratch_allocator_data = global %mem.Scratch_Allocator zeroinitializer
@utf8.accept_ranges = global [5 x %utf8.Accept_Range] [%utf8.Accept_Range {i8 128, i8 191}, %utf8.Accept_Range {i8 160, i8 191}, %utf8.Accept_Range {i8 128, i8 159}, %utf8.Accept_Range {i8 144, i8 191}, %utf8.Accept_Range {i8 128, i8 143}]
@utf8.accept_sizes = global [256 x i8] [i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 19, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 35, i8 3, i8 3, i8 52, i8 4, i8 4, i8 4, i8 68, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241]
@fmt.__DIGITS_LOWER = global %..string {i8* getelementptr inbounds ([18 x i8], [18 x i8]* @str$228, i64 0, i32 0), i64 17}
@fmt.__DIGITS_UPPER = global %..string {i8* getelementptr inbounds ([18 x i8], [18 x i8]* @str$229, i64 0, i32 0), i64 17}
@strconv._f32_info = global %strconv.FloatInfo {i64 23, i64 8, i64 -127}
@strconv._f64_info = global %strconv.FloatInfo {i64 52, i64 11, i64 -1023}
@strconv.digits = global %..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @str$22a, i64 0, i32 0), i64 36}
@os.stdout = global i64 zeroinitializer
@os.stderr = global i64 zeroinitializer
@csba$0 = global [1 x i8] [i8 zeroinitializer]
@$enum_names-15 = private global [3 x %..string] zeroinitializer
@$enum_values-15 = private global [3 x %runtime.Type_Info_Enum_Value] zeroinitializer
@$enum_names-24 = private global [6 x %..string] zeroinitializer
@$enum_values-24 = private global [6 x %runtime.Type_Info_Enum_Value] zeroinitializer
@$enum_names-2 = private global [4 x %..string] zeroinitializer
@$enum_values-2 = private global [4 x %runtime.Type_Info_Enum_Value] zeroinitializer
@$enum_names-5e = private global [3 x %..string] zeroinitializer
@$enum_values-5e = private global [3 x %runtime.Type_Info_Enum_Value] zeroinitializer
@str$0 = private global [31 x i8] c"D\3A\5COdin\5Ccore\5Cruntime\5Ccore.odin\00"
@str$1 = private global [2 x i8] c"\20\00"
@str$2 = private global [3 x i8] c"\3A\20\00"
@str$3 = private global [18 x i8] c"Runtime\20assertion\00"
@str$4 = private global [6 x i8] c"Panic\00"
@str$5 = private global [11 x i8] c"0123456789\00"
@str$6 = private global [35 x i8] c"D\3A\5COdin\5Ccore\5Cruntime\5Cinternal.odin\00"
@str$7 = private global [35 x i8] c"D\3A\5COdin\5Ccore\5Cruntime\5Cinternal.odin\00"
@str$8 = private global [35 x i8] c"D\3A\5COdin\5Ccore\5Cruntime\5Cinternal.odin\00"
@str$9 = private global [35 x i8] c"D\3A\5COdin\5Ccore\5Cruntime\5Cinternal.odin\00"
@str$a = private global [35 x i8] c"D\3A\5COdin\5Ccore\5Cruntime\5Cinternal.odin\00"
@str$b = private global [11 x i8] c"0123456789\00"
@str$c = private global [35 x i8] c"D\3A\5COdin\5Ccore\5Cruntime\5Cinternal.odin\00"
@str$d = private global [35 x i8] c"D\3A\5COdin\5Ccore\5Cruntime\5Cinternal.odin\00"
@str$e = private global [35 x i8] c"D\3A\5COdin\5Ccore\5Cruntime\5Cinternal.odin\00"
@str$f = private global [35 x i8] c"D\3A\5COdin\5Ccore\5Cruntime\5Cinternal.odin\00"
@str$10 = private global [35 x i8] c"D\3A\5COdin\5Ccore\5Cruntime\5Cinternal.odin\00"
@str$11 = private global [35 x i8] c"D\3A\5COdin\5Ccore\5Cruntime\5Cinternal.odin\00"
@str$12 = private global [4 x i8] c"nil\00"
@str$13 = private global [4 x i8] c"int\00"
@str$14 = private global [5 x i8] c"uint\00"
@str$15 = private global [8 x i8] c"uintptr\00"
@str$16 = private global [5 x i8] c"rune\00"
@str$17 = private global [8 x i8] c"complex\00"
@str$18 = private global [7 x i8] c"string\00"
@str$19 = private global [5 x i8] c"bool\00"
@str$1a = private global [4 x i8] c"any\00"
@str$1b = private global [7 x i8] c"typeid\00"
@str$1c = private global [7 x i8] c"rawptr\00"
@str$1d = private global [2 x i8] c"\5E\00"
@str$1e = private global [5 x i8] c"proc\00"
@str$1f = private global [3 x i8] c"\28\29\00"
@str$20 = private global [35 x i8] c"D\3A\5COdin\5Ccore\5Cruntime\5Cinternal.odin\00"
@str$21 = private global [2 x i8] c"\28\00"
@str$22 = private global [3 x i8] c"\2C\20\00"
@str$23 = private global [2 x i8] c"\29\00"
@str$24 = private global [5 x i8] c"\20-\3E\20\00"
@str$25 = private global [2 x i8] c"\28\00"
@str$26 = private global [3 x i8] c"\2C\20\00"
@str$27 = private global [35 x i8] c"D\3A\5COdin\5Ccore\5Cruntime\5Cinternal.odin\00"
@str$28 = private global [3 x i8] c"\3A\20\00"
@str$29 = private global [2 x i8] c"\29\00"
@str$2a = private global [2 x i8] c"\5B\00"
@str$2b = private global [2 x i8] c"\5D\00"
@str$2c = private global [10 x i8] c"\5Bdynamic\5D\00"
@str$2d = private global [3 x i8] c"\5B\5D\00"
@str$2e = private global [5 x i8] c"map\5B\00"
@str$2f = private global [8 x i8] c"struct\20\00"
@str$30 = private global [9 x i8] c"\23packed\20\00"
@str$31 = private global [12 x i8] c"\23raw_union\20\00"
@str$32 = private global [8 x i8] c"\23align\20\00"
@str$33 = private global [3 x i8] c"\2C\20\00"
@str$34 = private global [3 x i8] c"\3A\20\00"
@str$35 = private global [35 x i8] c"D\3A\5COdin\5Ccore\5Cruntime\5Cinternal.odin\00"
@str$36 = private global [8 x i8] c"union\20\7B\00"
@str$37 = private global [3 x i8] c"\2C\20\00"
@str$38 = private global [2 x i8] c"\7D\00"
@str$39 = private global [6 x i8] c"enum\20\00"
@str$3a = private global [3 x i8] c"\20\7B\00"
@str$3b = private global [3 x i8] c"\2C\20\00"
@str$3c = private global [2 x i8] c"\7D\00"
@str$3d = private global [11 x i8] c"bit_field\20\00"
@str$3e = private global [8 x i8] c"\23align\20\00"
@str$3f = private global [3 x i8] c"\20\7B\00"
@str$40 = private global [3 x i8] c"\2C\20\00"
@str$41 = private global [3 x i8] c"\3A\20\00"
@str$42 = private global [35 x i8] c"D\3A\5COdin\5Ccore\5Cruntime\5Cinternal.odin\00"
@str$43 = private global [2 x i8] c"\7D\00"
@str$44 = private global [9 x i8] c"bit_set\5B\00"
@str$45 = private global [3 x i8] c"..\00"
@str$46 = private global [3 x i8] c"..\00"
@str$47 = private global [3 x i8] c"\3B\20\00"
@str$48 = private global [35 x i8] c"D\3A\5COdin\5Ccore\5Cruntime\5Cinternal.odin\00"
@str$49 = private global [35 x i8] c"D\3A\5COdin\5Ccore\5Cruntime\5Cinternal.odin\00"
@str$4a = private global [35 x i8] c"D\3A\5COdin\5Ccore\5Cruntime\5Cinternal.odin\00"
@str$4b = private global [35 x i8] c"D\3A\5COdin\5Ccore\5Cruntime\5Cinternal.odin\00"
@str$4c = private global [8 x i8] c"\20Index\20\00"
@str$4d = private global [27 x i8] c"\20is\20out\20of\20bounds\20range\200\3A\00"
@str$4e = private global [25 x i8] c"\20Invalid\20slice\20indices\3A\20\00"
@str$4f = private global [2 x i8] c"\3A\00"
@str$50 = private global [2 x i8] c"\3A\00"
@str$51 = private global [32 x i8] c"\20Invalid\20dynamic\20array\20values\3A\20\00"
@str$52 = private global [2 x i8] c"\3A\00"
@str$53 = private global [2 x i8] c"\3A\00"
@str$54 = private global [30 x i8] c"\20Invalid\20type\20assertion\20from\20\00"
@str$55 = private global [5 x i8] c"\20to\20\00"
@str$56 = private global [33 x i8] c"\20Invalid\20slice\20length\20for\20make\3A\20\00"
@str$57 = private global [45 x i8] c"\20Invalid\20dynamic\20array\20parameters\20for\20make\3A\20\00"
@str$58 = private global [40 x i8] c"D\3A\5COdin\5Cshared\5Cworkbench\5Claas\5Cmain.odin\00"
@str$59 = private global [40 x i8] c"D\3A\5COdin\5Cshared\5Cworkbench\5Claas\5Cmain.odin\00"
@str$5a = private global [31 x i8] c"End\20of\20text\20from\20within\20string\00"
@str$5b = private global [40 x i8] c"D\3A\5COdin\5Cshared\5Cworkbench\5Claas\5Cmain.odin\00"
@str$5c = private global [15 x i8] c"get_next_token\00"
@str$5d = private global [40 x i8] c"D\3A\5COdin\5Cshared\5Cworkbench\5Claas\5Cmain.odin\00"
@str$5e = private global [40 x i8] c"D\3A\5COdin\5Cshared\5Cworkbench\5Claas\5Cmain.odin\00"
@str$5f = private global [31 x i8] c"End\20of\20text\20from\20within\20string\00"
@str$60 = private global [40 x i8] c"D\3A\5COdin\5Cshared\5Cworkbench\5Claas\5Cmain.odin\00"
@str$61 = private global [15 x i8] c"get_next_token\00"
@str$62 = private global [40 x i8] c"D\3A\5COdin\5Cshared\5Cworkbench\5Claas\5Cmain.odin\00"
@str$63 = private global [40 x i8] c"D\3A\5COdin\5Cshared\5Cworkbench\5Claas\5Cmain.odin\00"
@str$64 = private global [40 x i8] c"D\3A\5COdin\5Cshared\5Cworkbench\5Claas\5Cmain.odin\00"
@str$65 = private global [40 x i8] c"D\3A\5COdin\5Cshared\5Cworkbench\5Claas\5Cmain.odin\00"
@str$66 = private global [40 x i8] c"D\3A\5COdin\5Cshared\5Cworkbench\5Claas\5Cmain.odin\00"
@str$67 = private global [15 x i8] c"Unknown\20token\3A\00"
@str$68 = private global [8 x i8] c"at\20line\00"
@str$69 = private global [7 x i8] c"column\00"
@str$6a = private global [40 x i8] c"D\3A\5COdin\5Cshared\5Cworkbench\5Claas\5Cmain.odin\00"
@str$6b = private global [15 x i8] c"get_next_token\00"
@str$6c = private global [40 x i8] c"D\3A\5COdin\5Cshared\5Cworkbench\5Claas\5Cmain.odin\00"
@str$6d = private global [40 x i8] c"D\3A\5COdin\5Cshared\5Cworkbench\5Claas\5Cmain.odin\00"
@str$6e = private global [15 x i8] c"get_next_token\00"
@str$6f = private global [40 x i8] c"D\3A\5COdin\5Cshared\5Cworkbench\5Claas\5Cmain.odin\00"
@str$70 = private global [40 x i8] c"D\3A\5COdin\5Cshared\5Cworkbench\5Claas\5Cmain.odin\00"
@str$71 = private global [15 x i8] c"get_next_token\00"
@str$72 = private global [40 x i8] c"D\3A\5COdin\5Cshared\5Cworkbench\5Claas\5Cmain.odin\00"
@str$73 = private global [66 x i8] c"foo\20123\201.0\20\2C\20$\20true\20\20\20\20\09false\2C\20\22ffffoooooooozle\22\20blabbaaa\3A\20123.0\00"
@str$74 = private global [40 x i8] c"D\3A\5COdin\5Cshared\5Cworkbench\5Claas\5Cmain.odin\00"
@str$75 = private global [5 x i8] c"main\00"
@str$76 = private global [24 x i8] c"D\3A\5COdin\5Ccore\5Cos\5Cos.odin\00"
@str$77 = private global [3 x i8] c"\5Ca\00"
@str$78 = private global [3 x i8] c"\5Cb\00"
@str$79 = private global [3 x i8] c"\5Ce\00"
@str$7a = private global [3 x i8] c"\5Cf\00"
@str$7b = private global [3 x i8] c"\5Cn\00"
@str$7c = private global [3 x i8] c"\5Cr\00"
@str$7d = private global [3 x i8] c"\5Ct\00"
@str$7e = private global [3 x i8] c"\5Cv\00"
@str$7f = private global [3 x i8] c"\5Cx\00"
@str$80 = private global [24 x i8] c"D\3A\5COdin\5Ccore\5Cos\5Cos.odin\00"
@str$81 = private global [3 x i8] c"00\00"
@str$82 = private global [24 x i8] c"D\3A\5COdin\5Ccore\5Cos\5Cos.odin\00"
@str$83 = private global [20 x i8] c"heap_allocator_proc\00"
@str$84 = private global [32 x i8] c"D\3A\5COdin\5Ccore\5Cos\5Cos_windows.odin\00"
@str$85 = private global [26 x i8] c"D\3A\5COdin\5Ccore\5Cmem\5Cmem.odin\00"
@str$86 = private global [22 x i8] c"align_forward_uintptr\00"
@str$87 = private global [28 x i8] c"D\3A\5COdin\5Ccore\5Cmem\5Calloc.odin\00"
@str$88 = private global [23 x i8] c"scratch_allocator_proc\00"
@str$89 = private global [28 x i8] c"D\3A\5COdin\5Ccore\5Cmem\5Calloc.odin\00"
@str$8a = private global [28 x i8] c"D\3A\5COdin\5Ccore\5Cmem\5Calloc.odin\00"
@str$8b = private global [28 x i8] c"D\3A\5COdin\5Ccore\5Cmem\5Calloc.odin\00"
@str$8c = private global [23 x i8] c"scratch_allocator_proc\00"
@str$8d = private global [28 x i8] c"D\3A\5COdin\5Ccore\5Cmem\5Calloc.odin\00"
@str$8e = private global [23 x i8] c"scratch_allocator_proc\00"
@str$8f = private global [28 x i8] c"D\3A\5COdin\5Ccore\5Cmem\5Calloc.odin\00"
@str$90 = private global [28 x i8] c"D\3A\5COdin\5Ccore\5Cmem\5Calloc.odin\00"
@str$91 = private global [23 x i8] c"scratch_allocator_proc\00"
@str$92 = private global [28 x i8] c"D\3A\5COdin\5Ccore\5Cmem\5Calloc.odin\00"
@str$93 = private global [36 x i8] c"D\3A\5COdin\5Ccore\5Cunicode\5Cutf8\5Cutf8.odin\00"
@str$94 = private global [36 x i8] c"D\3A\5COdin\5Ccore\5Cunicode\5Cutf8\5Cutf8.odin\00"
@str$95 = private global [36 x i8] c"D\3A\5COdin\5Ccore\5Cunicode\5Cutf8\5Cutf8.odin\00"
@str$96 = private global [36 x i8] c"D\3A\5COdin\5Ccore\5Cunicode\5Cutf8\5Cutf8.odin\00"
@str$97 = private global [36 x i8] c"D\3A\5COdin\5Ccore\5Cunicode\5Cutf8\5Cutf8.odin\00"
@str$98 = private global [36 x i8] c"D\3A\5COdin\5Ccore\5Cunicode\5Cutf8\5Cutf8.odin\00"
@str$99 = private global [36 x i8] c"D\3A\5COdin\5Ccore\5Cunicode\5Cutf8\5Cutf8.odin\00"
@str$9a = private global [36 x i8] c"D\3A\5COdin\5Ccore\5Cunicode\5Cutf8\5Cutf8.odin\00"
@str$9b = private global [36 x i8] c"D\3A\5COdin\5Ccore\5Cunicode\5Cutf8\5Cutf8.odin\00"
@str$9c = private global [36 x i8] c"D\3A\5COdin\5Ccore\5Cunicode\5Cutf8\5Cutf8.odin\00"
@str$9d = private global [36 x i8] c"D\3A\5COdin\5Ccore\5Cunicode\5Cutf8\5Cutf8.odin\00"
@str$9e = private global [36 x i8] c"D\3A\5COdin\5Ccore\5Cunicode\5Cutf8\5Cutf8.odin\00"
@str$9f = private global [36 x i8] c"D\3A\5COdin\5Ccore\5Cunicode\5Cutf8\5Cutf8.odin\00"
@str$a0 = private global [26 x i8] c"D\3A\5COdin\5Ccore\5Cfmt\5Cfmt.odin\00"
@str$a1 = private global [26 x i8] c"D\3A\5COdin\5Ccore\5Cfmt\5Cfmt.odin\00"
@str$a2 = private global [13 x i8] c"write_string\00"
@str$a3 = private global [26 x i8] c"D\3A\5COdin\5Ccore\5Cfmt\5Cfmt.odin\00"
@str$a4 = private global [12 x i8] c"write_bytes\00"
@str$a5 = private global [26 x i8] c"D\3A\5COdin\5Ccore\5Cfmt\5Cfmt.odin\00"
@str$a6 = private global [11 x i8] c"write_byte\00"
@str$a7 = private global [26 x i8] c"D\3A\5COdin\5Ccore\5Cfmt\5Cfmt.odin\00"
@str$a8 = private global [3 x i8] c"\5Ca\00"
@str$a9 = private global [3 x i8] c"\5Cb\00"
@str$aa = private global [3 x i8] c"\5Ce\00"
@str$ab = private global [3 x i8] c"\5Cf\00"
@str$ac = private global [3 x i8] c"\5Cn\00"
@str$ad = private global [3 x i8] c"\5Cr\00"
@str$ae = private global [3 x i8] c"\5Ct\00"
@str$af = private global [3 x i8] c"\5Cv\00"
@str$b0 = private global [3 x i8] c"\5Cx\00"
@str$b1 = private global [26 x i8] c"D\3A\5COdin\5Ccore\5Cfmt\5Cfmt.odin\00"
@str$b2 = private global [3 x i8] c"00\00"
@str$b3 = private global [26 x i8] c"D\3A\5COdin\5Ccore\5Cfmt\5Cfmt.odin\00"
@str$b4 = private global [26 x i8] c"D\3A\5COdin\5Ccore\5Cfmt\5Cfmt.odin\00"
@str$b5 = private global [26 x i8] c"D\3A\5COdin\5Ccore\5Cfmt\5Cfmt.odin\00"
@str$b6 = private global [26 x i8] c"D\3A\5COdin\5Ccore\5Cfmt\5Cfmt.odin\00"
@str$b7 = private global [7 x i8] c"tprint\00"
@str$b8 = private global [4 x i8] c"nil\00"
@str$b9 = private global [4 x i8] c"int\00"
@str$ba = private global [5 x i8] c"uint\00"
@str$bb = private global [8 x i8] c"uintptr\00"
@str$bc = private global [5 x i8] c"rune\00"
@str$bd = private global [8 x i8] c"complex\00"
@str$be = private global [8 x i8] c"cstring\00"
@str$bf = private global [7 x i8] c"string\00"
@str$c0 = private global [5 x i8] c"bool\00"
@str$c1 = private global [4 x i8] c"any\00"
@str$c2 = private global [7 x i8] c"typeid\00"
@str$c3 = private global [7 x i8] c"rawptr\00"
@str$c4 = private global [2 x i8] c"\5E\00"
@str$c5 = private global [5 x i8] c"proc\00"
@str$c6 = private global [3 x i8] c"\28\29\00"
@str$c7 = private global [26 x i8] c"D\3A\5COdin\5Ccore\5Cfmt\5Cfmt.odin\00"
@str$c8 = private global [2 x i8] c"\28\00"
@str$c9 = private global [3 x i8] c"\2C\20\00"
@str$ca = private global [2 x i8] c"\29\00"
@str$cb = private global [5 x i8] c"\20-\3E\20\00"
@str$cc = private global [2 x i8] c"\28\00"
@str$cd = private global [3 x i8] c"\2C\20\00"
@str$ce = private global [26 x i8] c"D\3A\5COdin\5Ccore\5Cfmt\5Cfmt.odin\00"
@str$cf = private global [3 x i8] c"\3A\20\00"
@str$d0 = private global [2 x i8] c"\29\00"
@str$d1 = private global [2 x i8] c"\5B\00"
@str$d2 = private global [2 x i8] c"\5D\00"
@str$d3 = private global [10 x i8] c"\5Bdynamic\5D\00"
@str$d4 = private global [3 x i8] c"\5B\5D\00"
@str$d5 = private global [5 x i8] c"map\5B\00"
@str$d6 = private global [8 x i8] c"struct\20\00"
@str$d7 = private global [9 x i8] c"\23packed\20\00"
@str$d8 = private global [12 x i8] c"\23raw_union\20\00"
@str$d9 = private global [8 x i8] c"\23align\20\00"
@str$da = private global [3 x i8] c"\2C\20\00"
@str$db = private global [3 x i8] c"\3A\20\00"
@str$dc = private global [26 x i8] c"D\3A\5COdin\5Ccore\5Cfmt\5Cfmt.odin\00"
@str$dd = private global [7 x i8] c"union\20\00"
@str$de = private global [8 x i8] c"\23align\20\00"
@str$df = private global [3 x i8] c"\2C\20\00"
@str$e0 = private global [2 x i8] c"\7D\00"
@str$e1 = private global [6 x i8] c"enum\20\00"
@str$e2 = private global [3 x i8] c"\20\7B\00"
@str$e3 = private global [3 x i8] c"\2C\20\00"
@str$e4 = private global [2 x i8] c"\7D\00"
@str$e5 = private global [11 x i8] c"bit_field\20\00"
@str$e6 = private global [8 x i8] c"\23align\20\00"
@str$e7 = private global [3 x i8] c"\20\7B\00"
@str$e8 = private global [3 x i8] c"\2C\20\00"
@str$e9 = private global [3 x i8] c"\3A\20\00"
@str$ea = private global [26 x i8] c"D\3A\5COdin\5Ccore\5Cfmt\5Cfmt.odin\00"
@str$eb = private global [2 x i8] c"\7D\00"
@str$ec = private global [9 x i8] c"bit_set\5B\00"
@str$ed = private global [3 x i8] c"..\00"
@str$ee = private global [3 x i8] c"..\00"
@str$ef = private global [3 x i8] c"\3B\20\00"
@str$f0 = private global [8 x i8] c"opaque\20\00"
@str$f1 = private global [3 x i8] c"\25\21\00"
@str$f2 = private global [6 x i8] c"\3Cnil\3E\00"
@str$f3 = private global [5 x i8] c"true\00"
@str$f4 = private global [6 x i8] c"false\00"
@str$f5 = private global [26 x i8] c"D\3A\5COdin\5Ccore\5Cfmt\5Cfmt.odin\00"
@str$f6 = private global [9 x i8] c"_fmt_int\00"
@str$f7 = private global [54 x i8] c"_fmt_int\3A\20buffer\20overrun.\20Width\20and\20precision\20too\20big\00"
@str$f8 = private global [26 x i8] c"D\3A\5COdin\5Ccore\5Cfmt\5Cfmt.odin\00"
@str$f9 = private global [9 x i8] c"_fmt_int\00"
@str$fa = private global [31 x i8] c"_fmt_int\3A\20unknown\20base\2C\20whoops\00"
@str$fb = private global [26 x i8] c"D\3A\5COdin\5Ccore\5Cfmt\5Cfmt.odin\00"
@str$fc = private global [3 x i8] c"U\2B\00"
@str$fd = private global [26 x i8] c"D\3A\5COdin\5Ccore\5Cfmt\5Cfmt.odin\00"
@str$fe = private global [26 x i8] c"D\3A\5COdin\5Ccore\5Cfmt\5Cfmt.odin\00"
@str$ff = private global [26 x i8] c"D\3A\5COdin\5Ccore\5Cfmt\5Cfmt.odin\00"
@str$100 = private global [26 x i8] c"D\3A\5COdin\5Ccore\5Cfmt\5Cfmt.odin\00"
@str$101 = private global [26 x i8] c"D\3A\5COdin\5Ccore\5Cfmt\5Cfmt.odin\00"
@str$102 = private global [26 x i8] c"D\3A\5COdin\5Ccore\5Cfmt\5Cfmt.odin\00"
@str$103 = private global [26 x i8] c"D\3A\5COdin\5Ccore\5Cfmt\5Cfmt.odin\00"
@str$104 = private global [26 x i8] c"D\3A\5COdin\5Ccore\5Cfmt\5Cfmt.odin\00"
@str$105 = private global [26 x i8] c"D\3A\5COdin\5Ccore\5Cfmt\5Cfmt.odin\00"
@str$106 = private global [26 x i8] c"D\3A\5COdin\5Ccore\5Cfmt\5Cfmt.odin\00"
@str$107 = private global [26 x i8] c"D\3A\5COdin\5Ccore\5Cfmt\5Cfmt.odin\00"
@str$108 = private global [26 x i8] c"D\3A\5COdin\5Ccore\5Cfmt\5Cfmt.odin\00"
@str$109 = private global [26 x i8] c"D\3A\5COdin\5Ccore\5Cfmt\5Cfmt.odin\00"
@str$10a = private global [26 x i8] c"D\3A\5COdin\5Ccore\5Cfmt\5Cfmt.odin\00"
@str$10b = private global [26 x i8] c"D\3A\5COdin\5Ccore\5Cfmt\5Cfmt.odin\00"
@str$10c = private global [3 x i8] c"0x\00"
@str$10d = private global [26 x i8] c"D\3A\5COdin\5Ccore\5Cfmt\5Cfmt.odin\00"
@str$10e = private global [26 x i8] c"D\3A\5COdin\5Ccore\5Cfmt\5Cfmt.odin\00"
@str$10f = private global [26 x i8] c"D\3A\5COdin\5Ccore\5Cfmt\5Cfmt.odin\00"
@str$110 = private global [26 x i8] c"D\3A\5COdin\5Ccore\5Cfmt\5Cfmt.odin\00"
@str$111 = private global [26 x i8] c"D\3A\5COdin\5Ccore\5Cfmt\5Cfmt.odin\00"
@str$112 = private global [26 x i8] c"D\3A\5COdin\5Ccore\5Cfmt\5Cfmt.odin\00"
@str$113 = private global [26 x i8] c"D\3A\5COdin\5Ccore\5Cfmt\5Cfmt.odin\00"
@str$114 = private global [26 x i8] c"D\3A\5COdin\5Ccore\5Cfmt\5Cfmt.odin\00"
@str$115 = private global [26 x i8] c"D\3A\5COdin\5Ccore\5Cfmt\5Cfmt.odin\00"
@str$116 = private global [26 x i8] c"D\3A\5COdin\5Ccore\5Cfmt\5Cfmt.odin\00"
@str$117 = private global [26 x i8] c"D\3A\5COdin\5Ccore\5Cfmt\5Cfmt.odin\00"
@str$118 = private global [26 x i8] c"D\3A\5COdin\5Ccore\5Cfmt\5Cfmt.odin\00"
@str$119 = private global [26 x i8] c"D\3A\5COdin\5Ccore\5Cfmt\5Cfmt.odin\00"
@str$11a = private global [26 x i8] c"D\3A\5COdin\5Ccore\5Cfmt\5Cfmt.odin\00"
@str$11b = private global [26 x i8] c"D\3A\5COdin\5Ccore\5Cfmt\5Cfmt.odin\00"
@str$11c = private global [26 x i8] c"D\3A\5COdin\5Ccore\5Cfmt\5Cfmt.odin\00"
@str$11d = private global [26 x i8] c"D\3A\5COdin\5Ccore\5Cfmt\5Cfmt.odin\00"
@str$11e = private global [26 x i8] c"D\3A\5COdin\5Ccore\5Cfmt\5Cfmt.odin\00"
@str$11f = private global [26 x i8] c"D\3A\5COdin\5Ccore\5Cfmt\5Cfmt.odin\00"
@str$120 = private global [26 x i8] c"D\3A\5COdin\5Ccore\5Cfmt\5Cfmt.odin\00"
@str$121 = private global [26 x i8] c"D\3A\5COdin\5Ccore\5Cfmt\5Cfmt.odin\00"
@str$122 = private global [26 x i8] c"D\3A\5COdin\5Ccore\5Cfmt\5Cfmt.odin\00"
@str$123 = private global [26 x i8] c"D\3A\5COdin\5Ccore\5Cfmt\5Cfmt.odin\00"
@str$124 = private global [26 x i8] c"D\3A\5COdin\5Ccore\5Cfmt\5Cfmt.odin\00"
@str$125 = private global [6 x i8] c"\3Cnil\3E\00"
@str$126 = private global [19 x i8] c"\21\25\28BAD\20ENUM\20VALUE\29\00"
@str$127 = private global [26 x i8] c"D\3A\5COdin\5Ccore\5Cfmt\5Cfmt.odin\00"
@str$128 = private global [12 x i8] c"fmt_bit_set\00"
@str$129 = private global [22 x i8] c"unknown\20bit_size\20size\00"
@str$12a = private global [3 x i8] c"\2C\20\00"
@str$12b = private global [26 x i8] c"D\3A\5COdin\5Ccore\5Cfmt\5Cfmt.odin\00"
@str$12c = private global [5 x i8] c"HERE\00"
@str$12d = private global [11 x i8] c"bit_field\7B\00"
@str$12e = private global [3 x i8] c"\2C\20\00"
@str$12f = private global [26 x i8] c"D\3A\5COdin\5Ccore\5Cfmt\5Cfmt.odin\00"
@str$130 = private global [26 x i8] c"D\3A\5COdin\5Ccore\5Cfmt\5Cfmt.odin\00"
@str$131 = private global [4 x i8] c"\20\3D\20\00"
@str$132 = private global [4 x i8] c"nil\00"
@str$133 = private global [6 x i8] c"\3Cnil\3E\00"
@str$134 = private global [3 x i8] c"\7B\7D\00"
@str$135 = private global [3 x i8] c"\2C\20\00"
@str$136 = private global [4 x i8] c"\20\3D\20\00"
@str$137 = private global [26 x i8] c"D\3A\5COdin\5Ccore\5Cfmt\5Cfmt.odin\00"
@str$138 = private global [6 x i8] c"any\7B\7D\00"
@str$139 = private global [26 x i8] c"D\3A\5COdin\5Ccore\5Cfmt\5Cfmt.odin\00"
@str$13a = private global [3 x i8] c"\2C\0A\00"
@str$13b = private global [3 x i8] c"\2C\20\00"
@str$13c = private global [3 x i8] c"\2C\20\00"
@str$13d = private global [3 x i8] c"\2C\20\00"
@str$13e = private global [5 x i8] c"map\5B\00"
@str$13f = private global [26 x i8] c"D\3A\5COdin\5Ccore\5Cfmt\5Cfmt.odin\00"
@str$140 = private global [26 x i8] c"D\3A\5COdin\5Ccore\5Cfmt\5Cfmt.odin\00"
@str$141 = private global [26 x i8] c"D\3A\5COdin\5Ccore\5Cfmt\5Cfmt.odin\00"
@str$142 = private global [26 x i8] c"D\3A\5COdin\5Ccore\5Cfmt\5Cfmt.odin\00"
@str$143 = private global [3 x i8] c"\2C\20\00"
@str$144 = private global [2 x i8] c"\3D\00"
@str$145 = private global [26 x i8] c"D\3A\5COdin\5Ccore\5Cfmt\5Cfmt.odin\00"
@str$146 = private global [12 x i8] c"\28raw_union\29\00"
@str$147 = private global [3 x i8] c"\2C\20\00"
@str$148 = private global [26 x i8] c"D\3A\5COdin\5Ccore\5Cfmt\5Cfmt.odin\00"
@str$149 = private global [4 x i8] c"\20\3D\20\00"
@str$14a = private global [26 x i8] c"D\3A\5COdin\5Ccore\5Cfmt\5Cfmt.odin\00"
@str$14b = private global [6 x i8] c"any\7B\7D\00"
@str$14c = private global [26 x i8] c"D\3A\5COdin\5Ccore\5Cfmt\5Cfmt.odin\00"
@str$14d = private global [3 x i8] c"\2C\0A\00"
@str$14e = private global [26 x i8] c"D\3A\5COdin\5Ccore\5Cfmt\5Cfmt.odin\00"
@str$14f = private global [10 x i8] c"fmt_value\00"
@str$150 = private global [23 x i8] c"Invalid\20union\20tag\20type\00"
@str$151 = private global [4 x i8] c"nil\00"
@str$152 = private global [26 x i8] c"D\3A\5COdin\5Ccore\5Cfmt\5Cfmt.odin\00"
@str$153 = private global [4 x i8] c"nil\00"
@str$154 = private global [4 x i8] c"\20\40\20\00"
@str$155 = private global [6 x i8] c"\3Cnil\3E\00"
@str$156 = private global [26 x i8] c"D\3A\5COdin\5Ccore\5Cfmt\5Cfmt.odin\00"
@str$157 = private global [26 x i8] c"D\3A\5COdin\5Ccore\5Cfmt\5Cfmt.odin\00"
@str$158 = private global [34 x i8] c"D\3A\5COdin\5Ccore\5Cstrconv\5Cstrconv.odin\00"
@str$159 = private global [34 x i8] c"D\3A\5COdin\5Ccore\5Cstrconv\5Cstrconv.odin\00"
@str$15a = private global [34 x i8] c"D\3A\5COdin\5Ccore\5Cstrconv\5Cstrconv.odin\00"
@str$15b = private global [34 x i8] c"D\3A\5COdin\5Ccore\5Cstrconv\5Cstrconv.odin\00"
@str$15c = private global [34 x i8] c"D\3A\5COdin\5Ccore\5Cstrconv\5Cstrconv.odin\00"
@str$15d = private global [34 x i8] c"D\3A\5COdin\5Ccore\5Cstrconv\5Cstrconv.odin\00"
@str$15e = private global [34 x i8] c"D\3A\5COdin\5Ccore\5Cstrconv\5Cstrconv.odin\00"
@str$15f = private global [34 x i8] c"D\3A\5COdin\5Ccore\5Cstrconv\5Cstrconv.odin\00"
@str$160 = private global [34 x i8] c"D\3A\5COdin\5Ccore\5Cstrconv\5Cstrconv.odin\00"
@str$161 = private global [34 x i8] c"D\3A\5COdin\5Ccore\5Cstrconv\5Cstrconv.odin\00"
@str$162 = private global [34 x i8] c"D\3A\5COdin\5Ccore\5Cstrconv\5Cstrconv.odin\00"
@str$163 = private global [34 x i8] c"D\3A\5COdin\5Ccore\5Cstrconv\5Cstrconv.odin\00"
@str$164 = private global [34 x i8] c"D\3A\5COdin\5Ccore\5Cstrconv\5Cstrconv.odin\00"
@str$165 = private global [34 x i8] c"D\3A\5COdin\5Ccore\5Cstrconv\5Cstrconv.odin\00"
@str$166 = private global [34 x i8] c"D\3A\5COdin\5Ccore\5Cstrconv\5Cstrconv.odin\00"
@str$167 = private global [34 x i8] c"D\3A\5COdin\5Ccore\5Cstrconv\5Cstrconv.odin\00"
@str$168 = private global [34 x i8] c"D\3A\5COdin\5Ccore\5Cstrconv\5Cstrconv.odin\00"
@str$169 = private global [34 x i8] c"D\3A\5COdin\5Ccore\5Cstrconv\5Cstrconv.odin\00"
@str$16a = private global [34 x i8] c"D\3A\5COdin\5Ccore\5Cstrconv\5Cstrconv.odin\00"
@str$16b = private global [34 x i8] c"D\3A\5COdin\5Ccore\5Cstrconv\5Cstrconv.odin\00"
@str$16c = private global [34 x i8] c"D\3A\5COdin\5Ccore\5Cstrconv\5Cstrconv.odin\00"
@str$16d = private global [34 x i8] c"D\3A\5COdin\5Ccore\5Cstrconv\5Cstrconv.odin\00"
@str$16e = private global [34 x i8] c"D\3A\5COdin\5Ccore\5Cstrconv\5Cstrconv.odin\00"
@str$16f = private global [34 x i8] c"D\3A\5COdin\5Ccore\5Cstrconv\5Cstrconv.odin\00"
@str$170 = private global [34 x i8] c"D\3A\5COdin\5Ccore\5Cstrconv\5Cstrconv.odin\00"
@str$171 = private global [34 x i8] c"D\3A\5COdin\5Ccore\5Cstrconv\5Cstrconv.odin\00"
@str$172 = private global [34 x i8] c"D\3A\5COdin\5Ccore\5Cstrconv\5Cstrconv.odin\00"
@str$173 = private global [34 x i8] c"D\3A\5COdin\5Ccore\5Cstrconv\5Cstrconv.odin\00"
@str$174 = private global [13 x i8] c"generic_ftoa\00"
@str$175 = private global [26 x i8] c"strconv\3A\20invalid\20bit_size\00"
@str$176 = private global [4 x i8] c"NaN\00"
@str$177 = private global [5 x i8] c"-Inf\00"
@str$178 = private global [5 x i8] c"\2BInf\00"
@str$179 = private global [34 x i8] c"D\3A\5COdin\5Ccore\5Cstrconv\5Cstrconv.odin\00"
@str$17a = private global [34 x i8] c"D\3A\5COdin\5Ccore\5Cstrconv\5Cstrconv.odin\00"
@str$17b = private global [34 x i8] c"D\3A\5COdin\5Ccore\5Cstrconv\5Cstrconv.odin\00"
@str$17c = private global [34 x i8] c"D\3A\5COdin\5Ccore\5Cstrconv\5Cstrconv.odin\00"
@str$17d = private global [34 x i8] c"D\3A\5COdin\5Ccore\5Cstrconv\5Cstrconv.odin\00"
@str$17e = private global [34 x i8] c"D\3A\5COdin\5Ccore\5Cstrconv\5Cstrconv.odin\00"
@str$17f = private global [14 x i8] c"format_digits\00"
@str$180 = private global [49 x i8] c"strconv\3A\20e\2FE\20float\20printing\20is\20not\20yet\20supported\00"
@str$181 = private global [34 x i8] c"D\3A\5COdin\5Ccore\5Cstrconv\5Cstrconv.odin\00"
@str$182 = private global [14 x i8] c"format_digits\00"
@str$183 = private global [49 x i8] c"strconv\3A\20g\2FG\20float\20printing\20is\20not\20yet\20supported\00"
@str$184 = private global [34 x i8] c"D\3A\5COdin\5Ccore\5Cstrconv\5Cstrconv.odin\00"
@str$185 = private global [34 x i8] c"D\3A\5COdin\5Ccore\5Cstrconv\5Cstrconv.odin\00"
@str$186 = private global [34 x i8] c"D\3A\5COdin\5Ccore\5Cstrconv\5Cstrconv.odin\00"
@str$187 = private global [34 x i8] c"D\3A\5COdin\5Ccore\5Cstrconv\5Cstrconv.odin\00"
@str$188 = private global [34 x i8] c"D\3A\5COdin\5Ccore\5Cstrconv\5Cstrconv.odin\00"
@str$189 = private global [34 x i8] c"D\3A\5COdin\5Ccore\5Cstrconv\5Cstrconv.odin\00"
@str$18a = private global [20 x i8] c"is_integer_negative\00"
@str$18b = private global [42 x i8] c"is_integer_negative\3A\20Unknown\20integer\20size\00"
@str$18c = private global [34 x i8] c"D\3A\5COdin\5Ccore\5Cstrconv\5Cstrconv.odin\00"
@str$18d = private global [12 x i8] c"append_bits\00"
@str$18e = private global [44 x i8] c"strconv\3A\20illegal\20base\20passed\20to\20append_bits\00"
@str$18f = private global [34 x i8] c"D\3A\5COdin\5Ccore\5Cstrconv\5Cstrconv.odin\00"
@str$190 = private global [34 x i8] c"D\3A\5COdin\5Ccore\5Cstrconv\5Cstrconv.odin\00"
@str$191 = private global [34 x i8] c"D\3A\5COdin\5Ccore\5Cstrconv\5Cstrconv.odin\00"
@str$192 = private global [34 x i8] c"D\3A\5COdin\5Ccore\5Cstrconv\5Cstrconv.odin\00"
@str$193 = private global [34 x i8] c"D\3A\5COdin\5Ccore\5Cstrconv\5Cstrconv.odin\00"
@str$194 = private global [34 x i8] c"D\3A\5COdin\5Ccore\5Cstrconv\5Cstrconv.odin\00"
@str$195 = private global [34 x i8] c"D\3A\5COdin\5Ccore\5Cstrconv\5Cstrconv.odin\00"
@str$196 = private global [34 x i8] c"D\3A\5COdin\5Ccore\5Cstrconv\5Cstrconv.odin\00"
@str$197 = private global [34 x i8] c"D\3A\5COdin\5Ccore\5Cstrconv\5Cstrconv.odin\00"
@str$198 = private global [34 x i8] c"D\3A\5COdin\5Ccore\5Cstrconv\5Cstrconv.odin\00"
@str$199 = private global [34 x i8] c"D\3A\5COdin\5Ccore\5Cstrconv\5Cstrconv.odin\00"
@str$19a = private global [34 x i8] c"D\3A\5COdin\5Ccore\5Cstrconv\5Cstrconv.odin\00"
@str$19b = private global [34 x i8] c"D\3A\5COdin\5Ccore\5Cstrconv\5Cstrconv.odin\00"
@str$19c = private global [34 x i8] c"D\3A\5COdin\5Ccore\5Cstrconv\5Cstrconv.odin\00"
@str$19d = private global [34 x i8] c"D\3A\5COdin\5Ccore\5Cstrconv\5Cstrconv.odin\00"
@str$19e = private global [34 x i8] c"D\3A\5COdin\5Ccore\5Cdecimal\5Cdecimal.odin\00"
@str$19f = private global [34 x i8] c"D\3A\5COdin\5Ccore\5Cdecimal\5Cdecimal.odin\00"
@str$1a0 = private global [34 x i8] c"D\3A\5COdin\5Ccore\5Cdecimal\5Cdecimal.odin\00"
@str$1a1 = private global [34 x i8] c"D\3A\5COdin\5Ccore\5Cdecimal\5Cdecimal.odin\00"
@str$1a2 = private global [34 x i8] c"D\3A\5COdin\5Ccore\5Cdecimal\5Cdecimal.odin\00"
@str$1a3 = private global [34 x i8] c"D\3A\5COdin\5Ccore\5Cdecimal\5Cdecimal.odin\00"
@str$1a4 = private global [34 x i8] c"D\3A\5COdin\5Ccore\5Cdecimal\5Cdecimal.odin\00"
@str$1a5 = private global [34 x i8] c"D\3A\5COdin\5Ccore\5Cdecimal\5Cdecimal.odin\00"
@str$1a6 = private global [34 x i8] c"D\3A\5COdin\5Ccore\5Cdecimal\5Cdecimal.odin\00"
@str$1a7 = private global [34 x i8] c"D\3A\5COdin\5Ccore\5Cdecimal\5Cdecimal.odin\00"
@str$1a8 = private global [34 x i8] c"D\3A\5COdin\5Ccore\5Cdecimal\5Cdecimal.odin\00"
@str$1a9 = private global [34 x i8] c"D\3A\5COdin\5Ccore\5Cdecimal\5Cdecimal.odin\00"
@str$1aa = private global [34 x i8] c"D\3A\5COdin\5Ccore\5Cdecimal\5Cdecimal.odin\00"
@str$1ab = private global [34 x i8] c"D\3A\5COdin\5Ccore\5Cdecimal\5Cdecimal.odin\00"
@str$1ac = private global [34 x i8] c"D\3A\5COdin\5Ccore\5Cdecimal\5Cdecimal.odin\00"
@str$1ad = private global [34 x i8] c"D\3A\5COdin\5Ccore\5Cdecimal\5Cdecimal.odin\00"
@str$1ae = private global [26 x i8] c"D\3A\5COdin\5Ccore\5Cmem\5Cmem.odin\00"
@str$1af = private global [10 x i8] c"slice_ptr\00"
@str$1b0 = private global [26 x i8] c"D\3A\5COdin\5Ccore\5Cmem\5Cmem.odin\00"
@str$1b1 = private global [10 x i8] c"slice_ptr\00"
@str$1b2 = private global [31 x i8] c"D\3A\5COdin\5Ccore\5Cruntime\5Ccore.odin\00"
@str$1b3 = private global [12 x i8] c"append_elem\00"
@str$1b4 = private global [31 x i8] c"D\3A\5COdin\5Ccore\5Cruntime\5Ccore.odin\00"
@str$1b5 = private global [13 x i8] c"append_elems\00"
@str$1b6 = private global [31 x i8] c"D\3A\5COdin\5Ccore\5Cruntime\5Ccore.odin\00"
@str$1b7 = private global [31 x i8] c"D\3A\5COdin\5Ccore\5Cruntime\5Ccore.odin\00"
@str$1b8 = private global [12 x i8] c"append_elem\00"
@str$1b9 = private global [31 x i8] c"D\3A\5COdin\5Ccore\5Cruntime\5Ccore.odin\00"
@str$1ba = private global [31 x i8] c"D\3A\5COdin\5Ccore\5Cruntime\5Ccore.odin\00"
@str$1bb = private global [31 x i8] c"D\3A\5COdin\5Ccore\5Cruntime\5Ccore.odin\00"
@str$1bc = private global [22 x i8] c"reserve_dynamic_array\00"
@str$1bd = private global [31 x i8] c"D\3A\5COdin\5Ccore\5Cruntime\5Ccore.odin\00"
@str$1be = private global [22 x i8] c"reserve_dynamic_array\00"
@str$1bf = private global [10 x i8] c"Type_Info\00"
@str$1c0 = private global [5 x i8] c"size\00"
@str$1c1 = private global [6 x i8] c"align\00"
@str$1c2 = private global [3 x i8] c"id\00"
@str$1c3 = private global [8 x i8] c"variant\00"
@str$1c4 = private global [16 x i8] c"Type_Info_Named\00"
@str$1c5 = private global [5 x i8] c"name\00"
@str$1c6 = private global [5 x i8] c"base\00"
@str$1c7 = private global [18 x i8] c"Type_Info_Integer\00"
@str$1c8 = private global [7 x i8] c"signed\00"
@str$1c9 = private global [11 x i8] c"endianness\00"
@str$1ca = private global [21 x i8] c"Type_Info_Endianness\00"
@str$1cb = private global [9 x i8] c"Platform\00"
@str$1cc = private global [7 x i8] c"Little\00"
@str$1cd = private global [4 x i8] c"Big\00"
@str$1ce = private global [15 x i8] c"Type_Info_Rune\00"
@str$1cf = private global [16 x i8] c"Type_Info_Float\00"
@str$1d0 = private global [18 x i8] c"Type_Info_Complex\00"
@str$1d1 = private global [17 x i8] c"Type_Info_String\00"
@str$1d2 = private global [11 x i8] c"is_cstring\00"
@str$1d3 = private global [18 x i8] c"Type_Info_Boolean\00"
@str$1d4 = private global [14 x i8] c"Type_Info_Any\00"
@str$1d5 = private global [18 x i8] c"Type_Info_Type_Id\00"
@str$1d6 = private global [18 x i8] c"Type_Info_Pointer\00"
@str$1d7 = private global [5 x i8] c"elem\00"
@str$1d8 = private global [20 x i8] c"Type_Info_Procedure\00"
@str$1d9 = private global [7 x i8] c"params\00"
@str$1da = private global [8 x i8] c"results\00"
@str$1db = private global [9 x i8] c"variadic\00"
@str$1dc = private global [11 x i8] c"convention\00"
@str$1dd = private global [19 x i8] c"Calling_Convention\00"
@str$1de = private global [8 x i8] c"Invalid\00"
@str$1df = private global [5 x i8] c"Odin\00"
@str$1e0 = private global [12 x i8] c"Contextless\00"
@str$1e1 = private global [2 x i8] c"C\00"
@str$1e2 = private global [4 x i8] c"Std\00"
@str$1e3 = private global [5 x i8] c"Fast\00"
@str$1e4 = private global [16 x i8] c"Type_Info_Array\00"
@str$1e5 = private global [5 x i8] c"elem\00"
@str$1e6 = private global [10 x i8] c"elem_size\00"
@str$1e7 = private global [6 x i8] c"count\00"
@str$1e8 = private global [24 x i8] c"Type_Info_Dynamic_Array\00"
@str$1e9 = private global [5 x i8] c"elem\00"
@str$1ea = private global [10 x i8] c"elem_size\00"
@str$1eb = private global [16 x i8] c"Type_Info_Slice\00"
@str$1ec = private global [16 x i8] c"Type_Info_Tuple\00"
@str$1ed = private global [6 x i8] c"types\00"
@str$1ee = private global [6 x i8] c"names\00"
@str$1ef = private global [17 x i8] c"Type_Info_Struct\00"
@str$1f0 = private global [6 x i8] c"types\00"
@str$1f1 = private global [6 x i8] c"names\00"
@str$1f2 = private global [8 x i8] c"offsets\00"
@str$1f3 = private global [7 x i8] c"usings\00"
@str$1f4 = private global [10 x i8] c"is_packed\00"
@str$1f5 = private global [13 x i8] c"is_raw_union\00"
@str$1f6 = private global [13 x i8] c"custom_align\00"
@str$1f7 = private global [16 x i8] c"Type_Info_Union\00"
@str$1f8 = private global [9 x i8] c"variants\00"
@str$1f9 = private global [11 x i8] c"tag_offset\00"
@str$1fa = private global [9 x i8] c"tag_type\00"
@str$1fb = private global [13 x i8] c"custom_align\00"
@str$1fc = private global [15 x i8] c"Type_Info_Enum\00"
@str$1fd = private global [5 x i8] c"base\00"
@str$1fe = private global [6 x i8] c"names\00"
@str$1ff = private global [7 x i8] c"values\00"
@str$200 = private global [21 x i8] c"Type_Info_Enum_Value\00"
@str$201 = private global [14 x i8] c"Type_Info_Map\00"
@str$202 = private global [4 x i8] c"key\00"
@str$203 = private global [6 x i8] c"value\00"
@str$204 = private global [17 x i8] c"generated_struct\00"
@str$205 = private global [20 x i8] c"Type_Info_Bit_Field\00"
@str$206 = private global [6 x i8] c"names\00"
@str$207 = private global [5 x i8] c"bits\00"
@str$208 = private global [8 x i8] c"offsets\00"
@str$209 = private global [18 x i8] c"Type_Info_Bit_Set\00"
@str$20a = private global [5 x i8] c"elem\00"
@str$20b = private global [11 x i8] c"underlying\00"
@str$20c = private global [6 x i8] c"lower\00"
@str$20d = private global [6 x i8] c"upper\00"
@str$20e = private global [17 x i8] c"Type_Info_Opaque\00"
@str$20f = private global [15 x i8] c"Allocator_Mode\00"
@str$210 = private global [6 x i8] c"Alloc\00"
@str$211 = private global [5 x i8] c"Free\00"
@str$212 = private global [9 x i8] c"Free_All\00"
@str$213 = private global [7 x i8] c"Resize\00"
@str$214 = private global [6 x i8] c"Token\00"
@str$215 = private global [14 x i8] c"slice_of_text\00"
@str$216 = private global [5 x i8] c"kind\00"
@str$217 = private global [17 x i8] c"Token_Identifier\00"
@str$218 = private global [6 x i8] c"value\00"
@str$219 = private global [13 x i8] c"Token_Number\00"
@str$21a = private global [10 x i8] c"int_value\00"
@str$21b = private global [19 x i8] c"unsigned_int_value\00"
@str$21c = private global [12 x i8] c"float_value\00"
@str$21d = private global [10 x i8] c"has_a_dot\00"
@str$21e = private global [13 x i8] c"Token_String\00"
@str$21f = private global [13 x i8] c"Token_Symbol\00"
@str$220 = private global [6 x i8] c"value\00"
@str$221 = private global [9 x i8] c"Int_Flag\00"
@str$222 = private global [7 x i8] c"Prefix\00"
@str$223 = private global [5 x i8] c"Plus\00"
@str$224 = private global [6 x i8] c"Space\00"
@str$225 = private global [18 x i8] c"0123456789abcdefx\00"
@str$226 = private global [18 x i8] c"0123456789ABCDEFX\00"
@str$227 = private global [37 x i8] c"0123456789abcdefghijklmnopqrstuvwxyz\00"
@str$228 = private global [18 x i8] c"0123456789abcdefx\00"
@str$229 = private global [18 x i8] c"0123456789ABCDEFX\00"
@str$22a = private global [37 x i8] c"0123456789abcdefghijklmnopqrstuvwxyz\00"
attributes #0 = {nounwind uwtable}
attributes #1 = {nounwind alwaysinline uwtable}
attributes #2 = {nounwind noinline optnone uwtable}
attributes #3 = {nounwind readnone}
