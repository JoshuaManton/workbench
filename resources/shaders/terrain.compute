#version 430 core

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

struct vertex
{
	float position[3];
	float uv[3];
	float color[4];
	float normal[3];
};

layout(std430, binding = 0) buffer vertex_buffer
{
	vertex vertices[];
};

layout(std430, binding = 1) buffer counter_buffer
{
	uint total_vertices;
};

uniform sampler3D dataFieldTex;
uniform isampler2D edgeTableTex; 
uniform isampler2D triTableTex; 

uniform int poly_shade;
uniform float step;
uniform float iso_level;
uniform vec3 chunk_size;
const vec3 vert_decals[8] = {
	vec3(0, 0, 1),
    vec3(1, 0, 1),
    vec3(1, 0, 0),
    vec3(0, 0, 0),
    vec3(0, 1, 1),
    vec3(1, 1, 1),
    vec3(1, 1, 0),
    vec3(0, 1, 0)
};

float cube_val(int i) {
    vec3 corner = gl_GlobalInvocationID + vert_decals[i];
    // The data texture is streamed in y > z > x
    return texelFetch(dataFieldTex, ivec3(int(corner.y), int(corner.z), int(corner.x)), 0).r;
}

vec3 cube_normal(vec3 pos) {
    float y = texelFetch(dataFieldTex, ivec3(int(pos.y-1), int(pos.z), int(pos.x)), 0).r - texelFetch(dataFieldTex, ivec3(int(pos.y+1), int(pos.z), int(pos.x)), 0).r;
    float z = texelFetch(dataFieldTex, ivec3(int(pos.y), int(pos.z-1), int(pos.x)), 0).r - texelFetch(dataFieldTex, ivec3(int(pos.y), int(pos.z+1), int(pos.x)), 0).r;
    float x = texelFetch(dataFieldTex, ivec3(int(pos.y), int(pos.z), int(pos.x-1)), 0).r - texelFetch(dataFieldTex, ivec3(int(pos.y), int(pos.z), int(pos.x+1)), 0).r;

    return normalize(vec3(x,y,z));
}

vec3 cube_pos(int i){ 
    vec3 pos = gl_GlobalInvocationID;
    return vec3(step*pos.x,step*pos.y,step*pos.z) + vert_decals[i]*step;
} 

vec3 vertex_interp(float iso, vec3 p1, float v1, vec3 p2, float v2) {
    if (abs(v1 - v2) > 0.00001) 
        return p1 + (p2 - p1)/(v2 - v1)*(iso - v1);
    else return p1;
}

int edge_val(int i) {
    return texelFetch(edgeTableTex, ivec2(i, 0), 0).r;
}

int tri_table_value(int i, int j){ 
    return texelFetch(triTableTex, ivec2(j, i), 0).r; 
}

// poly shading
vec3 calc_triangle_normal(vec3 p1, vec3 p2, vec3 p3){
    vec3 tangent1 = p2 - p1;
    vec3 tangent2 = p3 - p1;
    vec3 normal = cross(tangent1, tangent2);
    return -normalize(normal);
}

void main()
{
	if   (gl_GlobalInvocationID.x <= 1 ||
		  gl_GlobalInvocationID.y <= 1 || 
		  gl_GlobalInvocationID.z <= 1 ||
	      gl_GlobalInvocationID.x >= chunk_size.x-2 || 
	      gl_GlobalInvocationID.y >= chunk_size.y-2 || 
	      gl_GlobalInvocationID.z >= chunk_size.z-2) {
		return;
	}

	int cube_index = 0;
    if (cube_val(0) < iso_level) cube_index |= 1;
    if (cube_val(1) < iso_level) cube_index |= 2;
    if (cube_val(2) < iso_level) cube_index |= 4;
    if (cube_val(3) < iso_level) cube_index |= 8;
    if (cube_val(4) < iso_level) cube_index |= 16;
    if (cube_val(5) < iso_level) cube_index |= 32;
    if (cube_val(6) < iso_level) cube_index |= 64;
    if (cube_val(7) < iso_level) cube_index |= 128;
    if (cube_index == 0 || cube_index == 255) return;

    int edge_val = edge_val(cube_index);
    if (edge_val == 0) return;

    vec3 vert_list[12];
    vert_list[0] = vertex_interp(iso_level, cube_pos(0), cube_val(0), cube_pos(1), cube_val(1));
    vert_list[1] = vertex_interp(iso_level, cube_pos(1), cube_val(1), cube_pos(2), cube_val(2));
    vert_list[2] = vertex_interp(iso_level, cube_pos(2), cube_val(2), cube_pos(3), cube_val(3));
    vert_list[3] = vertex_interp(iso_level, cube_pos(3), cube_val(3), cube_pos(0), cube_val(0));
    vert_list[4] = vertex_interp(iso_level, cube_pos(4), cube_val(4), cube_pos(5), cube_val(5));
    vert_list[5] = vertex_interp(iso_level, cube_pos(5), cube_val(5), cube_pos(6), cube_val(6));
    vert_list[6] = vertex_interp(iso_level, cube_pos(6), cube_val(6), cube_pos(7), cube_val(7));
    vert_list[7] = vertex_interp(iso_level, cube_pos(7), cube_val(7), cube_pos(4), cube_val(4));
    vert_list[8] = vertex_interp(iso_level, cube_pos(0), cube_val(0), cube_pos(4), cube_val(4));
    vert_list[9] = vertex_interp(iso_level, cube_pos(1), cube_val(1), cube_pos(5), cube_val(5));
    vert_list[10] = vertex_interp(iso_level, cube_pos(2), cube_val(2), cube_pos(6), cube_val(6));
    vert_list[11] = vertex_interp(iso_level, cube_pos(3), cube_val(3), cube_pos(7), cube_val(7));

    for (int i=0;tri_table_value(cube_index, i) != -1; i += 3){
        vec3 pos1 = vert_list[tri_table_value(cube_index, i+0)];
        vec3 pos2 = vert_list[tri_table_value(cube_index, i+1)];
        vec3 pos3 = vert_list[tri_table_value(cube_index, i+2)];

        vec3 norm1 = vec3(0,0,0);
        vec3 norm2 = vec3(0,0,0);
        vec3 norm3 = vec3(0,0,0);

        if (poly_shade == 1) {
            vec3 n = calc_triangle_normal(pos1, pos3, pos2);
            norm1 = n;
            norm2 = n;
            norm3 = n;
        } else {
            norm1 = cube_normal(pos1/step);
            norm2 = cube_normal(pos2/step);
            norm3 = cube_normal(pos3/step);
        }

        // TODO(jake): better texturing
        float u1 = dot(norm1, vec3(0,1,0));
        u1 = 1 - ((u1 + 1)/2 - 1);
        float v1 = pos1.y / gl_GlobalInvocationID.y;

        float u2 = dot(norm2, vec3(0,1,0));
        u2 = 1 - ((u2 + 1)/2 - 1);
        float v2 = pos2.y / gl_GlobalInvocationID.y;

        float u3 = dot(norm3, vec3(0,1,0));
        u3 = 1 - ((u3 + 1)/2 - 1);
        float v3 = pos3.y / gl_GlobalInvocationID.y;

        uint start_idx = atomicAdd(total_vertices, 3);
        vertices[start_idx+0] = vertex(float[3](pos1.x,pos1.y,pos1.z), float[3](u1,v1,0), float[4](1,1,1,1), float[3](norm1.x, norm1.y, norm1.z));
        vertices[start_idx+1] = vertex(float[3](pos2.x,pos2.y,pos2.z), float[3](u2,v2,0), float[4](1,1,1,1), float[3](norm2.x, norm2.y, norm2.z));
        vertices[start_idx+2] = vertex(float[3](pos3.x,pos3.y,pos3.z), float[3](u3,v3,0), float[4](1,1,1,1), float[3](norm3.x, norm3.y, norm3.z));
    }
}